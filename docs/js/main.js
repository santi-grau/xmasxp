(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = "# 3ds Max Wavefront OBJ Exporter v0.97b - (c)2007 guruware\r\n# File Created: 11.04.2015 15:38:48\r\n\r\nmtllib arrow.mtl\r\n\r\n#\r\n# object Box01\r\n#\r\n\r\nv  -20.0597 0.0000 75.9380\r\nv  -20.0597 0.0000 29.9856\r\nv  9.9950 0.0000 30.0206\r\nv  10.0204 0.0000 75.9380\r\nv  -30.3076 0.0000 29.9469\r\nv  -5.3096 0.0000 -0.1137\r\nv  20.2119 0.0000 29.9469\r\nv  -20.0597 17.0799 75.9380\r\nv  10.0204 17.0799 75.9380\r\nv  9.9950 17.0799 30.0206\r\nv  -20.0597 17.0799 29.9856\r\nv  -5.3096 17.0799 -0.1137\r\nv  -30.3076 17.0799 29.9469\r\nv  20.2119 17.0799 29.9469\r\n# 14 vertices\r\n\r\nvn 0.0000 -1.0000 -0.0000\r\nvn 0.0000 1.0000 -0.0000\r\nvn 0.0000 0.0000 1.0000\r\nvn 1.0000 0.0000 -0.0006\r\nvn 0.7098 0.0000 0.7044\r\nvn 0.0072 0.0000 1.0000\r\nvn 0.7623 0.0000 -0.6472\r\nvn -0.0051 0.0000 -1.0000\r\nvn -0.7689 0.0000 -0.6394\r\nvn -0.0038 0.0000 1.0000\r\nvn -0.7084 0.0000 0.7058\r\nvn -1.0000 0.0000 -0.0000\r\n# 12 vertex normals\r\n\r\nvt 1.0000 0.0000 0.0000\r\nvt 1.0000 0.5000 0.0000\r\nvt 0.5000 0.5000 0.0000\r\nvt 0.5000 0.0000 0.0000\r\nvt 1.0000 1.0000 0.0000\r\nvt 0.5000 1.0000 0.0000\r\nvt 0.0000 1.0000 0.0000\r\nvt 0.0000 0.0000 0.0000\r\nvt 0.0000 0.5000 0.0000\r\n# 9 texture coords\r\n\r\ng Box01\r\nusemtl Material__20\r\ns 2\r\nf 1/1/1 2/2/1 3/3/1 4/4/1 \r\nf 2/2/1 5/5/1 6/6/1 3/3/1 \r\nf 3/3/1 6/6/1 7/7/1 \r\ns 4\r\nf 8/8/2 9/4/2 10/3/2 11/9/2 \r\nf 11/9/2 10/3/2 12/6/2 13/7/2 \r\nf 14/5/2 12/6/2 10/3/2 \r\ns 8\r\nf 1/8/3 4/4/3 9/6/3 8/7/3 \r\ns 16\r\nf 4/8/4 3/4/5 10/6/5 9/7/4 \r\nf 3/4/5 7/1/6 14/5/6 10/6/5 \r\ns 32\r\nf 7/8/7 6/4/8 12/6/8 14/7/7 \r\nf 6/4/8 5/1/9 13/5/9 12/6/8 \r\ns 64\r\nf 5/8/10 2/4/11 11/6/11 13/7/10 \r\nf 2/4/11 1/1/12 8/5/12 11/6/11 \r\n# 11 polygons - 2 triangles\r\n\r\n";

},{}],2:[function(require,module,exports){
module.exports = "# WaveFront *.obj file (generated by CINEMA 4D)\n\ng ball016\nusemtl ball01\nv 0.00873 0.019661 -0.013397\nv 0.011187 0.020516 -0.009887\nv 0.010396 0.021252 -0.009373\nv 0.007397 0.020901 -0.012531\nv 0.009732 0.021952 -0.008665\nv 0.006279 0.02208 -0.011338\nv 0.00922 0.02259 -0.007791\nv 0.005417 0.023154 -0.009865\nv 0.008882 0.023139 -0.006783\nv 0.004846 0.02408 -0.008167\nv 0.008728 0.023581 -0.005681\nv 0.004587 0.024824 -0.006311\nv 0.008766 0.023896 -0.004528\nv 0.004651 0.025356 -0.004367\nv 0.008993 0.024075 -0.003366\nv 0.005034 0.025656 -0.002411\nv 0.009402 0.024108 -0.002242\nv 0.005723 0.025713 -0.000517\nv 0.009976 0.023996 -0.001198\nv 0.00669 0.025524 0.001242\nv 0.010694 0.023743 -0.000274\nv 0.007899 0.025097 0.002799\nv 0.011527 0.023358 0.000493\nv 0.009303 0.024448 0.004092\nv 0.012444 0.022856 0.001076\nv 0.010848 0.023602 0.005074\nv 0.013409 0.022256 0.001451\nv 0.012474 0.022592 0.005705\nv 0.014386 0.021582 0.001603\nv 0.01412 0.021456 0.005962\nv 0.015337 0.020859 0.001528\nv 0.015722 0.020238 0.005835\nv 0.016225 0.020115 0.001227\nv 0.017218 0.018985 0.005329\nv 0.017016 0.019379 0.000713\nv 0.018551 0.017745 0.004463\nv 0.01768 0.018679 0.000005\nv 0.01967 0.016565 0.00327\nv 0.018191 0.018042 -0.000869\nv 0.020532 0.015491 0.001797\nv 0.01853 0.017492 -0.001876\nv 0.021103 0.014565 0.000099\nv 0.018684 0.017051 -0.002978\nv 0.021361 0.013822 -0.001757\nv 0.018646 0.016735 -0.004132\nv 0.021298 0.013289 -0.003701\nv 0.018418 0.016557 -0.005293\nv 0.020914 0.012989 -0.005657\nv 0.01801 0.016523 -0.006417\nv 0.020226 0.012932 -0.007551\nv 0.017436 0.016635 -0.007461\nv 0.019258 0.013121 -0.009311\nv 0.016718 0.016888 -0.008385\nv 0.01805 0.013548 -0.010867\nv 0.015885 0.017273 -0.009153\nv 0.016646 0.014197 -0.01216\nv 0.014968 0.017776 -0.009735\nv 0.015101 0.015043 -0.013142\nv 0.014003 0.018375 -0.01011\nv 0.013474 0.016053 -0.013773\nv 0.013026 0.019049 -0.010263\nv 0.011828 0.017189 -0.01403\nv 0.012075 0.019772 -0.010187\nv 0.010227 0.018407 -0.013903\nv 0.00538 0.017869 -0.017048\nv 0.003445 0.019669 -0.01579\nv 0.001821 0.021382 -0.014059\nv 0.00057 0.02294 -0.01192\nv -0.000259 0.024285 -0.009456\nv -0.000634 0.025365 -0.006761\nv -0.000542 0.026137 -0.003939\nv 0.000015 0.026573 -0.001098\nv 0.001014 0.026656 0.001652\nv 0.002419 0.026382 0.004205\nv 0.004173 0.025762 0.006465\nv 0.006211 0.024819 0.008343\nv 0.008454 0.023591 0.009768\nv 0.010816 0.022125 0.010684\nv 0.013205 0.020475 0.011058\nv 0.015531 0.018707 0.010873\nv 0.017703 0.016888 0.010138\nv 0.019638 0.015087 0.008881\nv 0.021262 0.013375 0.007149\nv 0.022513 0.011816 0.00501\nv 0.023342 0.010471 0.002546\nv 0.023718 0.009392 -0.000149\nv 0.023625 0.008619 -0.002971\nv 0.023069 0.008183 -0.005811\nv 0.022069 0.008101 -0.008561\nv 0.020665 0.008375 -0.011115\nv 0.01891 0.008995 -0.013374\nv 0.016872 0.009937 -0.015253\nv 0.014629 0.011165 -0.016677\nv 0.012268 0.012632 -0.017594\nv 0.009878 0.014281 -0.017967\nv 0.007553 0.01605 -0.017783\nv 0.001772 0.015386 -0.019976\nv -0.000691 0.017678 -0.018376\nv -0.002759 0.019857 -0.016172\nv -0.00435 0.021841 -0.01345\nv -0.005406 0.023552 -0.010313\nv -0.005884 0.024926 -0.006883\nv -0.005766 0.025909 -0.003291\nv -0.005058 0.026464 0.000324\nv -0.003785 0.026569 0.003824\nv -0.001998 0.026221 0.007074\nv 0.000236 0.025431 0.00995\nv 0.00283 0.024232 0.01234\nv 0.005684 0.022669 0.014154\nv 0.00869 0.020802 0.01532\nv 0.011731 0.018703 0.015796\nv 0.014691 0.016453 0.015561\nv 0.017455 0.014137 0.014625\nv 0.019919 0.011845 0.013025\nv 0.021986 0.009666 0.010821\nv 0.023578 0.007682 0.008099\nv 0.024633 0.00597 0.004962\nv 0.025111 0.004597 0.001532\nv 0.024993 0.003613 -0.002059\nv 0.024285 0.003059 -0.005675\nv 0.023012 0.002954 -0.009175\nv 0.021225 0.003302 -0.012425\nv 0.018992 0.004091 -0.015301\nv 0.016398 0.00529 -0.017691\nv 0.013543 0.006854 -0.019505\nv 0.010537 0.008721 -0.020671\nv 0.007496 0.01082 -0.021146\nv 0.004537 0.01307 -0.020912\nv -0.001957 0.012307 -0.022069\nv -0.004853 0.015002 -0.020187\nv -0.007284 0.017565 -0.017596\nv -0.009156 0.019897 -0.014395\nv -0.010396 0.02191 -0.010707\nv -0.010959 0.023525 -0.006673\nv -0.01082 0.024682 -0.00245\nv -0.009987 0.025334 0.001801\nv -0.008491 0.025457 0.005917\nv -0.006389 0.025047 0.009739\nv -0.003763 0.024119 0.01312\nv -0.000713 0.022709 0.015931\nv 0.002644 0.020871 0.018063\nv 0.006178 0.018676 0.019435\nv 0.009754 0.016208 0.019994\nv 0.013234 0.013561 0.019718\nv 0.016485 0.010838 0.018618\nv 0.019382 0.008144 0.016736\nv 0.021813 0.005581 0.014145\nv 0.023684 0.003248 0.010943\nv 0.024925 0.001236 0.007255\nv 0.025487 -0.00038 0.003222\nv 0.025349 -0.001536 -0.001001\nv 0.024516 -0.002188 -0.005252\nv 0.02302 -0.002312 -0.009368\nv 0.020918 -0.001902 -0.01319\nv 0.018292 -0.000974 -0.016571\nv 0.015242 0.000436 -0.019382\nv 0.011885 0.002274 -0.021515\nv 0.008351 0.00447 -0.022886\nv 0.004775 0.006938 -0.023445\nv 0.001294 0.009584 -0.023169\nv -0.005662 0.008751 -0.023246\nv -0.00888 0.011745 -0.021155\nv -0.011581 0.014593 -0.018276\nv -0.013661 0.017185 -0.014719\nv -0.01504 0.019421 -0.010621\nv -0.015664 0.021216 -0.00614\nv -0.015511 0.022501 -0.001447\nv -0.014585 0.023225 0.003277\nv -0.012922 0.023363 0.00785\nv -0.010587 0.022907 0.012096\nv -0.007669 0.021876 0.015854\nv -0.00428 0.020309 0.018977\nv -0.00055 0.018267 0.021346\nv 0.003377 0.015828 0.022871\nv 0.00735 0.013085 0.023491\nv 0.011218 0.010145 0.023185\nv 0.01483 0.007119 0.021962\nv 0.018048 0.004125 0.019871\nv 0.020749 0.001277 0.016992\nv 0.022829 -0.001315 0.013435\nv 0.024208 -0.003551 0.009337\nv 0.024832 -0.005346 0.004856\nv 0.024679 -0.006631 0.000163\nv 0.023753 -0.007356 -0.004561\nv 0.02209 -0.007493 -0.009134\nv 0.019755 -0.007037 -0.013381\nv 0.016837 -0.006006 -0.017138\nv 0.013448 -0.004439 -0.020261\nv 0.009718 -0.002397 -0.02263\nv 0.005791 0.000042 -0.024155\nv 0.001818 0.002785 -0.024775\nv -0.002049 0.005725 -0.024469\nv -0.009201 0.004854 -0.023463\nv -0.012618 0.008032 -0.021243\nv -0.015485 0.011056 -0.018187\nv -0.017693 0.013807 -0.01441\nv -0.019157 0.016181 -0.01006\nv -0.01982 0.018087 -0.005303\nv -0.019657 0.01945 -0.000321\nv -0.018674 0.02022 0.004694\nv -0.016909 0.020366 0.009548\nv -0.01443 0.019882 0.014057\nv -0.011332 0.018787 0.018045\nv -0.007734 0.017124 0.021361\nv -0.003775 0.014956 0.023876\nv 0.000394 0.012367 0.025495\nv 0.004613 0.009455 0.026153\nv 0.008718 0.006333 0.025828\nv 0.012552 0.003121 0.02453\nv 0.015969 -0.000057 0.02231\nv 0.018837 -0.00308 0.019254\nv 0.021044 -0.005832 0.015478\nv 0.022508 -0.008206 0.011127\nv 0.023171 -0.010111 0.00637\nv 0.023008 -0.011475 0.001388\nv 0.022025 -0.012245 -0.003626\nv 0.02026 -0.01239 -0.008481\nv 0.017781 -0.011907 -0.012989\nv 0.014683 -0.010812 -0.016978\nv 0.011085 -0.009149 -0.020294\nv 0.007126 -0.006981 -0.022809\nv 0.002957 -0.004391 -0.024427\nv -0.001261 -0.00148 -0.025086\nv -0.005366 0.001642 -0.024761\nv -0.012439 0.000766 -0.02271\nv -0.015922 0.004007 -0.020447\nv -0.018846 0.007089 -0.017331\nv -0.021097 0.009894 -0.013481\nv -0.022589 0.012315 -0.009045\nv -0.023265 0.014258 -0.004194\nv -0.023099 0.015648 0.000885\nv -0.022097 0.016433 0.005998\nv -0.020298 0.016581 0.010948\nv -0.01777 0.016088 0.015544\nv -0.014611 0.014972 0.019611\nv -0.010943 0.013277 0.022992\nv -0.006906 0.011066 0.025556\nv -0.002655 0.008426 0.027206\nv 0.001646 0.005457 0.027878\nv 0.005831 0.002274 0.027546\nv 0.009741 -0.001001 0.026223\nv 0.013225 -0.004241 0.02396\nv 0.016148 -0.007324 0.020843\nv 0.018399 -0.010129 0.016993\nv 0.019892 -0.01255 0.012558\nv 0.020568 -0.014493 0.007707\nv 0.020401 -0.015883 0.002628\nv 0.019399 -0.016668 -0.002485\nv 0.0176 -0.016816 -0.007435\nv 0.015072 -0.016323 -0.012032\nv 0.011914 -0.015207 -0.016098\nv 0.008245 -0.013511 -0.019479\nv 0.004208 -0.011301 -0.022044\nv -0.000042 -0.00866 -0.023694\nv -0.004343 -0.005692 -0.024365\nv -0.008529 -0.002509 -0.024033\nv -0.01525 -0.003356 -0.021018\nv -0.018667 -0.000178 -0.018798\nv -0.021534 0.002845 -0.015741\nv -0.023742 0.005597 -0.011965\nv -0.025206 0.007971 -0.007615\nv -0.025869 0.009877 -0.002857\nv -0.025706 0.01124 0.002125\nv -0.024723 0.01201 0.007139\nv -0.022958 0.012156 0.011994\nv -0.020479 0.011672 0.016502\nv -0.017381 0.010577 0.020491\nv -0.013783 0.008914 0.023807\nv -0.009824 0.006746 0.026322\nv -0.005655 0.004157 0.02794\nv -0.001437 0.001245 0.028599\nv 0.002669 -0.001877 0.028273\nv 0.006503 -0.005089 0.026976\nv 0.00992 -0.008267 0.024756\nv 0.012787 -0.01129 0.021699\nv 0.014995 -0.014042 0.017923\nv 0.016459 -0.016416 0.013573\nv 0.017122 -0.018321 0.008815\nv 0.016959 -0.019685 0.003834\nv 0.015976 -0.020455 -0.001181\nv 0.014211 -0.0206 -0.006036\nv 0.011732 -0.020117 -0.010544\nv 0.008634 -0.019022 -0.014533\nv 0.005036 -0.017359 -0.017848\nv 0.001077 -0.015191 -0.020364\nv -0.003092 -0.012601 -0.021982\nv -0.00731 -0.00969 -0.022641\nv -0.011415 -0.006568 -0.022315\nv -0.017527 -0.007354 -0.01845\nv -0.020746 -0.00436 -0.016359\nv -0.023447 -0.001512 -0.013479\nv -0.025527 0.00108 -0.009922\nv -0.026905 0.003316 -0.005824\nv -0.02753 0.005111 -0.001343\nv -0.027376 0.006396 0.00335\nv -0.02645 0.007121 0.008074\nv -0.024788 0.007258 0.012647\nv -0.022453 0.006802 0.016893\nv -0.019535 0.005771 0.020651\nv -0.016145 0.004205 0.023774\nv -0.012416 0.002162 0.026143\nv -0.008489 -0.000277 0.027667\nv -0.004515 -0.00302 0.028288\nv -0.000648 -0.00596 0.027981\nv 0.002964 -0.008986 0.026759\nv 0.006182 -0.01198 0.024668\nv 0.008884 -0.014827 0.021789\nv 0.010963 -0.017419 0.018232\nv 0.012342 -0.019656 0.014134\nv 0.012967 -0.021451 0.009652\nv 0.012813 -0.022735 0.00496\nv 0.011887 -0.02346 0.000236\nv 0.010225 -0.023597 -0.004337\nv 0.007889 -0.023142 -0.008584\nv 0.004971 -0.022111 -0.012341\nv 0.001582 -0.020544 -0.015464\nv -0.002148 -0.018502 -0.017833\nv -0.006075 -0.016062 -0.019358\nv -0.010048 -0.01332 -0.019979\nv -0.013915 -0.010379 -0.019672\nv -0.019183 -0.011073 -0.015105\nv -0.022079 -0.008379 -0.013223\nv -0.02451 -0.005816 -0.010632\nv -0.026382 -0.003483 -0.007431\nv -0.027623 -0.00147 -0.003743\nv -0.028185 0.000145 0.000291\nv -0.028047 0.001301 0.004514\nv -0.027213 0.001953 0.008765\nv -0.025717 0.002077 0.012881\nv -0.023616 0.001667 0.016703\nv -0.020989 0.000739 0.020084\nv -0.017939 -0.000671 0.022895\nv -0.014582 -0.002509 0.025027\nv -0.011048 -0.004704 0.026399\nv -0.007472 -0.007173 0.026958\nv -0.003992 -0.009819 0.026682\nv -0.000741 -0.012542 0.025582\nv 0.002155 -0.015237 0.0237\nv 0.004586 -0.017799 0.021109\nv 0.006458 -0.020132 0.017907\nv 0.007699 -0.022145 0.014219\nv 0.008261 -0.02376 0.010186\nv 0.008123 -0.024916 0.005963\nv 0.00729 -0.025569 0.001712\nv 0.005793 -0.025692 -0.002404\nv 0.003692 -0.025282 -0.006226\nv 0.001065 -0.024354 -0.009607\nv -0.001985 -0.022944 -0.012418\nv -0.005341 -0.021106 -0.014551\nv -0.008876 -0.018911 -0.015922\nv -0.012452 -0.016443 -0.016481\nv -0.015932 -0.013796 -0.016205\nv -0.020153 -0.014372 -0.011112\nv -0.022616 -0.01208 -0.009512\nv -0.024683 -0.009901 -0.007308\nv -0.026275 -0.007917 -0.004586\nv -0.027331 -0.006205 -0.00145\nv -0.027808 -0.004831 0.00198\nv -0.027691 -0.003848 0.005572\nv -0.026982 -0.003293 0.009187\nv -0.02571 -0.003188 0.012687\nv -0.023923 -0.003537 0.015938\nv -0.021689 -0.004326 0.018813\nv -0.019095 -0.005525 0.021204\nv -0.016241 -0.007088 0.023017\nv -0.013235 -0.008955 0.024184\nv -0.010194 -0.011054 0.024659\nv -0.007234 -0.013305 0.024424\nv -0.00447 -0.015621 0.023489\nv -0.002006 -0.017912 0.021888\nv 0.000061 -0.020092 0.019685\nv 0.001653 -0.022076 0.016962\nv 0.002708 -0.023787 0.013826\nv 0.003186 -0.025161 0.010396\nv 0.003068 -0.026144 0.006804\nv 0.00236 -0.026699 0.003189\nv 0.001088 -0.026804 -0.000311\nv -0.0007 -0.026455 -0.003561\nv -0.002933 -0.025666 -0.006437\nv -0.005527 -0.024467 -0.008828\nv -0.008382 -0.022904 -0.010641\nv -0.011387 -0.021037 -0.011808\nv -0.014429 -0.018938 -0.012283\nv -0.017388 -0.016687 -0.012048\nv -0.0204 -0.017122 -0.006625\nv -0.022336 -0.015322 -0.005368\nv -0.02396 -0.013609 -0.003637\nv -0.025211 -0.012051 -0.001498\nv -0.02604 -0.010706 0.000967\nv -0.026415 -0.009627 0.003662\nv -0.026323 -0.008854 0.006484\nv -0.025766 -0.008418 0.009324\nv -0.024767 -0.008336 0.012074\nv -0.023362 -0.00861 0.014628\nv -0.021607 -0.00923 0.016887\nv -0.019569 -0.010172 0.018765\nv -0.017327 -0.0114 0.02019\nv -0.014965 -0.012867 0.021107\nv -0.012576 -0.014516 0.02148\nv -0.01025 -0.016284 0.021296\nv -0.008078 -0.018104 0.020561\nv -0.006143 -0.019904 0.019303\nv -0.004518 -0.021617 0.017572\nv -0.003268 -0.023175 0.015433\nv -0.002439 -0.02452 0.012968\nv -0.002063 -0.025599 0.010274\nv -0.002155 -0.026372 0.007452\nv -0.002712 -0.026808 0.004611\nv -0.003712 -0.02689 0.001861\nv -0.005116 -0.026616 -0.000693\nv -0.006871 -0.025996 -0.002952\nv -0.008909 -0.025054 -0.00483\nv -0.011152 -0.023826 -0.006255\nv -0.013513 -0.022359 -0.007172\nv -0.015903 -0.02071 -0.007545\nv -0.018228 -0.018942 -0.00736\nv -0.019916 -0.019219 -0.001816\nv -0.021249 -0.017979 -0.00095\nv -0.022368 -0.0168 0.000243\nv -0.023229 -0.015726 0.001716\nv -0.0238 -0.0148 0.003413\nv -0.024059 -0.014056 0.00527\nv -0.023995 -0.013524 0.007213\nv -0.023612 -0.013224 0.00917\nv -0.022923 -0.013167 0.011064\nv -0.021956 -0.013356 0.012823\nv -0.020747 -0.013783 0.01438\nv -0.019343 -0.014432 0.015673\nv -0.017799 -0.015278 0.016655\nv -0.016172 -0.016288 0.017286\nv -0.014526 -0.017424 0.017543\nv -0.012924 -0.018642 0.017416\nv -0.011428 -0.019895 0.01691\nv -0.010095 -0.021136 0.016044\nv -0.008976 -0.022315 0.014851\nv -0.008115 -0.023389 0.013378\nv -0.007544 -0.024315 0.01168\nv -0.007285 -0.025059 0.009824\nv -0.007348 -0.025591 0.00788\nv -0.007732 -0.025891 0.005924\nv -0.008421 -0.025948 0.004029\nv -0.009388 -0.025759 0.00227\nv -0.010597 -0.025332 0.000714\nv -0.012 -0.024683 -0.00058\nv -0.013545 -0.023837 -0.001561\nv -0.015172 -0.022827 -0.002192\nv -0.016818 -0.021691 -0.00245\nv -0.01842 -0.020473 -0.002323\nv -0.018718 -0.020583 0.00313\nv -0.019397 -0.01995 0.003572\nv -0.019968 -0.019349 0.00418\nv -0.020407 -0.018802 0.004931\nv -0.020698 -0.018329 0.005796\nv -0.02083 -0.01795 0.006742\nv -0.020797 -0.017679 0.007733\nv -0.020602 -0.017526 0.008731\nv -0.020251 -0.017497 0.009697\nv -0.019758 -0.017593 0.010593\nv -0.019142 -0.017811 0.011387\nv -0.018426 -0.018142 0.012046\nv -0.017638 -0.018573 0.012547\nv -0.016809 -0.019088 0.012868\nv -0.01597 -0.019667 0.013\nv -0.015153 -0.020288 0.012935\nv -0.014391 -0.020927 0.012677\nv -0.013711 -0.021559 0.012235\nv -0.013141 -0.022161 0.011627\nv -0.012701 -0.022708 0.010876\nv -0.01241 -0.02318 0.010011\nv -0.012278 -0.023559 0.009064\nv -0.012311 -0.023831 0.008073\nv -0.012506 -0.023984 0.007076\nv -0.012857 -0.024013 0.00611\nv -0.013351 -0.023916 0.005213\nv -0.013967 -0.023699 0.00442\nv -0.014682 -0.023368 0.003761\nv -0.01547 -0.022937 0.00326\nv -0.016299 -0.022422 0.002938\nv -0.017138 -0.021842 0.002807\nv -0.017955 -0.021221 0.002872\nv -0.016852 -0.021159 0.008024\nv 0.014277 0.024199 -0.010209\nv 0.013597 0.024832 -0.009767\nv 0.01153 0.022026 -0.008931\nv 0.01221 0.021394 -0.009373\nv 0.013027 0.025433 -0.009159\nv 0.01096 0.022627 -0.008323\nv 0.012588 0.02598 -0.008408\nv 0.010521 0.023175 -0.007572\nv 0.012297 0.026452 -0.007542\nv 0.01023 0.023647 -0.006707\nv 0.012165 0.026832 -0.006596\nv 0.010098 0.024026 -0.00576\nv 0.012197 0.027103 -0.005605\nv 0.01013 0.024297 -0.00477\nv 0.012393 0.027256 -0.004608\nv 0.010326 0.02445 -0.003772\nv 0.012744 0.027285 -0.003642\nv 0.010677 0.024479 -0.002806\nv 0.013237 0.027189 -0.002745\nv 0.01117 0.024383 -0.00191\nv 0.013853 0.026971 -0.001952\nv 0.011786 0.024165 -0.001116\nv 0.014569 0.02664 -0.001292\nv 0.012502 0.023835 -0.000457\nv 0.015356 0.026209 -0.000792\nv 0.013289 0.023403 0.000044\nv 0.016186 0.025694 -0.00047\nv 0.014118 0.022888 0.000365\nv 0.017025 0.025115 -0.000339\nv 0.014957 0.022309 0.000497\nv 0.017841 0.024494 -0.000404\nv 0.015774 0.021688 0.000432\nv 0.018604 0.023855 -0.000662\nv 0.016537 0.021049 0.000174\nv 0.019284 0.023223 -0.001104\nv 0.017216 0.020417 -0.000268\nv 0.019854 0.022621 -0.001712\nv 0.017787 0.019816 -0.000876\nv 0.020293 0.022074 -0.002463\nv 0.018226 0.019268 -0.001627\nv 0.020584 0.021602 -0.003328\nv 0.018517 0.018796 -0.002492\nv 0.020716 0.021223 -0.004274\nv 0.018649 0.018417 -0.003439\nv 0.020684 0.020951 -0.005265\nv 0.018617 0.018146 -0.00443\nv 0.020488 0.020798 -0.006263\nv 0.018421 0.017993 -0.005427\nv 0.020137 0.020769 -0.007228\nv 0.01807 0.017964 -0.006393\nv 0.019644 0.020865 -0.008125\nv 0.017577 0.01806 -0.007289\nv 0.019028 0.021083 -0.008919\nv 0.016961 0.018278 -0.008083\nv 0.018312 0.021414 -0.009578\nv 0.016245 0.018608 -0.008742\nv 0.017525 0.021845 -0.010078\nv 0.015457 0.01904 -0.009243\nv 0.016695 0.02236 -0.0104\nv 0.014628 0.019555 -0.009565\nv 0.015856 0.02294 -0.010531\nv 0.013789 0.020134 -0.009696\nv 0.01504 0.02356 -0.010467\nv 0.012973 0.020755 -0.009631\nv 0.011867 0.020985 -0.009337\nv 0.011174 0.021628 -0.008887\nv 0.010594 0.022241 -0.008268\nv 0.010146 0.022798 -0.007504\nv 0.00985 0.023279 -0.006622\nv 0.009716 0.023665 -0.005659\nv 0.009749 0.023941 -0.00465\nv 0.009948 0.024097 -0.003634\nv 0.010305 0.024126 -0.002651\nv 0.010807 0.024028 -0.001738\nv 0.011435 0.023807 -0.00093\nv 0.012164 0.02347 -0.000258\nv 0.012966 0.023031 0.000251\nv 0.01381 0.022506 0.000579\nv 0.014664 0.021916 0.000712\nv 0.015496 0.021284 0.000646\nv 0.016272 0.020634 0.000384\nv 0.016965 0.01999 -0.000066\nv 0.017545 0.019378 -0.000685\nv 0.017992 0.01882 -0.00145\nv 0.018289 0.018339 -0.002331\nv 0.018423 0.017953 -0.003295\nv 0.01839 0.017677 -0.004304\nv 0.018191 0.017521 -0.005319\nv 0.017834 0.017492 -0.006303\nv 0.017332 0.01759 -0.007216\nv 0.016704 0.017812 -0.008024\nv 0.015975 0.018148 -0.008695\nv 0.015173 0.018588 -0.009205\nv 0.014329 0.019112 -0.009532\nv 0.013475 0.019702 -0.009666\nv 0.012643 0.020334 -0.0096\nv 0.011526 0.020692 -0.009508\nv 0.010796 0.02137 -0.009035\nv 0.010184 0.022016 -0.008382\nv 0.009713 0.022603 -0.007576\nv 0.009401 0.02311 -0.006648\nv 0.009259 0.023516 -0.005632\nv 0.009294 0.023807 -0.004569\nv 0.009504 0.023972 -0.003499\nv 0.00988 0.024003 -0.002463\nv 0.01041 0.023899 -0.001501\nv 0.011071 0.023666 -0.000649\nv 0.011839 0.023311 0.000058\nv 0.012684 0.022848 0.000595\nv 0.013574 0.022295 0.000941\nv 0.014474 0.021674 0.001081\nv 0.01535 0.021008 0.001012\nv 0.016168 0.020322 0.000735\nv 0.016898 0.019644 0.000261\nv 0.01751 0.018999 -0.000391\nv 0.017981 0.018411 -0.001197\nv 0.018293 0.017905 -0.002126\nv 0.018435 0.017498 -0.003141\nv 0.0184 0.017207 -0.004204\nv 0.01819 0.017043 -0.005275\nv 0.017814 0.017012 -0.006311\nv 0.017284 0.017115 -0.007273\nv 0.016623 0.017348 -0.008124\nv 0.015855 0.017703 -0.008832\nv 0.01501 0.018166 -0.009369\nv 0.01412 0.018719 -0.009714\nv 0.01322 0.01934 -0.009855\nv 0.012344 0.020007 -0.009785\nv 0.022635 0.030605 -0.008006\nv 0.022683 0.030562 -0.007783\nv 0.021964 0.031391 -0.007427\nv 0.021906 0.031445 -0.007645\nv 0.02263 0.030459 -0.007582\nv 0.021937 0.031257 -0.007239\nv 0.022489 0.030324 -0.007457\nv 0.021833 0.03108 -0.007133\nv 0.022298 0.030193 -0.007442\nv 0.021679 0.030907 -0.007135\nv 0.02211 0.0301 -0.00754\nv 0.021516 0.030784 -0.007246\nv 0.021973 0.030072 -0.007725\nv 0.021389 0.030744 -0.007436\nv 0.021925 0.030115 -0.007947\nv 0.021332 0.030798 -0.007654\nv 0.021978 0.030218 -0.008148\nv 0.021358 0.030932 -0.007841\nv 0.022119 0.030354 -0.008273\nv 0.021463 0.031109 -0.007948\nv 0.02231 0.030485 -0.008289\nv 0.021617 0.031283 -0.007946\nv 0.022499 0.030577 -0.008191\nv 0.021779 0.031406 -0.007835\nv 0.023139 0.029584 -0.008271\nv 0.02318 0.029554 -0.008045\nv 0.023108 0.029489 -0.007834\nv 0.022942 0.029405 -0.007696\nv 0.022727 0.029324 -0.007667\nv 0.022519 0.029269 -0.007755\nv 0.022376 0.029255 -0.007937\nv 0.022334 0.029284 -0.008163\nv 0.022406 0.02935 -0.008373\nv 0.022572 0.029434 -0.008511\nv 0.022788 0.029514 -0.00854\nv 0.022995 0.029569 -0.008452\nv 0.023382 0.02845 -0.008422\nv 0.02342 0.028436 -0.008194\nv 0.023339 0.028412 -0.007978\nv 0.023161 0.028384 -0.007832\nv 0.022933 0.028361 -0.007796\nv 0.022717 0.028347 -0.007878\nv 0.02257 0.028348 -0.008058\nv 0.022532 0.028362 -0.008286\nv 0.022613 0.028386 -0.008502\nv 0.022792 0.028414 -0.008648\nv 0.023019 0.028437 -0.008684\nv 0.023236 0.028451 -0.008602\nv 0.023349 0.027282 -0.008449\nv 0.023388 0.027283 -0.008221\nv 0.023308 0.027302 -0.008004\nv 0.023131 0.027333 -0.007857\nv 0.022905 0.027367 -0.007819\nv 0.02269 0.027397 -0.0079\nv 0.022544 0.027413 -0.008079\nv 0.022505 0.027412 -0.008308\nv 0.022585 0.027393 -0.008525\nv 0.022762 0.027362 -0.008672\nv 0.022988 0.027327 -0.00871\nv 0.023203 0.027298 -0.008628\nv 0.023041 0.026158 -0.00835\nv 0.023084 0.026174 -0.008123\nv 0.023016 0.026234 -0.00791\nv 0.022854 0.026321 -0.007767\nv 0.022644 0.026412 -0.007735\nv 0.02244 0.026483 -0.00782\nv 0.022298 0.026514 -0.008\nv 0.022255 0.026497 -0.008228\nv 0.022324 0.026438 -0.008441\nv 0.022485 0.02635 -0.008583\nv 0.022695 0.02626 -0.008616\nv 0.022899 0.026189 -0.008531\nv 0.02248 0.025155 -0.008132\nv 0.02253 0.025185 -0.007908\nv 0.022483 0.025282 -0.007702\nv 0.022349 0.025419 -0.007571\nv 0.022167 0.02556 -0.007549\nv 0.021983 0.025667 -0.007642\nv 0.021849 0.025712 -0.007826\nv 0.021799 0.025682 -0.00805\nv 0.021847 0.025585 -0.008255\nv 0.02198 0.025448 -0.008387\nv 0.022162 0.025307 -0.008409\nv 0.022346 0.0252 -0.008315\nv 0.021704 0.024342 -0.00781\nv 0.021764 0.024383 -0.007589\nv 0.021745 0.024509 -0.007396\nv 0.021651 0.024687 -0.007281\nv 0.021507 0.024869 -0.007275\nv 0.021352 0.025006 -0.00738\nv 0.021228 0.025062 -0.007568\nv 0.021167 0.025021 -0.007788\nv 0.021187 0.024895 -0.007981\nv 0.021281 0.024717 -0.008096\nv 0.021425 0.024535 -0.008102\nv 0.02158 0.024398 -0.007997\nv 0.020765 0.023775 -0.007405\nv 0.020838 0.023823 -0.00719\nv 0.020853 0.02397 -0.007011\nv 0.020806 0.024176 -0.006916\nv 0.020709 0.024386 -0.006931\nv 0.020588 0.024544 -0.007051\nv 0.020477 0.024607 -0.007244\nv 0.020404 0.024559 -0.007458\nv 0.020389 0.024412 -0.007637\nv 0.020436 0.024206 -0.007732\nv 0.020533 0.023996 -0.007718\nv 0.020654 0.023838 -0.007598\nv 0.019728 0.023491 -0.006945\nv 0.019815 0.023543 -0.006736\nv 0.019868 0.0237 -0.006574\nv 0.019873 0.023921 -0.006503\nv 0.019827 0.024145 -0.00654\nv 0.019745 0.024313 -0.006677\nv 0.019647 0.02438 -0.006876\nv 0.01956 0.024328 -0.007084\nv 0.019507 0.02417 -0.007246\nv 0.019503 0.02395 -0.007318\nv 0.019548 0.023726 -0.007281\nv 0.01963 0.023558 -0.007144\nv 0.018664 0.02351 -0.006462\nv 0.018765 0.023562 -0.00626\nv 0.018857 0.023718 -0.006115\nv 0.018914 0.023938 -0.006068\nv 0.018922 0.024161 -0.006129\nv 0.018879 0.024329 -0.006284\nv 0.018795 0.024395 -0.006489\nv 0.018694 0.024343 -0.006691\nv 0.018602 0.024187 -0.006835\nv 0.018545 0.023967 -0.006883\nv 0.018536 0.023744 -0.006822\nv 0.01858 0.023576 -0.006667\nv 0.017644 0.023831 -0.005988\nv 0.017759 0.023878 -0.005792\nv 0.017888 0.024023 -0.005665\nv 0.017996 0.024227 -0.005641\nv 0.018056 0.024434 -0.005726\nv 0.018049 0.02459 -0.005898\nv 0.017979 0.024652 -0.00611\nv 0.017865 0.024604 -0.006306\nv 0.017735 0.024459 -0.006433\nv 0.017627 0.024256 -0.006457\nv 0.017568 0.024049 -0.006372\nv 0.017574 0.023893 -0.0062\nv 0.016738 0.024431 -0.005556\nv 0.016865 0.024471 -0.005366\nv 0.017028 0.024594 -0.005255\nv 0.017182 0.024767 -0.005252\nv 0.017286 0.024945 -0.005359\nv 0.017313 0.025078 -0.005547\nv 0.017255 0.025133 -0.005765\nv 0.017128 0.025093 -0.005955\nv 0.016966 0.02497 -0.006065\nv 0.016812 0.024797 -0.006068\nv 0.016707 0.024619 -0.005961\nv 0.016681 0.024486 -0.005774\nv 0.016009 0.025271 -0.005195\nv 0.016146 0.0253 -0.00501\nv 0.016335 0.025392 -0.004912\nv 0.016525 0.025523 -0.004928\nv 0.016666 0.025659 -0.005052\nv 0.01672 0.025762 -0.005253\nv 0.016672 0.025805 -0.005476\nv 0.016535 0.025776 -0.005661\nv 0.016346 0.025684 -0.005759\nv 0.016156 0.025553 -0.005743\nv 0.016015 0.025417 -0.005618\nv 0.015961 0.025314 -0.005417\nv 0.015505 0.026293 -0.00493\nv 0.015649 0.026307 -0.004748\nv 0.015856 0.026362 -0.00466\nv 0.016072 0.026443 -0.004689\nv 0.016238 0.026527 -0.004827\nv 0.01631 0.026593 -0.005037\nv 0.016269 0.026622 -0.005264\nv 0.016125 0.026607 -0.005445\nv 0.015918 0.026552 -0.005533\nv 0.015702 0.026472 -0.005504\nv 0.015536 0.026388 -0.005366\nv 0.015464 0.026322 -0.005156\nv 0.015262 0.027427 -0.004778\nv 0.015409 0.027426 -0.004599\nv 0.015625 0.027439 -0.004516\nv 0.015853 0.027463 -0.004553\nv 0.016031 0.027491 -0.004698\nv 0.016112 0.027515 -0.004914\nv 0.016074 0.027529 -0.005143\nv 0.015927 0.027529 -0.005322\nv 0.015711 0.027516 -0.005405\nv 0.015483 0.027492 -0.005368\nv 0.015305 0.027465 -0.005223\nv 0.015224 0.027441 -0.005007\nv 0.015295 0.028595 -0.004751\nv 0.015442 0.028579 -0.004572\nv 0.015657 0.02855 -0.004491\nv 0.015883 0.028515 -0.004528\nv 0.016059 0.028484 -0.004675\nv 0.016139 0.028465 -0.004892\nv 0.016101 0.028464 -0.005121\nv 0.015954 0.02848 -0.0053\nv 0.015739 0.028509 -0.005382\nv 0.015513 0.028544 -0.005344\nv 0.015337 0.028575 -0.005197\nv 0.015257 0.028594 -0.00498\nv 0.015603 0.029719 -0.00485\nv 0.015745 0.029688 -0.00467\nv 0.015949 0.029617 -0.004584\nv 0.01616 0.029526 -0.004617\nv 0.016321 0.029439 -0.00476\nv 0.016389 0.029379 -0.004973\nv 0.016347 0.029363 -0.0052\nv 0.016205 0.029394 -0.005381\nv 0.016001 0.029465 -0.005466\nv 0.01579 0.029556 -0.005433\nv 0.015629 0.029643 -0.005291\nv 0.01556 0.029702 -0.005078\nv 0.016164 0.030721 -0.005068\nv 0.016299 0.030677 -0.004885\nv 0.016482 0.03057 -0.004792\nv 0.016665 0.030428 -0.004814\nv 0.016798 0.030291 -0.004945\nv 0.016846 0.030195 -0.00515\nv 0.016796 0.030165 -0.005375\nv 0.016661 0.03021 -0.005558\nv 0.016478 0.030317 -0.005651\nv 0.016295 0.030458 -0.005629\nv 0.016162 0.030595 -0.005498\nv 0.016114 0.030692 -0.005293\nv 0.01694 0.031534 -0.005391\nv 0.017065 0.031479 -0.005203\nv 0.01722 0.031342 -0.005098\nv 0.017363 0.03116 -0.005104\nv 0.017458 0.030982 -0.005219\nv 0.017477 0.030856 -0.005413\nv 0.017417 0.030815 -0.005633\nv 0.017292 0.030871 -0.00582\nv 0.017138 0.031008 -0.005925\nv 0.016994 0.031189 -0.00592\nv 0.016899 0.031367 -0.005805\nv 0.01688 0.031493 -0.005611\nv 0.017879 0.032102 -0.005796\nv 0.017991 0.032039 -0.005603\nv 0.018111 0.031881 -0.005483\nv 0.018208 0.031671 -0.005469\nv 0.018256 0.031465 -0.005563\nv 0.018241 0.031318 -0.005742\nv 0.018168 0.031269 -0.005957\nv 0.018056 0.031332 -0.00615\nv 0.017936 0.03149 -0.00627\nv 0.017839 0.0317 -0.006284\nv 0.017791 0.031907 -0.006189\nv 0.017806 0.032054 -0.006011\nv 0.018916 0.032386 -0.006256\nv 0.019014 0.032319 -0.006056\nv 0.019097 0.032151 -0.00592\nv 0.019142 0.031927 -0.005882\nv 0.019137 0.031706 -0.005954\nv 0.019084 0.031549 -0.006116\nv 0.018997 0.031497 -0.006325\nv 0.0189 0.031564 -0.006524\nv 0.018817 0.031732 -0.00666\nv 0.018772 0.031956 -0.006698\nv 0.018776 0.032176 -0.006626\nv 0.018829 0.032334 -0.006464\nv 0.019981 0.032367 -0.006739\nv 0.020064 0.0323 -0.006533\nv 0.020108 0.032133 -0.006379\nv 0.0201 0.031909 -0.006317\nv 0.020042 0.03169 -0.006365\nv 0.01995 0.031533 -0.006509\nv 0.019849 0.031481 -0.006711\nv 0.019766 0.031548 -0.006917\nv 0.019722 0.031715 -0.007071\nv 0.01973 0.031939 -0.007133\nv 0.019788 0.032158 -0.007085\nv 0.01988 0.032315 -0.006941\nv 0.021001 0.032046 -0.007213\nv 0.021071 0.031984 -0.007001\nv 0.021077 0.031828 -0.006829\nv 0.021018 0.031621 -0.006744\nv 0.020909 0.031417 -0.006768\nv 0.02078 0.031272 -0.006895\nv 0.020665 0.031225 -0.00709\nv 0.020595 0.031287 -0.007302\nv 0.020589 0.031443 -0.007474\nv 0.020648 0.03165 -0.007559\nv 0.020757 0.031854 -0.007535\nv 0.020886 0.031998 -0.007408\nv 0.020427 0.020466 -0.007371\nv 0.019892 0.020571 -0.008343\nv 0.017627 0.017497 -0.007427\nv 0.018162 0.017393 -0.006455\nv 0.019224 0.020807 -0.009203\nv 0.016959 0.017733 -0.008287\nv 0.018448 0.021165 -0.009918\nv 0.016184 0.018092 -0.009002\nv 0.017594 0.021633 -0.01046\nv 0.01533 0.018559 -0.009545\nv 0.016695 0.022191 -0.010809\nv 0.014431 0.019118 -0.009894\nv 0.015786 0.022819 -0.010951\nv 0.013521 0.019745 -0.010036\nv 0.014901 0.023492 -0.010881\nv 0.012636 0.020419 -0.009966\nv 0.014074 0.024185 -0.010601\nv 0.011809 0.021111 -0.009686\nv 0.013337 0.02487 -0.010123\nv 0.011072 0.021797 -0.009207\nv 0.012719 0.025522 -0.009463\nv 0.010454 0.022449 -0.008548\nv 0.012243 0.026116 -0.008649\nv 0.009978 0.023042 -0.007734\nv 0.011927 0.026628 -0.007711\nv 0.009662 0.023554 -0.006795\nv 0.011784 0.027038 -0.006685\nv 0.009519 0.023965 -0.00577\nv 0.011819 0.027333 -0.005611\nv 0.009554 0.024259 -0.004695\nv 0.012031 0.027499 -0.004529\nv 0.009766 0.024425 -0.003614\nv 0.012412 0.02753 -0.003483\nv 0.010147 0.024456 -0.002567\nv 0.012946 0.027426 -0.00251\nv 0.010681 0.024352 -0.001595\nv 0.013614 0.02719 -0.00165\nv 0.01135 0.024116 -0.000735\nv 0.01439 0.026831 -0.000935\nv 0.012125 0.023757 -0.00002\nv 0.015244 0.026363 -0.000393\nv 0.012979 0.02329 0.000523\nv 0.016143 0.025805 -0.000044\nv 0.013878 0.022731 0.000871\nv 0.017052 0.025177 0.000098\nv 0.014788 0.022103 0.001014\nv 0.017938 0.024504 0.000028\nv 0.015673 0.02143 0.000943\nv 0.018765 0.023811 -0.000252\nv 0.0165 0.020738 0.000664\nv 0.019501 0.023126 -0.000731\nv 0.017237 0.020052 0.000185\nv 0.02012 0.022474 -0.00139\nv 0.017855 0.0194 -0.000474\nv 0.020596 0.021881 -0.002204\nv 0.018331 0.018807 -0.001289\nv 0.020911 0.021369 -0.003142\nv 0.018647 0.018295 -0.002227\nv 0.021054 0.020958 -0.004168\nv 0.01879 0.017884 -0.003253\nv 0.021019 0.020664 -0.005242\nv 0.018755 0.01759 -0.004327\nv 0.020807 0.020498 -0.006324\nv 0.018543 0.017424 -0.005408\nv 0.014154 0.020924 -0.004511\nv 0.017428 0.025367 -0.005834\nv 0.019827 0.022999 -0.007849\nv 0.020197 0.022927 -0.007177\nv 0.019366 0.023162 -0.008443\nv 0.01883 0.02341 -0.008937\nv 0.01824 0.023733 -0.009312\nv 0.017619 0.024119 -0.009553\nv 0.01699 0.024553 -0.009651\nv 0.016379 0.025018 -0.009603\nv 0.015808 0.025496 -0.009409\nv 0.015299 0.02597 -0.009079\nv 0.014871 0.02642 -0.008623\nv 0.014542 0.02683 -0.008061\nv 0.014324 0.027184 -0.007413\nv 0.014226 0.027468 -0.006704\nv 0.01425 0.027671 -0.005962\nv 0.014396 0.027786 -0.005215\nv 0.014659 0.027807 -0.004491\nv 0.015029 0.027735 -0.00382\nv 0.01549 0.027572 -0.003226\nv 0.016026 0.027324 -0.002732\nv 0.016616 0.027001 -0.002357\nv 0.017237 0.026616 -0.002116\nv 0.017865 0.026182 -0.002018\nv 0.018477 0.025717 -0.002066\nv 0.019048 0.025238 -0.002259\nv 0.019557 0.024765 -0.00259\nv 0.019984 0.024314 -0.003046\nv 0.020313 0.023904 -0.003608\nv 0.020531 0.023551 -0.004256\nv 0.02063 0.023267 -0.004965\nv 0.020606 0.023064 -0.005707\nv 0.02046 0.022949 -0.006454\nv 0.020602 0.02248 -0.007377\nv 0.020173 0.022563 -0.008157\nv 0.019638 0.022753 -0.008847\nv 0.019015 0.02304 -0.009421\nv 0.01833 0.023415 -0.009856\nv 0.017609 0.023863 -0.010136\nv 0.01688 0.024367 -0.01025\nv 0.016169 0.024907 -0.010193\nv 0.015506 0.025462 -0.009969\nv 0.014915 0.026012 -0.009585\nv 0.014419 0.026535 -0.009056\nv 0.014037 0.027011 -0.008403\nv 0.013784 0.027422 -0.007651\nv 0.013669 0.027751 -0.006828\nv 0.013698 0.027987 -0.005966\nv 0.013868 0.02812 -0.005098\nv 0.014173 0.028146 -0.004259\nv 0.014602 0.028062 -0.003479\nv 0.015138 0.027873 -0.002789\nv 0.01576 0.027585 -0.002215\nv 0.016445 0.02721 -0.00178\nv 0.017166 0.026762 -0.001501\nv 0.017896 0.026258 -0.001386\nv 0.018606 0.025718 -0.001443\nv 0.019269 0.025163 -0.001667\nv 0.01986 0.024613 -0.002051\nv 0.020356 0.02409 -0.00258\nv 0.020738 0.023614 -0.003233\nv 0.020991 0.023203 -0.003986\nv 0.021106 0.022874 -0.004809\nv 0.021078 0.022638 -0.00567\nv 0.020908 0.022505 -0.006538\nv 0.020828 0.02201 -0.007497\nv 0.020353 0.022102 -0.008361\nv 0.020874 0.021517 -0.007535\nv 0.020366 0.021617 -0.008459\nv 0.02074 0.021003 -0.007493\nv 0.020212 0.021106 -0.008453\nv 0.019759 0.022312 -0.009125\nv 0.019731 0.021841 -0.009277\nv 0.019553 0.021339 -0.009303\nv 0.01907 0.022631 -0.009761\nv 0.018994 0.022182 -0.009957\nv 0.018786 0.021693 -0.010009\nv 0.018311 0.023046 -0.010243\nv 0.018182 0.022626 -0.010472\nv 0.017943 0.022155 -0.010545\nv 0.017512 0.023543 -0.010553\nv 0.017327 0.023157 -0.010804\nv 0.017055 0.022707 -0.010889\nv 0.016704 0.0241 -0.010679\nv 0.016463 0.023754 -0.010939\nv 0.016157 0.023327 -0.01103\nv 0.015917 0.024699 -0.010617\nv 0.015621 0.024394 -0.010872\nv 0.015283 0.023992 -0.01096\nv 0.015182 0.025314 -0.010368\nv 0.014835 0.025052 -0.010606\nv 0.014466 0.024676 -0.010684\nv 0.014527 0.025923 -0.009942\nv 0.014135 0.025703 -0.010151\nv 0.013738 0.025352 -0.010211\nv 0.013978 0.026503 -0.009357\nv 0.013547 0.026323 -0.009525\nv 0.013128 0.025996 -0.00956\nv 0.013555 0.02703 -0.008633\nv 0.013095 0.026887 -0.008751\nv 0.012657 0.026582 -0.008756\nv 0.013274 0.027485 -0.007799\nv 0.012795 0.027374 -0.007859\nv 0.012346 0.027088 -0.00783\nv 0.013147 0.02785 -0.006888\nv 0.012659 0.027764 -0.006884\nv 0.012204 0.027494 -0.006816\nv 0.013178 0.028112 -0.005933\nv 0.012692 0.028044 -0.005863\nv 0.012239 0.027784 -0.005755\nv 0.013367 0.028259 -0.004972\nv 0.012894 0.028202 -0.004835\nv 0.012448 0.027948 -0.004687\nv 0.013705 0.028287 -0.004042\nv 0.013255 0.028231 -0.00384\nv 0.012824 0.027979 -0.003653\nv 0.01418 0.028194 -0.003178\nv 0.013764 0.028132 -0.002916\nv 0.013352 0.027876 -0.002693\nv 0.014774 0.027984 -0.002413\nv 0.014399 0.027908 -0.002098\nv 0.014012 0.027643 -0.001844\nv 0.015463 0.027666 -0.001778\nv 0.015136 0.027567 -0.001419\nv 0.014778 0.027289 -0.001138\nv 0.016222 0.02725 -0.001296\nv 0.015948 0.027123 -0.000903\nv 0.015622 0.026827 -0.000602\nv 0.017021 0.026754 -0.000986\nv 0.016802 0.026592 -0.000571\nv 0.016509 0.026276 -0.000257\nv 0.017829 0.026196 -0.000859\nv 0.017667 0.025995 -0.000436\nv 0.017408 0.025655 -0.000117\nv 0.018616 0.025598 -0.000922\nv 0.018508 0.025355 -0.000503\nv 0.018282 0.024991 -0.000186\nv 0.019351 0.024982 -0.00117\nv 0.019294 0.024697 -0.000769\nv 0.019099 0.024307 -0.000463\nv 0.020006 0.024373 -0.001596\nv 0.019995 0.024045 -0.001224\nv 0.019826 0.02363 -0.000936\nv 0.020555 0.023794 -0.002182\nv 0.020582 0.023426 -0.001851\nv 0.020437 0.022986 -0.001587\nv 0.020978 0.023266 -0.002905\nv 0.021035 0.022862 -0.002625\nv 0.020907 0.0224 -0.002391\nv 0.021259 0.022812 -0.003739\nv 0.021335 0.022375 -0.003516\nv 0.021219 0.021894 -0.003317\nv 0.021386 0.022446 -0.004651\nv 0.021471 0.021985 -0.004491\nv 0.02136 0.021488 -0.00433\nv 0.021355 0.022185 -0.005605\nv 0.021437 0.021705 -0.005512\nv 0.021325 0.021198 -0.005391\nv 0.021166 0.022037 -0.006566\nv 0.021236 0.021547 -0.00654\nv 0.021116 0.021034 -0.006459\n\nvt 0.088958 0.88244 0\nvt 0.088958 0.903883 0\nvt 0.088363 0.903883 0\nvt 0.088977 0.903883 0\nvt 0.088363 0.88244 0\nvt 0.088977 0.88244 0\nvt 0.088382 0.903883 0\nvt 0.088382 0.88244 0\nvt 0.088401 0.903883 0\nvt 0.088401 0.88244 0\nvt 0.08842 0.903883 0\nvt 0.08842 0.88244 0\nvt 0.08844 0.903883 0\nvt 0.08844 0.88244 0\nvt 0.088459 0.903883 0\nvt 0.088459 0.88244 0\nvt 0.088478 0.903883 0\nvt 0.088478 0.88244 0\nvt 0.088497 0.903883 0\nvt 0.088497 0.88244 0\nvt 0.088516 0.903883 0\nvt 0.088516 0.88244 0\nvt 0.088536 0.903883 0\nvt 0.088536 0.88244 0\nvt 0.088555 0.903883 0\nvt 0.088555 0.88244 0\nvt 0.088574 0.903883 0\nvt 0.088574 0.88244 0\nvt 0.088593 0.903883 0\nvt 0.088593 0.88244 0\nvt 0.088612 0.903883 0\nvt 0.088612 0.88244 0\nvt 0.088632 0.903883 0\nvt 0.088632 0.88244 0\nvt 0.088651 0.903883 0\nvt 0.088651 0.88244 0\nvt 0.08867 0.903883 0\nvt 0.08867 0.88244 0\nvt 0.088689 0.903883 0\nvt 0.088689 0.88244 0\nvt 0.088708 0.903883 0\nvt 0.088708 0.88244 0\nvt 0.088728 0.903883 0\nvt 0.088728 0.88244 0\nvt 0.088747 0.903883 0\nvt 0.088747 0.88244 0\nvt 0.088766 0.903883 0\nvt 0.088766 0.88244 0\nvt 0.088785 0.903883 0\nvt 0.088785 0.88244 0\nvt 0.088804 0.903883 0\nvt 0.088804 0.88244 0\nvt 0.088824 0.903883 0\nvt 0.088824 0.88244 0\nvt 0.088843 0.903883 0\nvt 0.088843 0.88244 0\nvt 0.088862 0.903883 0\nvt 0.088862 0.88244 0\nvt 0.088881 0.903883 0\nvt 0.088881 0.88244 0\nvt 0.0889 0.903883 0\nvt 0.0889 0.88244 0\nvt 0.08892 0.903883 0\nvt 0.08892 0.88244 0\nvt 0.088939 0.903883 0\nvt 0.088939 0.88244 0\nvt 0.088958 0.840446 0\nvt 0.088363 0.840446 0\nvt 0.088977 0.840446 0\nvt 0.088382 0.840446 0\nvt 0.088401 0.840446 0\nvt 0.08842 0.840446 0\nvt 0.08844 0.840446 0\nvt 0.088459 0.840446 0\nvt 0.088478 0.840446 0\nvt 0.088497 0.840446 0\nvt 0.088516 0.840446 0\nvt 0.088536 0.840446 0\nvt 0.088555 0.840446 0\nvt 0.088574 0.840446 0\nvt 0.088593 0.840446 0\nvt 0.088612 0.840446 0\nvt 0.088632 0.840446 0\nvt 0.088651 0.840446 0\nvt 0.08867 0.840446 0\nvt 0.088689 0.840446 0\nvt 0.088708 0.840446 0\nvt 0.088728 0.840446 0\nvt 0.088747 0.840446 0\nvt 0.088766 0.840446 0\nvt 0.088785 0.840446 0\nvt 0.088804 0.840446 0\nvt 0.088824 0.840446 0\nvt 0.088843 0.840446 0\nvt 0.088862 0.840446 0\nvt 0.088881 0.840446 0\nvt 0.0889 0.840446 0\nvt 0.08892 0.840446 0\nvt 0.088939 0.840446 0\nvt 0.088958 0.783932 0\nvt 0.088363 0.783932 0\nvt 0.088977 0.783932 0\nvt 0.088382 0.783932 0\nvt 0.088401 0.783932 0\nvt 0.08842 0.783932 0\nvt 0.08844 0.783932 0\nvt 0.088459 0.783932 0\nvt 0.088478 0.783932 0\nvt 0.088497 0.783932 0\nvt 0.088516 0.783932 0\nvt 0.088536 0.783932 0\nvt 0.088555 0.783932 0\nvt 0.088574 0.783932 0\nvt 0.088593 0.783932 0\nvt 0.088612 0.783932 0\nvt 0.088632 0.783932 0\nvt 0.088651 0.783932 0\nvt 0.08867 0.783932 0\nvt 0.088689 0.783932 0\nvt 0.088708 0.783932 0\nvt 0.088728 0.783932 0\nvt 0.088747 0.783932 0\nvt 0.088766 0.783932 0\nvt 0.088785 0.783932 0\nvt 0.088804 0.783932 0\nvt 0.088824 0.783932 0\nvt 0.088843 0.783932 0\nvt 0.088862 0.783932 0\nvt 0.088881 0.783932 0\nvt 0.0889 0.783932 0\nvt 0.08892 0.783932 0\nvt 0.088939 0.783932 0\nvt 0.088958 0.71507 0\nvt 0.088363 0.71507 0\nvt 0.088977 0.71507 0\nvt 0.088382 0.71507 0\nvt 0.088401 0.71507 0\nvt 0.08842 0.71507 0\nvt 0.08844 0.71507 0\nvt 0.088459 0.71507 0\nvt 0.088478 0.71507 0\nvt 0.088497 0.71507 0\nvt 0.088516 0.71507 0\nvt 0.088536 0.71507 0\nvt 0.088555 0.71507 0\nvt 0.088574 0.71507 0\nvt 0.088593 0.71507 0\nvt 0.088612 0.71507 0\nvt 0.088632 0.71507 0\nvt 0.088651 0.71507 0\nvt 0.08867 0.71507 0\nvt 0.088689 0.71507 0\nvt 0.088708 0.71507 0\nvt 0.088728 0.71507 0\nvt 0.088747 0.71507 0\nvt 0.088766 0.71507 0\nvt 0.088785 0.71507 0\nvt 0.088804 0.71507 0\nvt 0.088824 0.71507 0\nvt 0.088843 0.71507 0\nvt 0.088862 0.71507 0\nvt 0.088881 0.71507 0\nvt 0.0889 0.71507 0\nvt 0.08892 0.71507 0\nvt 0.088939 0.71507 0\nvt 0.088958 0.636505 0\nvt 0.088363 0.636505 0\nvt 0.088977 0.636505 0\nvt 0.088382 0.636505 0\nvt 0.088401 0.636505 0\nvt 0.08842 0.636505 0\nvt 0.08844 0.636505 0\nvt 0.088459 0.636505 0\nvt 0.088478 0.636505 0\nvt 0.088497 0.636505 0\nvt 0.088516 0.636505 0\nvt 0.088536 0.636505 0\nvt 0.088555 0.636505 0\nvt 0.088574 0.636505 0\nvt 0.088593 0.636505 0\nvt 0.088612 0.636505 0\nvt 0.088632 0.636505 0\nvt 0.088651 0.636505 0\nvt 0.08867 0.636505 0\nvt 0.088689 0.636505 0\nvt 0.088708 0.636505 0\nvt 0.088728 0.636505 0\nvt 0.088747 0.636505 0\nvt 0.088766 0.636505 0\nvt 0.088785 0.636505 0\nvt 0.088804 0.636505 0\nvt 0.088824 0.636505 0\nvt 0.088843 0.636505 0\nvt 0.088862 0.636505 0\nvt 0.088881 0.636505 0\nvt 0.0889 0.636505 0\nvt 0.08892 0.636505 0\nvt 0.088939 0.636505 0\nvt 0.088958 0.551257 0\nvt 0.088363 0.551257 0\nvt 0.088977 0.551257 0\nvt 0.088382 0.551257 0\nvt 0.088401 0.551257 0\nvt 0.08842 0.551257 0\nvt 0.08844 0.551257 0\nvt 0.088459 0.551257 0\nvt 0.088478 0.551257 0\nvt 0.088497 0.551257 0\nvt 0.088516 0.551257 0\nvt 0.088536 0.551257 0\nvt 0.088555 0.551257 0\nvt 0.088574 0.551257 0\nvt 0.088593 0.551257 0\nvt 0.088612 0.551257 0\nvt 0.088632 0.551257 0\nvt 0.088651 0.551257 0\nvt 0.08867 0.551257 0\nvt 0.088689 0.551257 0\nvt 0.088708 0.551257 0\nvt 0.088728 0.551257 0\nvt 0.088747 0.551257 0\nvt 0.088766 0.551257 0\nvt 0.088785 0.551257 0\nvt 0.088804 0.551257 0\nvt 0.088824 0.551257 0\nvt 0.088843 0.551257 0\nvt 0.088862 0.551257 0\nvt 0.088881 0.551257 0\nvt 0.0889 0.551257 0\nvt 0.08892 0.551257 0\nvt 0.088939 0.551257 0\nvt 0.088958 0.462602 0\nvt 0.088363 0.462602 0\nvt 0.088977 0.462602 0\nvt 0.088382 0.462602 0\nvt 0.088401 0.462602 0\nvt 0.08842 0.462602 0\nvt 0.08844 0.462602 0\nvt 0.088459 0.462602 0\nvt 0.088478 0.462602 0\nvt 0.088497 0.462602 0\nvt 0.088516 0.462602 0\nvt 0.088536 0.462602 0\nvt 0.088555 0.462602 0\nvt 0.088574 0.462602 0\nvt 0.088593 0.462602 0\nvt 0.088612 0.462602 0\nvt 0.088632 0.462602 0\nvt 0.088651 0.462602 0\nvt 0.08867 0.462602 0\nvt 0.088689 0.462602 0\nvt 0.088708 0.462602 0\nvt 0.088728 0.462602 0\nvt 0.088747 0.462602 0\nvt 0.088766 0.462602 0\nvt 0.088785 0.462602 0\nvt 0.088804 0.462602 0\nvt 0.088824 0.462602 0\nvt 0.088843 0.462602 0\nvt 0.088862 0.462602 0\nvt 0.088881 0.462602 0\nvt 0.0889 0.462602 0\nvt 0.08892 0.462602 0\nvt 0.088939 0.462602 0\nvt 0.088958 0.373947 0\nvt 0.088363 0.373947 0\nvt 0.088977 0.373947 0\nvt 0.088382 0.373947 0\nvt 0.088401 0.373947 0\nvt 0.08842 0.373947 0\nvt 0.08844 0.373947 0\nvt 0.088459 0.373947 0\nvt 0.088478 0.373947 0\nvt 0.088497 0.373947 0\nvt 0.088516 0.373947 0\nvt 0.088536 0.373947 0\nvt 0.088555 0.373947 0\nvt 0.088574 0.373947 0\nvt 0.088593 0.373947 0\nvt 0.088612 0.373947 0\nvt 0.088632 0.373947 0\nvt 0.088651 0.373947 0\nvt 0.08867 0.373947 0\nvt 0.088689 0.373947 0\nvt 0.088708 0.373947 0\nvt 0.088728 0.373947 0\nvt 0.088747 0.373947 0\nvt 0.088766 0.373947 0\nvt 0.088785 0.373947 0\nvt 0.088804 0.373947 0\nvt 0.088824 0.373947 0\nvt 0.088843 0.373947 0\nvt 0.088862 0.373947 0\nvt 0.088881 0.373947 0\nvt 0.0889 0.373947 0\nvt 0.08892 0.373947 0\nvt 0.088939 0.373947 0\nvt 0.088958 0.288699 0\nvt 0.088363 0.288699 0\nvt 0.088977 0.288699 0\nvt 0.088382 0.288699 0\nvt 0.088401 0.288699 0\nvt 0.08842 0.288699 0\nvt 0.08844 0.288699 0\nvt 0.088459 0.288699 0\nvt 0.088478 0.288699 0\nvt 0.088497 0.288699 0\nvt 0.088516 0.288699 0\nvt 0.088536 0.288699 0\nvt 0.088555 0.288699 0\nvt 0.088574 0.288699 0\nvt 0.088593 0.288699 0\nvt 0.088612 0.288699 0\nvt 0.088632 0.288699 0\nvt 0.088651 0.288699 0\nvt 0.08867 0.288699 0\nvt 0.088689 0.288699 0\nvt 0.088708 0.288699 0\nvt 0.088728 0.288699 0\nvt 0.088747 0.288699 0\nvt 0.088766 0.288699 0\nvt 0.088785 0.288699 0\nvt 0.088804 0.288699 0\nvt 0.088824 0.288699 0\nvt 0.088843 0.288699 0\nvt 0.088862 0.288699 0\nvt 0.088881 0.288699 0\nvt 0.0889 0.288699 0\nvt 0.08892 0.288699 0\nvt 0.088939 0.288699 0\nvt 0.088958 0.210134 0\nvt 0.088363 0.210134 0\nvt 0.088977 0.210134 0\nvt 0.088382 0.210134 0\nvt 0.088401 0.210134 0\nvt 0.08842 0.210134 0\nvt 0.08844 0.210134 0\nvt 0.088459 0.210134 0\nvt 0.088478 0.210134 0\nvt 0.088497 0.210134 0\nvt 0.088516 0.210134 0\nvt 0.088536 0.210134 0\nvt 0.088555 0.210134 0\nvt 0.088574 0.210134 0\nvt 0.088593 0.210134 0\nvt 0.088612 0.210134 0\nvt 0.088632 0.210134 0\nvt 0.088651 0.210134 0\nvt 0.08867 0.210134 0\nvt 0.088689 0.210134 0\nvt 0.088708 0.210134 0\nvt 0.088728 0.210134 0\nvt 0.088747 0.210134 0\nvt 0.088766 0.210134 0\nvt 0.088785 0.210134 0\nvt 0.088804 0.210134 0\nvt 0.088824 0.210134 0\nvt 0.088843 0.210134 0\nvt 0.088862 0.210134 0\nvt 0.088881 0.210134 0\nvt 0.0889 0.210134 0\nvt 0.08892 0.210134 0\nvt 0.088939 0.210134 0\nvt 0.088958 0.141272 0\nvt 0.088363 0.141272 0\nvt 0.088977 0.141272 0\nvt 0.088382 0.141272 0\nvt 0.088401 0.141272 0\nvt 0.08842 0.141272 0\nvt 0.08844 0.141272 0\nvt 0.088459 0.141272 0\nvt 0.088478 0.141272 0\nvt 0.088497 0.141272 0\nvt 0.088516 0.141272 0\nvt 0.088536 0.141272 0\nvt 0.088555 0.141272 0\nvt 0.088574 0.141272 0\nvt 0.088593 0.141272 0\nvt 0.088612 0.141272 0\nvt 0.088632 0.141272 0\nvt 0.088651 0.141272 0\nvt 0.08867 0.141272 0\nvt 0.088689 0.141272 0\nvt 0.088708 0.141272 0\nvt 0.088728 0.141272 0\nvt 0.088747 0.141272 0\nvt 0.088766 0.141272 0\nvt 0.088785 0.141272 0\nvt 0.088804 0.141272 0\nvt 0.088824 0.141272 0\nvt 0.088843 0.141272 0\nvt 0.088862 0.141272 0\nvt 0.088881 0.141272 0\nvt 0.0889 0.141272 0\nvt 0.08892 0.141272 0\nvt 0.088939 0.141272 0\nvt 0.088958 0.084757 0\nvt 0.088363 0.084757 0\nvt 0.088977 0.084757 0\nvt 0.088382 0.084757 0\nvt 0.088401 0.084757 0\nvt 0.08842 0.084757 0\nvt 0.08844 0.084757 0\nvt 0.088459 0.084757 0\nvt 0.088478 0.084757 0\nvt 0.088497 0.084757 0\nvt 0.088516 0.084757 0\nvt 0.088536 0.084757 0\nvt 0.088555 0.084757 0\nvt 0.088574 0.084757 0\nvt 0.088593 0.084757 0\nvt 0.088612 0.084757 0\nvt 0.088632 0.084757 0\nvt 0.088651 0.084757 0\nvt 0.08867 0.084757 0\nvt 0.088689 0.084757 0\nvt 0.088708 0.084757 0\nvt 0.088728 0.084757 0\nvt 0.088747 0.084757 0\nvt 0.088766 0.084757 0\nvt 0.088785 0.084757 0\nvt 0.088804 0.084757 0\nvt 0.088824 0.084757 0\nvt 0.088843 0.084757 0\nvt 0.088862 0.084757 0\nvt 0.088881 0.084757 0\nvt 0.0889 0.084757 0\nvt 0.08892 0.084757 0\nvt 0.088939 0.084757 0\nvt 0.088958 0.042764 0\nvt 0.088363 0.042764 0\nvt 0.088977 0.042764 0\nvt 0.088382 0.042764 0\nvt 0.088401 0.042764 0\nvt 0.08842 0.042764 0\nvt 0.08844 0.042764 0\nvt 0.088459 0.042764 0\nvt 0.088478 0.042764 0\nvt 0.088497 0.042764 0\nvt 0.088516 0.042764 0\nvt 0.088536 0.042764 0\nvt 0.088555 0.042764 0\nvt 0.088574 0.042764 0\nvt 0.088593 0.042764 0\nvt 0.088612 0.042764 0\nvt 0.088632 0.042764 0\nvt 0.088651 0.042764 0\nvt 0.08867 0.042764 0\nvt 0.088689 0.042764 0\nvt 0.088708 0.042764 0\nvt 0.088728 0.042764 0\nvt 0.088747 0.042764 0\nvt 0.088766 0.042764 0\nvt 0.088785 0.042764 0\nvt 0.088804 0.042764 0\nvt 0.088824 0.042764 0\nvt 0.088843 0.042764 0\nvt 0.088862 0.042764 0\nvt 0.088881 0.042764 0\nvt 0.0889 0.042764 0\nvt 0.08892 0.042764 0\nvt 0.088939 0.042764 0\nvt 0.088958 0.016904 0\nvt 0.089066 0.009373 0\nvt 0.088363 0.016904 0\nvt 0.088977 0.016904 0\nvt 0.088382 0.016904 0\nvt 0.088401 0.016904 0\nvt 0.08842 0.016904 0\nvt 0.08844 0.016904 0\nvt 0.088459 0.016904 0\nvt 0.088478 0.016904 0\nvt 0.088497 0.016904 0\nvt 0.088516 0.016904 0\nvt 0.088536 0.016904 0\nvt 0.088555 0.016904 0\nvt 0.088574 0.016904 0\nvt 0.088593 0.016904 0\nvt 0.088612 0.016904 0\nvt 0.088632 0.016904 0\nvt 0.088651 0.016904 0\nvt 0.08867 0.016904 0\nvt 0.088689 0.016904 0\nvt 0.088708 0.016904 0\nvt 0.088728 0.016904 0\nvt 0.088747 0.016904 0\nvt 0.088766 0.016904 0\nvt 0.088785 0.016904 0\nvt 0.088804 0.016904 0\nvt 0.088824 0.016904 0\nvt 0.088843 0.016904 0\nvt 0.088862 0.016904 0\nvt 0.088881 0.016904 0\nvt 0.0889 0.016904 0\nvt 0.08892 0.016904 0\nvt 0.088939 0.016904 0\nvt 0.088651 0.008172 0\nvt 0.088185 0.003613 0\nvt 0.088958 0.984038 0\nvt 0.088363 0.984038 0\nvt 0.088977 0.984038 0\nvt 0.088363 0.923448 0\nvt 0.088977 0.923448 0\nvt 0.088958 0.923448 0\nvt 0.088382 0.984038 0\nvt 0.088382 0.923448 0\nvt 0.088401 0.984038 0\nvt 0.088401 0.923448 0\nvt 0.08842 0.984038 0\nvt 0.08842 0.923448 0\nvt 0.08844 0.984038 0\nvt 0.08844 0.923448 0\nvt 0.088459 0.984038 0\nvt 0.088459 0.923448 0\nvt 0.088478 0.984038 0\nvt 0.088478 0.923448 0\nvt 0.088497 0.984038 0\nvt 0.088497 0.923448 0\nvt 0.088516 0.984038 0\nvt 0.088516 0.923448 0\nvt 0.088536 0.984038 0\nvt 0.088536 0.923448 0\nvt 0.088555 0.984038 0\nvt 0.088555 0.923448 0\nvt 0.088574 0.984038 0\nvt 0.088574 0.923448 0\nvt 0.088593 0.984038 0\nvt 0.088593 0.923448 0\nvt 0.088612 0.984038 0\nvt 0.088612 0.923448 0\nvt 0.088632 0.984038 0\nvt 0.088632 0.923448 0\nvt 0.088651 0.984038 0\nvt 0.088651 0.923448 0\nvt 0.08867 0.984038 0\nvt 0.08867 0.923448 0\nvt 0.088689 0.984038 0\nvt 0.088689 0.923448 0\nvt 0.088708 0.984038 0\nvt 0.088708 0.923448 0\nvt 0.088728 0.984038 0\nvt 0.088728 0.923448 0\nvt 0.088747 0.984038 0\nvt 0.088747 0.923448 0\nvt 0.088766 0.984038 0\nvt 0.088766 0.923448 0\nvt 0.088785 0.984038 0\nvt 0.088785 0.923448 0\nvt 0.088804 0.984038 0\nvt 0.088804 0.923448 0\nvt 0.088824 0.984038 0\nvt 0.088824 0.923448 0\nvt 0.088843 0.984038 0\nvt 0.088843 0.923448 0\nvt 0.088862 0.984038 0\nvt 0.088862 0.923448 0\nvt 0.088881 0.984038 0\nvt 0.088881 0.923448 0\nvt 0.0889 0.984038 0\nvt 0.0889 0.923448 0\nvt 0.08892 0.984038 0\nvt 0.08892 0.923448 0\nvt 0.088939 0.984038 0\nvt 0.088939 0.923448 0\nvt 0.088958 0.914541 0\nvt 0.088363 0.914541 0\nvt 0.088977 0.914541 0\nvt 0.088382 0.914541 0\nvt 0.088401 0.914541 0\nvt 0.08842 0.914541 0\nvt 0.08844 0.914541 0\nvt 0.088459 0.914541 0\nvt 0.088478 0.914541 0\nvt 0.088497 0.914541 0\nvt 0.088516 0.914541 0\nvt 0.088536 0.914541 0\nvt 0.088555 0.914541 0\nvt 0.088574 0.914541 0\nvt 0.088593 0.914541 0\nvt 0.088612 0.914541 0\nvt 0.088632 0.914541 0\nvt 0.088651 0.914541 0\nvt 0.08867 0.914541 0\nvt 0.088689 0.914541 0\nvt 0.088708 0.914541 0\nvt 0.088728 0.914541 0\nvt 0.088747 0.914541 0\nvt 0.088766 0.914541 0\nvt 0.088785 0.914541 0\nvt 0.088804 0.914541 0\nvt 0.088824 0.914541 0\nvt 0.088843 0.914541 0\nvt 0.088862 0.914541 0\nvt 0.088881 0.914541 0\nvt 0.0889 0.914541 0\nvt 0.08892 0.914541 0\nvt 0.088939 0.914541 0\nvt 0.088958 0.90802 0\nvt 0.088363 0.90802 0\nvt 0.088977 0.90802 0\nvt 0.088382 0.90802 0\nvt 0.088401 0.90802 0\nvt 0.08842 0.90802 0\nvt 0.08844 0.90802 0\nvt 0.088459 0.90802 0\nvt 0.088478 0.90802 0\nvt 0.088497 0.90802 0\nvt 0.088516 0.90802 0\nvt 0.088536 0.90802 0\nvt 0.088555 0.90802 0\nvt 0.088574 0.90802 0\nvt 0.088593 0.90802 0\nvt 0.088612 0.90802 0\nvt 0.088632 0.90802 0\nvt 0.088651 0.90802 0\nvt 0.08867 0.90802 0\nvt 0.088689 0.90802 0\nvt 0.088708 0.90802 0\nvt 0.088728 0.90802 0\nvt 0.088747 0.90802 0\nvt 0.088766 0.90802 0\nvt 0.088785 0.90802 0\nvt 0.088804 0.90802 0\nvt 0.088824 0.90802 0\nvt 0.088843 0.90802 0\nvt 0.088862 0.90802 0\nvt 0.088881 0.90802 0\nvt 0.0889 0.90802 0\nvt 0.08892 0.90802 0\nvt 0.088939 0.90802 0\nvt 0.101695 0.206268 0\nvt 0.101415 0.206268 0\nvt 0.101438 0.206268 0\nvt 0.101438 0.233652 0\nvt 0.101438 0.205078 0\nvt 0.101695 0.233652 0\nvt 0.101415 0.233652 0\nvt 0.101695 0.205078 0\nvt 0.101415 0.205078 0\nvt 0.101461 0.206268 0\nvt 0.101461 0.233652 0\nvt 0.101461 0.205078 0\nvt 0.101485 0.206268 0\nvt 0.101485 0.233652 0\nvt 0.101485 0.205078 0\nvt 0.101508 0.206268 0\nvt 0.101508 0.233652 0\nvt 0.101508 0.205078 0\nvt 0.101531 0.206268 0\nvt 0.101531 0.233652 0\nvt 0.101531 0.205078 0\nvt 0.101555 0.206268 0\nvt 0.101555 0.233652 0\nvt 0.101555 0.205078 0\nvt 0.101578 0.206268 0\nvt 0.101578 0.233652 0\nvt 0.101578 0.205078 0\nvt 0.101601 0.206268 0\nvt 0.101601 0.233652 0\nvt 0.101601 0.205078 0\nvt 0.101625 0.206268 0\nvt 0.101625 0.233652 0\nvt 0.101625 0.205078 0\nvt 0.101648 0.206268 0\nvt 0.101648 0.233652 0\nvt 0.101648 0.205078 0\nvt 0.101671 0.206268 0\nvt 0.101671 0.233652 0\nvt 0.101671 0.205078 0\nvt 0.101695 0.207459 0\nvt 0.101415 0.207459 0\nvt 0.101438 0.207459 0\nvt 0.101461 0.207459 0\nvt 0.101485 0.207459 0\nvt 0.101508 0.207459 0\nvt 0.101531 0.207459 0\nvt 0.101555 0.207459 0\nvt 0.101578 0.207459 0\nvt 0.101601 0.207459 0\nvt 0.101625 0.207459 0\nvt 0.101648 0.207459 0\nvt 0.101671 0.207459 0\nvt 0.101695 0.208649 0\nvt 0.101415 0.208649 0\nvt 0.101438 0.208649 0\nvt 0.101461 0.208649 0\nvt 0.101485 0.208649 0\nvt 0.101508 0.208649 0\nvt 0.101531 0.208649 0\nvt 0.101555 0.208649 0\nvt 0.101578 0.208649 0\nvt 0.101601 0.208649 0\nvt 0.101625 0.208649 0\nvt 0.101648 0.208649 0\nvt 0.101671 0.208649 0\nvt 0.101695 0.20984 0\nvt 0.101415 0.20984 0\nvt 0.101438 0.20984 0\nvt 0.101461 0.20984 0\nvt 0.101485 0.20984 0\nvt 0.101508 0.20984 0\nvt 0.101531 0.20984 0\nvt 0.101555 0.20984 0\nvt 0.101578 0.20984 0\nvt 0.101601 0.20984 0\nvt 0.101625 0.20984 0\nvt 0.101648 0.20984 0\nvt 0.101671 0.20984 0\nvt 0.101695 0.211031 0\nvt 0.101415 0.211031 0\nvt 0.101438 0.211031 0\nvt 0.101461 0.211031 0\nvt 0.101485 0.211031 0\nvt 0.101508 0.211031 0\nvt 0.101531 0.211031 0\nvt 0.101555 0.211031 0\nvt 0.101578 0.211031 0\nvt 0.101601 0.211031 0\nvt 0.101625 0.211031 0\nvt 0.101648 0.211031 0\nvt 0.101671 0.211031 0\nvt 0.101695 0.212221 0\nvt 0.101415 0.212221 0\nvt 0.101438 0.212221 0\nvt 0.101461 0.212221 0\nvt 0.101485 0.212221 0\nvt 0.101508 0.212221 0\nvt 0.101531 0.212221 0\nvt 0.101555 0.212221 0\nvt 0.101578 0.212221 0\nvt 0.101601 0.212221 0\nvt 0.101625 0.212221 0\nvt 0.101648 0.212221 0\nvt 0.101671 0.212221 0\nvt 0.101695 0.213412 0\nvt 0.101415 0.213412 0\nvt 0.101438 0.213412 0\nvt 0.101461 0.213412 0\nvt 0.101485 0.213412 0\nvt 0.101508 0.213412 0\nvt 0.101531 0.213412 0\nvt 0.101555 0.213412 0\nvt 0.101578 0.213412 0\nvt 0.101601 0.213412 0\nvt 0.101625 0.213412 0\nvt 0.101648 0.213412 0\nvt 0.101671 0.213412 0\nvt 0.101695 0.214602 0\nvt 0.101415 0.214602 0\nvt 0.101438 0.214602 0\nvt 0.101461 0.214602 0\nvt 0.101485 0.214602 0\nvt 0.101508 0.214602 0\nvt 0.101531 0.214602 0\nvt 0.101555 0.214602 0\nvt 0.101578 0.214602 0\nvt 0.101601 0.214602 0\nvt 0.101625 0.214602 0\nvt 0.101648 0.214602 0\nvt 0.101671 0.214602 0\nvt 0.101695 0.215793 0\nvt 0.101415 0.215793 0\nvt 0.101438 0.215793 0\nvt 0.101461 0.215793 0\nvt 0.101485 0.215793 0\nvt 0.101508 0.215793 0\nvt 0.101531 0.215793 0\nvt 0.101555 0.215793 0\nvt 0.101578 0.215793 0\nvt 0.101601 0.215793 0\nvt 0.101625 0.215793 0\nvt 0.101648 0.215793 0\nvt 0.101671 0.215793 0\nvt 0.101695 0.216984 0\nvt 0.101415 0.216984 0\nvt 0.101438 0.216984 0\nvt 0.101461 0.216984 0\nvt 0.101485 0.216984 0\nvt 0.101508 0.216984 0\nvt 0.101531 0.216984 0\nvt 0.101555 0.216984 0\nvt 0.101578 0.216984 0\nvt 0.101601 0.216984 0\nvt 0.101625 0.216984 0\nvt 0.101648 0.216984 0\nvt 0.101671 0.216984 0\nvt 0.101695 0.218174 0\nvt 0.101415 0.218174 0\nvt 0.101438 0.218174 0\nvt 0.101461 0.218174 0\nvt 0.101485 0.218174 0\nvt 0.101508 0.218174 0\nvt 0.101531 0.218174 0\nvt 0.101555 0.218174 0\nvt 0.101578 0.218174 0\nvt 0.101601 0.218174 0\nvt 0.101625 0.218174 0\nvt 0.101648 0.218174 0\nvt 0.101671 0.218174 0\nvt 0.101695 0.219365 0\nvt 0.101415 0.219365 0\nvt 0.101438 0.219365 0\nvt 0.101461 0.219365 0\nvt 0.101485 0.219365 0\nvt 0.101508 0.219365 0\nvt 0.101531 0.219365 0\nvt 0.101555 0.219365 0\nvt 0.101578 0.219365 0\nvt 0.101601 0.219365 0\nvt 0.101625 0.219365 0\nvt 0.101648 0.219365 0\nvt 0.101671 0.219365 0\nvt 0.101695 0.220556 0\nvt 0.101415 0.220556 0\nvt 0.101438 0.220556 0\nvt 0.101461 0.220556 0\nvt 0.101485 0.220556 0\nvt 0.101508 0.220556 0\nvt 0.101531 0.220556 0\nvt 0.101555 0.220556 0\nvt 0.101578 0.220556 0\nvt 0.101601 0.220556 0\nvt 0.101625 0.220556 0\nvt 0.101648 0.220556 0\nvt 0.101671 0.220556 0\nvt 0.101695 0.221746 0\nvt 0.101415 0.221746 0\nvt 0.101438 0.221746 0\nvt 0.101461 0.221746 0\nvt 0.101485 0.221746 0\nvt 0.101508 0.221746 0\nvt 0.101531 0.221746 0\nvt 0.101555 0.221746 0\nvt 0.101578 0.221746 0\nvt 0.101601 0.221746 0\nvt 0.101625 0.221746 0\nvt 0.101648 0.221746 0\nvt 0.101671 0.221746 0\nvt 0.101695 0.222937 0\nvt 0.101415 0.222937 0\nvt 0.101438 0.222937 0\nvt 0.101461 0.222937 0\nvt 0.101485 0.222937 0\nvt 0.101508 0.222937 0\nvt 0.101531 0.222937 0\nvt 0.101555 0.222937 0\nvt 0.101578 0.222937 0\nvt 0.101601 0.222937 0\nvt 0.101625 0.222937 0\nvt 0.101648 0.222937 0\nvt 0.101671 0.222937 0\nvt 0.101695 0.224127 0\nvt 0.101415 0.224127 0\nvt 0.101438 0.224127 0\nvt 0.101461 0.224127 0\nvt 0.101485 0.224127 0\nvt 0.101508 0.224127 0\nvt 0.101531 0.224127 0\nvt 0.101555 0.224127 0\nvt 0.101578 0.224127 0\nvt 0.101601 0.224127 0\nvt 0.101625 0.224127 0\nvt 0.101648 0.224127 0\nvt 0.101671 0.224127 0\nvt 0.101695 0.225318 0\nvt 0.101415 0.225318 0\nvt 0.101438 0.225318 0\nvt 0.101461 0.225318 0\nvt 0.101485 0.225318 0\nvt 0.101508 0.225318 0\nvt 0.101531 0.225318 0\nvt 0.101555 0.225318 0\nvt 0.101578 0.225318 0\nvt 0.101601 0.225318 0\nvt 0.101625 0.225318 0\nvt 0.101648 0.225318 0\nvt 0.101671 0.225318 0\nvt 0.101695 0.226509 0\nvt 0.101415 0.226509 0\nvt 0.101438 0.226509 0\nvt 0.101461 0.226509 0\nvt 0.101485 0.226509 0\nvt 0.101508 0.226509 0\nvt 0.101531 0.226509 0\nvt 0.101555 0.226509 0\nvt 0.101578 0.226509 0\nvt 0.101601 0.226509 0\nvt 0.101625 0.226509 0\nvt 0.101648 0.226509 0\nvt 0.101671 0.226509 0\nvt 0.101695 0.227699 0\nvt 0.101415 0.227699 0\nvt 0.101438 0.227699 0\nvt 0.101461 0.227699 0\nvt 0.101485 0.227699 0\nvt 0.101508 0.227699 0\nvt 0.101531 0.227699 0\nvt 0.101555 0.227699 0\nvt 0.101578 0.227699 0\nvt 0.101601 0.227699 0\nvt 0.101625 0.227699 0\nvt 0.101648 0.227699 0\nvt 0.101671 0.227699 0\nvt 0.101695 0.22889 0\nvt 0.101415 0.22889 0\nvt 0.101438 0.22889 0\nvt 0.101461 0.22889 0\nvt 0.101485 0.22889 0\nvt 0.101508 0.22889 0\nvt 0.101531 0.22889 0\nvt 0.101555 0.22889 0\nvt 0.101578 0.22889 0\nvt 0.101601 0.22889 0\nvt 0.101625 0.22889 0\nvt 0.101648 0.22889 0\nvt 0.101671 0.22889 0\nvt 0.101695 0.23008 0\nvt 0.101415 0.23008 0\nvt 0.101438 0.23008 0\nvt 0.101461 0.23008 0\nvt 0.101485 0.23008 0\nvt 0.101508 0.23008 0\nvt 0.101531 0.23008 0\nvt 0.101555 0.23008 0\nvt 0.101578 0.23008 0\nvt 0.101601 0.23008 0\nvt 0.101625 0.23008 0\nvt 0.101648 0.23008 0\nvt 0.101671 0.23008 0\nvt 0.101695 0.231271 0\nvt 0.101415 0.231271 0\nvt 0.101438 0.231271 0\nvt 0.101461 0.231271 0\nvt 0.101485 0.231271 0\nvt 0.101508 0.231271 0\nvt 0.101531 0.231271 0\nvt 0.101555 0.231271 0\nvt 0.101578 0.231271 0\nvt 0.101601 0.231271 0\nvt 0.101625 0.231271 0\nvt 0.101648 0.231271 0\nvt 0.101671 0.231271 0\nvt 0.101695 0.232462 0\nvt 0.101415 0.232462 0\nvt 0.101438 0.232462 0\nvt 0.101461 0.232462 0\nvt 0.101485 0.232462 0\nvt 0.101508 0.232462 0\nvt 0.101531 0.232462 0\nvt 0.101555 0.232462 0\nvt 0.101578 0.232462 0\nvt 0.101601 0.232462 0\nvt 0.101625 0.232462 0\nvt 0.101648 0.232462 0\nvt 0.101671 0.232462 0\nvt 0.103985 0.584928 0\nvt 0.103985 0.585668 0\nvt 0.104965 0.585668 0\nvt 0.104965 0.584928 0\nvt 0.103985 0.586408 0\nvt 0.104965 0.586408 0\nvt 0.103985 0.587148 0\nvt 0.104965 0.587148 0\nvt 0.103985 0.587889 0\nvt 0.104965 0.587889 0\nvt 0.103985 0.588629 0\nvt 0.104965 0.588629 0\nvt 0.103985 0.589369 0\nvt 0.104965 0.589369 0\nvt 0.103985 0.590109 0\nvt 0.104965 0.590109 0\nvt 0.103985 0.590849 0\nvt 0.104965 0.590849 0\nvt 0.103985 0.591589 0\nvt 0.103985 0.567906 0\nvt 0.104965 0.591589 0\nvt 0.104965 0.567906 0\nvt 0.103985 0.568646 0\nvt 0.104965 0.568646 0\nvt 0.103985 0.569387 0\nvt 0.104965 0.569387 0\nvt 0.103985 0.570127 0\nvt 0.104965 0.570127 0\nvt 0.103985 0.570867 0\nvt 0.104965 0.570867 0\nvt 0.103985 0.571607 0\nvt 0.104965 0.571607 0\nvt 0.103985 0.572347 0\nvt 0.104965 0.572347 0\nvt 0.103985 0.573087 0\nvt 0.104965 0.573087 0\nvt 0.103985 0.573827 0\nvt 0.104965 0.573827 0\nvt 0.103985 0.574567 0\nvt 0.104965 0.574567 0\nvt 0.103985 0.575307 0\nvt 0.104965 0.575307 0\nvt 0.103985 0.576047 0\nvt 0.104965 0.576047 0\nvt 0.103985 0.576787 0\nvt 0.104965 0.576787 0\nvt 0.103985 0.577527 0\nvt 0.104965 0.577527 0\nvt 0.103985 0.578268 0\nvt 0.104965 0.578268 0\nvt 0.103985 0.579008 0\nvt 0.104965 0.579008 0\nvt 0.103985 0.579748 0\nvt 0.104965 0.579748 0\nvt 0.103985 0.580488 0\nvt 0.104965 0.580488 0\nvt 0.103985 0.581228 0\nvt 0.104965 0.581228 0\nvt 0.103985 0.581968 0\nvt 0.104965 0.581968 0\nvt 0.103985 0.582708 0\nvt 0.104965 0.582708 0\nvt 0.103985 0.583448 0\nvt 0.104965 0.583448 0\nvt 0.103985 0.584188 0\nvt 0.104965 0.584188 0\nvt 0.104257 0.579008 0\nvt 0.104257 0.579008 0\nvt 0.103768 0.583609 0\nvt 0.103768 0.583098 0\nvt 0.103768 0.584121 0\nvt 0.103768 0.584632 0\nvt 0.103768 0.585143 0\nvt 0.103768 0.585654 0\nvt 0.103768 0.586166 0\nvt 0.103768 0.586677 0\nvt 0.103768 0.587188 0\nvt 0.103768 0.587699 0\nvt 0.103768 0.571338 0\nvt 0.103768 0.571849 0\nvt 0.103768 0.572361 0\nvt 0.103768 0.572872 0\nvt 0.103768 0.573383 0\nvt 0.103768 0.573895 0\nvt 0.103768 0.574406 0\nvt 0.103768 0.574917 0\nvt 0.103768 0.575429 0\nvt 0.103768 0.57594 0\nvt 0.103768 0.576451 0\nvt 0.103768 0.576962 0\nvt 0.103768 0.577474 0\nvt 0.103768 0.577985 0\nvt 0.103768 0.578496 0\nvt 0.103768 0.579008 0\nvt 0.103768 0.579519 0\nvt 0.103768 0.58003 0\nvt 0.103768 0.580541 0\nvt 0.103768 0.581053 0\nvt 0.103768 0.581564 0\nvt 0.103768 0.582075 0\nvt 0.103768 0.582587 0\nvt 0.103811 0.583464 0\nvt 0.103811 0.584021 0\nvt 0.103811 0.584578 0\nvt 0.103811 0.585135 0\nvt 0.103811 0.585692 0\nvt 0.103811 0.586249 0\nvt 0.103811 0.586806 0\nvt 0.103811 0.587363 0\nvt 0.103811 0.58792 0\nvt 0.103811 0.588477 0\nvt 0.103811 0.571209 0\nvt 0.103811 0.571766 0\nvt 0.103811 0.572323 0\nvt 0.103811 0.57288 0\nvt 0.103811 0.573437 0\nvt 0.103811 0.573994 0\nvt 0.103811 0.574551 0\nvt 0.103811 0.575108 0\nvt 0.103811 0.575665 0\nvt 0.103811 0.576222 0\nvt 0.103811 0.576779 0\nvt 0.103811 0.577336 0\nvt 0.103811 0.577893 0\nvt 0.103811 0.578451 0\nvt 0.103811 0.579008 0\nvt 0.103811 0.579565 0\nvt 0.103811 0.580122 0\nvt 0.103811 0.580679 0\nvt 0.103811 0.581236 0\nvt 0.103811 0.581793 0\nvt 0.103811 0.58235 0\nvt 0.103811 0.582907 0\nvt 0.103855 0.58383 0\nvt 0.103855 0.584433 0\nvt 0.103898 0.584196 0\nvt 0.103898 0.584845 0\nvt 0.103942 0.584562 0\nvt 0.103942 0.585256 0\nvt 0.103855 0.585036 0\nvt 0.103898 0.585493 0\nvt 0.103942 0.585951 0\nvt 0.103855 0.585639 0\nvt 0.103898 0.586142 0\nvt 0.103942 0.586645 0\nvt 0.103855 0.586241 0\nvt 0.103898 0.58679 0\nvt 0.103942 0.587339 0\nvt 0.103855 0.586844 0\nvt 0.103898 0.587439 0\nvt 0.103942 0.588034 0\nvt 0.103855 0.587447 0\nvt 0.103898 0.588087 0\nvt 0.103942 0.588728 0\nvt 0.103855 0.58805 0\nvt 0.103898 0.588736 0\nvt 0.103942 0.589422 0\nvt 0.103855 0.588652 0\nvt 0.103898 0.589385 0\nvt 0.103942 0.590117 0\nvt 0.103855 0.589255 0\nvt 0.103898 0.590033 0\nvt 0.103942 0.590811 0\nvt 0.103855 0.570568 0\nvt 0.103898 0.569928 0\nvt 0.103942 0.569287 0\nvt 0.103855 0.571171 0\nvt 0.103898 0.570576 0\nvt 0.103942 0.569981 0\nvt 0.103855 0.571774 0\nvt 0.103898 0.571225 0\nvt 0.103942 0.570676 0\nvt 0.103855 0.572377 0\nvt 0.103898 0.571873 0\nvt 0.103942 0.57137 0\nvt 0.103855 0.57298 0\nvt 0.103898 0.572522 0\nvt 0.103942 0.572064 0\nvt 0.103855 0.573582 0\nvt 0.103898 0.57317 0\nvt 0.103942 0.572759 0\nvt 0.103855 0.574185 0\nvt 0.103898 0.573819 0\nvt 0.103942 0.573453 0\nvt 0.103855 0.574788 0\nvt 0.103898 0.574468 0\nvt 0.103942 0.574147 0\nvt 0.103855 0.575391 0\nvt 0.103898 0.575116 0\nvt 0.103942 0.574842 0\nvt 0.103855 0.575994 0\nvt 0.103898 0.575765 0\nvt 0.103942 0.575536 0\nvt 0.103855 0.576596 0\nvt 0.103898 0.576413 0\nvt 0.103942 0.57623 0\nvt 0.103855 0.577199 0\nvt 0.103898 0.577062 0\nvt 0.103942 0.576925 0\nvt 0.103855 0.577802 0\nvt 0.103898 0.577711 0\nvt 0.103942 0.577619 0\nvt 0.103855 0.578405 0\nvt 0.103898 0.578359 0\nvt 0.103942 0.578313 0\nvt 0.103855 0.579008 0\nvt 0.103898 0.579008 0\nvt 0.103942 0.579008 0\nvt 0.103855 0.57961 0\nvt 0.103898 0.579656 0\nvt 0.103942 0.579702 0\nvt 0.103855 0.580213 0\nvt 0.103898 0.580305 0\nvt 0.103942 0.580396 0\nvt 0.103855 0.580816 0\nvt 0.103898 0.580953 0\nvt 0.103942 0.581091 0\nvt 0.103855 0.581419 0\nvt 0.103898 0.581602 0\nvt 0.103942 0.581785 0\nvt 0.103855 0.582022 0\nvt 0.103898 0.58225 0\nvt 0.103942 0.582479 0\nvt 0.103855 0.582624 0\nvt 0.103898 0.582899 0\nvt 0.103942 0.583174 0\nvt 0.103855 0.583227 0\nvt 0.103898 0.583548 0\nvt 0.103942 0.583868 0\n\nf 4/6 3/4 2/2 1/1 \nf 6/8 5/7 3/3 4/5 \nf 8/10 7/9 5/7 6/8 \nf 10/12 9/11 7/9 8/10 \nf 12/14 11/13 9/11 10/12 \nf 14/16 13/15 11/13 12/14 \nf 16/18 15/17 13/15 14/16 \nf 18/20 17/19 15/17 16/18 \nf 20/22 19/21 17/19 18/20 \nf 22/24 21/23 19/21 20/22 \nf 24/26 23/25 21/23 22/24 \nf 26/28 25/27 23/25 24/26 \nf 28/30 27/29 25/27 26/28 \nf 30/32 29/31 27/29 28/30 \nf 32/34 31/33 29/31 30/32 \nf 34/36 33/35 31/33 32/34 \nf 36/38 35/37 33/35 34/36 \nf 38/40 37/39 35/37 36/38 \nf 40/42 39/41 37/39 38/40 \nf 42/44 41/43 39/41 40/42 \nf 44/46 43/45 41/43 42/44 \nf 46/48 45/47 43/45 44/46 \nf 48/50 47/49 45/47 46/48 \nf 50/52 49/51 47/49 48/50 \nf 52/54 51/53 49/51 50/52 \nf 54/56 53/55 51/53 52/54 \nf 56/58 55/57 53/55 54/56 \nf 58/60 57/59 55/57 56/58 \nf 60/62 59/61 57/59 58/60 \nf 62/64 61/63 59/61 60/62 \nf 64/66 63/65 61/63 62/64 \nf 1/1 2/2 63/65 64/66 \nf 66/69 4/6 1/1 65/67 \nf 67/70 6/8 4/5 66/68 \nf 68/71 8/10 6/8 67/70 \nf 69/72 10/12 8/10 68/71 \nf 70/73 12/14 10/12 69/72 \nf 71/74 14/16 12/14 70/73 \nf 72/75 16/18 14/16 71/74 \nf 73/76 18/20 16/18 72/75 \nf 74/77 20/22 18/20 73/76 \nf 75/78 22/24 20/22 74/77 \nf 76/79 24/26 22/24 75/78 \nf 77/80 26/28 24/26 76/79 \nf 78/81 28/30 26/28 77/80 \nf 79/82 30/32 28/30 78/81 \nf 80/83 32/34 30/32 79/82 \nf 81/84 34/36 32/34 80/83 \nf 82/85 36/38 34/36 81/84 \nf 83/86 38/40 36/38 82/85 \nf 84/87 40/42 38/40 83/86 \nf 85/88 42/44 40/42 84/87 \nf 86/89 44/46 42/44 85/88 \nf 87/90 46/48 44/46 86/89 \nf 88/91 48/50 46/48 87/90 \nf 89/92 50/52 48/50 88/91 \nf 90/93 52/54 50/52 89/92 \nf 91/94 54/56 52/54 90/93 \nf 92/95 56/58 54/56 91/94 \nf 93/96 58/60 56/58 92/95 \nf 94/97 60/62 58/60 93/96 \nf 95/98 62/64 60/62 94/97 \nf 96/99 64/66 62/64 95/98 \nf 65/67 1/1 64/66 96/99 \nf 98/102 66/69 65/67 97/100 \nf 99/103 67/70 66/68 98/101 \nf 100/104 68/71 67/70 99/103 \nf 101/105 69/72 68/71 100/104 \nf 102/106 70/73 69/72 101/105 \nf 103/107 71/74 70/73 102/106 \nf 104/108 72/75 71/74 103/107 \nf 105/109 73/76 72/75 104/108 \nf 106/110 74/77 73/76 105/109 \nf 107/111 75/78 74/77 106/110 \nf 108/112 76/79 75/78 107/111 \nf 109/113 77/80 76/79 108/112 \nf 110/114 78/81 77/80 109/113 \nf 111/115 79/82 78/81 110/114 \nf 112/116 80/83 79/82 111/115 \nf 113/117 81/84 80/83 112/116 \nf 114/118 82/85 81/84 113/117 \nf 115/119 83/86 82/85 114/118 \nf 116/120 84/87 83/86 115/119 \nf 117/121 85/88 84/87 116/120 \nf 118/122 86/89 85/88 117/121 \nf 119/123 87/90 86/89 118/122 \nf 120/124 88/91 87/90 119/123 \nf 121/125 89/92 88/91 120/124 \nf 122/126 90/93 89/92 121/125 \nf 123/127 91/94 90/93 122/126 \nf 124/128 92/95 91/94 123/127 \nf 125/129 93/96 92/95 124/128 \nf 126/130 94/97 93/96 125/129 \nf 127/131 95/98 94/97 126/130 \nf 128/132 96/99 95/98 127/131 \nf 97/100 65/67 96/99 128/132 \nf 130/135 98/102 97/100 129/133 \nf 131/136 99/103 98/101 130/134 \nf 132/137 100/104 99/103 131/136 \nf 133/138 101/105 100/104 132/137 \nf 134/139 102/106 101/105 133/138 \nf 135/140 103/107 102/106 134/139 \nf 136/141 104/108 103/107 135/140 \nf 137/142 105/109 104/108 136/141 \nf 138/143 106/110 105/109 137/142 \nf 139/144 107/111 106/110 138/143 \nf 140/145 108/112 107/111 139/144 \nf 141/146 109/113 108/112 140/145 \nf 142/147 110/114 109/113 141/146 \nf 143/148 111/115 110/114 142/147 \nf 144/149 112/116 111/115 143/148 \nf 145/150 113/117 112/116 144/149 \nf 146/151 114/118 113/117 145/150 \nf 147/152 115/119 114/118 146/151 \nf 148/153 116/120 115/119 147/152 \nf 149/154 117/121 116/120 148/153 \nf 150/155 118/122 117/121 149/154 \nf 151/156 119/123 118/122 150/155 \nf 152/157 120/124 119/123 151/156 \nf 153/158 121/125 120/124 152/157 \nf 154/159 122/126 121/125 153/158 \nf 155/160 123/127 122/126 154/159 \nf 156/161 124/128 123/127 155/160 \nf 157/162 125/129 124/128 156/161 \nf 158/163 126/130 125/129 157/162 \nf 159/164 127/131 126/130 158/163 \nf 160/165 128/132 127/131 159/164 \nf 129/133 97/100 128/132 160/165 \nf 162/168 130/135 129/133 161/166 \nf 163/169 131/136 130/134 162/167 \nf 164/170 132/137 131/136 163/169 \nf 165/171 133/138 132/137 164/170 \nf 166/172 134/139 133/138 165/171 \nf 167/173 135/140 134/139 166/172 \nf 168/174 136/141 135/140 167/173 \nf 169/175 137/142 136/141 168/174 \nf 170/176 138/143 137/142 169/175 \nf 171/177 139/144 138/143 170/176 \nf 172/178 140/145 139/144 171/177 \nf 173/179 141/146 140/145 172/178 \nf 174/180 142/147 141/146 173/179 \nf 175/181 143/148 142/147 174/180 \nf 176/182 144/149 143/148 175/181 \nf 177/183 145/150 144/149 176/182 \nf 178/184 146/151 145/150 177/183 \nf 179/185 147/152 146/151 178/184 \nf 180/186 148/153 147/152 179/185 \nf 181/187 149/154 148/153 180/186 \nf 182/188 150/155 149/154 181/187 \nf 183/189 151/156 150/155 182/188 \nf 184/190 152/157 151/156 183/189 \nf 185/191 153/158 152/157 184/190 \nf 186/192 154/159 153/158 185/191 \nf 187/193 155/160 154/159 186/192 \nf 188/194 156/161 155/160 187/193 \nf 189/195 157/162 156/161 188/194 \nf 190/196 158/163 157/162 189/195 \nf 191/197 159/164 158/163 190/196 \nf 192/198 160/165 159/164 191/197 \nf 161/166 129/133 160/165 192/198 \nf 194/201 162/168 161/166 193/199 \nf 195/202 163/169 162/167 194/200 \nf 196/203 164/170 163/169 195/202 \nf 197/204 165/171 164/170 196/203 \nf 198/205 166/172 165/171 197/204 \nf 199/206 167/173 166/172 198/205 \nf 200/207 168/174 167/173 199/206 \nf 201/208 169/175 168/174 200/207 \nf 202/209 170/176 169/175 201/208 \nf 203/210 171/177 170/176 202/209 \nf 204/211 172/178 171/177 203/210 \nf 205/212 173/179 172/178 204/211 \nf 206/213 174/180 173/179 205/212 \nf 207/214 175/181 174/180 206/213 \nf 208/215 176/182 175/181 207/214 \nf 209/216 177/183 176/182 208/215 \nf 210/217 178/184 177/183 209/216 \nf 211/218 179/185 178/184 210/217 \nf 212/219 180/186 179/185 211/218 \nf 213/220 181/187 180/186 212/219 \nf 214/221 182/188 181/187 213/220 \nf 215/222 183/189 182/188 214/221 \nf 216/223 184/190 183/189 215/222 \nf 217/224 185/191 184/190 216/223 \nf 218/225 186/192 185/191 217/224 \nf 219/226 187/193 186/192 218/225 \nf 220/227 188/194 187/193 219/226 \nf 221/228 189/195 188/194 220/227 \nf 222/229 190/196 189/195 221/228 \nf 223/230 191/197 190/196 222/229 \nf 224/231 192/198 191/197 223/230 \nf 193/199 161/166 192/198 224/231 \nf 226/234 194/201 193/199 225/232 \nf 227/235 195/202 194/200 226/233 \nf 228/236 196/203 195/202 227/235 \nf 229/237 197/204 196/203 228/236 \nf 230/238 198/205 197/204 229/237 \nf 231/239 199/206 198/205 230/238 \nf 232/240 200/207 199/206 231/239 \nf 233/241 201/208 200/207 232/240 \nf 234/242 202/209 201/208 233/241 \nf 235/243 203/210 202/209 234/242 \nf 236/244 204/211 203/210 235/243 \nf 237/245 205/212 204/211 236/244 \nf 238/246 206/213 205/212 237/245 \nf 239/247 207/214 206/213 238/246 \nf 240/248 208/215 207/214 239/247 \nf 241/249 209/216 208/215 240/248 \nf 242/250 210/217 209/216 241/249 \nf 243/251 211/218 210/217 242/250 \nf 244/252 212/219 211/218 243/251 \nf 245/253 213/220 212/219 244/252 \nf 246/254 214/221 213/220 245/253 \nf 247/255 215/222 214/221 246/254 \nf 248/256 216/223 215/222 247/255 \nf 249/257 217/224 216/223 248/256 \nf 250/258 218/225 217/224 249/257 \nf 251/259 219/226 218/225 250/258 \nf 252/260 220/227 219/226 251/259 \nf 253/261 221/228 220/227 252/260 \nf 254/262 222/229 221/228 253/261 \nf 255/263 223/230 222/229 254/262 \nf 256/264 224/231 223/230 255/263 \nf 225/232 193/199 224/231 256/264 \nf 258/267 226/234 225/232 257/265 \nf 259/268 227/235 226/233 258/266 \nf 260/269 228/236 227/235 259/268 \nf 261/270 229/237 228/236 260/269 \nf 262/271 230/238 229/237 261/270 \nf 263/272 231/239 230/238 262/271 \nf 264/273 232/240 231/239 263/272 \nf 265/274 233/241 232/240 264/273 \nf 266/275 234/242 233/241 265/274 \nf 267/276 235/243 234/242 266/275 \nf 268/277 236/244 235/243 267/276 \nf 269/278 237/245 236/244 268/277 \nf 270/279 238/246 237/245 269/278 \nf 271/280 239/247 238/246 270/279 \nf 272/281 240/248 239/247 271/280 \nf 273/282 241/249 240/248 272/281 \nf 274/283 242/250 241/249 273/282 \nf 275/284 243/251 242/250 274/283 \nf 276/285 244/252 243/251 275/284 \nf 277/286 245/253 244/252 276/285 \nf 278/287 246/254 245/253 277/286 \nf 279/288 247/255 246/254 278/287 \nf 280/289 248/256 247/255 279/288 \nf 281/290 249/257 248/256 280/289 \nf 282/291 250/258 249/257 281/290 \nf 283/292 251/259 250/258 282/291 \nf 284/293 252/260 251/259 283/292 \nf 285/294 253/261 252/260 284/293 \nf 286/295 254/262 253/261 285/294 \nf 287/296 255/263 254/262 286/295 \nf 288/297 256/264 255/263 287/296 \nf 257/265 225/232 256/264 288/297 \nf 290/300 258/267 257/265 289/298 \nf 291/301 259/268 258/266 290/299 \nf 292/302 260/269 259/268 291/301 \nf 293/303 261/270 260/269 292/302 \nf 294/304 262/271 261/270 293/303 \nf 295/305 263/272 262/271 294/304 \nf 296/306 264/273 263/272 295/305 \nf 297/307 265/274 264/273 296/306 \nf 298/308 266/275 265/274 297/307 \nf 299/309 267/276 266/275 298/308 \nf 300/310 268/277 267/276 299/309 \nf 301/311 269/278 268/277 300/310 \nf 302/312 270/279 269/278 301/311 \nf 303/313 271/280 270/279 302/312 \nf 304/314 272/281 271/280 303/313 \nf 305/315 273/282 272/281 304/314 \nf 306/316 274/283 273/282 305/315 \nf 307/317 275/284 274/283 306/316 \nf 308/318 276/285 275/284 307/317 \nf 309/319 277/286 276/285 308/318 \nf 310/320 278/287 277/286 309/319 \nf 311/321 279/288 278/287 310/320 \nf 312/322 280/289 279/288 311/321 \nf 313/323 281/290 280/289 312/322 \nf 314/324 282/291 281/290 313/323 \nf 315/325 283/292 282/291 314/324 \nf 316/326 284/293 283/292 315/325 \nf 317/327 285/294 284/293 316/326 \nf 318/328 286/295 285/294 317/327 \nf 319/329 287/296 286/295 318/328 \nf 320/330 288/297 287/296 319/329 \nf 289/298 257/265 288/297 320/330 \nf 322/333 290/300 289/298 321/331 \nf 323/334 291/301 290/299 322/332 \nf 324/335 292/302 291/301 323/334 \nf 325/336 293/303 292/302 324/335 \nf 326/337 294/304 293/303 325/336 \nf 327/338 295/305 294/304 326/337 \nf 328/339 296/306 295/305 327/338 \nf 329/340 297/307 296/306 328/339 \nf 330/341 298/308 297/307 329/340 \nf 331/342 299/309 298/308 330/341 \nf 332/343 300/310 299/309 331/342 \nf 333/344 301/311 300/310 332/343 \nf 334/345 302/312 301/311 333/344 \nf 335/346 303/313 302/312 334/345 \nf 336/347 304/314 303/313 335/346 \nf 337/348 305/315 304/314 336/347 \nf 338/349 306/316 305/315 337/348 \nf 339/350 307/317 306/316 338/349 \nf 340/351 308/318 307/317 339/350 \nf 341/352 309/319 308/318 340/351 \nf 342/353 310/320 309/319 341/352 \nf 343/354 311/321 310/320 342/353 \nf 344/355 312/322 311/321 343/354 \nf 345/356 313/323 312/322 344/355 \nf 346/357 314/324 313/323 345/356 \nf 347/358 315/325 314/324 346/357 \nf 348/359 316/326 315/325 347/358 \nf 349/360 317/327 316/326 348/359 \nf 350/361 318/328 317/327 349/360 \nf 351/362 319/329 318/328 350/361 \nf 352/363 320/330 319/329 351/362 \nf 321/331 289/298 320/330 352/363 \nf 354/366 322/333 321/331 353/364 \nf 355/367 323/334 322/332 354/365 \nf 356/368 324/335 323/334 355/367 \nf 357/369 325/336 324/335 356/368 \nf 358/370 326/337 325/336 357/369 \nf 359/371 327/338 326/337 358/370 \nf 360/372 328/339 327/338 359/371 \nf 361/373 329/340 328/339 360/372 \nf 362/374 330/341 329/340 361/373 \nf 363/375 331/342 330/341 362/374 \nf 364/376 332/343 331/342 363/375 \nf 365/377 333/344 332/343 364/376 \nf 366/378 334/345 333/344 365/377 \nf 367/379 335/346 334/345 366/378 \nf 368/380 336/347 335/346 367/379 \nf 369/381 337/348 336/347 368/380 \nf 370/382 338/349 337/348 369/381 \nf 371/383 339/350 338/349 370/382 \nf 372/384 340/351 339/350 371/383 \nf 373/385 341/352 340/351 372/384 \nf 374/386 342/353 341/352 373/385 \nf 375/387 343/354 342/353 374/386 \nf 376/388 344/355 343/354 375/387 \nf 377/389 345/356 344/355 376/388 \nf 378/390 346/357 345/356 377/389 \nf 379/391 347/358 346/357 378/390 \nf 380/392 348/359 347/358 379/391 \nf 381/393 349/360 348/359 380/392 \nf 382/394 350/361 349/360 381/393 \nf 383/395 351/362 350/361 382/394 \nf 384/396 352/363 351/362 383/395 \nf 353/364 321/331 352/363 384/396 \nf 386/399 354/366 353/364 385/397 \nf 387/400 355/367 354/365 386/398 \nf 388/401 356/368 355/367 387/400 \nf 389/402 357/369 356/368 388/401 \nf 390/403 358/370 357/369 389/402 \nf 391/404 359/371 358/370 390/403 \nf 392/405 360/372 359/371 391/404 \nf 393/406 361/373 360/372 392/405 \nf 394/407 362/374 361/373 393/406 \nf 395/408 363/375 362/374 394/407 \nf 396/409 364/376 363/375 395/408 \nf 397/410 365/377 364/376 396/409 \nf 398/411 366/378 365/377 397/410 \nf 399/412 367/379 366/378 398/411 \nf 400/413 368/380 367/379 399/412 \nf 401/414 369/381 368/380 400/413 \nf 402/415 370/382 369/381 401/414 \nf 403/416 371/383 370/382 402/415 \nf 404/417 372/384 371/383 403/416 \nf 405/418 373/385 372/384 404/417 \nf 406/419 374/386 373/385 405/418 \nf 407/420 375/387 374/386 406/419 \nf 408/421 376/388 375/387 407/420 \nf 409/422 377/389 376/388 408/421 \nf 410/423 378/390 377/389 409/422 \nf 411/424 379/391 378/390 410/423 \nf 412/425 380/392 379/391 411/424 \nf 413/426 381/393 380/392 412/425 \nf 414/427 382/394 381/393 413/426 \nf 415/428 383/395 382/394 414/427 \nf 416/429 384/396 383/395 415/428 \nf 385/397 353/364 384/396 416/429 \nf 418/432 386/399 385/397 417/430 \nf 419/433 387/400 386/398 418/431 \nf 420/434 388/401 387/400 419/433 \nf 421/435 389/402 388/401 420/434 \nf 422/436 390/403 389/402 421/435 \nf 423/437 391/404 390/403 422/436 \nf 424/438 392/405 391/404 423/437 \nf 425/439 393/406 392/405 424/438 \nf 426/440 394/407 393/406 425/439 \nf 427/441 395/408 394/407 426/440 \nf 428/442 396/409 395/408 427/441 \nf 429/443 397/410 396/409 428/442 \nf 430/444 398/411 397/410 429/443 \nf 431/445 399/412 398/411 430/444 \nf 432/446 400/413 399/412 431/445 \nf 433/447 401/414 400/413 432/446 \nf 434/448 402/415 401/414 433/447 \nf 435/449 403/416 402/415 434/448 \nf 436/450 404/417 403/416 435/449 \nf 437/451 405/418 404/417 436/450 \nf 438/452 406/419 405/418 437/451 \nf 439/453 407/420 406/419 438/452 \nf 440/454 408/421 407/420 439/453 \nf 441/455 409/422 408/421 440/454 \nf 442/456 410/423 409/422 441/455 \nf 443/457 411/424 410/423 442/456 \nf 444/458 412/425 411/424 443/457 \nf 445/459 413/426 412/425 444/458 \nf 446/460 414/427 413/426 445/459 \nf 447/461 415/428 414/427 446/460 \nf 448/462 416/429 415/428 447/461 \nf 417/430 385/397 416/429 448/462 \nf 450/466 418/432 417/430 449/463 \nf 451/467 419/433 418/431 450/465 \nf 452/468 420/434 419/433 451/467 \nf 453/469 421/435 420/434 452/468 \nf 454/470 422/436 421/435 453/469 \nf 455/471 423/437 422/436 454/470 \nf 456/472 424/438 423/437 455/471 \nf 457/473 425/439 424/438 456/472 \nf 458/474 426/440 425/439 457/473 \nf 459/475 427/441 426/440 458/474 \nf 460/476 428/442 427/441 459/475 \nf 461/477 429/443 428/442 460/476 \nf 462/478 430/444 429/443 461/477 \nf 463/479 431/445 430/444 462/478 \nf 464/480 432/446 431/445 463/479 \nf 465/481 433/447 432/446 464/480 \nf 466/482 434/448 433/447 465/481 \nf 467/483 435/449 434/448 466/482 \nf 468/484 436/450 435/449 467/483 \nf 469/485 437/451 436/450 468/484 \nf 470/486 438/452 437/451 469/485 \nf 471/487 439/453 438/452 470/486 \nf 472/488 440/454 439/453 471/487 \nf 473/489 441/455 440/454 472/488 \nf 474/490 442/456 441/455 473/489 \nf 475/491 443/457 442/456 474/490 \nf 476/492 444/458 443/457 475/491 \nf 477/493 445/459 444/458 476/492 \nf 478/494 446/460 445/459 477/493 \nf 479/495 447/461 446/460 478/494 \nf 480/496 448/462 447/461 479/495 \nf 449/463 417/430 448/462 480/496 \nf 481/498 450/465 449/464 \nf 481/497 451/467 450/465 \nf 481/497 452/468 451/467 \nf 481/497 453/469 452/468 \nf 481/497 454/470 453/469 \nf 481/497 455/471 454/470 \nf 481/497 456/472 455/471 \nf 481/497 457/473 456/472 \nf 481/497 458/474 457/473 \nf 481/497 459/475 458/474 \nf 481/497 460/476 459/475 \nf 481/497 461/477 460/476 \nf 481/497 462/478 461/477 \nf 481/497 463/479 462/478 \nf 481/497 464/480 463/479 \nf 481/497 465/481 464/480 \nf 481/497 466/482 465/481 \nf 481/497 467/483 466/482 \nf 481/497 468/484 467/483 \nf 481/497 469/485 468/484 \nf 481/497 470/486 469/485 \nf 481/497 471/487 470/486 \nf 481/497 472/488 471/487 \nf 481/497 473/489 472/488 \nf 481/497 474/490 473/489 \nf 481/497 475/491 474/490 \nf 481/497 476/492 475/491 \nf 481/497 477/493 476/492 \nf 481/497 478/494 477/493 \nf 481/497 479/495 478/494 \nf 481/497 480/496 479/495 \nf 481/497 449/463 480/496 \nf 485/504 484/503 483/501 482/499 \nf 484/502 487/506 486/505 483/500 \nf 487/506 489/508 488/507 486/505 \nf 489/508 491/510 490/509 488/507 \nf 491/510 493/512 492/511 490/509 \nf 493/512 495/514 494/513 492/511 \nf 495/514 497/516 496/515 494/513 \nf 497/516 499/518 498/517 496/515 \nf 499/518 501/520 500/519 498/517 \nf 501/520 503/522 502/521 500/519 \nf 503/522 505/524 504/523 502/521 \nf 505/524 507/526 506/525 504/523 \nf 507/526 509/528 508/527 506/525 \nf 509/528 511/530 510/529 508/527 \nf 511/530 513/532 512/531 510/529 \nf 513/532 515/534 514/533 512/531 \nf 515/534 517/536 516/535 514/533 \nf 517/536 519/538 518/537 516/535 \nf 519/538 521/540 520/539 518/537 \nf 521/540 523/542 522/541 520/539 \nf 523/542 525/544 524/543 522/541 \nf 525/544 527/546 526/545 524/543 \nf 527/546 529/548 528/547 526/545 \nf 529/548 531/550 530/549 528/547 \nf 531/550 533/552 532/551 530/549 \nf 533/552 535/554 534/553 532/551 \nf 535/554 537/556 536/555 534/553 \nf 537/556 539/558 538/557 536/555 \nf 539/558 541/560 540/559 538/557 \nf 541/560 543/562 542/561 540/559 \nf 543/562 545/564 544/563 542/561 \nf 545/564 485/504 482/499 544/563 \nf 547/567 484/503 485/504 546/565 \nf 548/568 487/506 484/502 547/566 \nf 549/569 489/508 487/506 548/568 \nf 550/570 491/510 489/508 549/569 \nf 551/571 493/512 491/510 550/570 \nf 552/572 495/514 493/512 551/571 \nf 553/573 497/516 495/514 552/572 \nf 554/574 499/518 497/516 553/573 \nf 555/575 501/520 499/518 554/574 \nf 556/576 503/522 501/520 555/575 \nf 557/577 505/524 503/522 556/576 \nf 558/578 507/526 505/524 557/577 \nf 559/579 509/528 507/526 558/578 \nf 560/580 511/530 509/528 559/579 \nf 561/581 513/532 511/530 560/580 \nf 562/582 515/534 513/532 561/581 \nf 563/583 517/536 515/534 562/582 \nf 564/584 519/538 517/536 563/583 \nf 565/585 521/540 519/538 564/584 \nf 566/586 523/542 521/540 565/585 \nf 567/587 525/544 523/542 566/586 \nf 568/588 527/546 525/544 567/587 \nf 569/589 529/548 527/546 568/588 \nf 570/590 531/550 529/548 569/589 \nf 571/591 533/552 531/550 570/590 \nf 572/592 535/554 533/552 571/591 \nf 573/593 537/556 535/554 572/592 \nf 574/594 539/558 537/556 573/593 \nf 575/595 541/560 539/558 574/594 \nf 576/596 543/562 541/560 575/595 \nf 577/597 545/564 543/562 576/596 \nf 546/565 485/504 545/564 577/597 \nf 579/600 547/567 546/565 578/598 \nf 3/4 579/600 578/598 2/2 \nf 580/601 548/568 547/566 579/599 \nf 5/7 580/601 579/599 3/3 \nf 581/602 549/569 548/568 580/601 \nf 7/9 581/602 580/601 5/7 \nf 582/603 550/570 549/569 581/602 \nf 9/11 582/603 581/602 7/9 \nf 583/604 551/571 550/570 582/603 \nf 11/13 583/604 582/603 9/11 \nf 584/605 552/572 551/571 583/604 \nf 13/15 584/605 583/604 11/13 \nf 585/606 553/573 552/572 584/605 \nf 15/17 585/606 584/605 13/15 \nf 586/607 554/574 553/573 585/606 \nf 17/19 586/607 585/606 15/17 \nf 587/608 555/575 554/574 586/607 \nf 19/21 587/608 586/607 17/19 \nf 588/609 556/576 555/575 587/608 \nf 21/23 588/609 587/608 19/21 \nf 589/610 557/577 556/576 588/609 \nf 23/25 589/610 588/609 21/23 \nf 590/611 558/578 557/577 589/610 \nf 25/27 590/611 589/610 23/25 \nf 591/612 559/579 558/578 590/611 \nf 27/29 591/612 590/611 25/27 \nf 592/613 560/580 559/579 591/612 \nf 29/31 592/613 591/612 27/29 \nf 593/614 561/581 560/580 592/613 \nf 31/33 593/614 592/613 29/31 \nf 594/615 562/582 561/581 593/614 \nf 33/35 594/615 593/614 31/33 \nf 595/616 563/583 562/582 594/615 \nf 35/37 595/616 594/615 33/35 \nf 596/617 564/584 563/583 595/616 \nf 37/39 596/617 595/616 35/37 \nf 597/618 565/585 564/584 596/617 \nf 39/41 597/618 596/617 37/39 \nf 598/619 566/586 565/585 597/618 \nf 41/43 598/619 597/618 39/41 \nf 599/620 567/587 566/586 598/619 \nf 43/45 599/620 598/619 41/43 \nf 600/621 568/588 567/587 599/620 \nf 45/47 600/621 599/620 43/45 \nf 601/622 569/589 568/588 600/621 \nf 47/49 601/622 600/621 45/47 \nf 602/623 570/590 569/589 601/622 \nf 49/51 602/623 601/622 47/49 \nf 603/624 571/591 570/590 602/623 \nf 51/53 603/624 602/623 49/51 \nf 604/625 572/592 571/591 603/624 \nf 53/55 604/625 603/624 51/53 \nf 605/626 573/593 572/592 604/625 \nf 55/57 605/626 604/625 53/55 \nf 606/627 574/594 573/593 605/626 \nf 57/59 606/627 605/626 55/57 \nf 607/628 575/595 574/594 606/627 \nf 59/61 607/628 606/627 57/59 \nf 608/629 576/596 575/595 607/628 \nf 61/63 608/629 607/628 59/61 \nf 609/630 577/597 576/596 608/629 \nf 63/65 609/630 608/629 61/63 \nf 578/598 546/565 577/597 609/630 \nf 2/2 578/598 609/630 63/65 \nf 613/639 612/635 611/633 610/632 \nf 612/635 615/642 614/640 611/633 \nf 615/642 617/645 616/643 614/640 \nf 617/645 619/648 618/646 616/643 \nf 619/648 621/651 620/649 618/646 \nf 621/651 623/654 622/652 620/649 \nf 623/654 625/657 624/655 622/652 \nf 625/657 627/660 626/658 624/655 \nf 627/660 629/663 628/661 626/658 \nf 629/663 631/666 630/664 628/661 \nf 631/666 633/669 632/667 630/664 \nf 633/669 613/638 610/631 632/667 \nf 610/632 611/633 635/672 634/671 \nf 611/633 614/640 636/673 635/672 \nf 614/640 616/643 637/674 636/673 \nf 616/643 618/646 638/675 637/674 \nf 618/646 620/649 639/676 638/675 \nf 620/649 622/652 640/677 639/676 \nf 622/652 624/655 641/678 640/677 \nf 624/655 626/658 642/679 641/678 \nf 626/658 628/661 643/680 642/679 \nf 628/661 630/664 644/681 643/680 \nf 630/664 632/667 645/682 644/681 \nf 632/667 610/631 634/670 645/682 \nf 634/671 635/672 647/685 646/684 \nf 635/672 636/673 648/686 647/685 \nf 636/673 637/674 649/687 648/686 \nf 637/674 638/675 650/688 649/687 \nf 638/675 639/676 651/689 650/688 \nf 639/676 640/677 652/690 651/689 \nf 640/677 641/678 653/691 652/690 \nf 641/678 642/679 654/692 653/691 \nf 642/679 643/680 655/693 654/692 \nf 643/680 644/681 656/694 655/693 \nf 644/681 645/682 657/695 656/694 \nf 645/682 634/670 646/683 657/695 \nf 646/684 647/685 659/698 658/697 \nf 647/685 648/686 660/699 659/698 \nf 648/686 649/687 661/700 660/699 \nf 649/687 650/688 662/701 661/700 \nf 650/688 651/689 663/702 662/701 \nf 651/689 652/690 664/703 663/702 \nf 652/690 653/691 665/704 664/703 \nf 653/691 654/692 666/705 665/704 \nf 654/692 655/693 667/706 666/705 \nf 655/693 656/694 668/707 667/706 \nf 656/694 657/695 669/708 668/707 \nf 657/695 646/683 658/696 669/708 \nf 658/697 659/698 671/711 670/710 \nf 659/698 660/699 672/712 671/711 \nf 660/699 661/700 673/713 672/712 \nf 661/700 662/701 674/714 673/713 \nf 662/701 663/702 675/715 674/714 \nf 663/702 664/703 676/716 675/715 \nf 664/703 665/704 677/717 676/716 \nf 665/704 666/705 678/718 677/717 \nf 666/705 667/706 679/719 678/718 \nf 667/706 668/707 680/720 679/719 \nf 668/707 669/708 681/721 680/720 \nf 669/708 658/696 670/709 681/721 \nf 670/710 671/711 683/724 682/723 \nf 671/711 672/712 684/725 683/724 \nf 672/712 673/713 685/726 684/725 \nf 673/713 674/714 686/727 685/726 \nf 674/714 675/715 687/728 686/727 \nf 675/715 676/716 688/729 687/728 \nf 676/716 677/717 689/730 688/729 \nf 677/717 678/718 690/731 689/730 \nf 678/718 679/719 691/732 690/731 \nf 679/719 680/720 692/733 691/732 \nf 680/720 681/721 693/734 692/733 \nf 681/721 670/709 682/722 693/734 \nf 682/723 683/724 695/737 694/736 \nf 683/724 684/725 696/738 695/737 \nf 684/725 685/726 697/739 696/738 \nf 685/726 686/727 698/740 697/739 \nf 686/727 687/728 699/741 698/740 \nf 687/728 688/729 700/742 699/741 \nf 688/729 689/730 701/743 700/742 \nf 689/730 690/731 702/744 701/743 \nf 690/731 691/732 703/745 702/744 \nf 691/732 692/733 704/746 703/745 \nf 692/733 693/734 705/747 704/746 \nf 693/734 682/722 694/735 705/747 \nf 694/736 695/737 707/750 706/749 \nf 695/737 696/738 708/751 707/750 \nf 696/738 697/739 709/752 708/751 \nf 697/739 698/740 710/753 709/752 \nf 698/740 699/741 711/754 710/753 \nf 699/741 700/742 712/755 711/754 \nf 700/742 701/743 713/756 712/755 \nf 701/743 702/744 714/757 713/756 \nf 702/744 703/745 715/758 714/757 \nf 703/745 704/746 716/759 715/758 \nf 704/746 705/747 717/760 716/759 \nf 705/747 694/735 706/748 717/760 \nf 706/749 707/750 719/763 718/762 \nf 707/750 708/751 720/764 719/763 \nf 708/751 709/752 721/765 720/764 \nf 709/752 710/753 722/766 721/765 \nf 710/753 711/754 723/767 722/766 \nf 711/754 712/755 724/768 723/767 \nf 712/755 713/756 725/769 724/768 \nf 713/756 714/757 726/770 725/769 \nf 714/757 715/758 727/771 726/770 \nf 715/758 716/759 728/772 727/771 \nf 716/759 717/760 729/773 728/772 \nf 717/760 706/748 718/761 729/773 \nf 718/762 719/763 731/776 730/775 \nf 719/763 720/764 732/777 731/776 \nf 720/764 721/765 733/778 732/777 \nf 721/765 722/766 734/779 733/778 \nf 722/766 723/767 735/780 734/779 \nf 723/767 724/768 736/781 735/780 \nf 724/768 725/769 737/782 736/781 \nf 725/769 726/770 738/783 737/782 \nf 726/770 727/771 739/784 738/783 \nf 727/771 728/772 740/785 739/784 \nf 728/772 729/773 741/786 740/785 \nf 729/773 718/761 730/774 741/786 \nf 730/775 731/776 743/789 742/788 \nf 731/776 732/777 744/790 743/789 \nf 732/777 733/778 745/791 744/790 \nf 733/778 734/779 746/792 745/791 \nf 734/779 735/780 747/793 746/792 \nf 735/780 736/781 748/794 747/793 \nf 736/781 737/782 749/795 748/794 \nf 737/782 738/783 750/796 749/795 \nf 738/783 739/784 751/797 750/796 \nf 739/784 740/785 752/798 751/797 \nf 740/785 741/786 753/799 752/798 \nf 741/786 730/774 742/787 753/799 \nf 742/788 743/789 755/802 754/801 \nf 743/789 744/790 756/803 755/802 \nf 744/790 745/791 757/804 756/803 \nf 745/791 746/792 758/805 757/804 \nf 746/792 747/793 759/806 758/805 \nf 747/793 748/794 760/807 759/806 \nf 748/794 749/795 761/808 760/807 \nf 749/795 750/796 762/809 761/808 \nf 750/796 751/797 763/810 762/809 \nf 751/797 752/798 764/811 763/810 \nf 752/798 753/799 765/812 764/811 \nf 753/799 742/787 754/800 765/812 \nf 754/801 755/802 767/815 766/814 \nf 755/802 756/803 768/816 767/815 \nf 756/803 757/804 769/817 768/816 \nf 757/804 758/805 770/818 769/817 \nf 758/805 759/806 771/819 770/818 \nf 759/806 760/807 772/820 771/819 \nf 760/807 761/808 773/821 772/820 \nf 761/808 762/809 774/822 773/821 \nf 762/809 763/810 775/823 774/822 \nf 763/810 764/811 776/824 775/823 \nf 764/811 765/812 777/825 776/824 \nf 765/812 754/800 766/813 777/825 \nf 766/814 767/815 779/828 778/827 \nf 767/815 768/816 780/829 779/828 \nf 768/816 769/817 781/830 780/829 \nf 769/817 770/818 782/831 781/830 \nf 770/818 771/819 783/832 782/831 \nf 771/819 772/820 784/833 783/832 \nf 772/820 773/821 785/834 784/833 \nf 773/821 774/822 786/835 785/834 \nf 774/822 775/823 787/836 786/835 \nf 775/823 776/824 788/837 787/836 \nf 776/824 777/825 789/838 788/837 \nf 777/825 766/813 778/826 789/838 \nf 778/827 779/828 791/841 790/840 \nf 779/828 780/829 792/842 791/841 \nf 780/829 781/830 793/843 792/842 \nf 781/830 782/831 794/844 793/843 \nf 782/831 783/832 795/845 794/844 \nf 783/832 784/833 796/846 795/845 \nf 784/833 785/834 797/847 796/846 \nf 785/834 786/835 798/848 797/847 \nf 786/835 787/836 799/849 798/848 \nf 787/836 788/837 800/850 799/849 \nf 788/837 789/838 801/851 800/850 \nf 789/838 778/826 790/839 801/851 \nf 790/840 791/841 803/854 802/853 \nf 791/841 792/842 804/855 803/854 \nf 792/842 793/843 805/856 804/855 \nf 793/843 794/844 806/857 805/856 \nf 794/844 795/845 807/858 806/857 \nf 795/845 796/846 808/859 807/858 \nf 796/846 797/847 809/860 808/859 \nf 797/847 798/848 810/861 809/860 \nf 798/848 799/849 811/862 810/861 \nf 799/849 800/850 812/863 811/862 \nf 800/850 801/851 813/864 812/863 \nf 801/851 790/839 802/852 813/864 \nf 802/853 803/854 815/867 814/866 \nf 803/854 804/855 816/868 815/867 \nf 804/855 805/856 817/869 816/868 \nf 805/856 806/857 818/870 817/869 \nf 806/857 807/858 819/871 818/870 \nf 807/858 808/859 820/872 819/871 \nf 808/859 809/860 821/873 820/872 \nf 809/860 810/861 822/874 821/873 \nf 810/861 811/862 823/875 822/874 \nf 811/862 812/863 824/876 823/875 \nf 812/863 813/864 825/877 824/876 \nf 813/864 802/852 814/865 825/877 \nf 814/866 815/867 827/880 826/879 \nf 815/867 816/868 828/881 827/880 \nf 816/868 817/869 829/882 828/881 \nf 817/869 818/870 830/883 829/882 \nf 818/870 819/871 831/884 830/883 \nf 819/871 820/872 832/885 831/884 \nf 820/872 821/873 833/886 832/885 \nf 821/873 822/874 834/887 833/886 \nf 822/874 823/875 835/888 834/887 \nf 823/875 824/876 836/889 835/888 \nf 824/876 825/877 837/890 836/889 \nf 825/877 814/865 826/878 837/890 \nf 826/879 827/880 839/893 838/892 \nf 827/880 828/881 840/894 839/893 \nf 828/881 829/882 841/895 840/894 \nf 829/882 830/883 842/896 841/895 \nf 830/883 831/884 843/897 842/896 \nf 831/884 832/885 844/898 843/897 \nf 832/885 833/886 845/899 844/898 \nf 833/886 834/887 846/900 845/899 \nf 834/887 835/888 847/901 846/900 \nf 835/888 836/889 848/902 847/901 \nf 836/889 837/890 849/903 848/902 \nf 837/890 826/878 838/891 849/903 \nf 838/892 839/893 851/906 850/905 \nf 839/893 840/894 852/907 851/906 \nf 840/894 841/895 853/908 852/907 \nf 841/895 842/896 854/909 853/908 \nf 842/896 843/897 855/910 854/909 \nf 843/897 844/898 856/911 855/910 \nf 844/898 845/899 857/912 856/911 \nf 845/899 846/900 858/913 857/912 \nf 846/900 847/901 859/914 858/913 \nf 847/901 848/902 860/915 859/914 \nf 848/902 849/903 861/916 860/915 \nf 849/903 838/891 850/904 861/916 \nf 850/905 851/906 863/919 862/918 \nf 851/906 852/907 864/920 863/919 \nf 852/907 853/908 865/921 864/920 \nf 853/908 854/909 866/922 865/921 \nf 854/909 855/910 867/923 866/922 \nf 855/910 856/911 868/924 867/923 \nf 856/911 857/912 869/925 868/924 \nf 857/912 858/913 870/926 869/925 \nf 858/913 859/914 871/927 870/926 \nf 859/914 860/915 872/928 871/927 \nf 860/915 861/916 873/929 872/928 \nf 861/916 850/904 862/917 873/929 \nf 862/918 863/919 875/932 874/931 \nf 863/919 864/920 876/933 875/932 \nf 864/920 865/921 877/934 876/933 \nf 865/921 866/922 878/935 877/934 \nf 866/922 867/923 879/936 878/935 \nf 867/923 868/924 880/937 879/936 \nf 868/924 869/925 881/938 880/937 \nf 869/925 870/926 882/939 881/938 \nf 870/926 871/927 883/940 882/939 \nf 871/927 872/928 884/941 883/940 \nf 872/928 873/929 885/942 884/941 \nf 873/929 862/917 874/930 885/942 \nf 874/931 875/932 887/945 886/944 \nf 875/932 876/933 888/946 887/945 \nf 876/933 877/934 889/947 888/946 \nf 877/934 878/935 890/948 889/947 \nf 878/935 879/936 891/949 890/948 \nf 879/936 880/937 892/950 891/949 \nf 880/937 881/938 893/951 892/950 \nf 881/938 882/939 894/952 893/951 \nf 882/939 883/940 895/953 894/952 \nf 883/940 884/941 896/954 895/953 \nf 884/941 885/942 897/955 896/954 \nf 885/942 874/930 886/943 897/955 \nf 886/944 887/945 612/634 613/637 \nf 887/945 888/946 615/641 612/634 \nf 888/946 889/947 617/644 615/641 \nf 889/947 890/948 619/647 617/644 \nf 890/948 891/949 621/650 619/647 \nf 891/949 892/950 623/653 621/650 \nf 892/950 893/951 625/656 623/653 \nf 893/951 894/952 627/659 625/656 \nf 894/952 895/953 629/662 627/659 \nf 895/953 896/954 631/665 629/662 \nf 896/954 897/955 633/668 631/665 \nf 897/955 886/943 613/636 633/668 \nf 901/959 900/958 899/957 898/956 \nf 900/958 903/961 902/960 899/957 \nf 903/961 905/963 904/962 902/960 \nf 905/963 907/965 906/964 904/962 \nf 907/965 909/967 908/966 906/964 \nf 909/967 911/969 910/968 908/966 \nf 911/969 913/971 912/970 910/968 \nf 913/971 915/973 914/972 912/970 \nf 915/973 917/976 916/974 914/972 \nf 917/977 919/979 918/978 916/975 \nf 919/979 921/981 920/980 918/978 \nf 921/981 923/983 922/982 920/980 \nf 923/983 925/985 924/984 922/982 \nf 925/985 927/987 926/986 924/984 \nf 927/987 929/989 928/988 926/986 \nf 929/989 931/991 930/990 928/988 \nf 931/991 933/993 932/992 930/990 \nf 933/993 935/995 934/994 932/992 \nf 935/995 937/997 936/996 934/994 \nf 937/997 939/999 938/998 936/996 \nf 939/999 941/1001 940/1000 938/998 \nf 941/1001 943/1003 942/1002 940/1000 \nf 943/1003 945/1005 944/1004 942/1002 \nf 945/1005 947/1007 946/1006 944/1004 \nf 947/1007 949/1009 948/1008 946/1006 \nf 949/1009 951/1011 950/1010 948/1008 \nf 951/1011 953/1013 952/1012 950/1010 \nf 953/1013 955/1015 954/1014 952/1012 \nf 955/1015 957/1017 956/1016 954/1014 \nf 957/1017 959/1019 958/1018 956/1016 \nf 959/1019 961/1021 960/1020 958/1018 \nf 961/1021 901/959 898/956 960/1020 \nf 900/958 901/959 962/1022 \nf 901/959 961/1021 962/1022 \nf 961/1021 959/1019 962/1022 \nf 959/1019 957/1017 962/1022 \nf 957/1017 955/1015 962/1022 \nf 955/1015 953/1013 962/1022 \nf 953/1013 951/1011 962/1022 \nf 951/1011 949/1009 962/1022 \nf 949/1009 947/1007 962/1022 \nf 947/1007 945/1005 962/1022 \nf 945/1005 943/1003 962/1022 \nf 943/1003 941/1001 962/1022 \nf 941/1001 939/999 962/1022 \nf 939/999 937/997 962/1022 \nf 937/997 935/995 962/1022 \nf 935/995 933/993 962/1022 \nf 933/993 931/991 962/1022 \nf 931/991 929/989 962/1022 \nf 929/989 927/987 962/1022 \nf 927/987 925/985 962/1022 \nf 925/985 923/983 962/1022 \nf 923/983 921/981 962/1022 \nf 921/981 919/979 962/1022 \nf 919/979 917/977 962/1022 \nf 917/976 915/973 962/1022 \nf 915/973 913/971 962/1022 \nf 913/971 911/969 962/1022 \nf 911/969 909/967 962/1022 \nf 909/967 907/965 962/1022 \nf 907/965 905/963 962/1022 \nf 905/963 903/961 962/1022 \nf 903/961 900/958 962/1022 \nf 965/1025 964/1024 963/1023 \nf 964/1024 966/1026 963/1023 \nf 966/1026 967/1027 963/1023 \nf 967/1027 968/1028 963/1023 \nf 968/1028 969/1029 963/1023 \nf 969/1029 970/1030 963/1023 \nf 970/1030 971/1031 963/1023 \nf 971/1031 972/1032 963/1023 \nf 972/1032 973/1033 963/1023 \nf 973/1034 974/1035 963/1023 \nf 974/1035 975/1036 963/1023 \nf 975/1036 976/1037 963/1023 \nf 976/1037 977/1038 963/1023 \nf 977/1038 978/1039 963/1023 \nf 978/1039 979/1040 963/1023 \nf 979/1040 980/1041 963/1023 \nf 980/1041 981/1042 963/1023 \nf 981/1042 982/1043 963/1023 \nf 982/1043 983/1044 963/1023 \nf 983/1044 984/1045 963/1023 \nf 984/1045 985/1046 963/1023 \nf 985/1046 986/1047 963/1023 \nf 986/1047 987/1048 963/1023 \nf 987/1048 988/1049 963/1023 \nf 988/1049 989/1050 963/1023 \nf 989/1050 990/1051 963/1023 \nf 990/1051 991/1052 963/1023 \nf 991/1052 992/1053 963/1023 \nf 992/1053 993/1054 963/1023 \nf 993/1054 994/1055 963/1023 \nf 994/1055 995/1056 963/1023 \nf 995/1056 965/1025 963/1023 \nf 997/1058 964/1024 965/1025 996/1057 \nf 998/1059 966/1026 964/1024 997/1058 \nf 999/1060 967/1027 966/1026 998/1059 \nf 1000/1061 968/1028 967/1027 999/1060 \nf 1001/1062 969/1029 968/1028 1000/1061 \nf 1002/1063 970/1030 969/1029 1001/1062 \nf 1003/1064 971/1031 970/1030 1002/1063 \nf 1004/1065 972/1032 971/1031 1003/1064 \nf 1005/1066 973/1033 972/1032 1004/1065 \nf 1006/1067 974/1035 973/1033 1005/1066 \nf 1007/1068 975/1036 974/1035 1006/1067 \nf 1008/1069 976/1037 975/1036 1007/1068 \nf 1009/1070 977/1038 976/1037 1008/1069 \nf 1010/1071 978/1039 977/1038 1009/1070 \nf 1011/1072 979/1040 978/1039 1010/1071 \nf 1012/1073 980/1041 979/1040 1011/1072 \nf 1013/1074 981/1042 980/1041 1012/1073 \nf 1014/1075 982/1043 981/1042 1013/1074 \nf 1015/1076 983/1044 982/1043 1014/1075 \nf 1016/1077 984/1045 983/1044 1015/1076 \nf 1017/1078 985/1046 984/1045 1016/1077 \nf 1018/1079 986/1047 985/1046 1017/1078 \nf 1019/1080 987/1048 986/1047 1018/1079 \nf 1020/1081 988/1049 987/1048 1019/1080 \nf 1021/1082 989/1050 988/1049 1020/1081 \nf 1022/1083 990/1051 989/1050 1021/1082 \nf 1023/1084 991/1052 990/1051 1022/1083 \nf 1024/1085 992/1053 991/1052 1023/1084 \nf 1025/1086 993/1054 992/1053 1024/1085 \nf 1026/1087 994/1055 993/1054 1025/1086 \nf 1027/1088 995/1056 994/1055 1026/1087 \nf 996/1057 965/1025 995/1056 1027/1088 \nf 1029/1090 997/1058 996/1057 1028/1089 \nf 1031/1092 1029/1090 1028/1089 1030/1091 \nf 1033/1094 1031/1092 1030/1091 1032/1093 \nf 899/957 1033/1094 1032/1093 898/956 \nf 1034/1095 998/1059 997/1058 1029/1090 \nf 1035/1096 1034/1095 1029/1090 1031/1092 \nf 1036/1097 1035/1096 1031/1092 1033/1094 \nf 902/960 1036/1097 1033/1094 899/957 \nf 1037/1098 999/1060 998/1059 1034/1095 \nf 1038/1099 1037/1098 1034/1095 1035/1096 \nf 1039/1100 1038/1099 1035/1096 1036/1097 \nf 904/962 1039/1100 1036/1097 902/960 \nf 1040/1101 1000/1061 999/1060 1037/1098 \nf 1041/1102 1040/1101 1037/1098 1038/1099 \nf 1042/1103 1041/1102 1038/1099 1039/1100 \nf 906/964 1042/1103 1039/1100 904/962 \nf 1043/1104 1001/1062 1000/1061 1040/1101 \nf 1044/1105 1043/1104 1040/1101 1041/1102 \nf 1045/1106 1044/1105 1041/1102 1042/1103 \nf 908/966 1045/1106 1042/1103 906/964 \nf 1046/1107 1002/1063 1001/1062 1043/1104 \nf 1047/1108 1046/1107 1043/1104 1044/1105 \nf 1048/1109 1047/1108 1044/1105 1045/1106 \nf 910/968 1048/1109 1045/1106 908/966 \nf 1049/1110 1003/1064 1002/1063 1046/1107 \nf 1050/1111 1049/1110 1046/1107 1047/1108 \nf 1051/1112 1050/1111 1047/1108 1048/1109 \nf 912/970 1051/1112 1048/1109 910/968 \nf 1052/1113 1004/1065 1003/1064 1049/1110 \nf 1053/1114 1052/1113 1049/1110 1050/1111 \nf 1054/1115 1053/1114 1050/1111 1051/1112 \nf 914/972 1054/1115 1051/1112 912/970 \nf 1055/1116 1005/1066 1004/1065 1052/1113 \nf 1056/1117 1055/1116 1052/1113 1053/1114 \nf 1057/1118 1056/1117 1053/1114 1054/1115 \nf 916/974 1057/1118 1054/1115 914/972 \nf 1058/1119 1006/1067 1005/1066 1055/1116 \nf 1059/1120 1058/1119 1055/1116 1056/1117 \nf 1060/1121 1059/1120 1056/1117 1057/1118 \nf 918/978 1060/1121 1057/1118 916/974 \nf 1061/1122 1007/1068 1006/1067 1058/1119 \nf 1062/1123 1061/1122 1058/1119 1059/1120 \nf 1063/1124 1062/1123 1059/1120 1060/1121 \nf 920/980 1063/1124 1060/1121 918/978 \nf 1064/1125 1008/1069 1007/1068 1061/1122 \nf 1065/1126 1064/1125 1061/1122 1062/1123 \nf 1066/1127 1065/1126 1062/1123 1063/1124 \nf 922/982 1066/1127 1063/1124 920/980 \nf 1067/1128 1009/1070 1008/1069 1064/1125 \nf 1068/1129 1067/1128 1064/1125 1065/1126 \nf 1069/1130 1068/1129 1065/1126 1066/1127 \nf 924/984 1069/1130 1066/1127 922/982 \nf 1070/1131 1010/1071 1009/1070 1067/1128 \nf 1071/1132 1070/1131 1067/1128 1068/1129 \nf 1072/1133 1071/1132 1068/1129 1069/1130 \nf 926/986 1072/1133 1069/1130 924/984 \nf 1073/1134 1011/1072 1010/1071 1070/1131 \nf 1074/1135 1073/1134 1070/1131 1071/1132 \nf 1075/1136 1074/1135 1071/1132 1072/1133 \nf 928/988 1075/1136 1072/1133 926/986 \nf 1076/1137 1012/1073 1011/1072 1073/1134 \nf 1077/1138 1076/1137 1073/1134 1074/1135 \nf 1078/1139 1077/1138 1074/1135 1075/1136 \nf 930/990 1078/1139 1075/1136 928/988 \nf 1079/1140 1013/1074 1012/1073 1076/1137 \nf 1080/1141 1079/1140 1076/1137 1077/1138 \nf 1081/1142 1080/1141 1077/1138 1078/1139 \nf 932/992 1081/1142 1078/1139 930/990 \nf 1082/1143 1014/1075 1013/1074 1079/1140 \nf 1083/1144 1082/1143 1079/1140 1080/1141 \nf 1084/1145 1083/1144 1080/1141 1081/1142 \nf 934/994 1084/1145 1081/1142 932/992 \nf 1085/1146 1015/1076 1014/1075 1082/1143 \nf 1086/1147 1085/1146 1082/1143 1083/1144 \nf 1087/1148 1086/1147 1083/1144 1084/1145 \nf 936/996 1087/1148 1084/1145 934/994 \nf 1088/1149 1016/1077 1015/1076 1085/1146 \nf 1089/1150 1088/1149 1085/1146 1086/1147 \nf 1090/1151 1089/1150 1086/1147 1087/1148 \nf 938/998 1090/1151 1087/1148 936/996 \nf 1091/1152 1017/1078 1016/1077 1088/1149 \nf 1092/1153 1091/1152 1088/1149 1089/1150 \nf 1093/1154 1092/1153 1089/1150 1090/1151 \nf 940/1000 1093/1154 1090/1151 938/998 \nf 1094/1155 1018/1079 1017/1078 1091/1152 \nf 1095/1156 1094/1155 1091/1152 1092/1153 \nf 1096/1157 1095/1156 1092/1153 1093/1154 \nf 942/1002 1096/1157 1093/1154 940/1000 \nf 1097/1158 1019/1080 1018/1079 1094/1155 \nf 1098/1159 1097/1158 1094/1155 1095/1156 \nf 1099/1160 1098/1159 1095/1156 1096/1157 \nf 944/1004 1099/1160 1096/1157 942/1002 \nf 1100/1161 1020/1081 1019/1080 1097/1158 \nf 1101/1162 1100/1161 1097/1158 1098/1159 \nf 1102/1163 1101/1162 1098/1159 1099/1160 \nf 946/1006 1102/1163 1099/1160 944/1004 \nf 1103/1164 1021/1082 1020/1081 1100/1161 \nf 1104/1165 1103/1164 1100/1161 1101/1162 \nf 1105/1166 1104/1165 1101/1162 1102/1163 \nf 948/1008 1105/1166 1102/1163 946/1006 \nf 1106/1167 1022/1083 1021/1082 1103/1164 \nf 1107/1168 1106/1167 1103/1164 1104/1165 \nf 1108/1169 1107/1168 1104/1165 1105/1166 \nf 950/1010 1108/1169 1105/1166 948/1008 \nf 1109/1170 1023/1084 1022/1083 1106/1167 \nf 1110/1171 1109/1170 1106/1167 1107/1168 \nf 1111/1172 1110/1171 1107/1168 1108/1169 \nf 952/1012 1111/1172 1108/1169 950/1010 \nf 1112/1173 1024/1085 1023/1084 1109/1170 \nf 1113/1174 1112/1173 1109/1170 1110/1171 \nf 1114/1175 1113/1174 1110/1171 1111/1172 \nf 954/1014 1114/1175 1111/1172 952/1012 \nf 1115/1176 1025/1086 1024/1085 1112/1173 \nf 1116/1177 1115/1176 1112/1173 1113/1174 \nf 1117/1178 1116/1177 1113/1174 1114/1175 \nf 956/1016 1117/1178 1114/1175 954/1014 \nf 1118/1179 1026/1087 1025/1086 1115/1176 \nf 1119/1180 1118/1179 1115/1176 1116/1177 \nf 1120/1181 1119/1180 1116/1177 1117/1178 \nf 958/1018 1120/1181 1117/1178 956/1016 \nf 1121/1182 1027/1088 1026/1087 1118/1179 \nf 1122/1183 1121/1182 1118/1179 1119/1180 \nf 1123/1184 1122/1183 1119/1180 1120/1181 \nf 960/1020 1123/1184 1120/1181 958/1018 \nf 1028/1089 996/1057 1027/1088 1121/1182 \nf 1030/1091 1028/1089 1121/1182 1122/1183 \nf 1032/1093 1030/1091 1122/1183 1123/1184 \nf 898/956 1032/1093 1123/1184 960/1020 \n\n";

},{}],3:[function(require,module,exports){
module.exports = "# Blender v2.77 (sub 0) OBJ File: 'base9.blend'\n# www.blender.org\nmtllib base9.mtl\no STONE_MOUNTAIN_Mesh.001\nv 300.684143 40.951920 224.766907\nv 320.293945 38.852531 161.187805\nv 251.787643 77.444618 -452.664856\nv 231.553940 69.181641 -500.000061\nv 219.065994 66.860886 -500.000000\nv 208.741318 68.013512 -467.712219\nv 416.439514 16.409630 18.426821\nv 448.408752 34.101898 50.040344\nv 442.798645 10.615662 -0.837347\nv -390.050995 274.956970 -223.889481\nv 213.936722 70.777885 406.482666\nv 125.878403 50.013374 401.939087\nv 137.184036 70.225754 425.917053\nv 171.489670 51.842216 389.846191\nv 379.433777 50.458199 -299.083313\nv 322.349792 71.870483 -333.942139\nv 255.418228 58.766785 -329.425293\nv 208.291153 55.429924 -342.944366\nv -403.543457 277.101929 -290.504333\nv -490.281250 300.260559 -251.971909\nv -461.004822 298.307159 -236.208786\nv -458.767090 295.698578 -263.365540\nv 422.940674 19.213684 -237.050552\nv 471.476135 31.411526 -267.195312\nv 452.256531 52.566216 -310.562134\nv 502.504333 37.873184 -274.684082\nv 501.705811 47.955467 -293.668701\nv 460.650391 63.553642 112.278519\nv 485.003601 48.107521 65.973198\nv 375.265381 26.176971 47.169140\nv 416.507019 51.635941 101.751350\nv -443.807678 293.737061 -267.743164\nv -338.946777 215.500031 -329.608887\nv -339.139832 207.744247 -376.282715\nv -366.080444 235.871399 -358.655518\nv 476.058533 13.892984 -216.528320\nv 503.402649 27.133049 -252.875870\nv -385.179199 211.634857 -459.593018\nv -395.970581 203.101913 -500.000000\nv -409.399628 215.016586 -499.999878\nv -384.324829 195.351807 -499.999939\nv 216.070114 22.141834 273.977295\nv 241.453201 19.766788 225.557983\nv 281.550293 43.502579 273.088562\nv 380.956665 26.781380 -254.034348\nv 345.488953 36.276299 -261.088715\nv -417.306946 286.666382 -218.536469\nv -451.318298 296.130493 -205.724380\nv 213.816757 56.328766 375.368286\nv 288.404358 75.078041 -352.725342\nv 207.050552 63.125732 -373.325256\nv -383.390381 260.220642 -310.406128\nv -485.045166 296.695221 -263.291382\nv 291.053101 45.719177 -284.115112\nv 308.624756 62.839867 -306.083496\nv 363.329407 49.683884 140.857742\nv 84.876480 84.669563 449.344421\nv 151.787186 86.748199 459.699829\nv -491.023804 304.329041 -203.919006\nv 252.254562 44.917793 314.020325\nv 203.085587 43.406609 348.731445\nv 232.495621 59.855614 353.261292\nv 217.487137 33.113518 310.163025\nv -352.077637 201.337616 -426.127197\nv -366.992737 225.177155 -399.608154\nv 174.546143 68.444908 -426.022949\nv 298.329712 23.917515 130.194824\nv 324.817322 31.188362 113.332214\nv 468.601257 14.832977 -0.054791\nv 260.531921 30.747921 248.403625\nv 278.191589 27.413891 193.846542\nv -421.249146 287.715454 -281.686768\nv 105.351959 66.106720 410.654724\nv 168.162643 24.824223 316.158813\nv 344.372070 32.206345 88.219307\nv -378.804474 191.468475 -499.999939\nv 198.482101 65.172592 -500.000061\nv 188.255692 64.637848 -500.000061\nv 503.903137 41.272217 46.606323\nv 504.926636 26.869728 19.230843\nv 81.751816 89.697784 500.017273\nv 501.971252 65.286728 95.604111\nv 502.884583 54.402016 72.196053\nv 205.666794 67.979568 -408.926758\nv 501.106079 56.318001 -311.676819\nv 262.678772 77.026962 -399.450989\nv 130.911728 38.472046 370.144531\nv 245.783157 34.495956 285.411560\nv 338.743713 38.495049 125.113297\nv 505.710999 14.842425 -8.964741\nv 132.038406 92.317757 500.118408\nv -500.000000 304.282532 -214.653793\nv -500.000000 296.795380 -267.916992\nv 106.200363 90.078400 500.105164\nv -500.000000 301.724915 -251.621933\nv -500.000000 302.591400 -245.692947\nv -500.000000 302.884216 -230.089584\nv -500.000000 302.686768 -224.012726\nv -500.000000 296.627380 -263.730774\nv -500.000000 298.727112 -257.018524\nv -393.466919 268.661285 -300.455231\nv -384.403900 268.911438 -232.898743\nv -342.773499 221.590668 -303.296387\nv -371.308899 260.438629 -252.095352\nv -344.539795 235.246597 -279.293762\nv -361.232361 251.998001 -262.046265\nvt 0.7272 1.0000\nvt 0.7046 0.9677\nvt 0.7473 0.9527\nvt 0.9108 0.4816\nvt 0.9426 0.4500\nvt 0.9370 0.5009\nvt 0.6223 0.0982\nvt 0.6335 0.0742\nvt 0.6676 0.1103\nvt 0.0104 0.7520\nvt 0.0395 0.7362\nvt 0.0417 0.7634\nvt 0.9173 0.7371\nvt 0.9655 0.7672\nvt 0.9464 0.8106\nvt 0.9963 0.7747\nvt 0.9955 0.7937\nvt 0.8699 0.4529\nvt 0.9109 0.3983\nvt 0.1607 0.8296\nvt 0.1605 0.8763\nvt 0.1338 0.8587\nvt 0.1148 0.9596\nvt 0.1041 1.0000\nvt 0.0907 1.0000\nvt 0.1156 1.0000\nvt 0.8756 0.7541\nvt 0.8741 0.7991\nvt 0.8404 0.7611\nvt 0.0829 0.7186\nvt 0.0566 0.7678\nvt 0.7097 0.0936\nvt 0.7096 0.1247\nvt 0.7041 0.8507\nvt 0.7837 0.8527\nvt 0.7029 0.8733\nvt 0.7863 0.7841\nvt 0.8038 0.8061\nvt 0.7509 0.8294\nvt 0.5816 0.0508\nvt 0.6480 0.0404\nvt 0.7478 0.1861\nvt 0.6990 0.1514\nvt 0.7541 0.1468\nvt 0.7133 0.1899\nvt 0.1329 0.8996\nvt 0.1477 0.9261\nvt 0.9547 0.3878\nvt 0.9789 0.4341\nvt 0.7560 0.2517\nvt 0.7735 0.3062\nvt 0.7371 0.2745\nvt 0.0790 0.7817\nvt 0.8174 0.8340\nvt 0.5766 0.0895\nvt 0.6643 0.1839\nvt 0.7118 0.2261\nvt 0.9626 0.5001\nvt 0.1211 1.0000\nvt 0.6842 1.0000\nvt 0.6591 0.9260\nvt 0.9977 0.4535\nvt 0.9987 0.4808\nvt 0.7959 0.2753\nvt 0.8153 0.3389\nvt 0.9958 0.4045\nvt 0.9967 0.4279\nvt 0.8393 0.4119\nvt 0.8581 0.3592\nvt 0.7015 0.9089\nvt 0.7581 0.8995\nvt 0.7414 0.2147\nvt 0.7769 0.2270\nvt 0.1033 0.7572\nvt 0.0966 0.7905\nvt 0.9972 0.7529\nvt 0.6273 0.1300\nvt 0.9700 0.7166\nvt 0.0491 0.7058\nvt 0.7935 0.3699\nvt 0.8198 0.3867\nvt 0.8337 0.3750\nvt 0.1286 0.7521\nvt 0.1066 0.8005\nvt 0.1100 0.7239\nvt 0.0156 0.7633\nvt 0.1386 0.8200\nvt 0.1166 0.8104\nvt 0.9995 0.5090\nvt 0.1551 0.7793\nvt 0.6027 0.0000\nvt 0.6284 0.0000\nvt 0.5785 0.0001\nvt 0.0008 0.7457\nvt 0.0008 0.7517\nvt 0.0008 0.7240\nvt 0.0008 0.7301\nvt 0.7148 1.0000\nvt 0.6944 1.0000\nvt 0.0008 0.7679\nvt 0.0008 0.7638\nvt 0.0097 0.7040\nvt 0.0008 0.7570\nvt 0.1386 0.7621\nvt 0.9949 0.8117\nvt 0.0008 0.7147\nvn -0.1819 0.9789 -0.0931\nvn -0.0987 0.9076 -0.4081\nvn -0.1857 0.7927 -0.5806\nvn 0.1123 0.9900 -0.0858\nvn 0.0366 0.9045 0.4250\nvn -0.0697 0.8798 0.4702\nvn -0.0532 0.9198 -0.3888\nvn 0.6769 0.7257 -0.1234\nvn 0.6293 0.7092 -0.3178\nvn 0.5271 0.7920 -0.3080\nvn -0.0290 0.8844 0.4658\nvn 0.1442 0.8779 0.4565\nvn 0.2573 0.9663 0.0003\nvn -0.2334 0.8823 -0.4088\nvn -0.2020 0.9474 0.2482\nvn -0.2638 0.8517 0.4527\nvn 0.0426 0.8901 -0.4537\nvn -0.3681 0.7921 -0.4869\nvn -0.2682 0.9011 -0.3406\nvn 0.5768 0.7417 -0.3423\nvn 0.6381 0.7414 -0.2078\nvn -0.1745 0.9029 -0.3929\nvn -0.2174 0.9097 -0.3537\nvn -0.3357 0.9273 -0.1653\nvn 0.1133 0.8934 0.4347\nvn 0.2579 0.9662 -0.0000\nvn 0.1046 0.9907 -0.0865\nvn -0.1749 0.9056 0.3863\nvn -0.0639 0.9581 0.2791\nvn 0.2423 0.6825 -0.6896\nvn -0.1076 0.9107 -0.3989\nvn -0.1468 0.8178 -0.5564\nvn -0.1920 0.9412 -0.2779\nvn -0.1642 0.8967 -0.4111\nvn 0.5484 0.7796 -0.3026\nvn -0.0645 0.9959 -0.0632\nvn -0.1607 0.8710 -0.4643\nvn -0.3603 0.9220 -0.1416\nvn -0.4457 0.8627 -0.2390\nvn -0.1673 0.8915 -0.4211\nvn -0.1585 0.9527 -0.2592\nvn -0.0606 0.9887 0.1371\nvn 0.6600 0.7042 -0.2618\nvn 0.0142 0.9999 0.0013\nvn -0.2105 0.9775 -0.0104\nvn -0.0763 0.8824 0.4643\nvn -0.1783 0.9741 0.1388\nvn -0.3190 0.9114 -0.2599\nvn -0.2823 0.9202 -0.2713\nvn 0.4981 0.8661 -0.0423\nvn -0.1357 0.9051 -0.4029\nvn -0.2799 0.9217 -0.2685\nvn 0.0410 0.9036 0.4263\nvn -0.0790 0.8930 0.4430\nvn -0.0723 0.9879 0.1375\nvn -0.1316 0.9249 -0.3566\nvn -0.2964 0.9336 -0.2012\nvn -0.3426 0.9212 -0.1843\nvn -0.0327 0.9437 0.3292\nvn 0.2629 0.9647 -0.0147\nvn -0.3657 0.9130 -0.1808\nvn 0.1258 0.9239 0.3615\nvn -0.3789 0.9097 -0.1698\nvn -0.3125 0.9274 -0.2057\nvn -0.1238 0.9140 -0.3863\nvn -0.2189 0.9743 0.0524\nvn -0.2943 0.9337 -0.2040\nvn -0.1568 0.9368 -0.3127\nvn -0.0958 0.8208 0.5631\nvn 0.5651 0.8162 -0.1201\nvn 0.3932 0.9194 -0.0093\nvn 0.0355 0.9578 -0.2852\nvn 0.6950 0.7106 -0.1093\nvn -0.2170 0.9170 0.3347\nvn -0.3155 0.9334 -0.1706\nvn -0.0945 0.9147 -0.3928\nvn -0.3033 0.9283 -0.2149\nvn 0.6812 0.6567 -0.3235\nvn -0.1492 0.9048 -0.3988\nvn -0.3335 0.9255 -0.1797\nvn -0.2287 0.9370 -0.2642\nvn -0.1947 0.9271 -0.3201\nvn -0.3328 0.9285 -0.1645\nvn -0.3079 0.9265 -0.2165\nvn -0.1663 0.9226 -0.3480\nvn -0.0849 0.9806 -0.1766\nvn -0.0151 0.9949 -0.0997\nvn 0.1424 0.9794 -0.1431\nvn -0.1501 0.8772 -0.4561\nvn 0.1215 0.9921 0.0322\nvn -0.0816 0.9948 -0.0616\nvn -0.0057 0.9992 0.0401\nvn 0.1923 0.9674 -0.1649\nvn 0.0044 0.9544 -0.2986\nvn 0.1137 0.9933 -0.0186\nvn 0.1135 0.8685 -0.4825\nvn 0.4982 0.8660 -0.0424\nvn 0.6176 0.7717 -0.1518\nvn 0.0734 0.9138 -0.3996\nvn -0.0521 0.9961 -0.0711\nvn -0.0598 0.9046 0.4221\nvn 0.6004 0.7854 -0.1507\nvn -0.0207 0.9443 0.3284\nvn 0.6517 0.7543 -0.0798\nvn -0.0660 0.8976 -0.4359\nvn -0.0155 0.9949 -0.0995\nvn 0.1922 0.9674 -0.1649\nvn 0.0044 0.9544 -0.2985\nusemtl STONE\ns off\nf 4/1/1 6/2/1 3/3/1\nf 7/4/2 8/5/2 9/6/2\nf 12/7/3 13/8/3 14/9/3\nf 20/10/4 21/11/4 22/12/4\nf 23/13/5 24/14/5 25/15/5\nf 24/14/6 26/16/6 27/17/6\nf 30/18/7 31/19/7 7/4/7\nf 33/20/8 34/21/8 35/22/8\nf 38/23/9 39/24/9 40/25/9\nf 38/23/10 41/26/10 39/24/10\nf 45/27/11 23/13/11 15/28/11\nf 46/29/12 45/27/12 15/28/12\nf 21/11/13 47/30/13 32/31/13\nf 14/9/14 11/32/14 49/33/14\nf 18/34/15 50/35/15 51/36/15\nf 54/37/16 55/38/16 17/39/16\nf 57/40/17 58/41/17 13/8/17\nf 60/42/18 61/43/18 62/44/18\nf 61/43/19 60/42/19 63/45/19\nf 65/46/20 64/47/20 38/23/20\nf 35/22/21 34/21/21 65/46/21\nf 8/5/22 28/48/22 29/49/22\nf 14/9/23 49/33/23 61/43/23\nf 70/50/24 71/51/24 43/52/24\nf 46/29/25 15/28/25 55/38/25\nf 32/31/26 47/30/26 72/53/26\nf 22/12/27 21/11/27 32/31/27\nf 17/39/28 50/35/28 18/34/28\nf 16/54/29 50/35/29 55/38/29\nf 73/55/30 13/8/30 12/7/30\nf 13/8/31 58/41/31 11/32/31\nf 13/8/32 11/32/32 14/9/32\nf 74/56/33 63/45/33 42/57/33\nf 8/5/34 29/49/34 69/58/34\nf 76/59/35 38/23/35 64/47/35\nf 6/2/36 78/60/36 66/61/36\nf 29/49/37 79/62/37 80/63/37\nf 71/51/38 1/64/38 2/65/38\nf 49/33/39 62/44/39 61/43/39\nf 29/49/40 82/66/40 83/67/40\nf 75/68/41 56/69/41 30/18/41\nf 51/36/42 84/70/42 66/61/42\nf 34/21/43 64/47/43 65/46/43\nf 84/70/44 6/2/44 66/61/44\nf 3/3/45 6/2/45 84/70/45\nf 27/17/46 25/15/46 24/14/46\nf 50/35/47 86/71/47 51/36/47\nf 88/72/48 60/42/48 44/73/48\nf 63/45/49 60/42/49 88/72/49\nf 72/53/50 102/74/50 19/75/50\nf 9/6/51 8/5/51 69/58/51\nf 42/57/52 63/45/52 88/72/52\nf 15/28/53 23/13/53 25/15/53\nf 24/14/54 37/76/54 26/16/54\nf 84/70/55 51/36/55 3/3/55\nf 87/77/56 12/7/56 14/9/56\nf 42/57/57 70/50/57 43/52/57\nf 70/50/58 44/73/58 1/64/58\nf 24/14/59 23/13/59 36/78/59\nf 21/11/60 48/79/60 47/30/60\nf 67/80/61 2/65/61 68/81/61\nf 55/38/62 15/28/62 16/54/62\nf 67/80/63 71/51/63 2/65/63\nf 75/68/64 68/81/64 89/82/64\nf 7/4/65 31/19/65 8/5/65\nf 51/36/66 86/71/66 3/3/66\nf 75/68/67 89/82/67 56/69/67\nf 87/77/68 14/9/68 61/43/68\nf 54/37/69 46/29/69 55/38/69\nf 19/75/70 104/83/70 101/84/70\nf 47/30/71 10/85/71 72/53/71\nf 53/86/72 20/10/72 22/12/72\nf 103/87/73 35/22/73 52/88/73\nf 17/39/74 55/38/74 50/35/74\nf 89/82/75 2/65/75 56/69/75\nf 69/58/76 80/63/76 90/89/76\nf 42/57/77 88/72/77 70/50/77\nf 52/88/78 105/90/78 103/87/78\nf 31/19/79 28/48/79 8/5/79\nf 68/81/80 2/65/80 89/82/80\nf 30/18/81 56/69/81 31/19/81\nf 63/45/82 74/56/82 61/43/82\nf 71/51/83 70/50/83 1/64/83\nf 70/50/84 88/72/84 44/73/84\nf 74/56/85 87/77/85 61/43/85\nf 94/91/86 91/92/86 58/41/86\nf 94/91/87 57/40/87 81/93/87\nf 96/94/88 20/10/88 95/95/88\nf 83/67/89 79/62/89 29/49/89\nf 98/96/90 21/11/90 97/97/90\nf 5/98/91 77/99/91 6/2/91\nf 93/100/92 99/101/92 53/86/92\nf 98/96/93 59/102/93 48/79/93\nf 99/101/94 20/10/94 53/86/94\nf 96/94/95 97/97/95 21/11/95\nf 100/103/96 95/95/96 20/10/96\nf 101/84/70 106/104/70 52/88/70\nf 101/84/70 104/83/70 106/104/70\nf 102/74/97 104/83/97 19/75/97\nf 106/104/98 105/90/98 52/88/98\nf 4/1/1 5/98/1 6/2/1\nf 73/55/99 57/40/99 13/8/99\nf 76/59/35 41/26/35 38/23/35\nf 6/2/100 77/99/100 78/60/100\nf 27/17/101 85/105/101 25/15/101\nf 72/53/102 10/85/102 102/74/102\nf 24/14/103 36/78/103 37/76/103\nf 103/87/104 33/20/104 35/22/104\nf 69/58/105 29/49/105 80/63/105\nf 94/91/106 58/41/106 57/40/106\nf 96/94/88 21/11/88 20/10/88\nf 98/96/90 48/79/90 21/11/90\nf 98/96/107 92/106/107 59/102/107\nf 99/101/108 100/103/108 20/10/108\no WATER_MOUNTAIN_Mesh.000\nv 130.580215 26.694790 -274.536316\nv 199.131119 15.024277 -231.734055\nv 82.216110 34.304802 261.536072\nv 351.481079 1.556833 -125.400436\nv 119.101242 21.228561 231.078140\nv 227.928650 15.370991 -245.650436\nv 219.346497 13.301037 -224.376099\nv 335.184906 0.650269 -119.503418\nv 319.171936 2.849724 -140.987167\nv 140.565369 11.907734 244.523758\nv 335.468109 3.756288 -146.884186\nv 103.680237 24.983974 274.981689\nv 118.053207 28.326221 -246.461731\nv 77.018044 38.597725 -283.328705\nv 207.713272 17.094231 -253.008392\nvt 0.5789 0.2386\nvt 0.6002 0.2251\nvt 0.6156 0.2690\nvt 0.6950 0.7318\nvt 0.7151 0.7244\nvt 0.7035 0.7530\nvt 0.6145 0.7465\nvt 0.6270 0.7746\nvt 0.5738 0.7834\nvt 0.7236 0.7457\nvt 0.8142 0.6410\nvt 0.8301 0.6195\nvt 0.8304 0.6469\nvt 0.8463 0.6254\nvt 0.6369 0.2556\nvn 0.3708 0.9273 0.0509\nvn 0.0431 0.9925 0.1140\nvn 0.2109 0.9768 0.0374\nvn -0.0145 0.9935 0.1126\nusemtl WATER\ns off\nf 109/107/109 118/108/109 111/109/109\nf 108/110/110 113/111/110 121/112/110\nf 119/113/111 107/114/111 120/115/111\nf 121/112/110 113/111/110 112/116/110\nf 115/117/112 114/118/112 117/119/112\nf 114/118/112 110/120/112 117/119/112\nf 111/109/109 118/108/109 116/121/109\no LIGHTS_Cylinder.004\nv 0.031097 0.843239 -1.548096\nv 0.031097 0.843238 1.548107\nv 0.071091 0.836128 1.548107\nv 0.071091 0.836128 -1.548095\nv 0.108856 0.821479 1.548105\nv 0.108856 0.821480 -1.548097\nv 0.142914 0.799857 1.548105\nv 0.142914 0.799858 -1.548096\nv 0.171967 0.772087 1.548106\nv 0.171967 0.772087 -1.548096\nv 0.194901 0.739234 1.548107\nv 0.194901 0.739235 -1.548096\nv 0.210815 0.702583 1.548105\nv 0.210815 0.702583 -1.548097\nv 0.219131 0.663520 1.548106\nv 0.219131 0.663521 -1.548096\nv -0.192841 0.661857 -1.548096\nv -0.192841 0.661857 1.548106\nv -0.186371 0.695762 1.548106\nv -0.186371 0.695763 -1.548096\nv -0.171204 0.732948 1.548106\nv -0.171204 0.732948 -1.548095\nv -0.148941 0.766578 1.548106\nv -0.148941 0.766579 -1.548096\nv -0.120468 0.795341 1.548106\nv -0.120468 0.795341 -1.548096\nv -0.086868 0.818122 1.548106\nv -0.086868 0.818123 -1.548095\nv -0.049438 0.834068 1.548106\nv -0.049438 0.834053 -1.548095\nv -0.009598 0.842536 1.548106\nv -0.009598 0.842552 -1.548095\nv 0.219452 0.629081 1.548105\nv 0.219452 0.629082 -1.548098\nv 0.026245 0.789162 -1.200114\nv 0.026245 0.789162 -2.216957\nv 0.031418 0.788216 -2.216955\nv 0.031418 0.788215 -1.200114\nv 0.036285 0.786324 -2.216954\nv 0.036285 0.786323 -1.200112\nv 0.040680 0.783546 -2.216957\nv 0.040680 0.783546 -1.200114\nv 0.044434 0.779945 -2.216956\nv 0.044434 0.779945 -1.200115\nv 0.047394 0.775734 -2.216955\nv 0.047394 0.775734 -1.200113\nv 0.049454 0.770973 -2.216956\nv 0.049454 0.770973 -1.200114\nv 0.050537 0.765938 -2.216956\nv 0.050537 0.765938 -1.200114\nv 0.050583 0.760780 -2.216955\nv 0.050583 0.760780 -1.200114\nv 0.049606 0.755714 -2.216956\nv 0.049606 0.755714 -1.200114\nv 0.047653 0.750893 -2.216956\nv 0.047653 0.750892 -1.200115\nv 0.044769 0.746559 -2.216956\nv 0.044769 0.746559 -1.200114\nv 0.041092 0.742836 -2.216956\nv 0.041092 0.742836 -1.200114\nv 0.036758 0.739906 -2.216956\nv 0.036758 0.739906 -1.200116\nv 0.031921 0.737862 -2.216955\nv 0.031921 0.737861 -1.200113\nv 0.026779 0.736763 -2.216955\nv 0.026779 0.736763 -1.200114\nv 0.021530 0.736671 -2.216957\nv 0.021530 0.736671 -1.200114\nv 0.016373 0.737587 -2.216955\nv 0.016373 0.737587 -1.200114\nv 0.011490 0.739479 -2.216955\nv 0.011490 0.739479 -1.200113\nv 0.007095 0.742256 -2.216955\nv 0.007095 0.742256 -1.200113\nv 0.003342 0.745857 -2.216957\nv 0.003342 0.745857 -1.200116\nv 0.000381 0.750099 -2.216957\nv 0.000381 0.750099 -1.200115\nv -0.001678 0.754829 -2.216957\nv -0.001678 0.754829 -1.200115\nv -0.002762 0.759865 -2.216957\nv -0.002747 0.759865 -1.200116\nv -0.002808 0.765022 -2.216957\nv -0.002808 0.765022 -1.200116\nv -0.001831 0.770119 -2.216957\nv -0.001831 0.770119 -1.200116\nv 0.000122 0.774910 -2.216957\nv 0.000122 0.774910 -1.200115\nv 0.003006 0.779243 -2.216957\nv 0.003006 0.779243 -1.200116\nv 0.006683 0.782967 -2.216957\nv 0.006683 0.782966 -1.200115\nv 0.011017 0.785896 -2.216955\nv 0.011017 0.785896 -1.200113\nv 0.015854 0.787971 -2.216956\nv 0.015854 0.787971 -1.200113\nv 0.030258 0.585304 -2.517254\nv 0.032516 0.582863 -2.513302\nv 0.020996 0.789070 -2.216956\nv 0.020996 0.789070 -1.200114\nv 0.011475 0.566597 -2.482134\nv 0.016541 0.566933 -2.483434\nv -0.008057 0.293526 -2.644189\nv -0.013062 0.293892 -2.642690\nv -0.018982 0.579353 -2.500095\nv -0.019257 0.581947 -2.504554\nv 0.013779 0.592201 -2.526974\nv 0.018723 0.591072 -2.525671\nv 0.031616 0.572853 -2.495806\nv 0.028946 0.570808 -2.491853\nv -0.008377 0.570137 -2.485546\nv -0.012268 0.572090 -2.488391\nv -0.010620 0.590553 -2.520720\nv -0.006424 0.591835 -2.523560\nv 0.033813 0.580269 -2.509012\nv 0.006241 0.566750 -2.481697\nv -0.018524 0.584450 -2.509015\nv 0.023224 0.589485 -2.523561\nv 0.025452 0.569099 -2.488390\nv -0.015411 0.574318 -2.491854\nv -0.001709 0.592690 -2.525673\nv 0.034103 0.577705 -2.504553\nv 0.001068 0.567421 -2.482134\nv -0.016785 0.586769 -2.513304\nv 0.027115 0.587563 -2.520720\nv 0.021271 0.567787 -2.485548\nv -0.017685 0.576790 -2.495806\nv 0.003372 0.593025 -2.526974\nv 0.033356 0.575203 -2.500093\nv -0.003876 0.568581 -2.483434\nv -0.014114 0.588844 -2.517254\nv 0.008591 0.592873 -2.527415\nv -0.028458 0.295143 -2.644187\nv -0.023468 0.294716 -2.642689\nv -0.054581 -0.051353 -2.653321\nv -0.059570 -0.050896 -2.654819\nv -0.012924 0.295448 -2.694355\nv -0.007919 0.295021 -2.692855\nv -0.036987 0.297157 -2.687150\nv -0.032944 0.296913 -2.690423\nv -0.018265 0.294289 -2.642186\nv -0.003326 0.294563 -2.690423\nv -0.028320 0.296639 -2.692857\nv 0.000717 0.294136 -2.687149\nv -0.023315 0.296272 -2.694356\nv 0.004013 0.293770 -2.683157\nv -0.018112 0.295876 -2.694863\nv -0.033066 0.295601 -2.646622\nv 0.006470 0.293434 -2.678603\nv -0.037094 0.296028 -2.649900\nv 0.007965 0.293160 -2.673662\nv -0.040390 0.296394 -2.653890\nv 0.008469 0.292976 -2.668522\nv -0.042847 0.296730 -2.658446\nv 0.007935 0.292854 -2.663385\nv -0.044357 0.297005 -2.663386\nv 0.006409 0.292824 -2.658442\nv -0.044846 0.297188 -2.668524\nv 0.003937 0.292885 -2.653890\nv -0.044327 0.297310 -2.673663\nv 0.000610 0.293007 -2.649899\nv -0.042786 0.297340 -2.678604\nv -0.003433 0.293251 -2.646624\nv -0.040314 0.297279 -2.683157\nv -0.044052 -0.050590 -2.704987\nv -0.049240 -0.050163 -2.705494\nv -0.054443 -0.049766 -2.704987\nv -0.059433 -0.049431 -2.703487\nv -0.064056 -0.049126 -2.701054\nv -0.068100 -0.048912 -2.697780\nv -0.071411 -0.048759 -2.693789\nv -0.073898 -0.048698 -2.689237\nv -0.075424 -0.048729 -2.684294\nv -0.075943 -0.048851 -2.679155\nv -0.075455 -0.049065 -2.674017\nv -0.073944 -0.049339 -2.669076\nv -0.071503 -0.049644 -2.664521\nv -0.068192 -0.050041 -2.660531\nv -0.064163 -0.050468 -2.657254\nv -0.049393 -0.051781 -2.652816\nv -0.044189 -0.052177 -2.653321\nv -0.039200 -0.052513 -2.654819\nv -0.034576 -0.052818 -2.657257\nv -0.030533 -0.053032 -2.660531\nv -0.027222 -0.053184 -2.664522\nv -0.024734 -0.053245 -2.669076\nv -0.023209 -0.053215 -2.674017\nv -0.022690 -0.053093 -2.679154\nv -0.023178 -0.052879 -2.684292\nv -0.024689 -0.052605 -2.689235\nv -0.027130 -0.052299 -2.693788\nv -0.030441 -0.051903 -2.697781\nv -0.034454 -0.051475 -2.701055\nv -0.039062 -0.051048 -2.703488\nv 0.026245 0.789161 1.200062\nv 0.026245 0.789161 2.216968\nv 0.020996 0.789069 2.216967\nv 0.020996 0.789070 1.200062\nv 0.015854 0.787971 2.216970\nv 0.015854 0.787971 1.200062\nv 0.011017 0.785896 2.216968\nv 0.011017 0.785896 1.200062\nv 0.006683 0.782966 2.216968\nv 0.006683 0.782966 1.200060\nv 0.003006 0.779243 2.216966\nv 0.003006 0.779243 1.200061\nv 0.000122 0.774909 2.216968\nv 0.000122 0.774909 1.200062\nv -0.001831 0.770118 2.216967\nv -0.001831 0.770118 1.200061\nv -0.002808 0.765022 2.216968\nv -0.002808 0.765022 1.200061\nv -0.002747 0.759864 2.216967\nv -0.002747 0.759864 1.200061\nv -0.001678 0.754829 2.216968\nv -0.001678 0.754829 1.200061\nv 0.000381 0.750098 2.216966\nv 0.000381 0.750099 1.200060\nv 0.003342 0.745857 2.216967\nv 0.003342 0.745857 1.200062\nv 0.007095 0.742255 2.216968\nv 0.007095 0.742256 1.200062\nv 0.011490 0.739478 2.216970\nv 0.011490 0.739479 1.200062\nv 0.016373 0.737586 2.216968\nv 0.016373 0.737586 1.200061\nv 0.021530 0.736671 2.216968\nv 0.021530 0.736671 1.200062\nv 0.026779 0.736762 2.216968\nv 0.026779 0.736762 1.200062\nv 0.031921 0.737861 2.216968\nv 0.031921 0.737861 1.200062\nv 0.036758 0.739906 2.216967\nv 0.036758 0.739906 1.200061\nv 0.041092 0.742835 2.216966\nv 0.041092 0.742835 1.200060\nv 0.044769 0.746558 2.216968\nv 0.044769 0.746559 1.200061\nv 0.047653 0.750892 2.216966\nv 0.047653 0.750892 1.200061\nv 0.049606 0.755714 2.216968\nv 0.049606 0.755714 1.200061\nv 0.050583 0.760780 2.216970\nv 0.050583 0.760780 1.200063\nv 0.050537 0.765937 2.216968\nv 0.050537 0.765937 1.200062\nv 0.049454 0.770972 2.216967\nv 0.049454 0.770973 1.200061\nv 0.047394 0.775703 2.216968\nv 0.047394 0.775733 1.200061\nv 0.044434 0.779945 2.216967\nv 0.044434 0.779945 1.200060\nv 0.040680 0.783546 2.216967\nv 0.040680 0.783546 1.200060\nv 0.036285 0.786323 2.216969\nv 0.036285 0.786323 1.200063\nv -0.014114 0.588844 2.517264\nv -0.016785 0.586768 2.513313\nv 0.031418 0.788215 2.216967\nv 0.031418 0.788215 1.200062\nv 0.001068 0.567420 2.482144\nv -0.003876 0.568580 2.483448\nv -0.028458 0.295142 2.644201\nv -0.023453 0.294715 2.642701\nv 0.033356 0.575202 2.500106\nv 0.034103 0.577705 2.504566\nv 0.003372 0.593024 2.526986\nv -0.001709 0.592689 2.525686\nv -0.017670 0.576789 2.495817\nv -0.015411 0.574317 2.491863\nv 0.021271 0.567786 2.485556\nv 0.025452 0.569099 2.488400\nv 0.027115 0.587562 2.520728\nv 0.023224 0.589484 2.523570\nv -0.018509 0.584449 2.509023\nv 0.006256 0.566749 2.481706\nv 0.033813 0.580268 2.509025\nv -0.006424 0.591834 2.523572\nv -0.012268 0.572089 2.488400\nv 0.028961 0.570808 2.491865\nv 0.018723 0.591071 2.525686\nv -0.019257 0.581947 2.504565\nv 0.011475 0.566596 2.482144\nv 0.032516 0.582862 2.513312\nv -0.010620 0.590553 2.520729\nv -0.008377 0.570136 2.485559\nv 0.031631 0.572852 2.495816\nv 0.013779 0.592200 2.526986\nv -0.018967 0.579353 2.500105\nv 0.016556 0.566932 2.483446\nv 0.030258 0.585303 2.517265\nv 0.008591 0.592872 2.527425\nv -0.008057 0.293525 2.644201\nv -0.013062 0.293891 2.642701\nv -0.044189 -0.052178 2.653332\nv -0.039185 -0.052514 2.654833\nv -0.023315 0.296271 2.694367\nv -0.028320 0.296638 2.692870\nv 0.000717 0.294135 2.687157\nv -0.003311 0.294562 2.690434\nv -0.018265 0.294288 2.642195\nv -0.032944 0.296912 2.690434\nv -0.007919 0.295020 2.692869\nv -0.036987 0.297156 2.687158\nv -0.012909 0.295447 2.694367\nv -0.040314 0.297279 2.683166\nv -0.018112 0.295875 2.694874\nv -0.003433 0.293220 2.646632\nv -0.042786 0.297340 2.678614\nv 0.000610 0.293006 2.649908\nv -0.044327 0.297309 2.673672\nv 0.003937 0.292884 2.653902\nv -0.044846 0.297187 2.668535\nv 0.006409 0.292823 2.658454\nv -0.044342 0.297004 2.663394\nv 0.007950 0.292854 2.663394\nv -0.042847 0.296729 2.658454\nv 0.008469 0.292976 2.668535\nv -0.040390 0.296394 2.653900\nv 0.007965 0.293159 2.673672\nv -0.037094 0.295997 2.649909\nv 0.006470 0.293433 2.678614\nv -0.033051 0.295600 2.646634\nv 0.004013 0.293769 2.683167\nv -0.054443 -0.049767 2.704999\nv -0.049240 -0.050164 2.705506\nv -0.044052 -0.050591 2.704999\nv -0.039062 -0.051049 2.703501\nv -0.034454 -0.051476 2.701066\nv -0.030441 -0.051904 2.697789\nv -0.027130 -0.052300 2.693799\nv -0.024689 -0.052636 2.689244\nv -0.023178 -0.052880 2.684304\nv -0.022690 -0.053094 2.679167\nv -0.023209 -0.053216 2.674027\nv -0.024734 -0.053246 2.669085\nv -0.027206 -0.053185 2.664533\nv -0.030533 -0.053033 2.660540\nv -0.034576 -0.052819 2.657265\nv -0.049393 -0.051781 2.652826\nv -0.054581 -0.051354 2.653333\nv -0.059570 -0.050896 2.654833\nv -0.064163 -0.050469 2.657266\nv -0.068192 -0.050042 2.660541\nv -0.071503 -0.049645 2.664531\nv -0.073944 -0.049310 2.669085\nv -0.075439 -0.049065 2.674027\nv -0.075943 -0.048852 2.679166\nv -0.075424 -0.048730 2.684303\nv -0.073883 -0.048699 2.689244\nv -0.071411 -0.048760 2.693798\nv -0.068100 -0.048913 2.697789\nv -0.064041 -0.049126 2.701066\nv -0.059433 -0.049432 2.703501\nvn 0.1750 0.9846 0.0000\nvn 0.3616 0.9323 0.0000\nvn 0.5360 0.8442 0.0000\nvn 0.6910 0.7229 0.0000\nvn 0.8200 0.5724 0.0000\nvn 0.9173 0.3983 0.0000\nvn 0.9781 0.2082 0.0000\nvn -0.9822 0.1881 0.0000\nvn -0.9261 0.3774 0.0000\nvn -0.8339 0.5520 0.0000\nvn -0.7107 0.7035 0.0000\nvn -0.5612 0.8277 0.0000\nvn -0.3915 0.9202 -0.0000\nvn -0.2083 0.9781 0.0000\nvn -0.0171 0.9999 0.0000\nvn -0.0003 0.0002 1.0000\nvn -0.0003 -0.0002 1.0000\nvn 0.0000 -0.0000 1.0000\nvn -0.0002 0.0002 1.0000\nvn 0.0007 -0.0001 1.0000\nvn 1.0000 0.0093 0.0000\nvn -0.0000 0.0000 -1.0000\nvn 0.1799 0.9837 0.0000\nvn 0.3623 0.9321 -0.0018\nvn 0.3623 0.9321 0.0018\nvn 0.5342 0.8453 0.0028\nvn 0.5342 0.8453 -0.0028\nvn 0.6923 0.7216 0.0000\nvn 0.8181 0.5750 -0.0042\nvn 0.8181 0.5750 0.0042\nvn 0.9178 0.3971 0.0047\nvn 0.9178 0.3971 -0.0048\nvn 0.9178 0.3971 0.0048\nvn 0.9178 0.3971 -0.0047\nvn 0.9776 0.2103 0.0000\nvn 0.9999 0.0089 -0.0051\nvn 0.9999 0.0089 0.0051\nvn 0.9819 -0.1893 -0.0000\nvn 0.9268 -0.3754 -0.0000\nvn 0.8325 -0.5540 -0.0000\nvn 0.7115 -0.7027 0.0036\nvn 0.7115 -0.7027 -0.0036\nvn 0.5601 -0.8284 -0.0029\nvn 0.5601 -0.8284 0.0029\nvn 0.3894 -0.9211 -0.0000\nvn 0.2089 -0.9779 0.0011\nvn 0.2089 -0.9779 -0.0011\nvn 0.0174 -0.9998 -0.0000\nvn -0.1748 -0.9846 0.0010\nvn -0.1748 -0.9846 -0.0010\nvn -0.3613 -0.9324 0.0017\nvn -0.3613 -0.9324 -0.0017\nvn -0.5342 -0.8453 -0.0000\nvn -0.6923 -0.7216 -0.0000\nvn -0.8201 -0.5723 -0.0000\nvn -0.9168 -0.3993 -0.0000\nvn -0.9779 -0.2089 0.0000\nvn -0.9999 -0.0104 0.0000\nvn -0.9821 0.1882 0.0050\nvn -0.9821 0.1882 -0.0050\nvn -0.9260 0.3775 -0.0047\nvn -0.9260 0.3775 0.0047\nvn -0.8325 0.5540 0.0000\nvn -0.7115 0.7027 0.0036\nvn -0.7115 0.7027 -0.0036\nvn -0.5601 0.8284 0.0000\nvn -0.3943 0.9190 0.0000\nvn 0.8828 0.3714 -0.2875\nvn 0.8824 0.3732 -0.2864\nvn 0.8833 0.3710 -0.2866\nvn 0.8829 0.3728 -0.2856\nvn -0.2089 0.9779 -0.0011\nvn -0.2089 0.9779 0.0011\nvn -0.0174 0.9998 0.0000\nvn 0.2280 -0.5090 0.8301\nvn 0.2302 -0.5089 0.8295\nvn 0.2280 -0.5088 0.8301\nvn 0.2302 -0.5087 0.8296\nvn 0.1839 -0.8320 0.5234\nvn 0.1831 -0.8323 0.5233\nvn 0.1839 -0.8321 0.5233\nvn 0.1831 -0.8323 0.5232\nvn -0.9981 -0.0064 0.0606\nvn -0.9981 -0.0057 0.0611\nvn -0.9981 -0.0066 0.0610\nvn -0.9981 -0.0059 0.0615\nvn 0.3160 0.7926 -0.5214\nvn 0.3110 0.7958 -0.5197\nvn 0.3165 0.7929 -0.5207\nvn 0.3114 0.7961 -0.5190\nvn 0.8038 -0.5198 0.2892\nvn 0.8018 -0.5242 0.2871\nvn 0.8050 -0.5192 0.2870\nvn 0.8030 -0.5236 0.2848\nvn -0.6285 -0.6388 0.4437\nvn -0.6299 -0.6367 0.4448\nvn -0.6279 -0.6389 0.4445\nvn -0.6294 -0.6367 0.4455\nvn -0.5097 0.7408 -0.4376\nvn -0.5130 0.7377 -0.4390\nvn -0.5089 0.7406 -0.4389\nvn -0.5122 0.7374 -0.4403\nvn 0.9633 0.2005 -0.1785\nvn 0.9638 0.1953 -0.1813\nvn 0.9625 0.2019 -0.1813\nvn 0.9630 0.1967 -0.1840\nvn 0.0159 -0.8420 0.5393\nvn 0.0192 -0.8420 0.5392\nvn 0.0159 -0.8419 0.5395\nvn 0.0192 -0.8419 0.5393\nvn -0.9810 0.1831 -0.0638\nvn -0.9804 0.1874 -0.0614\nvn -0.9814 0.1818 -0.0612\nvn -0.9808 0.1861 -0.0589\nvn 0.4737 0.7326 -0.4887\nvn 0.4763 0.7301 -0.4899\nvn 0.4732 0.7324 -0.4895\nvn 0.4758 0.7300 -0.4907\nvn 0.6681 -0.6435 0.3737\nvn 0.6676 -0.6441 0.3734\nvn 0.6683 -0.6434 0.3734\nvn 0.6678 -0.6441 0.3730\nvn -0.7661 -0.5194 0.3785\nvn -0.7650 -0.5222 0.3770\nvn -0.7669 -0.5191 0.3773\nvn -0.7658 -0.5219 0.3759\nvn -0.3538 0.7988 -0.4865\nvn -0.3515 0.8003 -0.4859\nvn -0.3541 0.7990 -0.4859\nvn -0.3518 0.8005 -0.4853\nvn 0.9978 0.0046 -0.0667\nvn 0.9980 0.0131 -0.0622\nvn 0.9981 0.0020 -0.0618\nvn 0.9983 0.0105 -0.0573\nvn -0.1491 -0.8284 0.5399\nvn -0.1509 -0.8278 0.5403\nvn -0.1509 -0.8278 0.5404\nvn -0.9132 0.3656 -0.1801\nvn 0.6279 0.6403 -0.4425\nvn 0.6267 0.6421 -0.4416\nvn 0.6283 0.6403 -0.4418\nvn 0.6271 0.6421 -0.4410\nvn 0.5129 -0.7369 0.4404\nvn 0.5154 -0.7344 0.4416\nvn 0.5122 -0.7367 0.4414\nvn 0.5147 -0.7343 0.4426\nvn -0.8820 -0.3748 0.2856\nvn -0.8835 -0.3689 0.2887\nvn -0.8806 -0.3759 0.2885\nvn -0.8821 -0.3700 0.2915\nvn -0.1831 0.8355 -0.5180\nvn 0.9805 -0.1865 0.0626\nvn -0.3150 -0.7905 0.5253\nvn -0.8042 0.5221 -0.2841\nvn -0.8049 0.5205 -0.2849\nvn -0.8037 0.5223 -0.2849\nvn -0.8045 0.5207 -0.2858\nvn 0.7658 0.5248 -0.3718\nvn 0.7682 0.5189 -0.3750\nvn 0.7642 0.5254 -0.3742\nvn 0.7666 0.5196 -0.3773\nvn 0.3503 -0.7976 0.4911\nvn -0.9627 -0.1957 0.1866\nvn -0.9618 -0.2042 0.1822\nvn -0.9641 -0.1935 0.1820\nvn -0.9631 -0.2020 0.1776\nvn 0.1527 0.8314 -0.5343\nvn -0.0176 0.8455 -0.5336\nvn 0.9138 -0.3661 0.1758\nvn 0.9159 -0.3592 0.1792\nvn 0.9125 -0.3677 0.1796\nvn 0.9145 -0.3607 0.1831\nvn -0.4734 -0.7283 0.4955\nvn -0.4717 -0.7301 0.4945\nvn -0.4738 -0.7284 0.4950\nvn -0.4721 -0.7302 0.4939\nvn -0.6688 0.6432 -0.3728\nvn -0.6659 0.6474 -0.3708\nvn -0.6700 0.6431 -0.3708\nvn -0.6671 0.6473 -0.3689\nvn -0.2878 -0.0035 0.9577\nvn 0.3043 0.4479 -0.8407\nvn 0.3092 0.4459 -0.8400\nvn 0.3042 0.4476 -0.8409\nvn 0.3091 0.4456 -0.8402\nvn -0.5694 0.4434 -0.6923\nvn 0.0505 -0.5102 0.8586\nvn 0.4793 0.3991 -0.7817\nvn 0.4807 0.3981 -0.7813\nvn 0.4792 0.3990 -0.7818\nvn 0.4807 0.3980 -0.7814\nvn -0.4086 0.4767 -0.7783\nvn -0.1286 -0.4949 0.8594\nvn -0.1317 -0.4939 0.8595\nvn 0.6358 0.3361 -0.6948\nvn 0.6348 0.3369 -0.6954\nvn 0.6359 0.3362 -0.6947\nvn 0.6349 0.3370 -0.6952\nvn -0.2312 0.4939 -0.8382\nvn -0.3091 -0.4612 0.8317\nvn -0.3071 -0.4621 0.8320\nvn -0.3091 -0.4613 0.8317\nvn -0.3071 -0.4622 0.8319\nvn 0.7743 0.2585 -0.5776\nvn -0.0539 0.4942 -0.8677\nvn -0.0520 0.4940 -0.8679\nvn -0.0539 0.4943 -0.8676\nvn -0.4772 -0.4131 0.7757\nvn -0.4792 -0.4120 0.7750\nvn -0.4771 -0.4128 0.7758\nvn -0.4792 -0.4118 0.7751\nvn 0.8851 0.1671 -0.4344\nvn 0.8836 0.1695 -0.4365\nvn 0.8852 0.1676 -0.4339\nvn 0.8837 0.1700 -0.4360\nvn -0.6368 -0.3463 0.6889\nvn 0.9606 0.0678 -0.2695\nvn -0.7757 -0.2630 0.5737\nvn -0.7704 -0.2688 0.5781\nvn -0.7761 -0.2642 0.5726\nvn -0.7708 -0.2701 0.5770\nvn 0.9951 -0.0380 -0.0917\nvn 0.9949 -0.0353 -0.0943\nvn 0.9951 -0.0374 -0.0910\nvn 0.9950 -0.0347 -0.0936\nvn -0.8833 -0.1746 0.4350\nvn -0.8847 -0.1724 0.4331\nvn -0.8832 -0.1741 0.4355\nvn -0.8846 -0.1719 0.4336\nvn 0.9854 -0.1427 0.0931\nvn 0.9856 -0.1420 0.0922\nvn 0.9854 -0.1425 0.0932\nvn 0.9856 -0.1418 0.0924\nvn -0.9598 -0.0721 0.2713\nvn -0.9607 -0.0693 0.2689\nvn -0.9597 -0.0715 0.2719\nvn -0.9605 -0.0687 0.2695\nvn 0.9334 -0.2388 0.2679\nvn 0.9328 -0.2399 0.2691\nvn 0.9334 -0.2391 0.2677\nvn 0.9328 -0.2402 0.2688\nvn -0.9953 0.0387 0.0893\nvn -0.9952 0.0368 0.0911\nvn -0.9953 0.0382 0.0888\nvn -0.9952 0.0364 0.0907\nvn 0.8410 -0.3263 0.4315\nvn 0.8402 -0.3273 0.4325\nvn 0.8410 -0.3266 0.4313\nvn 0.8401 -0.3276 0.4322\nvn -0.9860 0.1404 -0.0901\nvn 0.7156 -0.3998 0.5728\nvn 0.7190 -0.3977 0.5699\nvn 0.7156 -0.3991 0.5733\nvn 0.7190 -0.3970 0.5705\nvn -0.9323 0.2393 -0.2711\nvn -0.9329 0.2384 -0.2700\nvn -0.9323 0.2390 -0.2713\nvn -0.9329 0.2381 -0.2703\nvn 0.5678 -0.4540 0.6867\nvn 0.5705 -0.4528 0.6852\nvn 0.5678 -0.4536 0.6870\nvn 0.5705 -0.4524 0.6855\nvn -0.8432 0.3206 -0.4315\nvn -0.8406 0.3233 -0.4346\nvn -0.8433 0.3214 -0.4308\nvn -0.8406 0.3241 -0.4340\nvn 0.4071 -0.4893 0.7713\nvn 0.4042 -0.4899 0.7724\nvn 0.4071 -0.4896 0.7711\nvn 0.4042 -0.4902 0.7722\nvn 0.1311 0.4778 -0.8686\nvn 0.1292 0.4784 -0.8686\nvn 0.1293 0.4784 -0.8686\nvn -0.7169 0.3929 -0.5759\nvn -0.7213 0.3900 -0.5724\nvn -0.7168 0.3920 -0.5766\nvn -0.7213 0.3891 -0.5731\nvn -0.0792 -0.9964 -0.0306\nvn 0.7671 -0.0494 -0.6396\nvn -0.0939 0.0390 -0.9948\nvn -0.4665 0.0148 0.8844\nvn 0.8770 -0.0643 -0.4762\nvn -0.6287 0.0326 0.7769\nvn 0.9528 -0.0766 -0.2937\nvn 0.9526 -0.0769 -0.2943\nvn -0.7670 0.0493 0.6397\nvn 0.9913 -0.0862 -0.0990\nvn -0.8771 0.0642 0.4760\nvn 0.9908 -0.0922 0.0993\nvn -0.9523 0.0765 0.2955\nvn 0.9512 -0.0947 0.2936\nvn 0.9515 -0.0945 0.2927\nvn -0.9915 0.0861 0.0975\nvn 0.8739 -0.0933 0.4771\nvn -0.9909 0.0921 -0.0979\nvn 0.7644 -0.0884 0.6387\nvn -0.9510 0.0945 -0.2945\nvn 0.6246 -0.0801 0.7769\nvn -0.8739 0.0932 -0.4772\nvn 0.4617 -0.0687 0.8844\nvn 0.0993 0.0219 -0.9948\nvn 0.0989 0.0214 -0.9949\nvn -0.7644 0.0883 -0.6386\nvn 0.2832 -0.0549 0.9575\nvn 0.2877 0.0035 -0.9577\nvn -0.6245 0.0800 -0.7769\nvn 0.0932 -0.0392 0.9949\nvn 0.0937 -0.0387 0.9948\nvn 0.4663 -0.0148 -0.8845\nvn -0.4613 0.0686 -0.8846\nvn -0.0983 -0.0217 0.9949\nvn 0.6283 -0.0327 -0.7773\nvn -0.2835 0.0549 -0.9574\nvn -0.2089 0.9779 0.0000\nvn -0.7115 0.7027 0.0035\nvn -0.7115 0.7027 -0.0035\nvn -0.9260 0.3775 0.0000\nvn -0.9821 0.1882 0.0000\nvn -0.9999 -0.0118 -0.0000\nvn -0.9782 -0.2075 -0.0000\nvn -0.9168 -0.3993 -0.0047\nvn -0.9168 -0.3993 0.0047\nvn -0.3613 -0.9324 0.0018\nvn -0.3613 -0.9324 -0.0018\nvn -0.1748 -0.9846 -0.0000\nvn 0.2089 -0.9779 -0.0000\nvn 0.3894 -0.9211 -0.0019\nvn 0.3894 -0.9211 0.0019\nvn 0.5601 -0.8284 -0.0000\nvn 0.7115 -0.7027 -0.0000\nvn 0.9819 -0.1893 0.0050\nvn 0.9819 -0.1893 -0.0050\nvn 0.9173 0.3982 0.0000\nvn 0.8191 0.5737 0.0042\nvn 0.8191 0.5737 -0.0042\nvn 0.6923 0.7216 0.0036\nvn 0.6923 0.7216 -0.0036\nvn 0.5342 0.8453 0.0000\nvn -0.8041 0.5222 0.2841\nvn -0.8049 0.5205 0.2849\nvn -0.8036 0.5224 0.2850\nvn -0.8045 0.5207 0.2858\nvn -0.3064 -0.4624 -0.8320\nvn -0.3096 -0.4612 -0.8315\nvn -0.3064 -0.4622 -0.8322\nvn -0.3095 -0.4610 -0.8316\nvn -0.3118 -0.7931 -0.5233\nvn -0.3194 -0.7882 -0.5261\nvn -0.3111 -0.7926 -0.5244\nvn -0.3188 -0.7877 -0.5272\nvn 0.9801 -0.1900 -0.0573\nvn 0.9817 -0.1802 -0.0622\nvn 0.9792 -0.1927 -0.0629\nvn 0.9808 -0.1830 -0.0679\nvn -0.1838 0.8352 0.5183\nvn -0.1821 0.8357 0.5181\nvn -0.1839 0.8354 0.5180\nvn -0.1821 0.8359 0.5178\nvn -0.8828 -0.3712 -0.2878\nvn 0.5139 -0.7356 -0.4415\nvn 0.6277 0.6407 0.4421\nvn 0.6271 0.6417 0.4417\nvn 0.6280 0.6407 0.4417\nvn 0.6273 0.6417 0.4413\nvn -0.9139 0.3636 0.1804\nvn -0.9133 0.3656 0.1793\nvn -0.9143 0.3631 0.1793\nvn -0.9137 0.3651 0.1782\nvn -0.1531 -0.8271 -0.5408\nvn -0.1466 -0.8290 -0.5397\nvn -0.1532 -0.8273 -0.5405\nvn -0.1467 -0.8292 -0.5394\nvn 0.9982 0.0092 0.0594\nvn 0.9981 0.0046 0.0619\nvn 0.9980 0.0106 0.0621\nvn 0.9979 0.0060 0.0646\nvn -0.3529 0.7996 0.4859\nvn -0.7662 -0.5190 -0.3789\nvn -0.7646 -0.5228 -0.3770\nvn -0.7672 -0.5187 -0.3774\nvn -0.7656 -0.5224 -0.3754\nvn 0.6668 -0.6454 -0.3728\nvn 0.6683 -0.6432 -0.3737\nvn 0.6662 -0.6453 -0.3738\nvn 0.6677 -0.6432 -0.3747\nvn 0.4760 0.7300 0.4905\nvn 0.4739 0.7321 0.4893\nvn 0.4765 0.7301 0.4899\nvn 0.4743 0.7322 0.4887\nvn -0.9804 0.1875 0.0599\nvn -0.9811 0.1832 0.0622\nvn -0.9800 0.1888 0.0624\nvn -0.9807 0.1845 0.0647\nvn 0.0191 -0.8419 -0.5394\nvn 0.0162 -0.8419 -0.5394\nvn 0.0191 -0.8419 -0.5393\nvn 0.0162 -0.8420 -0.5392\nvn 0.9632 0.1987 0.1813\nvn -0.5114 0.7386 0.4392\nvn -0.5107 0.7394 0.4388\nvn -0.5117 0.7386 0.4389\nvn -0.5109 0.7394 0.4385\nvn -0.6287 -0.6379 -0.4448\nvn 0.8032 -0.5225 -0.2862\nvn 0.8040 -0.5207 -0.2872\nvn 0.8027 -0.5228 -0.2872\nvn 0.8035 -0.5210 -0.2881\nvn 0.3142 0.7939 0.5206\nvn 0.3126 0.7949 0.5201\nvn 0.3143 0.7940 0.5203\nvn 0.3127 0.7950 0.5199\nvn -0.9980 -0.0090 -0.0629\nvn 0.1826 -0.8325 -0.5231\nvn 0.1843 -0.8320 -0.5233\nvn 0.1826 -0.8323 -0.5233\nvn 0.1842 -0.8319 -0.5235\nvn 0.8823 0.3726 0.2875\nvn 0.8820 0.3736 0.2871\nvn 0.8826 0.3724 0.2870\nvn 0.8823 0.3735 0.2865\nvn -0.6683 0.6445 0.3715\nvn -0.6673 0.6460 0.3708\nvn -0.6687 0.6444 0.3708\nvn -0.6677 0.6459 0.3701\nvn -0.4731 -0.7286 -0.4953\nvn -0.4719 -0.7299 -0.4946\nvn -0.4733 -0.7287 -0.4949\nvn -0.4721 -0.7299 -0.4943\nvn 0.9149 -0.3614 -0.1797\nvn 0.9143 -0.3636 -0.1787\nvn 0.9154 -0.3609 -0.1785\nvn 0.9147 -0.3631 -0.1775\nvn -0.0168 0.8455 0.5337\nvn -0.0181 0.8456 0.5335\nvn -0.0181 0.8455 0.5336\nvn 0.1496 0.8324 0.5336\nvn 0.1554 0.8305 0.5348\nvn 0.1495 0.8323 0.5338\nvn 0.1553 0.8304 0.5351\nvn -0.9634 -0.1983 -0.1801\nvn -0.9637 -0.1961 -0.1813\nvn -0.9631 -0.1989 -0.1812\nvn -0.9633 -0.1968 -0.1826\nvn 0.3500 -0.7978 -0.4909\nvn 0.3510 -0.7973 -0.4910\nvn 0.3499 -0.7977 -0.4911\nvn 0.3509 -0.7972 -0.4913\nvn 0.7666 0.5245 0.3704\nvn 0.7698 0.5169 0.3745\nvn 0.7646 0.5253 0.3735\nvn 0.7677 0.5177 0.3776\nvn 0.2832 -0.0549 -0.9575\nvn -0.2317 0.4939 0.8381\nvn -0.2303 0.4938 0.8386\nvn -0.2317 0.4940 0.8380\nvn -0.2302 0.4939 0.8385\nvn 0.6363 0.3361 0.6944\nvn -0.1315 -0.4942 -0.8593\nvn -0.1297 -0.4945 -0.8595\nvn -0.1297 -0.4945 -0.8594\nvn -0.4093 0.4764 0.7781\nvn -0.4081 0.4768 0.7786\nvn -0.4093 0.4766 0.7780\nvn -0.4081 0.4769 0.7785\nvn 0.4809 0.3980 0.7812\nvn 0.4789 0.3990 0.7820\nvn 0.4810 0.3982 0.7811\nvn 0.4789 0.3992 0.7818\nvn 0.0509 -0.5102 -0.8586\nvn -0.5685 0.4439 0.6927\nvn -0.5710 0.4429 0.6912\nvn -0.5685 0.4436 0.6929\nvn -0.5710 0.4426 0.6914\nvn 0.3061 0.4469 0.8406\nvn 0.3074 0.4466 0.8403\nvn 0.3061 0.4468 0.8406\nvn 0.3074 0.4465 0.8403\nvn 0.2270 -0.5091 -0.8302\nvn 0.2309 -0.5089 -0.8293\nvn 0.2271 -0.5088 -0.8304\nvn 0.2310 -0.5086 -0.8294\nvn -0.7196 0.3905 0.5741\nvn -0.7185 0.3912 0.5751\nvn -0.7196 0.3908 0.5739\nvn -0.7185 0.3915 0.5749\nvn 0.1271 0.4788 0.8687\nvn 0.1322 0.4777 0.8685\nvn 0.1270 0.4786 0.8688\nvn 0.1322 0.4776 0.8686\nvn 0.4049 -0.4899 -0.7721\nvn 0.4038 -0.4900 -0.7726\nvn 0.4049 -0.4900 -0.7720\nvn 0.4038 -0.4901 -0.7725\nvn -0.8419 0.3223 0.4327\nvn 0.5704 -0.4528 -0.6853\nvn -0.9334 0.2374 0.2691\nvn -0.9328 0.2385 0.2702\nvn -0.9334 0.2377 0.2688\nvn -0.9328 0.2388 0.2699\nvn 0.7168 -0.3986 -0.5721\nvn -0.9853 0.1432 0.0927\nvn -0.9861 0.1400 0.0894\nvn -0.9854 0.1424 0.0935\nvn -0.9861 0.1392 0.0902\nvn 0.8405 -0.3271 -0.4320\nvn -0.9950 0.0352 -0.0931\nvn -0.9951 0.0365 -0.0918\nvn -0.9950 0.0355 -0.0934\nvn -0.9951 0.0368 -0.0922\nvn 0.9329 -0.2399 -0.2686\nvn 0.9333 -0.2393 -0.2678\nvn 0.9329 -0.2397 -0.2688\nvn 0.9332 -0.2392 -0.2681\nvn -0.9606 -0.0697 -0.2692\nvn 0.9856 -0.1421 -0.0918\nvn 0.9858 -0.1411 -0.0907\nvn 0.9856 -0.1418 -0.0920\nvn 0.9858 -0.1408 -0.0909\nvn -0.8841 -0.1735 -0.4338\nvn -0.8852 -0.1720 -0.4323\nvn -0.8841 -0.1732 -0.4341\nvn -0.8851 -0.1716 -0.4327\nvn 0.9950 -0.0339 0.0940\nvn 0.9952 -0.0378 0.0903\nvn 0.9949 -0.0348 0.0950\nvn 0.9951 -0.0387 0.0913\nvn -0.7739 -0.2661 -0.5748\nvn 0.9606 0.0678 0.2696\nvn -0.6336 -0.3485 -0.6907\nvn -0.6361 -0.3465 -0.6894\nvn -0.6334 -0.3481 -0.6911\nvn -0.6360 -0.3461 -0.6897\nvn 0.8849 0.1674 0.4346\nvn 0.8838 0.1692 0.4362\nvn 0.8850 0.1678 0.4342\nvn 0.8839 0.1696 0.4358\nvn -0.4801 -0.4113 -0.7748\nvn -0.4773 -0.4129 -0.7757\nvn -0.4802 -0.4116 -0.7746\nvn -0.4774 -0.4132 -0.7755\nvn -0.0517 0.4940 0.8679\nvn -0.0538 0.4942 0.8677\nvn 0.7738 0.2591 0.5781\nvn 0.7746 0.2583 0.5773\nvn 0.7737 0.2589 0.5782\nvn 0.7745 0.2581 0.5775\nvn -0.0794 -0.9964 0.0306\nvn -0.7645 0.0883 0.6386\nvn 0.0989 0.0217 0.9949\nvn 0.4615 -0.0687 -0.8845\nvn -0.8745 0.0932 0.4760\nvn 0.6248 -0.0801 -0.7767\nvn -0.9505 0.0945 0.2959\nvn 0.7639 -0.0884 -0.6393\nvn -0.9909 0.0921 0.0979\nvn 0.8744 -0.0933 -0.4761\nvn -0.9912 0.0860 -0.1004\nvn 0.9509 -0.0946 -0.2945\nvn -0.9532 0.0767 -0.2925\nvn 0.9909 -0.0922 -0.0978\nvn -0.8769 0.0642 -0.4763\nvn 0.9913 -0.0862 0.0990\nvn -0.7673 0.0493 -0.6394\nvn -0.7667 0.0493 -0.6402\nvn 0.9528 -0.0767 0.2939\nvn -0.6277 0.0325 -0.7778\nvn 0.8771 -0.0643 0.4760\nvn 0.8768 -0.0643 0.4766\nvn -0.4670 0.0148 -0.8841\nvn -0.0940 0.0390 0.9948\nvn 0.7670 -0.0494 0.6397\nvn -0.2878 -0.0035 -0.9577\nvn -0.2832 0.0549 0.9575\nvn 0.6293 -0.0328 0.7765\nvn -0.0989 -0.0217 -0.9949\nvn -0.4620 0.0687 0.8842\nvn 0.4660 -0.0148 0.8846\nvn 0.0937 -0.0390 -0.9948\nvn -0.6241 0.0800 0.7772\nvn 0.2879 0.0035 0.9577\nusemtl None\ns off\nf 122//113 123//113 124//113 125//113\nf 125//114 124//114 126//114 127//114\nf 127//115 126//115 128//115 129//115\nf 129//116 128//116 130//116 131//116\nf 131//117 130//117 132//117 133//117\nf 133//118 132//118 134//118 135//118\nf 135//119 134//119 136//119 137//119\nf 138//120 139//120 140//120 141//120\nf 141//121 140//121 142//121 143//121\nf 143//122 142//122 144//122 145//122\nf 145//123 144//123 146//123 147//123\nf 147//124 146//124 148//124 149//124\nf 149//125 148//125 150//125 151//125\nf 151//126 150//126 152//126 153//126\nf 153//127 152//127 123//127 122//127\nf 150//128 148//129 146//130 144//130 142//130 140//131 139//132 154//130 136//130 134//130 132//130 130//130 128//130 126//130 124//130 123//130 152//130\nf 137//133 136//133 154//133 155//133\nf 122//134 125//134 127//134 129//134 131//134 133//134 135//134 137//134 155//134 138//134 141//134 143//134 145//134 147//134 149//134 151//134 153//134\nf 156//135 159//135 158//135 157//135\nf 159//136 161//137 160//136 158//137\nf 161//138 163//139 162//138 160//139\nf 163//140 165//140 164//140 162//140\nf 165//141 167//142 166//141 164//142\nf 167//143 169//144 168//145 166//146\nf 169//147 171//147 170//147 168//147\nf 171//148 173//149 172//148 170//149\nf 173//150 175//150 174//150 172//150\nf 175//151 177//151 176//151 174//151\nf 177//152 179//152 178//152 176//152\nf 179//153 181//154 180//153 178//154\nf 181//155 183//156 182//155 180//156\nf 183//157 185//157 184//157 182//157\nf 185//158 187//159 186//158 184//159\nf 187//160 189//160 188//160 186//160\nf 189//161 191//162 190//161 188//162\nf 191//163 193//164 192//163 190//164\nf 193//165 195//165 194//165 192//165\nf 195//166 197//166 196//166 194//166\nf 197//167 199//167 198//167 196//167\nf 199//168 201//168 200//168 198//168\nf 201//169 203//169 202//169 200//169\nf 203//170 205//170 204//170 202//170\nf 205//171 207//172 206//171 204//172\nf 207//173 209//174 208//173 206//174\nf 209//175 211//175 210//175 208//175\nf 211//176 213//177 212//176 210//177\nf 213//178 215//178 214//178 212//178\nf 215//179 217//179 216//179 214//179\nf 168//180 219//181 218//182 166//183\nf 217//184 221//185 220//184 216//185\nf 221//186 156//186 157//186 220//186\nf 156//130 221//130 217//130 215//130 213//130 211//130 209//130 207//130 205//130 203//130 201//130 199//130 197//130 195//130 193//130 191//130 189//130 187//130 185//130 183//130 181//130 179//130 177//130 175//130 173//130 171//130 169//130 167//130 165//130 163//130 161//130 159//130\nf 222//187 225//188 224//189 223//190\nf 186//191 222//192 223//193 184//194\nf 204//195 227//196 226//197 202//198\nf 160//199 229//200 228//201 158//202\nf 178//203 231//204 230//205 176//206\nf 196//207 233//208 232//209 194//210\nf 214//211 235//212 234//213 212//214\nf 170//215 236//216 219//217 168//218\nf 188//219 237//220 222//221 186//222\nf 206//223 238//224 227//225 204//226\nf 162//227 239//228 229//229 160//230\nf 180//231 240//232 231//233 178//234\nf 198//235 241//236 233//237 196//238\nf 216//239 242//240 235//241 214//242\nf 172//243 243//244 236//245 170//246\nf 190//247 244//248 237//247 188//249\nf 208//250 245//250 238//250 206//250\nf 164//251 246//252 239//253 162//254\nf 182//255 247//256 240//257 180//258\nf 200//259 248//260 241//261 198//262\nf 220//263 249//263 242//263 216//263\nf 174//264 250//264 243//264 172//264\nf 192//265 251//265 244//265 190//265\nf 210//266 252//267 245//268 208//269\nf 166//270 218//271 246//272 164//273\nf 184//274 223//274 247//274 182//274\nf 202//275 226//276 248//277 200//278\nf 158//279 228//279 253//279 157//279\nf 157//280 253//280 249//280 220//280\nf 176//281 230//282 250//283 174//284\nf 194//285 232//286 251//287 192//288\nf 212//289 234//290 252//291 210//292\nf 254//293 257//293 256//293 255//293\nf 229//294 259//295 258//296 228//297\nf 235//298 261//298 260//298 234//298\nf 237//299 262//299 225//299 222//299\nf 239//300 263//301 259//302 229//303\nf 242//304 264//304 261//304 235//304\nf 244//305 255//306 262//305 237//306\nf 246//307 265//308 263//309 239//310\nf 249//311 266//311 264//311 242//311\nf 251//312 254//313 255//314 244//315\nf 218//316 267//316 265//316 246//316\nf 253//317 268//318 266//319 249//318\nf 232//320 269//321 254//322 251//323\nf 219//324 270//325 267//326 218//327\nf 233//328 271//328 269//328 232//328\nf 236//329 272//329 270//329 219//329\nf 241//330 273//331 271//332 233//333\nf 243//334 274//335 272//336 236//337\nf 248//338 275//339 273//340 241//341\nf 250//342 276//343 274//344 243//345\nf 226//346 277//347 275//348 248//349\nf 230//350 278//351 276//352 250//353\nf 227//354 279//355 277//356 226//357\nf 231//358 280//359 278//360 230//361\nf 238//362 281//362 279//362 227//362\nf 240//363 282//364 280//365 231//366\nf 245//367 283//368 281//369 238//370\nf 247//371 284//372 282//373 240//374\nf 252//375 285//376 283//377 245//378\nf 223//379 224//380 284//381 247//382\nf 228//383 258//384 268//383 253//385\nf 234//386 260//387 285//388 252//389\nf 286//390 315//390 314//390 313//390 312//390 311//390 310//390 309//390 308//390 307//390 306//390 305//390 304//390 303//390 302//390 301//390 256//390 257//390 300//390 299//390 298//390 297//390 296//390 295//390 294//390 293//390 292//390 291//390 290//390 289//390 288//390 287//390\nf 267//391 312//391 313//391 265//391\nf 268//392 287//392 288//392 266//392\nf 269//393 300//393 257//393 254//393\nf 270//394 311//394 312//394 267//394\nf 271//395 299//395 300//395 269//395\nf 272//396 310//397 311//396 270//397\nf 273//398 298//398 299//398 271//398\nf 274//399 309//399 310//399 272//399\nf 275//400 297//400 298//400 273//400\nf 276//401 308//401 309//401 274//401\nf 277//402 296//402 297//402 275//402\nf 278//403 307//404 308//403 276//404\nf 279//405 295//405 296//405 277//405\nf 280//406 306//406 307//406 278//406\nf 281//407 294//407 295//407 279//407\nf 282//408 305//408 306//408 280//408\nf 283//409 293//409 294//409 281//409\nf 284//410 304//410 305//410 282//410\nf 285//411 292//411 293//411 283//411\nf 224//412 303//412 304//412 284//412\nf 258//413 286//414 287//413 268//414\nf 260//415 291//415 292//415 285//415\nf 225//416 302//416 303//416 224//416\nf 259//417 315//417 286//417 258//417\nf 261//418 290//418 291//418 260//418\nf 262//419 301//420 302//419 225//420\nf 263//421 314//421 315//421 259//421\nf 264//422 289//422 290//422 261//422\nf 255//423 256//423 301//423 262//423\nf 265//424 313//424 314//424 263//424\nf 266//425 288//425 289//425 264//425\nf 316//186 319//186 318//186 317//186\nf 319//426 321//426 320//426 318//426\nf 321//179 323//179 322//179 320//179\nf 323//178 325//178 324//178 322//178\nf 325//427 327//428 326//427 324//428\nf 327//175 329//175 328//175 326//175\nf 329//429 331//429 330//429 328//429\nf 331//430 333//430 332//430 330//430\nf 333//431 335//431 334//431 332//431\nf 335//432 337//432 336//432 334//432\nf 337//433 339//434 338//433 336//434\nf 339//167 341//167 340//167 338//167\nf 341//166 343//166 342//166 340//166\nf 343//165 345//165 344//165 342//165\nf 345//435 347//436 346//435 344//436\nf 347//437 349//437 348//437 346//437\nf 349//160 351//160 350//160 348//160\nf 351//438 353//438 352//438 350//438\nf 353//439 355//440 354//439 352//440\nf 355//441 357//441 356//441 354//441\nf 357//442 359//442 358//442 356//442\nf 359//152 361//152 360//152 358//152\nf 361//151 363//151 362//151 360//151\nf 363//443 365//444 364//443 362//444\nf 365//148 367//149 366//148 364//149\nf 367//147 369//147 368//147 366//147\nf 369//445 371//445 370//445 368//445\nf 371//446 373//447 372//446 370//447\nf 373//448 375//449 374//448 372//449\nf 375//450 377//450 376//450 374//450\nf 328//451 379//452 378//453 326//454\nf 377//136 381//137 380//136 376//137\nf 381//135 316//135 317//135 380//135\nf 316//134 381//134 377//134 375//134 373//134 371//134 369//134 367//134 365//134 363//134 361//134 359//134 357//134 355//134 353//134 351//134 349//134 347//134 345//134 343//134 341//134 339//134 337//134 335//134 333//134 331//134 329//134 327//134 325//134 323//134 321//134 319//134\nf 382//455 385//456 384//457 383//458\nf 346//459 382//460 383//461 344//462\nf 364//463 387//464 386//465 362//466\nf 320//467 389//468 388//469 318//470\nf 338//471 391//471 390//471 336//471\nf 356//472 393//472 392//472 354//472\nf 374//473 395//474 394//475 372//476\nf 330//477 396//478 379//479 328//480\nf 348//481 397//482 382//483 346//484\nf 366//485 398//486 387//487 364//488\nf 322//489 399//489 389//489 320//489\nf 340//490 400//491 391//492 338//493\nf 358//494 401//495 393//496 356//497\nf 376//498 402//499 395//500 374//501\nf 332//502 403//503 396//504 330//505\nf 350//506 404//507 397//508 348//509\nf 368//510 405//510 398//510 366//510\nf 324//511 406//512 399//513 322//514\nf 342//515 407//515 400//515 340//515\nf 360//516 408//517 401//518 358//519\nf 380//520 409//521 402//522 376//523\nf 334//524 410//524 403//524 332//524\nf 352//525 411//526 404//527 350//528\nf 370//529 412//530 405//531 368//532\nf 326//533 378//534 406//535 324//536\nf 344//537 383//538 407//539 342//540\nf 362//541 386//542 408//543 360//544\nf 318//545 388//546 413//545 317//547\nf 317//548 413//549 409//550 380//551\nf 336//552 390//553 410//554 334//555\nf 354//556 392//557 411//558 352//559\nf 372//560 394//561 412//562 370//563\nf 414//564 417//564 416//564 415//564\nf 389//565 419//566 418//567 388//568\nf 395//569 421//569 420//569 394//569\nf 397//570 422//571 385//570 382//572\nf 399//573 423//574 419//575 389//576\nf 402//577 424//578 421//579 395//580\nf 404//581 415//581 422//581 397//581\nf 406//582 425//583 423//584 399//585\nf 409//586 426//587 424//588 402//589\nf 411//590 414//591 415//592 404//593\nf 378//594 427//595 425//596 406//597\nf 413//598 428//599 426//600 409//601\nf 392//602 429//603 414//604 411//605\nf 379//606 430//606 427//606 378//606\nf 393//607 431//607 429//607 392//607\nf 396//608 432//609 430//610 379//611\nf 401//612 433//612 431//612 393//612\nf 403//613 434//614 432//615 396//616\nf 408//617 435//617 433//617 401//617\nf 410//618 436//619 434//620 403//621\nf 386//622 437//623 435//624 408//625\nf 390//626 438//626 436//626 410//626\nf 387//627 439//628 437//629 386//630\nf 391//631 440//632 438//633 390//634\nf 398//635 441//636 439//637 387//638\nf 400//639 442//639 440//639 391//639\nf 405//640 443//640 441//640 398//640\nf 407//641 444//642 442//643 400//644\nf 412//645 445//646 443//647 405//648\nf 383//649 384//650 444//651 407//652\nf 388//653 418//654 428//653 413//654\nf 394//655 420//656 445//657 412//658\nf 446//659 475//659 474//659 473//659 472//659 471//659 470//659 469//659 468//659 467//659 466//659 465//659 464//659 463//659 462//659 461//659 416//659 417//659 460//659 459//659 458//659 457//659 456//659 455//659 454//659 453//659 452//659 451//659 450//659 449//659 448//659 447//659\nf 427//660 472//660 473//660 425//660\nf 428//661 447//661 448//661 426//661\nf 429//662 460//662 417//662 414//662\nf 430//663 471//663 472//663 427//663\nf 431//664 459//664 460//664 429//664\nf 432//665 470//665 471//665 430//665\nf 433//666 458//666 459//666 431//666\nf 434//667 469//667 470//667 432//667\nf 435//668 457//668 458//668 433//668\nf 436//669 468//669 469//669 434//669\nf 437//670 456//670 457//670 435//670\nf 438//671 467//671 468//671 436//671\nf 439//672 455//672 456//672 437//672\nf 440//673 466//673 467//673 438//673\nf 441//674 454//674 455//674 439//674\nf 442//675 465//676 466//675 440//676\nf 443//677 453//677 454//677 441//677\nf 444//678 464//678 465//678 442//678\nf 445//679 452//680 453//679 443//680\nf 384//681 463//681 464//681 444//681\nf 418//682 446//682 447//682 428//682\nf 420//683 451//683 452//683 445//683\nf 385//684 462//684 463//684 384//684\nf 419//685 475//685 446//685 418//685\nf 421//686 450//686 451//686 420//686\nf 422//687 461//687 462//687 385//687\nf 423//688 474//688 475//688 419//688\nf 424//689 449//689 450//689 421//689\nf 415//690 416//690 461//690 422//690\nf 425//691 473//691 474//691 423//691\nf 426//692 448//692 449//692 424//692\no Cylinder.003\nv 212.123734 38.788239 46.162369\nv 212.123734 23.122971 46.162369\nv 212.092056 38.788239 46.159248\nv 212.092056 23.122971 46.159248\nv 212.061600 38.788239 46.150009\nv 212.061600 23.122971 46.150009\nv 212.033524 38.788239 46.135006\nv 212.033524 23.122971 46.135006\nv 212.008926 38.788239 46.114811\nv 212.008926 23.122971 46.114811\nv 211.988724 38.788239 46.090206\nv 211.988724 23.122971 46.090206\nv 211.973724 38.788239 46.062134\nv 211.973724 23.122971 46.062134\nv 211.964478 38.788239 46.031677\nv 211.964478 23.122971 46.031677\nv 211.961365 38.788239 46.000000\nv 211.961365 23.122971 46.000000\nv 211.964478 38.788239 45.968323\nv 211.964478 23.122971 45.968323\nv 211.973724 38.788239 45.937866\nv 211.973724 23.122971 45.937866\nv 211.988724 38.788239 45.909794\nv 211.988724 23.122971 45.909794\nv 212.008926 38.788239 45.885189\nv 212.008926 23.122971 45.885189\nv 212.033524 38.788239 45.864994\nv 212.033524 23.122971 45.864994\nv 212.061600 38.788239 45.849991\nv 212.061600 23.122971 45.849991\nv 212.092056 38.788239 45.840752\nv 212.092056 23.122971 45.840752\nv 212.123734 38.788239 45.837631\nv 212.123734 23.122971 45.837631\nv 212.155411 38.788239 45.840752\nv 212.155411 23.122971 45.840752\nv 212.185867 38.788239 45.849991\nv 212.185867 23.122971 45.849991\nv 212.213943 38.788239 45.864994\nv 212.213943 23.122971 45.864994\nv 212.238541 38.788239 45.885189\nv 212.238541 23.122971 45.885189\nv 212.258743 38.788239 45.909794\nv 212.258743 23.122971 45.909794\nv 212.273743 38.788239 45.937866\nv 212.273743 23.122971 45.937866\nv 212.282990 38.788239 45.968323\nv 212.282990 23.122971 45.968323\nv 212.286102 38.788239 46.000000\nv 212.286102 23.122971 46.000000\nv 212.282990 38.788239 46.031677\nv 212.282990 23.122971 46.031677\nv 212.273743 38.788239 46.062138\nv 212.273743 23.122971 46.062138\nv 212.258743 38.788239 46.090206\nv 212.258743 23.122971 46.090206\nv 212.238541 38.788239 46.114811\nv 212.238541 23.122971 46.114811\nv 212.213943 38.788239 46.135006\nv 212.213943 23.122971 46.135006\nv 212.185867 38.788239 46.150009\nv 212.185867 23.122971 46.150009\nv 212.155411 38.788239 46.159248\nv 212.155411 23.122971 46.159248\nvn 0.0980 0.0000 -0.9952\nvn 0.2903 0.0000 -0.9569\nvn 0.4713 0.0000 -0.8820\nvn 0.6345 0.0000 -0.7729\nvn 0.7729 0.0000 -0.6346\nvn 0.8820 0.0000 -0.4713\nvn 0.9569 0.0000 -0.2905\nvn 0.9952 0.0000 -0.0978\nvn 0.9952 0.0000 0.0978\nvn 0.9569 0.0000 0.2905\nvn 0.8820 0.0000 0.4713\nvn 0.7729 0.0000 0.6346\nvn 0.6345 0.0000 0.7729\nvn 0.4713 0.0000 0.8820\nvn 0.2903 0.0000 0.9569\nvn 0.0980 0.0000 0.9952\nvn -0.0980 0.0000 0.9952\nvn -0.2903 0.0000 0.9569\nvn -0.4713 0.0000 0.8820\nvn -0.6345 0.0000 0.7729\nvn -0.7729 0.0000 0.6346\nvn -0.8820 0.0000 0.4713\nvn -0.9569 0.0000 0.2905\nvn -0.9952 0.0000 0.0978\nvn -0.9952 0.0000 -0.0978\nvn -0.9569 0.0000 -0.2905\nvn -0.8820 0.0000 -0.4713\nvn -0.7729 0.0000 -0.6346\nvn -0.6345 0.0000 -0.7729\nvn -0.4713 0.0000 -0.8820\nvn 0.0000 1.0000 -0.0000\nvn -0.2903 0.0000 -0.9569\nvn -0.0980 0.0000 -0.9952\nvn 0.0000 -1.0000 -0.0000\nusemtl None\ns off\nf 476//693 477//693 479//693 478//693\nf 478//694 479//694 481//694 480//694\nf 480//695 481//695 483//695 482//695\nf 482//696 483//696 485//696 484//696\nf 484//697 485//697 487//697 486//697\nf 486//698 487//698 489//698 488//698\nf 488//699 489//699 491//699 490//699\nf 490//700 491//700 493//700 492//700\nf 492//701 493//701 495//701 494//701\nf 494//702 495//702 497//702 496//702\nf 496//703 497//703 499//703 498//703\nf 498//704 499//704 501//704 500//704\nf 500//705 501//705 503//705 502//705\nf 502//706 503//706 505//706 504//706\nf 504//707 505//707 507//707 506//707\nf 506//708 507//708 509//708 508//708\nf 508//709 509//709 511//709 510//709\nf 510//710 511//710 513//710 512//710\nf 512//711 513//711 515//711 514//711\nf 514//712 515//712 517//712 516//712\nf 516//713 517//713 519//713 518//713\nf 518//714 519//714 521//714 520//714\nf 520//715 521//715 523//715 522//715\nf 522//716 523//716 525//716 524//716\nf 524//717 525//717 527//717 526//717\nf 526//718 527//718 529//718 528//718\nf 528//719 529//719 531//719 530//719\nf 530//720 531//720 533//720 532//720\nf 532//721 533//721 535//721 534//721\nf 534//722 535//722 537//722 536//722\nf 479//723 477//723 539//723 537//723 535//723 533//723 531//723 529//723 527//723 525//723 523//723 521//723 519//723 517//723 515//723 513//723 511//723 509//723 507//723 505//723 503//723 501//723 499//723 497//723 495//723 493//723 491//723 489//723 487//723 485//723 483//723 481//723\nf 536//724 537//724 539//724 538//724\nf 538//725 539//725 477//725 476//725\nf 476//726 478//726 480//726 482//726 484//726 486//726 488//726 490//726 492//726 494//726 496//726 498//726 500//726 502//726 504//726 506//726 508//726 510//726 512//726 514//726 516//726 518//726 520//726 522//726 524//726 526//726 528//726 530//726 532//726 534//726 536//726 538//726\no Cylinder.002\nv 212.123734 38.788239 -45.837631\nv 212.123734 23.122971 -45.837631\nv 212.092056 38.788239 -45.840752\nv 212.092056 23.122971 -45.840752\nv 212.061600 38.788239 -45.849991\nv 212.061600 23.122971 -45.849991\nv 212.033524 38.788239 -45.864994\nv 212.033524 23.122971 -45.864994\nv 212.008926 38.788239 -45.885189\nv 212.008926 23.122971 -45.885189\nv 211.988724 38.788239 -45.909794\nv 211.988724 23.122971 -45.909794\nv 211.973724 38.788239 -45.937866\nv 211.973724 23.122971 -45.937866\nv 211.964478 38.788239 -45.968323\nv 211.964478 23.122971 -45.968323\nv 211.961365 38.788239 -46.000000\nv 211.961365 23.122971 -46.000000\nv 211.964478 38.788239 -46.031677\nv 211.964478 23.122971 -46.031677\nv 211.973724 38.788239 -46.062134\nv 211.973724 23.122971 -46.062134\nv 211.988724 38.788239 -46.090206\nv 211.988724 23.122971 -46.090206\nv 212.008926 38.788239 -46.114811\nv 212.008926 23.122971 -46.114811\nv 212.033524 38.788239 -46.135006\nv 212.033524 23.122971 -46.135006\nv 212.061600 38.788239 -46.150009\nv 212.061600 23.122971 -46.150009\nv 212.092056 38.788239 -46.159248\nv 212.092056 23.122971 -46.159248\nv 212.123734 38.788239 -46.162369\nv 212.123734 23.122971 -46.162369\nv 212.155411 38.788239 -46.159248\nv 212.155411 23.122971 -46.159248\nv 212.185867 38.788239 -46.150009\nv 212.185867 23.122971 -46.150009\nv 212.213943 38.788239 -46.135006\nv 212.213943 23.122971 -46.135006\nv 212.238541 38.788239 -46.114811\nv 212.238541 23.122971 -46.114811\nv 212.258743 38.788239 -46.090206\nv 212.258743 23.122971 -46.090206\nv 212.273743 38.788239 -46.062134\nv 212.273743 23.122971 -46.062134\nv 212.282990 38.788239 -46.031677\nv 212.282990 23.122971 -46.031677\nv 212.286102 38.788239 -46.000000\nv 212.286102 23.122971 -46.000000\nv 212.282990 38.788239 -45.968323\nv 212.282990 23.122971 -45.968323\nv 212.273743 38.788239 -45.937862\nv 212.273743 23.122971 -45.937862\nv 212.258743 38.788239 -45.909794\nv 212.258743 23.122971 -45.909794\nv 212.238541 38.788239 -45.885189\nv 212.238541 23.122971 -45.885189\nv 212.213943 38.788239 -45.864994\nv 212.213943 23.122971 -45.864994\nv 212.185867 38.788239 -45.849991\nv 212.185867 23.122971 -45.849991\nv 212.155411 38.788239 -45.840752\nv 212.155411 23.122971 -45.840752\nvn 0.0980 0.0000 -0.9952\nvn 0.2903 0.0000 -0.9569\nvn 0.4713 0.0000 -0.8820\nvn 0.6345 0.0000 -0.7729\nvn 0.7729 0.0000 -0.6346\nvn 0.8820 0.0000 -0.4713\nvn 0.9569 0.0000 -0.2905\nvn 0.9952 0.0000 -0.0978\nvn 0.9952 0.0000 0.0978\nvn 0.9569 0.0000 0.2905\nvn 0.8820 0.0000 0.4713\nvn 0.7729 0.0000 0.6346\nvn 0.6345 0.0000 0.7729\nvn 0.4713 0.0000 0.8820\nvn 0.2903 0.0000 0.9569\nvn 0.0980 0.0000 0.9952\nvn -0.0980 0.0000 0.9952\nvn -0.2903 0.0000 0.9569\nvn -0.4713 0.0000 0.8820\nvn -0.6345 0.0000 0.7729\nvn -0.7729 0.0000 0.6346\nvn -0.8820 0.0000 0.4713\nvn -0.9569 0.0000 0.2905\nvn -0.9952 0.0000 0.0978\nvn -0.9952 0.0000 -0.0978\nvn -0.9569 0.0000 -0.2905\nvn -0.8820 0.0000 -0.4713\nvn -0.7729 0.0000 -0.6346\nvn -0.6345 0.0000 -0.7729\nvn -0.4713 0.0000 -0.8820\nvn 0.0000 1.0000 -0.0000\nvn -0.2903 0.0000 -0.9569\nvn -0.0980 0.0000 -0.9952\nvn 0.0000 -1.0000 -0.0000\nusemtl None\ns off\nf 540//727 541//727 543//727 542//727\nf 542//728 543//728 545//728 544//728\nf 544//729 545//729 547//729 546//729\nf 546//730 547//730 549//730 548//730\nf 548//731 549//731 551//731 550//731\nf 550//732 551//732 553//732 552//732\nf 552//733 553//733 555//733 554//733\nf 554//734 555//734 557//734 556//734\nf 556//735 557//735 559//735 558//735\nf 558//736 559//736 561//736 560//736\nf 560//737 561//737 563//737 562//737\nf 562//738 563//738 565//738 564//738\nf 564//739 565//739 567//739 566//739\nf 566//740 567//740 569//740 568//740\nf 568//741 569//741 571//741 570//741\nf 570//742 571//742 573//742 572//742\nf 572//743 573//743 575//743 574//743\nf 574//744 575//744 577//744 576//744\nf 576//745 577//745 579//745 578//745\nf 578//746 579//746 581//746 580//746\nf 580//747 581//747 583//747 582//747\nf 582//748 583//748 585//748 584//748\nf 584//749 585//749 587//749 586//749\nf 586//750 587//750 589//750 588//750\nf 588//751 589//751 591//751 590//751\nf 590//752 591//752 593//752 592//752\nf 592//753 593//753 595//753 594//753\nf 594//754 595//754 597//754 596//754\nf 596//755 597//755 599//755 598//755\nf 598//756 599//756 601//756 600//756\nf 543//757 541//757 603//757 601//757 599//757 597//757 595//757 593//757 591//757 589//757 587//757 585//757 583//757 581//757 579//757 577//757 575//757 573//757 571//757 569//757 567//757 565//757 563//757 561//757 559//757 557//757 555//757 553//757 551//757 549//757 547//757 545//757\nf 600//758 601//758 603//758 602//758\nf 602//759 603//759 541//759 540//759\nf 540//760 542//760 544//760 546//760 548//760 550//760 552//760 554//760 556//760 558//760 560//760 562//760 564//760 566//760 568//760 570//760 572//760 574//760 576//760 578//760 580//760 582//760 584//760 586//760 588//760 590//760 592//760 594//760 596//760 598//760 600//760 602//760\no Cylinder.001\nv 263.053497 27.456505 12.162369\nv 263.053497 11.791238 12.162369\nv 263.021820 27.456505 12.159248\nv 263.021820 11.791238 12.159248\nv 262.991364 27.456505 12.150009\nv 262.991364 11.791238 12.150009\nv 262.963287 27.456505 12.135004\nv 262.963287 11.791238 12.135004\nv 262.938690 27.456505 12.114812\nv 262.938690 11.791238 12.114812\nv 262.918488 27.456505 12.090207\nv 262.918488 11.791238 12.090207\nv 262.903503 27.456505 12.062136\nv 262.903503 11.791238 12.062136\nv 262.894257 27.456505 12.031676\nv 262.894257 11.791238 12.031676\nv 262.891144 27.456505 12.000000\nv 262.891144 11.791238 12.000000\nv 262.894257 27.456505 11.968324\nv 262.894257 11.791238 11.968324\nv 262.903503 27.456505 11.937864\nv 262.903503 11.791238 11.937864\nv 262.918488 27.456505 11.909793\nv 262.918488 11.791238 11.909793\nv 262.938690 27.456505 11.885188\nv 262.938690 11.791238 11.885188\nv 262.963287 27.456505 11.864996\nv 262.963287 11.791238 11.864996\nv 262.991364 27.456505 11.849991\nv 262.991364 11.791238 11.849991\nv 263.021820 27.456505 11.840752\nv 263.021820 11.791238 11.840752\nv 263.053497 27.456505 11.837631\nv 263.053497 11.791238 11.837631\nv 263.085175 27.456505 11.840752\nv 263.085175 11.791238 11.840752\nv 263.115631 27.456505 11.849991\nv 263.115631 11.791238 11.849991\nv 263.143707 27.456505 11.864996\nv 263.143707 11.791238 11.864996\nv 263.168304 27.456505 11.885188\nv 263.168304 11.791238 11.885188\nv 263.188507 27.456505 11.909793\nv 263.188507 11.791238 11.909793\nv 263.203491 27.456505 11.937864\nv 263.203491 11.791238 11.937864\nv 263.212738 27.456505 11.968324\nv 263.212738 11.791238 11.968324\nv 263.215851 27.456505 12.000000\nv 263.215851 11.791238 12.000000\nv 263.212738 27.456505 12.031676\nv 263.212738 11.791238 12.031676\nv 263.203491 27.456505 12.062136\nv 263.203491 11.791238 12.062136\nv 263.188507 27.456505 12.090207\nv 263.188507 11.791238 12.090207\nv 263.168304 27.456505 12.114812\nv 263.168304 11.791238 12.114812\nv 263.143707 27.456505 12.135004\nv 263.143707 11.791238 12.135004\nv 263.115631 27.456505 12.150009\nv 263.115631 11.791238 12.150009\nv 263.085175 27.456505 12.159248\nv 263.085175 11.791238 12.159248\nvn 0.0980 0.0000 -0.9952\nvn 0.2903 0.0000 -0.9569\nvn 0.4713 0.0000 -0.8820\nvn 0.6345 0.0000 -0.7729\nvn 0.7729 0.0000 -0.6346\nvn 0.8822 0.0000 -0.4709\nvn 0.9569 0.0000 -0.2905\nvn 0.9952 0.0000 -0.0978\nvn 0.9952 0.0000 0.0978\nvn 0.9569 0.0000 0.2905\nvn 0.8822 0.0000 0.4709\nvn 0.7729 0.0000 0.6346\nvn 0.6345 0.0000 0.7729\nvn 0.4714 0.0000 0.8819\nvn 0.2903 0.0000 0.9569\nvn 0.0980 0.0000 0.9952\nvn -0.0980 0.0000 0.9952\nvn -0.2903 0.0000 0.9569\nvn -0.4714 0.0000 0.8819\nvn -0.6345 0.0000 0.7729\nvn -0.7729 0.0000 0.6346\nvn -0.8822 0.0000 0.4709\nvn -0.9569 0.0000 0.2905\nvn -0.9952 0.0000 0.0978\nvn -0.9952 0.0000 -0.0978\nvn -0.9569 0.0000 -0.2905\nvn -0.8822 0.0000 -0.4709\nvn -0.7729 0.0000 -0.6346\nvn -0.6345 0.0000 -0.7729\nvn -0.4713 0.0000 -0.8820\nvn 0.0000 1.0000 0.0000\nvn -0.2903 0.0000 -0.9569\nvn -0.0980 0.0000 -0.9952\nvn 0.0000 -1.0000 -0.0000\nusemtl None\ns off\nf 604//761 605//761 607//761 606//761\nf 606//762 607//762 609//762 608//762\nf 608//763 609//763 611//763 610//763\nf 610//764 611//764 613//764 612//764\nf 612//765 613//765 615//765 614//765\nf 614//766 615//766 617//766 616//766\nf 616//767 617//767 619//767 618//767\nf 618//768 619//768 621//768 620//768\nf 620//769 621//769 623//769 622//769\nf 622//770 623//770 625//770 624//770\nf 624//771 625//771 627//771 626//771\nf 626//772 627//772 629//772 628//772\nf 628//773 629//773 631//773 630//773\nf 630//774 631//774 633//774 632//774\nf 632//775 633//775 635//775 634//775\nf 634//776 635//776 637//776 636//776\nf 636//777 637//777 639//777 638//777\nf 638//778 639//778 641//778 640//778\nf 640//779 641//779 643//779 642//779\nf 642//780 643//780 645//780 644//780\nf 644//781 645//781 647//781 646//781\nf 646//782 647//782 649//782 648//782\nf 648//783 649//783 651//783 650//783\nf 650//784 651//784 653//784 652//784\nf 652//785 653//785 655//785 654//785\nf 654//786 655//786 657//786 656//786\nf 656//787 657//787 659//787 658//787\nf 658//788 659//788 661//788 660//788\nf 660//789 661//789 663//789 662//789\nf 662//790 663//790 665//790 664//790\nf 607//791 605//791 667//791 665//791 663//791 661//791 659//791 657//791 655//791 653//791 651//791 649//791 647//791 645//791 643//791 641//791 639//791 637//791 635//791 633//791 631//791 629//791 627//791 625//791 623//791 621//791 619//791 617//791 615//791 613//791 611//791 609//791\nf 664//792 665//792 667//792 666//792\nf 666//793 667//793 605//793 604//793\nf 604//794 606//794 608//794 610//794 612//794 614//794 616//794 618//794 620//794 622//794 624//794 626//794 628//794 630//794 632//794 634//794 636//794 638//794 640//794 642//794 644//794 646//794 648//794 650//794 652//794 654//794 656//794 658//794 660//794 662//794 664//794 666//794\no Cylinder\nv 263.053497 27.456505 -11.837631\nv 263.053497 11.791238 -11.837631\nv 263.021820 27.456505 -11.840752\nv 263.021820 11.791238 -11.840752\nv 262.991364 27.456505 -11.849991\nv 262.991364 11.791238 -11.849991\nv 262.963287 27.456505 -11.864996\nv 262.963287 11.791238 -11.864996\nv 262.938690 27.456505 -11.885188\nv 262.938690 11.791238 -11.885188\nv 262.918488 27.456505 -11.909793\nv 262.918488 11.791238 -11.909793\nv 262.903503 27.456505 -11.937864\nv 262.903503 11.791238 -11.937864\nv 262.894257 27.456505 -11.968324\nv 262.894257 11.791238 -11.968324\nv 262.891144 27.456505 -12.000000\nv 262.891144 11.791238 -12.000000\nv 262.894257 27.456505 -12.031676\nv 262.894257 11.791238 -12.031676\nv 262.903503 27.456505 -12.062136\nv 262.903503 11.791238 -12.062136\nv 262.918488 27.456505 -12.090207\nv 262.918488 11.791238 -12.090207\nv 262.938690 27.456505 -12.114812\nv 262.938690 11.791238 -12.114812\nv 262.963287 27.456505 -12.135004\nv 262.963287 11.791238 -12.135004\nv 262.991364 27.456505 -12.150009\nv 262.991364 11.791238 -12.150009\nv 263.021820 27.456505 -12.159248\nv 263.021820 11.791238 -12.159248\nv 263.053497 27.456505 -12.162369\nv 263.053497 11.791238 -12.162369\nv 263.085175 27.456505 -12.159248\nv 263.085175 11.791238 -12.159248\nv 263.115631 27.456505 -12.150009\nv 263.115631 11.791238 -12.150009\nv 263.143707 27.456505 -12.135004\nv 263.143707 11.791238 -12.135004\nv 263.168304 27.456505 -12.114812\nv 263.168304 11.791238 -12.114812\nv 263.188507 27.456505 -12.090207\nv 263.188507 11.791238 -12.090207\nv 263.203491 27.456505 -12.062136\nv 263.203491 11.791238 -12.062136\nv 263.212738 27.456505 -12.031676\nv 263.212738 11.791238 -12.031676\nv 263.215851 27.456505 -12.000000\nv 263.215851 11.791238 -12.000000\nv 263.212738 27.456505 -11.968324\nv 263.212738 11.791238 -11.968324\nv 263.203491 27.456505 -11.937864\nv 263.203491 11.791238 -11.937864\nv 263.188507 27.456505 -11.909793\nv 263.188507 11.791238 -11.909793\nv 263.168304 27.456505 -11.885188\nv 263.168304 11.791238 -11.885188\nv 263.143707 27.456505 -11.864996\nv 263.143707 11.791238 -11.864996\nv 263.115631 27.456505 -11.849991\nv 263.115631 11.791238 -11.849991\nv 263.085175 27.456505 -11.840752\nv 263.085175 11.791238 -11.840752\nvn 0.0980 0.0000 -0.9952\nvn 0.2903 0.0000 -0.9569\nvn 0.4714 0.0000 -0.8819\nvn 0.6345 0.0000 -0.7729\nvn 0.7729 0.0000 -0.6346\nvn 0.8822 0.0000 -0.4709\nvn 0.9569 0.0000 -0.2905\nvn 0.9952 0.0000 -0.0978\nvn 0.9952 0.0000 0.0978\nvn 0.9569 0.0000 0.2905\nvn 0.8822 0.0000 0.4709\nvn 0.7729 0.0000 0.6346\nvn 0.6345 0.0000 0.7729\nvn 0.4713 0.0000 0.8820\nvn 0.2903 0.0000 0.9569\nvn 0.0980 0.0000 0.9952\nvn -0.0980 0.0000 0.9952\nvn -0.2903 0.0000 0.9569\nvn -0.4713 0.0000 0.8820\nvn -0.6345 0.0000 0.7729\nvn -0.7729 0.0000 0.6346\nvn -0.8822 0.0000 0.4709\nvn -0.9569 0.0000 0.2905\nvn -0.9952 0.0000 0.0978\nvn -0.9952 0.0000 -0.0978\nvn -0.9569 0.0000 -0.2905\nvn -0.8822 0.0000 -0.4709\nvn -0.7729 0.0000 -0.6346\nvn -0.6345 0.0000 -0.7729\nvn -0.4714 0.0000 -0.8819\nvn 0.0000 1.0000 0.0000\nvn -0.2903 0.0000 -0.9569\nvn -0.0980 0.0000 -0.9952\nvn 0.0000 -1.0000 -0.0000\nusemtl None\ns off\nf 668//795 669//795 671//795 670//795\nf 670//796 671//796 673//796 672//796\nf 672//797 673//797 675//797 674//797\nf 674//798 675//798 677//798 676//798\nf 676//799 677//799 679//799 678//799\nf 678//800 679//800 681//800 680//800\nf 680//801 681//801 683//801 682//801\nf 682//802 683//802 685//802 684//802\nf 684//803 685//803 687//803 686//803\nf 686//804 687//804 689//804 688//804\nf 688//805 689//805 691//805 690//805\nf 690//806 691//806 693//806 692//806\nf 692//807 693//807 695//807 694//807\nf 694//808 695//808 697//808 696//808\nf 696//809 697//809 699//809 698//809\nf 698//810 699//810 701//810 700//810\nf 700//811 701//811 703//811 702//811\nf 702//812 703//812 705//812 704//812\nf 704//813 705//813 707//813 706//813\nf 706//814 707//814 709//814 708//814\nf 708//815 709//815 711//815 710//815\nf 710//816 711//816 713//816 712//816\nf 712//817 713//817 715//817 714//817\nf 714//818 715//818 717//818 716//818\nf 716//819 717//819 719//819 718//819\nf 718//820 719//820 721//820 720//820\nf 720//821 721//821 723//821 722//821\nf 722//822 723//822 725//822 724//822\nf 724//823 725//823 727//823 726//823\nf 726//824 727//824 729//824 728//824\nf 671//825 669//825 731//825 729//825 727//825 725//825 723//825 721//825 719//825 717//825 715//825 713//825 711//825 709//825 707//825 705//825 703//825 701//825 699//825 697//825 695//825 693//825 691//825 689//825 687//825 685//825 683//825 681//825 679//825 677//825 675//825 673//825\nf 728//826 729//826 731//826 730//826\nf 730//827 731//827 669//827 668//827\nf 668//828 670//828 672//828 674//828 676//828 678//828 680//828 682//828 684//828 686//828 688//828 690//828 692//828 694//828 696//828 698//828 700//828 702//828 704//828 706//828 708//828 710//828 712//828 714//828 716//828 718//828 720//828 722//828 724//828 726//828 728//828 730//828\no Cube.001\nv 262.840149 26.929474 15.343268\nv 262.840149 47.319588 15.343268\nv 262.840149 26.929474 -15.343268\nv 262.840149 47.319588 -15.343268\nv 263.328491 26.929474 15.343268\nv 263.328491 47.319588 15.343268\nv 263.328491 26.929474 -15.343268\nv 263.328491 47.319588 -15.343268\nvn -1.0000 0.0000 0.0000\nvn 0.0000 0.0000 -1.0000\nvn 1.0000 0.0000 0.0000\nvn 0.0000 0.0000 1.0000\nvn 0.0000 -1.0000 0.0000\nvn 0.0000 1.0000 0.0000\nusemtl None\ns off\nf 733//829 735//829 734//829 732//829\nf 735//830 739//830 738//830 734//830\nf 739//831 737//831 736//831 738//831\nf 737//832 733//832 732//832 736//832\nf 732//833 734//833 738//833 736//833\nf 737//834 739//834 735//834 733//834\no Cube\nv -234.456955 191.086319 3.172941\nv -234.456955 195.061966 3.172941\nv -234.456955 191.086319 -3.172941\nv -234.456955 195.061966 -3.172941\nv -234.316635 191.086319 3.172941\nv -234.316635 195.061966 3.172941\nv -234.316635 191.086319 -3.172941\nv -234.316635 195.061966 -3.172941\nvn -1.0000 0.0000 0.0000\nvn 0.0000 0.0000 -1.0000\nvn 1.0000 0.0000 0.0000\nvn 0.0000 0.0000 1.0000\nvn 0.0000 -1.0000 0.0000\nvn 0.0000 1.0000 0.0000\nusemtl None\ns off\nf 741//835 743//835 742//835 740//835\nf 743//836 747//836 746//836 742//836\nf 747//837 745//837 744//837 746//837\nf 745//838 741//838 740//838 744//838\nf 740//839 742//839 746//839 744//839\nf 745//840 747//840 743//840 741//840\no AUDIENCE_Mesh.008\nv 192.022034 -0.732078 -46.778614\nv 192.034744 24.541332 -45.055866\nv 192.022034 24.541332 -46.778595\nv 192.034744 23.502529 -45.055866\nv 192.047394 23.502525 -43.343208\nv 192.047394 22.457615 -43.343208\nv 192.060028 22.457615 -41.630550\nv 192.060028 21.418816 -41.630554\nv 192.072678 21.418812 -39.917904\nv 192.072678 20.380011 -39.917904\nv 192.085388 20.380009 -38.195171\nv 192.085388 19.341209 -38.195175\nv 192.098038 19.341209 -36.482525\nv 192.098038 18.302408 -36.482525\nv 192.110672 18.302408 -34.769867\nv 192.110672 17.257500 -34.769867\nv 192.123322 17.257496 -33.057209\nv 192.123322 16.218697 -33.057213\nv 192.135956 16.218695 -31.344566\nv 192.135956 15.179893 -31.344570\nv 192.148666 15.179893 -29.621838\nv 192.148682 14.141091 -29.621838\nv 192.168686 14.141089 -26.911818\nv 192.168686 13.096178 -26.911818\nv 192.181320 13.096176 -25.199162\nv 192.181320 12.057374 -25.199163\nv 192.193954 12.057374 -23.486507\nv 192.193954 11.018578 -23.486509\nv 192.206604 11.018576 -21.773855\nv 192.206604 9.979774 -21.773855\nv 192.219315 9.979773 -20.051126\nv 192.219315 8.940971 -20.051128\nv 192.231964 8.940970 -18.338474\nv 192.231964 7.896060 -18.338476\nv 192.244598 7.896060 -16.625824\nv 192.244598 6.857259 -16.625822\nv 192.257248 6.857258 -14.913170\nv 192.257248 5.818455 -14.913170\nv 192.269958 5.818454 -13.190442\nv 192.269958 -0.732104 -13.190449\nv 192.010468 23.502472 45.055897\nv 191.997757 24.541275 46.778625\nv 192.010468 24.541275 45.055901\nv 191.997757 -0.732136 46.778614\nv 192.023102 22.457561 43.343243\nv 192.023102 23.502476 43.343243\nv 192.035736 21.418762 41.630589\nv 192.035751 22.457561 41.630589\nv 192.048386 20.379963 39.917934\nv 192.048386 21.418766 39.917934\nv 192.061096 19.341166 38.195206\nv 192.061096 20.379965 38.195202\nv 192.073730 18.302364 36.482555\nv 192.073730 19.341166 36.482555\nv 192.086365 17.257454 34.769897\nv 192.086365 18.302364 34.769897\nv 192.099014 16.218657 33.057243\nv 192.099014 17.257456 33.057243\nv 192.111649 15.179856 31.344587\nv 192.111649 16.218657 31.344587\nv 192.124359 14.141056 29.621857\nv 192.124359 15.179857 29.621857\nv 192.144363 13.096144 26.911837\nv 192.144363 14.141058 26.911833\nv 192.156998 12.057346 25.199179\nv 192.156998 13.096146 25.199179\nv 192.169632 11.018549 23.486526\nv 192.169632 12.057346 23.486526\nv 192.182266 9.979750 21.773872\nv 192.182266 11.018551 21.773872\nv 192.194992 8.940948 20.051144\nv 192.194992 9.979751 20.051144\nv 192.207626 7.896038 18.338488\nv 192.207626 8.940949 18.338491\nv 192.220261 6.857239 16.625834\nv 192.220261 7.896038 16.625834\nv 192.232895 5.818439 14.913180\nv 192.232895 6.857240 14.913177\nv 192.245605 -0.732117 13.190448\nv 192.245605 5.818440 13.190451\nv 192.245605 -0.732117 13.190448\nv 206.384369 -0.732117 13.294782\nv 206.142319 -0.732136 46.882988\nv 191.997757 -0.732136 46.778614\nv 192.245605 5.818440 13.190451\nv 206.384369 5.818440 13.294785\nv 192.232895 5.818439 14.913180\nv 206.371948 5.818439 15.017515\nv 192.232895 6.857240 14.913177\nv 206.371948 6.857240 15.017516\nv 192.220261 6.857239 16.625834\nv 206.359604 6.857239 16.730173\nv 192.220261 7.896038 16.625834\nv 206.359604 7.896038 16.730171\nv 192.207626 7.896038 18.338488\nv 206.347275 7.896038 18.442827\nv 192.207626 8.940949 18.338491\nv 206.347275 8.940949 18.442829\nv 192.194992 8.940948 20.051144\nv 206.334915 8.940948 20.155487\nv 192.194992 9.979751 20.051144\nv 206.334930 9.979750 20.155487\nv 192.182266 9.979750 21.773872\nv 206.322510 9.979750 21.878216\nv 192.182266 11.018551 21.773872\nv 206.322510 11.018549 21.878216\nv 192.169632 11.018549 23.486526\nv 206.310165 11.018549 23.590872\nv 192.169632 12.057346 23.486526\nv 206.310165 12.057345 23.590872\nv 192.156998 12.057346 25.199179\nv 206.297821 12.057345 25.303528\nv 192.156998 13.096146 25.199179\nv 206.297821 13.096146 25.303528\nv 192.144363 13.096144 26.911837\nv 206.285492 13.096144 27.016186\nv 192.144363 14.141058 26.911833\nv 206.285492 14.141057 27.016186\nv 192.124359 14.141056 29.621857\nv 206.265961 14.141055 29.726210\nv 192.124359 15.179857 29.621857\nv 206.265961 15.179854 29.726210\nv 192.111649 15.179856 31.344587\nv 206.253540 15.179854 31.448944\nv 192.111649 16.218657 31.344587\nv 206.253540 16.218657 31.448940\nv 192.099014 16.218657 33.057243\nv 206.241196 16.218657 33.161602\nv 192.099014 17.257456 33.057243\nv 206.241196 17.257454 33.161606\nv 192.086365 17.257454 34.769897\nv 206.228867 17.257454 34.874260\nv 192.086365 18.302364 34.769897\nv 206.228867 18.302361 34.874260\nv 192.073730 18.302364 36.482555\nv 206.216522 18.302364 36.586914\nv 192.073730 19.341166 36.482555\nv 206.216522 19.341166 36.586914\nv 192.061096 19.341166 38.195206\nv 206.204178 19.341166 38.299572\nv 192.061096 20.379965 38.195202\nv 206.204178 20.379965 38.299572\nv 192.048386 20.379963 39.917934\nv 206.191757 20.379961 40.022301\nv 192.048386 21.418766 39.917934\nv 206.191757 21.418766 40.022301\nv 192.035736 21.418762 41.630589\nv 206.179428 21.418762 41.734959\nv 192.035751 22.457561 41.630589\nv 206.179428 22.457561 41.734959\nv 192.023102 22.457561 43.343243\nv 206.167084 22.457561 43.447617\nv 192.023102 23.502476 43.343243\nv 206.167084 23.502474 43.447617\nv 192.010468 23.502472 45.055897\nv 206.154739 23.502472 45.160267\nv 192.010468 24.541275 45.055901\nv 206.154739 24.541271 45.160267\nv 191.997757 24.541275 46.778625\nv 206.142319 24.541275 46.882999\nv 216.204666 -0.732117 13.363849\nv 215.991089 -0.732136 46.952244\nv 216.204666 5.818439 13.363853\nv 216.193710 5.818436 15.086593\nv 216.193710 6.857239 15.086592\nv 216.182831 6.857237 16.799259\nv 216.182831 7.896036 16.799259\nv 216.171936 7.896038 18.511925\nv 216.171936 8.940948 18.511925\nv 216.161041 8.940948 20.224592\nv 216.161041 9.979750 20.224592\nv 216.150101 9.979750 21.947332\nv 216.150085 11.018551 21.947334\nv 216.139206 11.018549 23.659998\nv 216.139206 12.057344 23.659998\nv 216.128311 12.057344 25.372662\nv 216.128311 13.096144 25.372663\nv 216.117416 13.096143 27.085331\nv 216.117416 14.141056 27.085329\nv 216.100189 14.141054 29.795370\nv 216.100189 15.179853 29.795370\nv 216.089233 15.179854 31.518110\nv 216.089233 16.218657 31.518110\nv 216.078354 16.218653 33.230782\nv 216.078339 17.257452 33.230782\nv 216.067459 17.257452 34.943447\nv 216.067459 18.302361 34.943451\nv 216.056564 18.302361 36.656113\nv 216.056564 19.341164 36.656113\nv 216.045670 19.341164 38.368778\nv 216.045670 20.379965 38.368778\nv 216.034714 20.379963 40.091518\nv 216.034714 21.418766 40.091518\nv 216.023834 21.418760 41.804184\nv 216.023834 22.457561 41.804188\nv 216.012939 22.457561 43.516850\nv 216.012939 23.502474 43.516850\nv 216.002060 23.502472 45.229515\nv 216.002045 24.541271 45.229515\nv 215.991104 24.541271 46.952251\nv 220.599564 -0.732117 13.388830\nv 222.042603 -0.732136 46.946896\nv 220.599564 5.818439 13.388834\nv 220.673584 5.818439 15.110019\nv 220.673584 6.857238 15.110018\nv 220.747162 6.857237 16.821138\nv 220.747162 7.896036 16.821138\nv 220.820740 7.896038 18.532257\nv 220.820740 8.940948 18.532259\nv 220.894318 8.940948 20.243378\nv 220.894318 9.979750 20.243378\nv 220.968338 9.979750 21.964563\nv 220.968338 11.018551 21.964563\nv 221.041916 11.018549 23.675682\nv 221.041916 12.057344 23.675682\nv 221.115494 12.057345 25.386799\nv 221.115494 13.096146 25.386801\nv 221.189072 13.096144 27.097921\nv 221.189072 14.141057 27.097921\nv 221.305511 14.141055 29.805511\nv 221.305511 15.179853 29.805515\nv 221.379517 15.179854 31.526697\nv 221.379517 16.218655 31.526697\nv 221.453094 16.218653 33.237820\nv 221.453094 17.257454 33.237820\nv 221.526688 17.257452 34.948944\nv 221.526688 18.302361 34.948944\nv 221.600266 18.302361 36.660061\nv 221.600266 19.341164 36.660065\nv 221.673843 19.341164 38.371181\nv 221.673843 20.379963 38.371178\nv 221.747849 20.379963 40.092365\nv 221.747849 21.418762 40.092369\nv 221.821426 21.418760 41.803486\nv 221.821426 22.457561 41.803482\nv 221.895020 22.457561 43.514599\nv 221.895020 23.502474 43.514603\nv 221.968597 23.502472 45.225719\nv 221.968597 24.541271 45.225723\nv 222.042603 24.541271 46.946911\nv 221.930130 -0.732117 13.266565\nv 227.770905 -0.732133 46.343922\nv 221.930130 5.818440 13.266568\nv 222.229691 5.818439 14.963097\nv 222.229691 6.857240 14.963097\nv 222.527512 6.857239 16.649706\nv 222.527512 7.896039 16.649706\nv 222.825333 7.896039 18.336313\nv 222.825333 8.940950 18.336315\nv 223.123154 8.940950 20.022923\nv 223.123154 9.979752 20.022923\nv 223.422729 9.979751 21.719454\nv 223.422729 11.018551 21.719454\nv 223.720551 11.018551 23.406059\nv 223.720551 12.057348 23.406059\nv 224.018372 12.057347 25.092670\nv 224.018372 13.096147 25.092667\nv 224.316193 13.096147 26.779276\nv 224.316193 14.141059 26.779276\nv 224.787445 14.141059 29.448084\nv 224.787445 15.179857 29.448084\nv 225.087021 15.179856 31.144611\nv 225.087021 16.218658 31.144611\nv 225.384842 16.218658 32.831226\nv 225.384842 17.257458 32.831223\nv 225.682663 17.257458 34.517834\nv 225.682663 18.302366 34.517834\nv 225.980484 18.302366 36.204445\nv 225.980484 19.341167 36.204441\nv 226.278290 19.341167 37.891052\nv 226.278290 20.379967 37.891052\nv 226.577866 20.379967 39.587582\nv 226.577866 21.418768 39.587578\nv 226.875687 21.418766 41.274189\nv 226.875687 22.457567 41.274189\nv 227.173508 22.457567 42.960796\nv 227.173508 23.502480 42.960796\nv 227.471329 23.502472 44.647400\nv 227.471329 24.541277 44.647404\nv 227.770905 24.541277 46.343929\nv 223.278549 -0.732117 12.910853\nv 234.186462 -0.732133 44.679455\nv 223.278549 5.818440 12.910856\nv 223.838013 5.818440 14.540259\nv 223.838013 6.857240 14.540259\nv 224.394211 6.857239 16.160133\nv 224.394211 7.896036 16.160133\nv 224.950394 7.896038 17.780010\nv 224.950394 8.940948 17.780012\nv 225.506592 8.940948 19.399885\nv 225.506592 9.979751 19.399885\nv 226.066055 9.979750 21.029289\nv 226.066055 11.018551 21.029289\nv 226.622253 11.018549 22.649162\nv 226.622253 12.057346 22.649162\nv 227.178436 12.057345 24.269037\nv 227.178436 13.096146 24.269037\nv 227.734634 13.096145 25.888912\nv 227.734634 14.141058 25.888912\nv 228.614716 14.141055 28.452124\nv 228.614716 15.179854 28.452126\nv 229.174179 15.179854 30.081530\nv 229.174179 16.218657 30.081530\nv 229.730377 16.218657 31.701403\nv 229.730377 17.257456 31.701403\nv 230.286575 17.257456 33.321278\nv 230.286575 18.302362 33.321285\nv 230.842758 18.302361 34.941154\nv 230.842758 19.341164 34.941154\nv 231.398956 19.341166 36.561031\nv 231.398956 20.379965 36.561031\nv 231.958420 20.379965 38.190434\nv 231.958420 21.418768 38.190434\nv 232.514603 21.418766 39.810310\nv 232.514603 22.457565 39.810310\nv 233.070801 22.457561 41.430187\nv 233.070801 23.502476 41.430187\nv 233.626984 23.502476 43.050056\nv 233.626999 24.541275 43.050060\nv 234.186447 24.541271 44.679466\nv 224.619370 -0.732117 12.338326\nv 239.790115 -0.732132 42.306217\nv 224.619370 5.818439 12.338329\nv 225.397476 5.818439 13.875374\nv 225.397476 6.857239 13.875373\nv 226.171021 6.857238 15.403431\nv 226.171021 7.896039 15.403431\nv 226.944580 7.896036 16.931486\nv 226.944580 8.940948 16.931490\nv 227.718140 8.940948 18.459547\nv 227.718140 9.979750 18.459547\nv 228.496231 9.979750 19.996592\nv 228.496231 11.018549 19.996592\nv 229.269791 11.018547 21.524649\nv 229.269791 12.057344 21.524647\nv 230.043350 12.057343 23.052706\nv 230.043350 13.096145 23.052706\nv 230.816895 13.096144 24.580763\nv 230.816895 14.141057 24.580763\nv 232.040939 14.141054 26.998686\nv 232.040939 15.179853 26.998688\nv 232.819031 15.179852 28.535732\nv 232.819031 16.218655 28.535732\nv 233.592590 16.218655 30.063787\nv 233.592590 17.257454 30.063787\nv 234.366150 17.257454 31.591845\nv 234.366150 18.302361 31.591845\nv 235.139694 18.302362 33.119911\nv 235.139694 19.341164 33.119911\nv 235.913254 19.341164 34.647968\nv 235.913254 20.379959 34.647968\nv 236.691360 20.379959 36.185009\nv 236.691360 21.418762 36.185009\nv 237.464920 21.418762 37.713066\nv 237.464920 22.457563 37.713066\nv 238.238464 22.457561 39.241123\nv 238.238464 23.502472 39.241123\nv 239.012024 23.502474 40.769180\nv 239.012024 24.541273 40.769180\nv 239.790115 24.541273 42.306229\nv 225.927109 -0.732117 11.565614\nv 244.712631 -0.732130 39.410378\nv 225.927109 5.818440 11.565618\nv 226.890625 5.818440 12.993767\nv 226.890625 6.857241 12.993767\nv 227.848495 6.857239 14.413567\nv 227.848495 7.896040 14.413566\nv 228.806351 7.896039 15.833364\nv 228.806366 8.940950 15.833364\nv 229.764221 8.940949 17.253166\nv 229.764221 9.979752 17.253166\nv 230.727737 9.979752 18.681316\nv 230.727737 11.018553 18.681316\nv 231.685608 11.018553 20.101114\nv 231.685608 12.057348 20.101114\nv 232.643478 12.057346 21.520914\nv 232.643478 13.096148 21.520914\nv 233.601349 13.096146 22.940714\nv 233.601349 14.141059 22.940714\nv 235.117035 14.141058 25.187336\nv 235.117035 15.179859 25.187336\nv 236.080536 15.179857 26.615486\nv 236.080536 16.218658 26.615484\nv 237.038406 16.218658 28.035284\nv 237.038406 17.257460 28.035286\nv 237.996277 17.257458 29.455086\nv 237.996277 18.302368 29.455086\nv 238.954132 18.302366 30.874882\nv 238.954147 19.341171 30.874882\nv 239.912003 19.341167 32.294685\nv 239.912003 20.379967 32.294685\nv 240.875519 20.379965 33.722836\nv 240.875519 21.418766 33.722836\nv 241.833389 21.418766 35.142635\nv 241.833389 22.457565 35.142639\nv 242.791260 22.457569 36.562439\nv 242.791245 23.502480 36.562435\nv 243.749130 23.502480 37.982235\nv 243.749130 24.541283 37.982239\nv 244.712631 24.541281 39.410385\nv 227.176331 -0.732117 10.609350\nv 249.075439 -0.732128 36.078072\nv 227.176331 5.818442 10.609352\nv 228.299530 5.818442 11.915636\nv 228.299530 6.857241 11.915635\nv 229.416168 6.857240 13.214281\nv 229.416168 7.896042 13.214281\nv 230.532791 7.896042 14.512926\nv 230.532791 8.940953 14.512926\nv 231.649429 8.940951 15.811571\nv 231.649429 9.979753 15.811572\nv 232.772629 9.979753 17.117857\nv 232.772629 11.018553 17.117859\nv 233.889252 11.018554 18.416504\nv 233.889252 12.057350 18.416502\nv 235.005890 12.057350 19.715149\nv 235.005890 13.096150 19.715149\nv 236.122513 13.096148 21.013794\nv 236.122528 14.141063 21.013792\nv 237.889420 14.141061 23.068707\nv 237.889420 15.179860 23.068707\nv 239.012619 15.179861 24.374992\nv 239.012619 16.218662 24.374990\nv 240.129257 16.218664 25.673635\nv 240.129257 17.257463 25.673637\nv 241.245880 17.257462 26.972281\nv 241.245880 18.302370 26.972281\nv 242.362518 18.302372 28.270927\nv 242.362518 19.341173 28.270927\nv 243.479141 19.341169 29.569571\nv 243.479141 20.379971 29.569576\nv 244.602341 20.379972 30.875858\nv 244.602341 21.418772 30.875858\nv 245.718979 21.418772 32.174507\nv 245.718979 22.457569 32.174503\nv 246.835617 22.457571 33.473148\nv 246.835617 23.502480 33.473148\nv 247.952240 23.502483 34.771793\nv 247.952240 24.541283 34.771797\nv 249.075439 24.541283 36.078079\nv 228.341583 -0.732117 9.486165\nv 252.964066 -0.732127 32.332596\nv 228.341583 5.818440 9.486168\nv 229.604462 5.818439 10.657955\nv 229.604462 6.857240 10.657955\nv 230.859955 6.857240 11.822890\nv 230.859955 7.896039 11.822890\nv 232.115448 7.896039 12.987823\nv 232.115448 8.940952 12.987823\nv 233.370941 8.940951 14.152760\nv 233.370941 9.979752 14.152762\nv 234.633820 9.979752 15.324550\nv 234.633820 11.018553 15.324550\nv 235.889328 11.018550 16.489485\nv 235.889328 12.057348 16.489485\nv 237.144821 12.057347 17.654421\nv 237.144821 13.096147 17.654419\nv 238.400314 13.096148 18.819357\nv 238.400314 14.141061 18.819355\nv 240.386948 14.141059 20.662693\nv 240.386948 15.179858 20.662693\nv 241.649826 15.179859 21.834478\nv 241.649826 16.218660 21.834480\nv 242.905319 16.218657 22.999414\nv 242.905319 17.257460 22.999416\nv 244.160828 17.257458 24.164349\nv 244.160828 18.302368 24.164347\nv 245.416321 18.302368 25.329287\nv 245.416321 19.341169 25.329285\nv 246.671814 19.341169 26.494221\nv 246.671814 20.379969 26.494225\nv 247.934692 20.379969 27.666010\nv 247.934692 21.418770 27.666012\nv 249.190186 21.418768 28.830950\nv 249.190186 22.457569 28.830946\nv 250.445679 22.457567 29.995880\nv 250.445679 23.502480 29.995880\nv 251.701172 23.502480 31.160816\nv 251.701172 24.541279 31.160820\nv 252.964066 24.541277 32.332603\nv 229.397400 -0.732114 8.212692\nv 256.421692 -0.732124 28.160490\nv 229.397400 5.818444 8.212695\nv 230.783463 5.818443 9.235813\nv 230.783463 6.857243 9.235813\nv 232.161423 6.857243 10.252947\nv 232.161423 7.896042 10.252948\nv 233.539383 7.896042 11.270082\nv 233.539383 8.940954 11.270083\nv 234.917358 8.940954 12.287215\nv 234.917358 9.979755 12.287217\nv 236.303421 9.979755 13.310335\nv 236.303421 11.018557 13.310335\nv 237.681381 11.018557 14.327470\nv 237.681381 12.057354 14.327470\nv 239.059341 12.057353 15.344604\nv 239.059341 13.096154 15.344604\nv 240.437302 13.096153 16.361740\nv 240.437317 14.141066 16.361738\nv 242.617737 14.141066 17.971203\nv 242.617737 15.179866 17.971203\nv 244.003799 15.179866 18.994320\nv 244.003799 16.218666 18.994320\nv 245.381760 16.218668 20.011456\nv 245.381760 17.257469 20.011456\nv 246.759735 17.257467 21.028587\nv 246.759735 18.302376 21.028587\nv 248.137695 18.302376 22.045725\nv 248.137695 19.341177 22.045725\nv 249.515656 19.341177 23.062857\nv 249.515656 20.379976 23.062860\nv 250.901718 20.379976 24.085979\nv 250.901718 21.418777 24.085981\nv 252.279678 21.418777 25.103115\nv 252.279678 22.457575 25.103115\nv 253.657654 22.457581 26.120251\nv 253.657639 23.502491 26.120249\nv 255.035614 23.502491 27.137381\nv 255.035614 24.541290 27.137383\nv 256.421692 24.541290 28.160501\nv 230.318329 -0.732114 6.805563\nv 259.447693 -0.732121 23.529995\nv 230.318329 5.818444 6.805566\nv 231.812363 5.818444 7.663359\nv 231.812363 6.857243 7.663356\nv 233.297653 6.857244 8.516132\nv 233.297653 7.896045 8.516133\nv 234.782959 7.896045 9.368908\nv 234.782959 8.940956 9.368908\nv 236.268265 8.940954 10.221686\nv 236.268265 9.979756 10.221687\nv 237.762299 9.979755 11.079477\nv 237.762299 11.018558 11.079477\nv 239.247604 11.018558 11.932252\nv 239.247604 12.057354 11.932254\nv 240.732895 12.057354 12.785030\nv 240.732895 13.096155 12.785028\nv 242.218201 13.096155 13.637804\nv 242.218201 14.141066 13.637804\nv 244.568466 14.141066 14.987197\nv 244.568466 15.179865 14.987195\nv 246.062515 15.179864 15.844989\nv 246.062515 16.218666 15.844987\nv 247.547806 16.218666 16.697763\nv 247.547806 17.257469 16.697763\nv 249.033112 17.257469 17.550541\nv 249.033112 18.302378 17.550539\nv 250.518417 18.302376 18.403316\nv 250.518402 19.341179 18.403316\nv 252.003708 19.341177 19.256092\nv 252.003708 20.379974 19.256094\nv 253.497742 20.379974 20.113886\nv 253.497742 21.418776 20.113888\nv 254.983047 21.418776 20.966661\nv 254.983047 22.457577 20.966663\nv 256.468323 22.457575 21.819437\nv 256.468323 23.502489 21.819439\nv 257.953644 23.502489 22.672215\nv 257.953674 24.541288 22.672213\nv 259.447693 24.541290 23.530005\nv 231.078918 -0.732114 5.281412\nv 261.997253 -0.732118 18.407036\nv 231.078918 5.818443 5.281412\nv 232.664703 5.818443 5.954620\nv 232.664703 6.857243 5.954621\nv 234.241226 6.857243 6.623896\nv 234.241226 7.896043 6.623897\nv 235.817749 7.896043 7.293169\nv 235.817749 8.940954 7.293169\nv 237.394272 8.940954 7.962442\nv 237.394272 9.979755 7.962441\nv 238.980057 9.979756 8.635652\nv 238.980057 11.018558 8.635651\nv 240.556580 11.018556 9.304925\nv 240.556580 12.057352 9.304925\nv 242.133102 12.057351 9.974198\nv 242.133102 13.096151 9.974196\nv 243.709625 13.096151 10.643471\nv 243.709625 14.141064 10.643470\nv 246.204239 14.141064 11.702495\nv 246.204239 15.179865 11.702497\nv 247.790024 15.179865 12.375705\nv 247.790024 16.218666 12.375706\nv 249.366547 16.218666 13.044979\nv 249.366547 17.257467 13.044979\nv 250.943069 17.257465 13.714249\nv 250.943069 18.302374 13.714255\nv 252.519592 18.302374 14.383528\nv 252.519592 19.341175 14.383526\nv 254.096100 19.341175 15.052800\nv 254.096115 20.379974 15.052798\nv 255.681900 20.379974 15.726011\nv 255.681900 21.418777 15.726010\nv 257.258423 21.418777 16.395285\nv 257.258423 22.457577 16.395283\nv 258.834961 22.457577 17.064558\nv 258.834961 23.502491 17.064558\nv 260.411438 23.502487 17.733831\nv 260.411438 24.541286 17.733829\nv 261.997253 24.541286 18.407038\nv 231.653702 -0.732114 3.656868\nv 263.981812 -0.732114 12.773835\nv 231.653702 5.818444 3.656869\nv 233.311798 5.818445 4.124475\nv 233.311798 6.857244 4.124475\nv 234.960205 6.857244 4.589347\nv 234.960205 7.896043 4.589348\nv 236.608612 7.896043 5.054220\nv 236.608612 8.940954 5.054220\nv 238.257019 8.940956 5.519093\nv 238.257019 9.979757 5.519093\nv 239.915115 9.979757 5.986700\nv 239.915115 11.018559 5.986699\nv 241.563522 11.018559 6.451572\nv 241.563522 12.057356 6.451572\nv 243.211929 12.057355 6.916444\nv 243.211929 13.096154 6.916445\nv 244.860321 13.096154 7.381319\nv 244.860321 14.141068 7.381318\nv 247.468689 14.141067 8.116909\nv 247.468689 15.179868 8.116909\nv 249.126785 15.179868 8.584517\nv 249.126785 16.218670 8.584515\nv 250.775192 16.218668 9.049389\nv 250.775192 17.257471 9.049390\nv 252.423599 17.257467 9.514259\nv 252.423599 18.302376 9.514261\nv 254.071991 18.302378 9.979136\nv 254.071991 19.341177 9.979135\nv 255.720398 19.341179 10.444008\nv 255.720398 20.379976 10.444006\nv 257.378479 20.379978 10.911616\nv 257.378479 21.418777 10.911613\nv 259.026917 21.418777 11.376485\nv 259.026917 22.457577 11.376486\nv 260.675293 22.457577 11.841358\nv 260.675293 23.502493 11.841359\nv 262.323730 23.502493 12.306232\nv 262.323730 24.541290 12.306233\nv 263.981812 24.541290 12.773838\nv 232.017242 -0.732110 1.948565\nv 265.275330 -0.732111 6.652363\nv 232.017242 5.818446 1.948567\nv 233.723038 5.818446 2.189824\nv 233.723038 6.857244 2.189825\nv 235.418869 6.857244 2.429670\nv 235.418869 7.896048 2.429670\nv 237.114685 7.896048 2.669516\nv 237.114685 8.940959 2.669516\nv 238.810501 8.940960 2.909362\nv 238.810501 9.979761 2.909361\nv 240.516312 9.979758 3.150618\nv 240.516312 11.018560 3.150621\nv 242.212128 11.018559 3.390466\nv 242.212128 12.057356 3.390467\nv 243.907959 12.057356 3.630312\nv 243.907959 13.096157 3.630312\nv 245.603775 13.096157 3.870159\nv 245.603775 14.141070 3.870158\nv 248.287170 14.141069 4.249677\nv 248.287170 15.179870 4.249677\nv 249.992966 15.179870 4.490936\nv 249.992966 16.218672 4.490937\nv 251.688797 16.218672 4.730784\nv 251.688797 17.257473 4.730785\nv 253.384613 17.257473 4.970628\nv 253.384613 18.302383 4.970629\nv 255.080444 18.302383 5.210475\nv 255.080429 19.341185 5.210476\nv 256.776245 19.341185 5.450322\nv 256.776245 20.379984 5.450322\nv 258.482056 20.379984 5.691577\nv 258.482056 21.418787 5.691577\nv 260.177856 21.418785 5.931423\nv 260.177887 22.457582 5.931423\nv 261.873718 22.457582 6.171270\nv 261.873718 23.502495 6.171270\nv 263.569519 23.502495 6.411115\nv 263.569519 24.541294 6.411119\nv 265.275330 24.541294 6.652373\nv 232.144089 -0.732110 0.173127\nv 265.711792 -0.732108 1.370708\nv 232.144089 5.818447 0.173130\nv 233.865768 5.818447 0.234554\nv 233.865768 6.857247 0.234554\nv 235.577377 6.857247 0.295618\nv 235.577377 7.896048 0.295619\nv 237.288986 7.896049 0.356684\nv 237.288986 8.940960 0.356683\nv 239.000595 8.940960 0.417748\nv 239.000595 9.979762 0.417750\nv 240.722275 9.979761 0.479173\nv 240.722275 11.018562 0.479174\nv 242.433884 11.018562 0.540238\nv 242.433884 12.057360 0.540239\nv 244.145493 12.057360 0.601303\nv 244.145493 13.096159 0.601302\nv 245.857117 13.096160 0.662369\nv 245.857117 14.141073 0.662367\nv 248.565491 14.141073 0.758992\nv 248.565491 15.179873 0.758992\nv 250.287170 15.179873 0.820417\nv 250.287170 16.218674 0.820417\nv 251.998779 16.218676 0.881481\nv 251.998779 17.257475 0.881484\nv 253.710388 17.257475 0.942548\nv 253.710388 18.302385 0.942548\nv 255.421997 18.302385 1.003613\nv 255.421997 19.341185 1.003611\nv 257.133606 19.341185 1.064678\nv 257.133606 20.379986 1.064678\nv 258.855286 20.379986 1.126102\nv 258.855286 21.418789 1.126100\nv 260.566895 21.418789 1.187165\nv 260.566895 22.457588 1.187167\nv 262.278503 22.457588 1.248229\nv 262.278503 23.502502 1.248230\nv 263.990112 23.502502 1.309294\nv 263.990112 24.541302 1.309296\nv 265.711792 24.541302 1.370720\nv 232.144089 -0.732110 -0.173127\nv 265.711426 -0.732107 -1.381016\nv 232.144089 5.818447 -0.173126\nv 233.865738 5.818447 -0.235078\nv 233.865738 6.857247 -0.235078\nv 235.577332 6.857247 -0.296668\nv 235.577332 7.896048 -0.296668\nv 237.288925 7.896048 -0.358258\nv 237.288925 8.940960 -0.358259\nv 239.000519 8.940960 -0.419848\nv 239.000519 9.979761 -0.419847\nv 240.722183 9.979761 -0.481800\nv 240.722183 11.018561 -0.481800\nv 242.433777 11.018561 -0.543390\nv 242.433777 12.057360 -0.543390\nv 244.145370 12.057359 -0.604979\nv 244.145370 13.096161 -0.604979\nv 245.856964 13.096159 -0.666569\nv 245.856964 14.141072 -0.666571\nv 248.565308 14.141072 -0.764027\nv 248.565308 15.179872 -0.764028\nv 250.286972 15.179873 -0.825979\nv 250.286972 16.218674 -0.825978\nv 251.998550 16.218674 -0.887569\nv 251.998550 17.257475 -0.887566\nv 253.710144 17.257475 -0.949157\nv 253.710144 18.302383 -0.949158\nv 255.421738 18.302382 -1.010748\nv 255.421738 19.341185 -1.010748\nv 257.133331 19.341185 -1.072339\nv 257.133362 20.379986 -1.072339\nv 258.854980 20.379986 -1.134291\nv 258.854980 21.418789 -1.134292\nv 260.566589 21.418787 -1.195879\nv 260.566589 22.457588 -1.195882\nv 262.278198 22.457588 -1.257472\nv 262.278198 23.502499 -1.257470\nv 263.989746 23.502499 -1.319062\nv 263.989777 24.541302 -1.319060\nv 265.711426 24.541302 -1.381015\nv 232.016144 -0.732110 -1.948565\nv 265.268921 -0.732105 -6.689668\nv 232.016144 5.818449 -1.948564\nv 233.721664 5.818449 -2.191734\nv 233.721664 6.857249 -2.191734\nv 235.417221 6.857248 -2.433482\nv 235.417221 7.896049 -2.433483\nv 237.112778 7.896049 -2.675229\nv 237.112778 8.940960 -2.675230\nv 238.808334 8.940960 -2.916978\nv 238.808334 9.979760 -2.916978\nv 240.513855 9.979764 -3.160146\nv 240.513855 11.018564 -3.160145\nv 242.209412 11.018564 -3.401895\nv 242.209412 12.057362 -3.401895\nv 243.904968 12.057362 -3.643641\nv 243.904968 13.096163 -3.643641\nv 245.600510 13.096163 -3.885390\nv 245.600510 14.141076 -3.885390\nv 248.283478 14.141076 -4.267919\nv 248.283478 15.179875 -4.267922\nv 249.988998 15.179874 -4.511091\nv 249.988998 16.218678 -4.511090\nv 251.684555 16.218678 -4.752839\nv 251.684555 17.257477 -4.752837\nv 253.380112 17.257477 -4.994584\nv 253.380112 18.302383 -4.994586\nv 255.075668 18.302385 -5.236335\nv 255.075668 19.341188 -5.236333\nv 256.771240 19.341187 -5.478081\nv 256.771240 20.379986 -5.478080\nv 258.476746 20.379986 -5.721249\nv 258.476746 21.418789 -5.721251\nv 260.172302 21.418789 -5.963001\nv 260.172302 22.457588 -5.963001\nv 261.867859 22.457592 -6.204748\nv 261.867859 23.502502 -6.204747\nv 263.563416 23.502506 -6.446493\nv 263.563416 24.541306 -6.446493\nv 265.268921 24.541306 -6.689665\nv 231.649689 -0.732108 -3.656868\nv 263.960083 -0.732102 -12.836501\nv 231.649689 5.818451 -3.656867\nv 233.306885 5.818451 -4.127687\nv 233.306885 6.857249 -4.127687\nv 234.954391 6.857251 -4.595756\nv 234.954391 7.896052 -4.595755\nv 236.601883 7.896052 -5.063823\nv 236.601883 8.940963 -5.063824\nv 238.249390 8.940964 -5.531890\nv 238.249390 9.979763 -5.531890\nv 239.906570 9.979765 -6.002712\nv 239.906570 11.018565 -6.002713\nv 241.554077 11.018565 -6.470778\nv 241.554077 12.057362 -6.470778\nv 243.201569 12.057364 -6.938846\nv 243.201569 13.096164 -6.938845\nv 244.849075 13.096164 -7.406913\nv 244.849075 14.141076 -7.406913\nv 247.455994 14.141077 -8.147559\nv 247.456009 15.179877 -8.147563\nv 249.113190 15.179877 -8.618384\nv 249.113190 16.218679 -8.618382\nv 250.760696 16.218679 -9.086450\nv 250.760696 17.257483 -9.086452\nv 252.408188 17.257483 -9.554519\nv 252.408188 18.302389 -9.554518\nv 254.055695 18.302389 -10.022585\nv 254.055679 19.341194 -10.022586\nv 255.703186 19.341194 -10.490653\nv 255.703186 20.379992 -10.490653\nv 257.360382 20.379993 -10.961474\nv 257.360382 21.418795 -10.961474\nv 259.007874 21.418795 -11.429543\nv 259.007874 22.457596 -11.429543\nv 260.655396 22.457596 -11.897611\nv 260.655396 23.502506 -11.897607\nv 262.302887 23.502508 -12.365676\nv 262.302856 24.541307 -12.365678\nv 263.960083 24.541307 -12.836495\nv 231.070786 -0.732107 -5.281413\nv 261.958069 -0.732099 -18.479946\nv 231.070786 5.818450 -5.281412\nv 232.654984 5.818451 -5.958361\nv 232.654984 6.857250 -5.958361\nv 234.229935 6.857250 -6.631351\nv 234.229935 7.896050 -6.631350\nv 235.804871 7.896050 -7.304339\nv 235.804871 8.940962 -7.304339\nv 237.379807 8.940962 -7.977331\nv 237.379807 9.979763 -7.977332\nv 238.964005 9.979763 -8.654279\nv 238.964005 11.018563 -8.654280\nv 240.538940 11.018564 -9.327271\nv 240.538940 12.057362 -9.327271\nv 242.113876 12.057365 -10.000262\nv 242.113876 13.096165 -10.000262\nv 243.688812 13.096165 -10.673251\nv 243.688812 14.141077 -10.673251\nv 246.180923 14.141077 -11.738160\nv 246.180923 15.179875 -11.738159\nv 247.765121 15.179878 -12.415112\nv 247.765121 16.218679 -12.415112\nv 249.340057 16.218678 -13.088102\nv 249.340057 17.257479 -13.088102\nv 250.914993 17.257479 -13.761092\nv 250.914993 18.302387 -13.761088\nv 252.489929 18.302387 -14.434080\nv 252.489929 19.341192 -14.434080\nv 254.064865 19.341192 -15.107070\nv 254.064865 20.379990 -15.107070\nv 255.649063 20.379990 -15.784020\nv 255.649063 21.418791 -15.784020\nv 257.223999 21.418791 -16.457008\nv 257.223999 22.457592 -16.457008\nv 258.798950 22.457592 -17.130001\nv 258.798950 23.502506 -17.130005\nv 260.373901 23.502510 -17.802990\nv 260.373901 24.541311 -17.802994\nv 261.958069 24.541309 -18.479940\nv 230.305496 -0.732107 -6.805564\nv 259.394562 -0.732095 -23.599983\nv 230.305496 5.818451 -6.805562\nv 231.797455 5.818451 -7.666944\nv 231.797455 6.857252 -7.666944\nv 233.280716 6.857254 -8.523288\nv 233.280701 7.896052 -8.523287\nv 234.763947 7.896050 -9.379632\nv 234.763947 8.940966 -9.379631\nv 236.247192 8.940967 -10.235975\nv 236.247192 9.979769 -10.235974\nv 237.739166 9.979769 -11.097356\nv 237.739166 11.018568 -11.097356\nv 239.222412 11.018568 -11.953699\nv 239.222412 12.057365 -11.953698\nv 240.705658 12.057365 -12.810043\nv 240.705658 13.096167 -12.810042\nv 242.188904 13.096168 -13.666386\nv 242.188904 14.141080 -13.666389\nv 244.535919 14.141081 -15.021427\nv 244.535919 15.179879 -15.021427\nv 246.027893 15.179881 -15.882808\nv 246.027893 16.218685 -15.882807\nv 247.511139 16.218685 -16.739153\nv 247.511139 17.257484 -16.739153\nv 248.994385 17.257484 -17.595495\nv 248.994385 18.302393 -17.595495\nv 250.477631 18.302393 -18.451839\nv 250.477631 19.341198 -18.451839\nv 251.960876 19.341200 -19.308186\nv 251.960876 20.379997 -19.308184\nv 253.452850 20.379999 -20.169563\nv 253.452850 21.418800 -20.169563\nv 254.936096 21.418800 -21.025904\nv 254.936096 22.457602 -21.025904\nv 256.419342 22.457602 -21.882246\nv 256.419342 23.502514 -21.882248\nv 257.902588 23.502514 -22.738592\nv 257.902588 24.541313 -22.738596\nv 259.394531 24.541313 -23.599974\nv 229.379852 -0.732107 -8.212693\nv 256.361755 -0.732092 -28.217777\nv 229.379852 5.818451 -8.212690\nv 230.763748 5.818452 -9.238746\nv 230.763748 6.857252 -9.238747\nv 232.139557 6.857254 -10.258801\nv 232.139557 7.896053 -10.258801\nv 233.515350 7.896053 -11.278856\nv 233.515350 8.940965 -11.278857\nv 234.891159 8.940968 -12.298912\nv 234.891159 9.979767 -12.298911\nv 236.275055 9.979767 -13.324965\nv 236.275055 11.018568 -13.324966\nv 237.650848 11.018569 -14.345021\nv 237.650848 12.057365 -14.345020\nv 239.026657 12.057368 -15.365076\nv 239.026657 13.096169 -15.365076\nv 240.402451 13.096168 -16.385132\nv 240.402451 14.141082 -16.385132\nv 242.579453 14.141082 -17.999220\nv 242.579453 15.179881 -17.999220\nv 243.963348 15.179881 -19.025276\nv 243.963348 16.218683 -19.025276\nv 245.339157 16.218683 -20.045330\nv 245.339157 17.257484 -20.045330\nv 246.714951 17.257486 -21.065388\nv 246.714951 18.302397 -21.065386\nv 248.090759 18.302397 -22.085440\nv 248.090759 19.341198 -22.085443\nv 249.466553 19.341198 -23.105495\nv 249.466553 20.379997 -23.105492\nv 250.850449 20.379997 -24.131546\nv 250.850449 21.418802 -24.131548\nv 252.226257 21.418800 -25.151602\nv 252.226257 22.457602 -25.151602\nv 253.602051 22.457602 -26.171658\nv 253.602051 23.502514 -26.171658\nv 254.977859 23.502514 -27.191711\nv 254.977859 24.541315 -27.191711\nv 256.361755 24.541315 -28.217768\nv 228.319946 -0.732105 -9.486167\nv 252.906403 -0.732091 -32.371357\nv 228.319931 5.818452 -9.486164\nv 229.580978 5.818453 -10.659938\nv 229.580978 6.857254 -10.659939\nv 230.834625 6.857255 -11.826850\nv 230.834625 7.896053 -11.826849\nv 232.088287 7.896053 -12.993761\nv 232.088287 8.940966 -12.993761\nv 233.341949 8.940968 -14.160672\nv 233.341949 9.979767 -14.160671\nv 234.602982 9.979769 -15.334446\nv 234.602982 11.018570 -15.334446\nv 235.856644 11.018571 -16.501356\nv 235.856644 12.057368 -16.501356\nv 237.110306 12.057368 -17.668266\nv 237.110306 13.096168 -17.668266\nv 238.363953 13.096170 -18.835178\nv 238.363953 14.141082 -18.835178\nv 240.347687 14.141085 -20.681644\nv 240.347687 15.179883 -20.681644\nv 241.608719 15.179883 -21.855419\nv 241.608719 16.218687 -21.855423\nv 242.862381 16.218685 -23.022331\nv 242.862381 17.257488 -23.022331\nv 244.116043 17.257488 -24.189243\nv 244.116043 18.302397 -24.189243\nv 245.369705 18.302397 -25.356155\nv 245.369705 19.341198 -25.356155\nv 246.623367 19.341198 -26.523064\nv 246.623367 20.380001 -26.523060\nv 247.884384 20.379997 -27.696833\nv 247.884384 21.418802 -27.696835\nv 249.138046 21.418802 -28.863747\nv 249.138046 22.457603 -28.863747\nv 250.391708 22.457603 -30.030659\nv 250.391708 23.502516 -30.030659\nv 251.645370 23.502516 -31.197571\nv 251.645370 24.541317 -31.197567\nv 252.906403 24.541321 -32.371346\nv 227.151779 -0.732105 -10.609351\nv 249.029617 -0.732087 -36.096336\nv 227.151779 5.818453 -10.609348\nv 228.273895 5.818454 -11.916569\nv 228.273895 6.857255 -11.916568\nv 229.389435 6.857256 -13.216146\nv 229.389435 7.896054 -13.216146\nv 230.504990 7.896054 -14.515722\nv 230.504990 8.940966 -14.515720\nv 231.620529 8.940968 -15.815299\nv 231.620529 9.979769 -15.815296\nv 232.742645 9.979770 -17.122517\nv 232.742645 11.018572 -17.122517\nv 233.858185 11.018572 -18.422094\nv 233.858185 12.057369 -18.422094\nv 234.973724 12.057369 -19.721672\nv 234.973740 13.096169 -19.721668\nv 236.089279 13.096172 -21.021248\nv 236.089279 14.141085 -21.021248\nv 237.854462 14.141086 -23.077635\nv 237.854462 15.179884 -23.077635\nv 238.976578 15.179884 -24.384855\nv 238.976578 16.218685 -24.384855\nv 240.092117 16.218687 -25.684431\nv 240.092117 17.257488 -25.684431\nv 241.207672 17.257488 -26.984007\nv 241.207672 18.302397 -26.984009\nv 242.323212 18.302397 -28.283585\nv 242.323212 19.341200 -28.283588\nv 243.438766 19.341202 -29.583162\nv 243.438766 20.380003 -29.583160\nv 244.560867 20.380001 -30.890381\nv 244.560867 21.418800 -30.890377\nv 245.676407 21.418806 -32.189957\nv 245.676407 22.457607 -32.189953\nv 246.791962 22.457607 -33.489529\nv 246.791962 23.502520 -33.489529\nv 247.907501 23.502522 -34.789104\nv 247.907501 24.541321 -34.789104\nv 249.029617 24.541321 -36.096329\nv 225.901474 -0.732104 -11.565616\nv 244.687195 -0.732085 -39.410229\nv 225.901474 5.818454 -11.565611\nv 226.864990 5.818454 -12.993752\nv 226.864990 6.857255 -12.993752\nv 227.822861 6.857256 -14.413545\nv 227.822861 7.896054 -14.413545\nv 228.780746 7.896055 -15.833335\nv 228.780746 8.940968 -15.833335\nv 229.738632 8.940968 -17.253124\nv 229.738632 9.979770 -17.253124\nv 230.702133 9.979773 -18.681267\nv 230.702148 11.018572 -18.681267\nv 231.660019 11.018572 -20.101057\nv 231.660019 12.057369 -20.101053\nv 232.617905 12.057370 -21.520849\nv 232.617905 13.096172 -21.520849\nv 233.575775 13.096173 -22.940641\nv 233.575775 14.141086 -22.940641\nv 235.091492 14.141087 -25.187252\nv 235.091492 15.179887 -25.187250\nv 236.055008 15.179889 -26.615389\nv 236.055008 16.218687 -26.615391\nv 237.012878 16.218691 -28.035183\nv 237.012878 17.257490 -28.035183\nv 237.970764 17.257490 -29.454977\nv 237.970764 18.302401 -29.454975\nv 238.928650 18.302401 -30.874765\nv 238.928650 19.341202 -30.874763\nv 239.886520 19.341206 -32.294548\nv 239.886520 20.380005 -32.294552\nv 240.850037 20.380005 -33.722691\nv 240.850037 21.418808 -33.722691\nv 241.807922 21.418808 -35.142483\nv 241.807922 22.457607 -35.142487\nv 242.765808 22.457607 -36.562275\nv 242.765808 23.502520 -36.562275\nv 243.723679 23.502520 -37.982067\nv 243.723679 24.541321 -37.982063\nv 244.687195 24.541321 -39.410210\nv 224.595032 -0.732104 -12.338327\nv 239.789810 -0.732082 -42.294041\nv 224.595032 5.818453 -12.338322\nv 225.374359 5.818454 -13.874743\nv 225.374359 6.857254 -13.874743\nv 226.149139 6.857257 -15.402177\nv 226.149139 7.896055 -15.402177\nv 226.923920 7.896058 -16.929613\nv 226.923920 8.940969 -16.929611\nv 227.698700 8.940969 -18.457047\nv 227.698700 9.979771 -18.457047\nv 228.478043 9.979772 -19.993467\nv 228.478043 11.018572 -19.993467\nv 229.252823 11.018574 -21.520903\nv 229.252823 12.057370 -21.520903\nv 230.027588 12.057372 -23.048340\nv 230.027588 13.096172 -23.048340\nv 230.802368 13.096173 -24.575775\nv 230.802368 14.141085 -24.575773\nv 232.028351 14.141087 -26.992716\nv 232.028351 15.179886 -26.992716\nv 232.807678 15.179888 -28.529137\nv 232.807678 16.218689 -28.529133\nv 233.582458 16.218691 -30.056574\nv 233.582458 17.257492 -30.056574\nv 234.357239 17.257492 -31.584007\nv 234.357239 18.302402 -31.584011\nv 235.132019 18.302402 -33.111439\nv 235.132019 19.341206 -33.111439\nv 235.906799 19.341206 -34.638878\nv 235.906799 20.380005 -34.638874\nv 236.686127 20.380005 -36.175297\nv 236.686127 21.418806 -36.175297\nv 237.460907 21.418804 -37.702728\nv 237.460907 22.457605 -37.702728\nv 238.235687 22.457607 -39.230164\nv 238.235687 23.502522 -39.230167\nv 239.010468 23.502522 -40.757599\nv 239.010468 24.541321 -40.757599\nv 239.789810 24.541325 -42.294022\nv 223.258530 -0.732104 -12.910854\nv 234.208069 -0.732080 -44.665123\nv 223.258530 5.818453 -12.910848\nv 223.820129 5.818454 -14.539515\nv 223.820129 6.857257 -14.539515\nv 224.378448 6.857258 -16.158657\nv 224.378448 7.896058 -16.158657\nv 224.936752 7.896060 -17.777802\nv 224.936752 8.940969 -17.777800\nv 225.495071 8.940971 -19.396944\nv 225.495071 9.979772 -19.396944\nv 226.056671 9.979774 -21.025610\nv 226.056671 11.018574 -21.025610\nv 226.614990 11.018577 -22.644754\nv 226.614990 12.057371 -22.644754\nv 227.173294 12.057374 -24.263901\nv 227.173294 13.096173 -24.263897\nv 227.731613 13.096174 -25.883038\nv 227.731613 14.141087 -25.883041\nv 228.615067 14.141089 -28.445097\nv 228.615067 15.179890 -28.445101\nv 229.176666 15.179890 -30.073767\nv 229.176666 16.218695 -30.073767\nv 229.734985 16.218693 -31.692909\nv 229.734985 17.257494 -31.692913\nv 230.293289 17.257496 -33.312050\nv 230.293289 18.302406 -33.312050\nv 230.851608 18.302406 -34.931190\nv 230.851608 19.341208 -34.931190\nv 231.409927 19.341208 -36.550335\nv 231.409927 20.380007 -36.550335\nv 231.971527 20.380007 -38.179001\nv 231.971527 21.418808 -38.179001\nv 232.529831 21.418810 -39.798145\nv 232.529831 22.457607 -39.798145\nv 233.088150 22.457611 -41.417290\nv 233.088150 23.502525 -41.417290\nv 233.646469 23.502525 -43.036430\nv 233.646469 24.541327 -43.036430\nv 234.208069 24.541332 -44.665100\nv 221.918030 -0.732104 -13.266566\nv 227.796738 -0.732079 -46.337204\nv 221.918030 5.818454 -13.266559\nv 222.219543 5.818455 -14.962743\nv 222.219543 6.857257 -14.962743\nv 222.519302 6.857258 -16.649006\nv 222.519302 7.896058 -16.649006\nv 222.819046 7.896060 -18.335272\nv 222.819046 8.940969 -18.335270\nv 223.118805 8.940971 -20.021536\nv 223.118805 9.979773 -20.021534\nv 223.420319 9.979774 -21.717718\nv 223.420319 11.018575 -21.717718\nv 223.720078 11.018578 -23.403984\nv 223.720078 12.057374 -23.403984\nv 224.019836 12.057374 -25.090246\nv 224.019836 13.096176 -25.090246\nv 224.319595 13.096178 -26.776512\nv 224.319595 14.141088 -26.776514\nv 224.793900 14.141089 -29.444778\nv 224.793900 15.179890 -29.444778\nv 225.095428 15.179890 -31.140965\nv 225.095428 16.218693 -31.140963\nv 225.395172 16.218695 -32.827225\nv 225.395172 17.257496 -32.827221\nv 225.694931 17.257496 -34.513489\nv 225.694931 18.302406 -34.513489\nv 225.994690 18.302408 -36.199749\nv 225.994690 19.341209 -36.199749\nv 226.294449 19.341209 -37.886017\nv 226.294434 20.380009 -37.886017\nv 226.595963 20.380011 -39.582199\nv 226.595963 21.418812 -39.582199\nv 226.895706 21.418816 -41.268471\nv 226.895706 22.457613 -41.268471\nv 227.195465 22.457615 -42.954727\nv 227.195465 23.502525 -42.954727\nv 227.495224 23.502529 -44.640991\nv 227.495224 24.541328 -44.640987\nv 227.796738 24.541328 -46.337177\nv 220.599564 -0.732104 -13.388832\nv 222.056381 -0.732078 -46.946304\nv 220.599564 5.818454 -13.388825\nv 220.674286 5.818455 -15.109980\nv 220.674286 6.857257 -15.109979\nv 220.748566 6.857258 -16.821066\nv 220.748566 7.896060 -16.821066\nv 220.822861 7.896060 -18.532156\nv 220.822861 8.940970 -18.532154\nv 220.897141 8.940971 -20.243240\nv 220.897141 9.979773 -20.243240\nv 220.971863 9.979774 -21.964397\nv 220.971848 11.018576 -21.964396\nv 221.046143 11.018578 -23.675484\nv 221.046143 12.057374 -23.675484\nv 221.120422 12.057374 -25.386572\nv 221.120422 13.096176 -25.386572\nv 221.194702 13.096178 -27.097662\nv 221.194702 14.141089 -27.097662\nv 221.312241 14.141091 -29.805206\nv 221.312241 15.179893 -29.805206\nv 221.386963 15.179891 -31.526360\nv 221.386963 16.218695 -31.526360\nv 221.461243 16.218697 -33.237446\nv 221.461243 17.257496 -33.237446\nv 221.535522 17.257496 -34.948536\nv 221.535522 18.302406 -34.948532\nv 221.609818 18.302406 -36.659622\nv 221.609802 19.341209 -36.659618\nv 221.684097 19.341213 -38.370708\nv 221.684097 20.380009 -38.370705\nv 221.758804 20.380009 -40.091862\nv 221.758804 21.418810 -40.091862\nv 221.833099 21.418816 -41.802952\nv 221.833099 22.457613 -41.802952\nv 221.907379 22.457613 -43.514042\nv 221.907379 23.502525 -43.514038\nv 221.981659 23.502529 -45.225128\nv 221.981659 24.541332 -45.225128\nv 222.056381 24.541332 -46.946281\nv 216.216797 -0.732104 -13.363850\nv 216.002869 -0.732079 -46.952248\nv 216.216797 5.818454 -13.363843\nv 216.205826 5.818455 -15.086584\nv 216.205826 6.857257 -15.086583\nv 216.194916 6.857259 -16.799248\nv 216.194916 7.896060 -16.799248\nv 216.184006 7.896060 -18.511911\nv 216.184006 8.940970 -18.511911\nv 216.173096 8.940971 -20.224577\nv 216.173096 9.979773 -20.224575\nv 216.162125 9.979774 -21.947315\nv 216.162125 11.018576 -21.947315\nv 216.151215 11.018578 -23.659983\nv 216.151215 12.057374 -23.659983\nv 216.140305 12.057374 -25.372648\nv 216.140305 13.096176 -25.372646\nv 216.129410 13.096178 -27.085314\nv 216.129395 14.141089 -27.085312\nv 216.112137 14.141091 -29.795353\nv 216.112137 15.179893 -29.795353\nv 216.101166 15.179893 -31.518091\nv 216.101166 16.218695 -31.518091\nv 216.090256 16.218697 -33.230755\nv 216.090256 17.257496 -33.230755\nv 216.079346 17.257500 -34.943420\nv 216.079346 18.302408 -34.943420\nv 216.068436 18.302408 -36.656082\nv 216.068436 19.341209 -36.656082\nv 216.057526 19.341209 -38.368748\nv 216.057541 20.380009 -38.368752\nv 216.046555 20.380011 -40.091492\nv 216.046555 21.418812 -40.091488\nv 216.035660 21.418816 -41.804157\nv 216.035660 22.457615 -41.804153\nv 216.024750 22.457615 -43.516819\nv 216.024750 23.502525 -43.516819\nv 216.013840 23.502529 -45.229485\nv 216.013824 24.541332 -45.229485\nv 216.002869 24.541332 -46.952225\nv 206.404404 -0.732104 -13.294783\nv 206.162231 -0.732078 -46.882980\nv 206.404404 5.818453 -13.294776\nv 206.391983 5.818455 -15.017506\nv 206.391983 6.857256 -15.017506\nv 206.379623 6.857258 -16.730162\nv 206.379623 7.896057 -16.730160\nv 206.367279 7.896058 -18.442816\nv 206.367279 8.940969 -18.442814\nv 206.354935 8.940969 -20.155470\nv 206.354935 9.979771 -20.155470\nv 206.342514 9.979773 -21.878199\nv 206.342514 11.018574 -21.878197\nv 206.330170 11.018575 -23.590853\nv 206.330170 12.057372 -23.590855\nv 206.317825 12.057372 -25.303509\nv 206.317810 13.096174 -25.303509\nv 206.305466 13.096174 -27.016167\nv 206.305466 14.141088 -27.016167\nv 206.285934 14.141089 -29.726189\nv 206.285934 15.179888 -29.726189\nv 206.273514 15.179889 -31.448921\nv 206.273514 16.218689 -31.448919\nv 206.261154 16.218693 -33.161572\nv 206.261154 17.257492 -33.161572\nv 206.248810 17.257494 -34.874226\nv 206.248810 18.302402 -34.874226\nv 206.236465 18.302402 -36.586880\nv 206.236465 19.341206 -36.586876\nv 206.224121 19.341206 -38.299534\nv 206.224106 20.380007 -38.299534\nv 206.211700 20.380009 -40.022263\nv 206.211700 21.418808 -40.022263\nv 206.199341 21.418812 -41.734921\nv 206.199341 22.457611 -41.734924\nv 206.186996 22.457611 -43.447582\nv 206.186996 23.502522 -43.447578\nv 206.174652 23.502525 -45.160233\nv 206.174652 24.541325 -45.160229\nv 206.162231 24.541328 -46.882961\nv 192.269958 -0.732104 -13.190449\nv 192.022034 -0.732078 -46.778614\nv 192.269958 5.818454 -13.190442\nv 192.257248 5.818455 -14.913170\nv 192.257248 6.857258 -14.913170\nv 192.244598 6.857259 -16.625822\nv 192.244598 7.896060 -16.625824\nv 192.231964 7.896060 -18.338476\nv 192.231964 8.940970 -18.338474\nv 192.219315 8.940971 -20.051128\nv 192.219315 9.979773 -20.051126\nv 192.206604 9.979774 -21.773855\nv 192.206604 11.018576 -21.773855\nv 192.193954 11.018578 -23.486509\nv 192.193954 12.057374 -23.486507\nv 192.181320 12.057374 -25.199163\nv 192.181320 13.096176 -25.199162\nv 192.168686 13.096178 -26.911818\nv 192.168686 14.141089 -26.911818\nv 192.148682 14.141091 -29.621838\nv 192.148666 15.179893 -29.621838\nv 192.135956 15.179893 -31.344570\nv 192.135956 16.218695 -31.344566\nv 192.123322 16.218697 -33.057213\nv 192.123322 17.257496 -33.057209\nv 192.110672 17.257500 -34.769867\nv 192.110672 18.302408 -34.769867\nv 192.098038 18.302408 -36.482525\nv 192.098038 19.341209 -36.482525\nv 192.085388 19.341209 -38.195175\nv 192.085388 20.380009 -38.195171\nv 192.072678 20.380011 -39.917904\nv 192.072678 21.418812 -39.917904\nv 192.060028 21.418816 -41.630554\nv 192.060028 22.457615 -41.630550\nv 192.047394 22.457615 -43.343208\nv 192.047394 23.502525 -43.343208\nv 192.034744 23.502529 -45.055866\nv 192.034744 24.541332 -45.055866\nv 192.022034 24.541332 -46.778595\nvt 0.8224 0.2620\nvt 0.8190 0.1947\nvt 0.8224 0.1947\nvt 0.8190 0.1974\nvt 0.8157 0.1974\nvt 0.8157 0.2002\nvt 0.8124 0.2002\nvt 0.8124 0.2030\nvt 0.8091 0.2030\nvt 0.8091 0.2057\nvt 0.8057 0.2057\nvt 0.8057 0.2085\nvt 0.8024 0.2085\nvt 0.8024 0.2113\nvt 0.7991 0.2113\nvt 0.7991 0.2141\nvt 0.7957 0.2141\nvt 0.7957 0.2168\nvt 0.7924 0.2168\nvt 0.7924 0.2196\nvt 0.7891 0.2196\nvt 0.7891 0.2224\nvt 0.7838 0.2224\nvt 0.7838 0.2252\nvt 0.7805 0.2252\nvt 0.7805 0.2279\nvt 0.7771 0.2279\nvt 0.7771 0.2307\nvt 0.7738 0.2307\nvt 0.7738 0.2335\nvt 0.7705 0.2335\nvt 0.7705 0.2362\nvt 0.7671 0.2362\nvt 0.7671 0.2390\nvt 0.7638 0.2390\nvt 0.7638 0.2418\nvt 0.7605 0.2418\nvt 0.7605 0.2446\nvt 0.7571 0.2446\nvt 0.7571 0.2620\nvt 0.8257 0.1974\nvt 0.8224 0.1947\nvt 0.8257 0.1947\nvt 0.8224 0.2620\nvt 0.8289 0.2002\nvt 0.8289 0.1974\nvt 0.8322 0.2030\nvt 0.8322 0.2002\nvt 0.8354 0.2057\nvt 0.8354 0.2030\nvt 0.8387 0.2085\nvt 0.8387 0.2057\nvt 0.8420 0.2113\nvt 0.8420 0.2085\nvt 0.8452 0.2141\nvt 0.8452 0.2113\nvt 0.8485 0.2168\nvt 0.8485 0.2141\nvt 0.8518 0.2196\nvt 0.8518 0.2168\nvt 0.8551 0.2224\nvt 0.8551 0.2196\nvt 0.8602 0.2252\nvt 0.8602 0.2224\nvt 0.8635 0.2279\nvt 0.8635 0.2252\nvt 0.8667 0.2307\nvt 0.8667 0.2279\nvt 0.8700 0.2335\nvt 0.8700 0.2307\nvt 0.8733 0.2362\nvt 0.8733 0.2335\nvt 0.8765 0.2390\nvt 0.8765 0.2362\nvt 0.8798 0.2418\nvt 0.8798 0.2390\nvt 0.8831 0.2446\nvt 0.8831 0.2418\nvt 0.8863 0.2620\nvt 0.8863 0.2446\nvt 0.2369 0.1102\nvt 0.1913 0.1099\nvt 0.1920 0.0002\nvt 0.2376 0.0005\nvt 0.1986 0.7341\nvt 0.1986 0.6886\nvt 0.2159 0.6886\nvt 0.2159 0.7341\nvt 0.8731 0.1359\nvt 0.8728 0.0897\nvt 0.8784 0.0897\nvt 0.8787 0.1359\nvt 0.9088 0.1362\nvt 0.9088 0.1817\nvt 0.9061 0.1817\nvt 0.9061 0.1362\nvt 0.8619 0.7212\nvt 0.8616 0.6750\nvt 0.8671 0.6750\nvt 0.8675 0.7212\nvt 0.9088 0.2803\nvt 0.9088 0.2348\nvt 0.9116 0.2348\nvt 0.9116 0.2803\nvt 0.8420 0.9439\nvt 0.8417 0.8977\nvt 0.8472 0.8977\nvt 0.8475 0.9439\nvt 0.9143 0.2863\nvt 0.9143 0.2408\nvt 0.9171 0.2408\nvt 0.9171 0.2863\nvt 0.4591 0.9831\nvt 0.4588 0.9369\nvt 0.4643 0.9368\nvt 0.4646 0.9830\nvt 0.9198 0.2923\nvt 0.9198 0.2468\nvt 0.9225 0.2468\nvt 0.9225 0.2923\nvt 0.3169 0.9887\nvt 0.3166 0.9426\nvt 0.3222 0.9425\nvt 0.3225 0.9887\nvt 0.9225 0.2983\nvt 0.9225 0.2528\nvt 0.9253 0.2528\nvt 0.9253 0.2983\nvt 0.1643 0.9944\nvt 0.1640 0.9482\nvt 0.1695 0.9482\nvt 0.1698 0.9943\nvt 0.9280 0.3044\nvt 0.9280 0.2589\nvt 0.9307 0.2589\nvt 0.9307 0.3044\nvt 0.0006 1.0000\nvt 0.0002 0.9538\nvt 0.0058 0.9538\nvt 0.0061 1.0000\nvt 0.9864 0.1742\nvt 0.9864 0.1287\nvt 0.9891 0.1287\nvt 0.9891 0.1742\nvt 0.8414 0.9731\nvt 0.7958 0.9735\nvt 0.7958 0.9679\nvt 0.8414 0.9675\nvt 0.9835 0.9476\nvt 0.9835 0.9021\nvt 0.9863 0.9021\nvt 0.9863 0.9476\nvt 0.8726 0.1941\nvt 0.8270 0.1944\nvt 0.8269 0.1856\nvt 0.8725 0.1852\nvt 0.9837 0.1897\nvt 0.9837 0.1442\nvt 0.9864 0.1442\nvt 0.9864 0.1897\nvt 0.8670 0.5120\nvt 0.8214 0.5123\nvt 0.8213 0.5067\nvt 0.8669 0.5064\nvt 0.9835 0.7760\nvt 0.9835 0.8215\nvt 0.9808 0.8215\nvt 0.9808 0.7760\nvt 0.8614 0.7962\nvt 0.8158 0.7965\nvt 0.8157 0.7909\nvt 0.8613 0.7906\nvt 0.9809 0.2018\nvt 0.9809 0.1563\nvt 0.9837 0.1563\nvt 0.9837 0.2018\nvt 0.1986 0.8297\nvt 0.1530 0.8300\nvt 0.1530 0.8245\nvt 0.1986 0.8241\nvt 0.9781 0.7875\nvt 0.9781 0.7420\nvt 0.9808 0.7420\nvt 0.9808 0.7875\nvt 0.4362 0.8297\nvt 0.3906 0.8300\nvt 0.3906 0.8244\nvt 0.4362 0.8241\nvt 0.2268 0.8159\nvt 0.2268 0.7703\nvt 0.2296 0.7703\nvt 0.2296 0.8159\nvt 0.6683 0.8297\nvt 0.6227 0.8300\nvt 0.6226 0.8244\nvt 0.6682 0.8241\nvt 0.2214 0.8219\nvt 0.2214 0.7764\nvt 0.2241 0.7764\nvt 0.2241 0.8219\nvt 0.6906 0.2613\nvt 0.6450 0.2616\nvt 0.6450 0.2560\nvt 0.6906 0.2557\nvt 0.2186 0.8279\nvt 0.2186 0.7824\nvt 0.2214 0.7824\nvt 0.2214 0.8279\nvt 0.6794 0.5791\nvt 0.6338 0.5794\nvt 0.6338 0.5738\nvt 0.6794 0.5735\nvt 0.9782 0.2319\nvt 0.9782 0.1864\nvt 0.9809 0.1864\nvt 0.9809 0.2319\nvt 0.4585 0.5903\nvt 0.4129 0.5906\nvt 0.4129 0.5850\nvt 0.4585 0.5847\nvt 0.4535 0.8288\nvt 0.4535 0.7832\nvt 0.4562 0.7832\nvt 0.4562 0.8288\nvt 0.2320 0.6015\nvt 0.1864 0.6018\nvt 0.1864 0.5962\nvt 0.2320 0.5959\nvt 0.9755 0.2439\nvt 0.9755 0.1984\nvt 0.9782 0.1984\nvt 0.9782 0.2439\nvt 0.4753 0.3061\nvt 0.4297 0.3064\nvt 0.4296 0.3008\nvt 0.4752 0.3005\nvt 0.7571 0.1947\nvt 0.7571 0.2319\nvt 0.6906 0.2319\nvt 0.6906 0.1947\nvt 0.1596 0.1097\nvt 0.1603 0.0000\nvt 0.1986 0.6570\nvt 0.2159 0.6570\nvt 0.8726 0.0577\nvt 0.8782 0.0576\nvt 0.9088 0.2133\nvt 0.9061 0.2133\nvt 0.8614 0.6430\nvt 0.8669 0.6429\nvt 0.9088 0.2032\nvt 0.9116 0.2032\nvt 0.8415 0.8656\nvt 0.8470 0.8656\nvt 0.9143 0.2092\nvt 0.9171 0.2092\nvt 0.4586 0.9048\nvt 0.4641 0.9048\nvt 0.9198 0.2152\nvt 0.9225 0.2152\nvt 0.3164 0.9105\nvt 0.3220 0.9104\nvt 0.9225 0.2212\nvt 0.9253 0.2212\nvt 0.1637 0.9161\nvt 0.1693 0.9161\nvt 0.9280 0.2272\nvt 0.9307 0.2272\nvt 0.0000 0.9217\nvt 0.0056 0.9217\nvt 0.9864 0.0971\nvt 0.9891 0.0971\nvt 0.7641 0.9737\nvt 0.7641 0.9681\nvt 0.9835 0.8704\nvt 0.9863 0.8704\nvt 0.7952 0.1946\nvt 0.7952 0.1858\nvt 0.9837 0.1126\nvt 0.9864 0.1126\nvt 0.7897 0.5125\nvt 0.7896 0.5069\nvt 0.9835 0.8531\nvt 0.9808 0.8531\nvt 0.7841 0.7967\nvt 0.7840 0.7911\nvt 0.9809 0.1246\nvt 0.9837 0.1246\nvt 0.1213 0.8303\nvt 0.1213 0.8247\nvt 0.9781 0.7103\nvt 0.9808 0.7103\nvt 0.3589 0.8303\nvt 0.3589 0.8247\nvt 0.2268 0.7387\nvt 0.2296 0.7387\nvt 0.5909 0.8303\nvt 0.5909 0.8247\nvt 0.2214 0.7447\nvt 0.2241 0.7447\nvt 0.6133 0.2618\nvt 0.6132 0.2562\nvt 0.2186 0.7507\nvt 0.2214 0.7507\nvt 0.6021 0.5797\nvt 0.6021 0.5741\nvt 0.9782 0.1547\nvt 0.9809 0.1547\nvt 0.3812 0.5908\nvt 0.3811 0.5852\nvt 0.4535 0.7516\nvt 0.4562 0.7516\nvt 0.1547 0.6020\nvt 0.1546 0.5964\nvt 0.9755 0.1667\nvt 0.9782 0.1667\nvt 0.3979 0.3066\nvt 0.3979 0.3010\nvt 0.7571 0.2579\nvt 0.6906 0.2579\nvt 0.1454 0.1096\nvt 0.1408 0.0000\nvt 0.1986 0.6428\nvt 0.2159 0.6428\nvt 0.8726 0.0430\nvt 0.8781 0.0433\nvt 0.9088 0.2277\nvt 0.9061 0.2277\nvt 0.8614 0.6280\nvt 0.8669 0.6283\nvt 0.9088 0.1885\nvt 0.9116 0.1885\nvt 0.8414 0.8505\nvt 0.8469 0.8507\nvt 0.9143 0.1942\nvt 0.9171 0.1942\nvt 0.4585 0.8893\nvt 0.4640 0.8896\nvt 0.9198 0.1999\nvt 0.9225 0.1999\nvt 0.3164 0.8947\nvt 0.3219 0.8950\nvt 0.9225 0.2057\nvt 0.9253 0.2057\nvt 0.1637 0.9001\nvt 0.1692 0.9003\nvt 0.9280 0.2114\nvt 0.9307 0.2114\nvt 0.0000 0.9054\nvt 0.0055 0.9057\nvt 0.9864 0.0810\nvt 0.9891 0.0810\nvt 0.7478 0.9737\nvt 0.7480 0.9681\nvt 0.9835 0.8541\nvt 0.9863 0.8541\nvt 0.7785 0.1947\nvt 0.7788 0.1858\nvt 0.9837 0.0958\nvt 0.9864 0.0958\nvt 0.7726 0.5125\nvt 0.7728 0.5069\nvt 0.9835 0.8702\nvt 0.9808 0.8702\nvt 0.7667 0.7967\nvt 0.7670 0.7911\nvt 0.9809 0.1073\nvt 0.9837 0.1073\nvt 0.1037 0.8303\nvt 0.1040 0.8247\nvt 0.9781 0.6927\nvt 0.9808 0.6927\nvt 0.3410 0.8303\nvt 0.3413 0.8247\nvt 0.2268 0.7208\nvt 0.2296 0.7208\nvt 0.5728 0.8303\nvt 0.5730 0.8247\nvt 0.2214 0.7265\nvt 0.2241 0.7265\nvt 0.5949 0.2618\nvt 0.5951 0.2562\nvt 0.2186 0.7323\nvt 0.2214 0.7323\nvt 0.5834 0.5797\nvt 0.5836 0.5741\nvt 0.9782 0.1360\nvt 0.9809 0.1360\nvt 0.3622 0.5908\nvt 0.3624 0.5852\nvt 0.4535 0.7326\nvt 0.4562 0.7326\nvt 0.1354 0.6020\nvt 0.1357 0.5964\nvt 0.9755 0.1475\nvt 0.9782 0.1475\nvt 0.3784 0.3066\nvt 0.3786 0.3010\nvt 0.7571 0.2737\nvt 0.6906 0.2737\nvt 0.1411 0.1100\nvt 0.1223 0.0020\nvt 0.1986 0.6385\nvt 0.2159 0.6385\nvt 0.8730 0.0380\nvt 0.8785 0.0389\nvt 0.9088 0.2328\nvt 0.9061 0.2328\nvt 0.8619 0.6222\nvt 0.8674 0.6232\nvt 0.9088 0.1826\nvt 0.9116 0.1826\nvt 0.8421 0.8439\nvt 0.8475 0.8449\nvt 0.9143 0.1876\nvt 0.9171 0.1876\nvt 0.4592 0.8821\nvt 0.4647 0.8830\nvt 0.9198 0.1926\nvt 0.9225 0.1926\nvt 0.3172 0.8867\nvt 0.3226 0.8877\nvt 0.9225 0.1977\nvt 0.9253 0.1977\nvt 0.1646 0.8913\nvt 0.1700 0.8923\nvt 0.9280 0.2027\nvt 0.9307 0.2027\nvt 0.0010 0.8960\nvt 0.0064 0.8969\nvt 0.9864 0.0715\nvt 0.9891 0.0715\nvt 0.7377 0.9727\nvt 0.7387 0.9671\nvt 0.9835 0.8439\nvt 0.9863 0.8439\nvt 0.7672 0.1935\nvt 0.7688 0.1848\nvt 0.9837 0.0844\nvt 0.9864 0.0844\nvt 0.7606 0.5113\nvt 0.7616 0.5057\nvt 0.9835 0.8823\nvt 0.9808 0.8823\nvt 0.7540 0.7954\nvt 0.7550 0.7899\nvt 0.9809 0.0944\nvt 0.9837 0.0944\nvt 0.0903 0.8289\nvt 0.0913 0.8234\nvt 0.9781 0.6791\nvt 0.9808 0.6791\nvt 0.3269 0.8288\nvt 0.3279 0.8233\nvt 0.2268 0.7065\nvt 0.2296 0.7065\nvt 0.5580 0.8287\nvt 0.5589 0.8232\nvt 0.2214 0.7115\nvt 0.2241 0.7115\nvt 0.5793 0.2602\nvt 0.5803 0.2546\nvt 0.2186 0.7165\nvt 0.2214 0.7165\nvt 0.5671 0.5779\nvt 0.5681 0.5724\nvt 0.9782 0.1195\nvt 0.9809 0.1195\nvt 0.3452 0.5890\nvt 0.3461 0.5835\nvt 0.4535 0.7153\nvt 0.4562 0.7153\nvt 0.1177 0.6001\nvt 0.1187 0.5946\nvt 0.9755 0.1295\nvt 0.9782 0.1295\nvt 0.3599 0.3046\nvt 0.3609 0.2991\nvt 0.7571 0.2876\nvt 0.6906 0.2876\nvt 0.1368 0.1112\nvt 0.1016 0.0074\nvt 0.1986 0.6339\nvt 0.2159 0.6339\nvt 0.8744 0.0327\nvt 0.8796 0.0345\nvt 0.9088 0.2382\nvt 0.9061 0.2382\nvt 0.8635 0.6161\nvt 0.8687 0.6180\nvt 0.9088 0.1764\nvt 0.9116 0.1764\nvt 0.8439 0.8370\nvt 0.8491 0.8388\nvt 0.9143 0.1805\nvt 0.9171 0.1805\nvt 0.4612 0.8743\nvt 0.4665 0.8761\nvt 0.9198 0.1846\nvt 0.9225 0.1846\nvt 0.3194 0.8781\nvt 0.3246 0.8799\nvt 0.9225 0.1888\nvt 0.9253 0.1888\nvt 0.1670 0.8819\nvt 0.1722 0.8837\nvt 0.9280 0.1929\nvt 0.9307 0.1929\nvt 0.0036 0.8856\nvt 0.0088 0.8875\nvt 0.9864 0.0609\nvt 0.9891 0.0609\nvt 0.7267 0.9697\nvt 0.7285 0.9645\nvt 0.9835 0.8324\nvt 0.9863 0.8324\nvt 0.7549 0.1902\nvt 0.7577 0.1819\nvt 0.9837 0.0715\nvt 0.9864 0.0715\nvt 0.7475 0.5078\nvt 0.7493 0.5025\nvt 0.9835 0.8960\nvt 0.9808 0.8960\nvt 0.7400 0.7917\nvt 0.7418 0.7864\nvt 0.9809 0.0798\nvt 0.9837 0.0798\nvt 0.0755 0.8249\nvt 0.0773 0.8197\nvt 0.9781 0.6636\nvt 0.9808 0.6636\nvt 0.3112 0.8246\nvt 0.3130 0.8194\nvt 0.2268 0.6901\nvt 0.2296 0.6901\nvt 0.5414 0.8243\nvt 0.5432 0.8190\nvt 0.2214 0.6943\nvt 0.2241 0.6943\nvt 0.5619 0.2556\nvt 0.5637 0.2503\nvt 0.2186 0.6984\nvt 0.2214 0.6984\nvt 0.5489 0.5731\nvt 0.5507 0.5678\nvt 0.9782 0.1005\nvt 0.9809 0.1005\nvt 0.3262 0.5840\nvt 0.3280 0.5787\nvt 0.4535 0.6955\nvt 0.4562 0.6955\nvt 0.0979 0.5949\nvt 0.0997 0.5896\nvt 0.9755 0.1088\nvt 0.9782 0.1088\nvt 0.3392 0.2992\nvt 0.3410 0.2939\nvt 0.9335 0.3066\nvt 0.9335 0.3225\nvt 0.8670 0.3225\nvt 0.8670 0.3066\nvt 0.1325 0.1130\nvt 0.0835 0.0152\nvt 0.1986 0.6293\nvt 0.2159 0.6293\nvt 0.8765 0.0276\nvt 0.8815 0.0302\nvt 0.9088 0.2436\nvt 0.9061 0.2436\nvt 0.8659 0.6103\nvt 0.8709 0.6129\nvt 0.9088 0.1702\nvt 0.9116 0.1702\nvt 0.8466 0.8305\nvt 0.8515 0.8330\nvt 0.9143 0.1736\nvt 0.9171 0.1736\nvt 0.4643 0.8671\nvt 0.4692 0.8696\nvt 0.9198 0.1770\nvt 0.9225 0.1770\nvt 0.3227 0.8702\nvt 0.3277 0.8727\nvt 0.9225 0.1804\nvt 0.9253 0.1804\nvt 0.1707 0.8732\nvt 0.1756 0.8758\nvt 0.9280 0.1838\nvt 0.9307 0.1838\nvt 0.0075 0.8763\nvt 0.0125 0.8788\nvt 0.9864 0.0510\nvt 0.9891 0.0510\nvt 0.7167 0.9655\nvt 0.7192 0.9605\nvt 0.9835 0.8217\nvt 0.9863 0.8217\nvt 0.7439 0.1855\nvt 0.7478 0.1776\nvt 0.9837 0.0597\nvt 0.9864 0.0597\nvt 0.7357 0.5028\nvt 0.7382 0.4977\nvt 0.9835 0.9086\nvt 0.9808 0.9086\nvt 0.7276 0.7864\nvt 0.7301 0.7814\nvt 0.9809 0.0665\nvt 0.9837 0.0665\nvt 0.0623 0.8193\nvt 0.0648 0.8143\nvt 0.9781 0.6496\nvt 0.9808 0.6496\nvt 0.2974 0.8187\nvt 0.2999 0.8137\nvt 0.2268 0.6753\nvt 0.2296 0.6753\nvt 0.5269 0.8181\nvt 0.5294 0.8131\nvt 0.2214 0.6787\nvt 0.2241 0.6787\nvt 0.5467 0.2491\nvt 0.5492 0.2440\nvt 0.2186 0.6821\nvt 0.2214 0.6821\nvt 0.5330 0.5663\nvt 0.5355 0.5613\nvt 0.9782 0.0834\nvt 0.9809 0.0834\nvt 0.3095 0.5769\nvt 0.3120 0.5719\nvt 0.4535 0.6777\nvt 0.4562 0.6777\nvt 0.0805 0.5874\nvt 0.0830 0.5825\nvt 0.9755 0.0902\nvt 0.9782 0.0902\nvt 0.3212 0.2914\nvt 0.3237 0.2864\nvt 0.9335 0.3389\nvt 0.8670 0.3389\nvt 0.1283 0.1156\nvt 0.0677 0.0247\nvt 0.1986 0.6247\nvt 0.2159 0.6247\nvt 0.8794 0.0227\nvt 0.8840 0.0259\nvt 0.9088 0.2489\nvt 0.9061 0.2489\nvt 0.8691 0.6049\nvt 0.8737 0.6080\nvt 0.9088 0.1643\nvt 0.9116 0.1643\nvt 0.8501 0.8244\nvt 0.8547 0.8275\nvt 0.9143 0.1670\nvt 0.9171 0.1670\nvt 0.4682 0.8604\nvt 0.4727 0.8635\nvt 0.9198 0.1698\nvt 0.9225 0.1698\nvt 0.3270 0.8629\nvt 0.3316 0.8660\nvt 0.9225 0.1725\nvt 0.9253 0.1725\nvt 0.1752 0.8653\nvt 0.1798 0.8685\nvt 0.9280 0.1752\nvt 0.9307 0.1752\nvt 0.0125 0.8678\nvt 0.0171 0.8709\nvt 0.9864 0.0418\nvt 0.9891 0.0418\nvt 0.7078 0.9601\nvt 0.7109 0.9555\nvt 0.9835 0.8119\nvt 0.9863 0.8119\nvt 0.7339 0.1796\nvt 0.7388 0.1722\nvt 0.9837 0.0489\nvt 0.9864 0.0489\nvt 0.7252 0.4965\nvt 0.7283 0.4918\nvt 0.9835 0.9201\nvt 0.9808 0.9201\nvt 0.7165 0.7797\nvt 0.7196 0.7751\nvt 0.9809 0.0543\nvt 0.9837 0.0543\nvt 0.0506 0.8123\nvt 0.0537 0.8077\nvt 0.9781 0.6367\nvt 0.9808 0.6367\nvt 0.2851 0.8114\nvt 0.2882 0.8067\nvt 0.2268 0.6618\nvt 0.2296 0.6618\nvt 0.5140 0.8104\nvt 0.5171 0.8058\nvt 0.2214 0.6646\nvt 0.2241 0.6646\nvt 0.5332 0.2410\nvt 0.5363 0.2364\nvt 0.2186 0.6673\nvt 0.2214 0.6673\nvt 0.5189 0.5579\nvt 0.5220 0.5532\nvt 0.9782 0.0680\nvt 0.9809 0.0680\nvt 0.2948 0.5681\nvt 0.2979 0.5635\nvt 0.4535 0.6616\nvt 0.4562 0.6616\nvt 0.0652 0.5783\nvt 0.0683 0.5737\nvt 0.9755 0.0735\nvt 0.9782 0.0735\nvt 0.3053 0.2820\nvt 0.3084 0.2773\nvt 0.9335 0.3555\nvt 0.8670 0.3555\nvt 0.1242 0.1187\nvt 0.0536 0.0355\nvt 0.1986 0.6201\nvt 0.2159 0.6201\nvt 0.8829 0.0181\nvt 0.8871 0.0218\nvt 0.9088 0.2540\nvt 0.9061 0.2540\nvt 0.8730 0.5997\nvt 0.8772 0.6034\nvt 0.9088 0.1586\nvt 0.9116 0.1586\nvt 0.8544 0.8188\nvt 0.8586 0.8224\nvt 0.9143 0.1608\nvt 0.9171 0.1608\nvt 0.4728 0.8542\nvt 0.4770 0.8579\nvt 0.9198 0.1629\nvt 0.9225 0.1629\nvt 0.3320 0.8562\nvt 0.3362 0.8599\nvt 0.9225 0.1651\nvt 0.9253 0.1651\nvt 0.1807 0.8581\nvt 0.1849 0.8618\nvt 0.9280 0.1673\nvt 0.9307 0.1673\nvt 0.0183 0.8601\nvt 0.0225 0.8637\nvt 0.9864 0.0332\nvt 0.9891 0.0332\nvt 0.6996 0.9538\nvt 0.7032 0.9496\nvt 0.9835 0.8028\nvt 0.9863 0.8028\nvt 0.7250 0.1726\nvt 0.7307 0.1659\nvt 0.9837 0.0388\nvt 0.9864 0.0388\nvt 0.7158 0.4892\nvt 0.7194 0.4849\nvt 0.9835 0.9308\nvt 0.9808 0.9308\nvt 0.7065 0.7720\nvt 0.7101 0.7678\nvt 0.9809 0.0431\nvt 0.9837 0.0431\nvt 0.0402 0.8042\nvt 0.0438 0.8000\nvt 0.9781 0.6249\nvt 0.9808 0.6249\nvt 0.2741 0.8028\nvt 0.2777 0.7986\nvt 0.2268 0.6495\nvt 0.2296 0.6495\nvt 0.5025 0.8015\nvt 0.5061 0.7973\nvt 0.2214 0.6516\nvt 0.2241 0.6516\nvt 0.5212 0.2317\nvt 0.5248 0.2275\nvt 0.2186 0.6538\nvt 0.2214 0.6538\nvt 0.5064 0.5482\nvt 0.5100 0.5439\nvt 0.9782 0.0539\nvt 0.9809 0.0539\nvt 0.2818 0.5580\nvt 0.2854 0.5538\nvt 0.4535 0.6469\nvt 0.4562 0.6469\nvt 0.0517 0.5679\nvt 0.0553 0.5636\nvt 0.9755 0.0582\nvt 0.9782 0.0582\nvt 0.2912 0.2711\nvt 0.2949 0.2668\nvt 0.9335 0.3724\nvt 0.8670 0.3724\nvt 0.1205 0.1224\nvt 0.0411 0.0478\nvt 0.1986 0.6158\nvt 0.2159 0.6158\nvt 0.8869 0.0139\nvt 0.8907 0.0180\nvt 0.9088 0.2588\nvt 0.9061 0.2588\nvt 0.8775 0.5950\nvt 0.8813 0.5991\nvt 0.9088 0.1532\nvt 0.9116 0.1532\nvt 0.8593 0.8136\nvt 0.8631 0.8177\nvt 0.9143 0.1549\nvt 0.9171 0.1549\nvt 0.4782 0.8486\nvt 0.4819 0.8527\nvt 0.9198 0.1565\nvt 0.9225 0.1565\nvt 0.3378 0.8501\nvt 0.3416 0.8543\nvt 0.9225 0.1581\nvt 0.9253 0.1581\nvt 0.1869 0.8516\nvt 0.1906 0.8557\nvt 0.9280 0.1598\nvt 0.9307 0.1598\nvt 0.0250 0.8531\nvt 0.0287 0.8572\nvt 0.9864 0.0252\nvt 0.9891 0.0252\nvt 0.6923 0.9466\nvt 0.6963 0.9428\nvt 0.9835 0.7942\nvt 0.9863 0.7942\nvt 0.7170 0.1648\nvt 0.7234 0.1588\nvt 0.9837 0.0295\nvt 0.9864 0.0295\nvt 0.7073 0.4809\nvt 0.7113 0.4770\nvt 0.9835 0.9406\nvt 0.9808 0.9406\nvt 0.6976 0.7633\nvt 0.7016 0.7595\nvt 0.9809 0.0328\nvt 0.9837 0.0328\nvt 0.0308 0.7950\nvt 0.0348 0.7912\nvt 0.9781 0.6141\nvt 0.9808 0.6141\nvt 0.2643 0.7932\nvt 0.2683 0.7894\nvt 0.2268 0.6381\nvt 0.2296 0.6381\nvt 0.4922 0.7914\nvt 0.4963 0.7876\nvt 0.2214 0.6397\nvt 0.2241 0.6397\nvt 0.5104 0.2212\nvt 0.5145 0.2174\nvt 0.2186 0.6413\nvt 0.2214 0.6413\nvt 0.4952 0.5373\nvt 0.4992 0.5335\nvt 0.9782 0.0410\nvt 0.9809 0.0410\nvt 0.2702 0.5467\nvt 0.2742 0.5429\nvt 0.4535 0.6334\nvt 0.4562 0.6334\nvt 0.0396 0.5561\nvt 0.0436 0.5523\nvt 0.9755 0.0442\nvt 0.9782 0.0442\nvt 0.2787 0.2589\nvt 0.2828 0.2550\nvt 0.9335 0.3895\nvt 0.8670 0.3895\nvt 0.1171 0.1265\nvt 0.0299 0.0614\nvt 0.1986 0.6117\nvt 0.2159 0.6117\nvt 0.8915 0.0100\nvt 0.8948 0.0146\nvt 0.9088 0.2634\nvt 0.9061 0.2634\nvt 0.8826 0.5908\nvt 0.8858 0.5953\nvt 0.9088 0.1482\nvt 0.9116 0.1482\nvt 0.8649 0.8090\nvt 0.8681 0.8135\nvt 0.9143 0.1494\nvt 0.9171 0.1494\nvt 0.4842 0.8436\nvt 0.4875 0.8481\nvt 0.9198 0.1505\nvt 0.9225 0.1505\nvt 0.3443 0.8447\nvt 0.3476 0.8492\nvt 0.9225 0.1517\nvt 0.9253 0.1517\nvt 0.1939 0.8458\nvt 0.1971 0.8503\nvt 0.9280 0.1529\nvt 0.9307 0.1529\nvt 0.0324 0.8469\nvt 0.0357 0.8514\nvt 0.9864 0.0179\nvt 0.9891 0.0179\nvt 0.6857 0.9386\nvt 0.6902 0.9353\nvt 0.9835 0.7864\nvt 0.9863 0.7864\nvt 0.7098 0.1560\nvt 0.7168 0.1507\nvt 0.9837 0.0209\nvt 0.9864 0.0209\nvt 0.6997 0.4716\nvt 0.7041 0.4682\nvt 0.9835 0.9497\nvt 0.9808 0.9497\nvt 0.6896 0.7535\nvt 0.6940 0.7502\nvt 0.9809 0.0232\nvt 0.9837 0.0232\nvt 0.0224 0.7848\nvt 0.0268 0.7815\nvt 0.9781 0.6040\nvt 0.9808 0.6040\nvt 0.2555 0.7825\nvt 0.2599 0.7792\nvt 0.2268 0.6276\nvt 0.2296 0.6276\nvt 0.4831 0.7802\nvt 0.4875 0.7769\nvt 0.2214 0.6287\nvt 0.2241 0.6287\nvt 0.5009 0.2095\nvt 0.5053 0.2062\nvt 0.2186 0.6299\nvt 0.2214 0.6299\nvt 0.4852 0.5251\nvt 0.4897 0.5218\nvt 0.9782 0.0290\nvt 0.9809 0.0290\nvt 0.2598 0.5340\nvt 0.2643 0.5307\nvt 0.4535 0.6210\nvt 0.4562 0.6210\nvt 0.0288 0.5429\nvt 0.0333 0.5396\nvt 0.9755 0.0314\nvt 0.9782 0.0314\nvt 0.2676 0.2452\nvt 0.2720 0.2419\nvt 0.9335 0.4071\nvt 0.8670 0.4071\nvt 0.1141 0.1311\nvt 0.0202 0.0765\nvt 0.1986 0.6080\nvt 0.2159 0.6080\nvt 0.8966 0.0067\nvt 0.8994 0.0116\nvt 0.9088 0.2675\nvt 0.9061 0.2675\nvt 0.8882 0.5871\nvt 0.8909 0.5919\nvt 0.9088 0.1436\nvt 0.9116 0.1436\nvt 0.8710 0.8049\nvt 0.8737 0.8097\nvt 0.9143 0.1443\nvt 0.9171 0.1443\nvt 0.4909 0.8392\nvt 0.4936 0.8440\nvt 0.9198 0.1451\nvt 0.9225 0.1451\nvt 0.3515 0.8399\nvt 0.3543 0.8448\nvt 0.9225 0.1458\nvt 0.9253 0.1458\nvt 0.2016 0.8407\nvt 0.2043 0.8455\nvt 0.9280 0.1465\nvt 0.9307 0.1465\nvt 0.0407 0.8414\nvt 0.0434 0.8462\nvt 0.9864 0.0111\nvt 0.9891 0.0111\nvt 0.6800 0.9297\nvt 0.6848 0.9269\nvt 0.9835 0.7792\nvt 0.9863 0.7792\nvt 0.7035 0.1462\nvt 0.7111 0.1418\nvt 0.9837 0.0130\nvt 0.9864 0.0130\nvt 0.6930 0.4613\nvt 0.6978 0.4585\nvt 0.9835 0.9580\nvt 0.9808 0.9580\nvt 0.6826 0.7427\nvt 0.6874 0.7399\nvt 0.9809 0.0145\nvt 0.9837 0.0145\nvt 0.0151 0.7734\nvt 0.0199 0.7706\nvt 0.9781 0.5948\nvt 0.9808 0.5948\nvt 0.2478 0.7706\nvt 0.2526 0.7678\nvt 0.2268 0.6179\nvt 0.2296 0.6179\nvt 0.4750 0.7678\nvt 0.4798 0.7650\nvt 0.2214 0.6187\nvt 0.2241 0.6187\nvt 0.4925 0.1966\nvt 0.4973 0.1938\nvt 0.2186 0.6194\nvt 0.2214 0.6194\nvt 0.4765 0.5116\nvt 0.4813 0.5088\nvt 0.9782 0.0181\nvt 0.9809 0.0181\nvt 0.2508 0.5200\nvt 0.2555 0.5172\nvt 0.4535 0.6097\nvt 0.4562 0.6097\nvt 0.0194 0.5283\nvt 0.0242 0.5255\nvt 0.9755 0.0196\nvt 0.9782 0.0196\nvt 0.2578 0.2301\nvt 0.2626 0.2273\nvt 0.9335 0.4252\nvt 0.8670 0.4252\nvt 0.1117 0.1361\nvt 0.0120 0.0933\nvt 0.1986 0.6047\nvt 0.2159 0.6047\nvt 0.9021 0.0039\nvt 0.9043 0.0091\nvt 0.9088 0.2712\nvt 0.9061 0.2712\nvt 0.8943 0.5840\nvt 0.8964 0.5892\nvt 0.9088 0.1396\nvt 0.9116 0.1396\nvt 0.8777 0.8015\nvt 0.8798 0.8067\nvt 0.9143 0.1399\nvt 0.9171 0.1399\nvt 0.4981 0.8355\nvt 0.5003 0.8406\nvt 0.9198 0.1403\nvt 0.9225 0.1403\nvt 0.3594 0.8359\nvt 0.3615 0.8411\nvt 0.9225 0.1406\nvt 0.9253 0.1406\nvt 0.2101 0.8364\nvt 0.2122 0.8415\nvt 0.9280 0.1409\nvt 0.9307 0.1409\nvt 0.0497 0.8368\nvt 0.0519 0.8420\nvt 0.9864 0.0051\nvt 0.9891 0.0051\nvt 0.6752 0.9199\nvt 0.6803 0.9178\nvt 0.9835 0.7728\nvt 0.9863 0.7728\nvt 0.6982 0.1355\nvt 0.7063 0.1321\nvt 0.9837 0.0060\nvt 0.9864 0.0060\nvt 0.6875 0.4500\nvt 0.6926 0.4478\nvt 0.9835 0.9654\nvt 0.9808 0.9654\nvt 0.6768 0.7308\nvt 0.6818 0.7286\nvt 0.9809 0.0067\nvt 0.9837 0.0067\nvt 0.0089 0.7609\nvt 0.0140 0.7587\nvt 0.9781 0.5867\nvt 0.9808 0.5867\nvt 0.2414 0.7575\nvt 0.2465 0.7553\nvt 0.2268 0.6094\nvt 0.2296 0.6094\nvt 0.4683 0.7541\nvt 0.4734 0.7519\nvt 0.2214 0.6097\nvt 0.2241 0.6097\nvt 0.4855 0.1822\nvt 0.4906 0.1800\nvt 0.2186 0.6100\nvt 0.2214 0.6100\nvt 0.4692 0.4966\nvt 0.4742 0.4945\nvt 0.9782 0.0084\nvt 0.9809 0.0084\nvt 0.2431 0.5044\nvt 0.2482 0.5022\nvt 0.4535 0.5995\nvt 0.4562 0.5995\nvt 0.0115 0.5122\nvt 0.0166 0.5100\nvt 0.9755 0.0090\nvt 0.9782 0.0090\nvt 0.2496 0.2134\nvt 0.2547 0.2112\nvt 0.9335 0.4437\nvt 0.8670 0.4437\nvt 0.1098 0.1414\nvt 0.0056 0.1116\nvt 0.1986 0.6020\nvt 0.2159 0.6020\nvt 0.9080 0.0018\nvt 0.9095 0.0072\nvt 0.9088 0.2743\nvt 0.9061 0.2743\nvt 0.9008 0.5817\nvt 0.9023 0.5870\nvt 0.9088 0.1362\nvt 0.9116 0.1362\nvt 0.8849 0.7989\nvt 0.8864 0.8043\nvt 0.9143 0.1362\nvt 0.9171 0.1362\nvt 0.5060 0.8327\nvt 0.5075 0.8381\nvt 0.9198 0.1362\nvt 0.9225 0.1362\nvt 0.3679 0.8329\nvt 0.3694 0.8383\nvt 0.9225 0.1362\nvt 0.9253 0.1362\nvt 0.2193 0.8331\nvt 0.2208 0.8385\nvt 0.9280 0.1362\nvt 0.9307 0.1362\nvt 0.0596 0.8333\nvt 0.0611 0.8387\nvt 0.9864 0.0000\nvt 0.9891 0.0000\nvt 0.6715 0.9093\nvt 0.6768 0.9078\nvt 0.9835 0.7674\nvt 0.9863 0.7674\nvt 0.6941 0.1238\nvt 0.7026 0.1214\nvt 0.9837 0.0000\nvt 0.9864 0.0000\nvt 0.6832 0.4376\nvt 0.6885 0.4361\nvt 0.9835 0.9717\nvt 0.9808 0.9717\nvt 0.6722 0.7177\nvt 0.6775 0.7162\nvt 0.9809 0.0000\nvt 0.9837 0.0000\nvt 0.0041 0.7472\nvt 0.0095 0.7457\nvt 0.9781 0.5797\nvt 0.9808 0.5797\nvt 0.2364 0.7431\nvt 0.2417 0.7416\nvt 0.2268 0.6020\nvt 0.2296 0.6020\nvt 0.4631 0.7390\nvt 0.4684 0.7375\nvt 0.2214 0.6020\nvt 0.2241 0.6020\nvt 0.4800 0.1665\nvt 0.4854 0.1650\nvt 0.2186 0.6020\nvt 0.2214 0.6020\nvt 0.4635 0.4803\nvt 0.4688 0.4787\nvt 0.9782 0.0000\nvt 0.9809 0.0000\nvt 0.2372 0.4874\nvt 0.2425 0.4859\nvt 0.4535 0.5908\nvt 0.4562 0.5908\nvt 0.0054 0.4945\nvt 0.0107 0.4930\nvt 0.9755 0.0000\nvt 0.9782 0.0000\nvt 0.2432 0.1950\nvt 0.2485 0.1935\nvt 0.9335 0.4627\nvt 0.8670 0.4627\nvt 0.1086 0.1470\nvt 0.0014 0.1316\nvt 0.4535 0.5908\nvt 0.4535 0.5932\nvt 0.4362 0.5932\nvt 0.4362 0.5908\nvt 0.9142 0.0005\nvt 0.9150 0.0060\nvt 0.9143 0.1362\nvt 0.9143 0.1389\nvt 0.9116 0.1389\nvt 0.9116 0.1362\nvt 0.9078 0.5802\nvt 0.9086 0.5857\nvt 0.9198 0.1362\nvt 0.9198 0.1392\nvt 0.9171 0.1392\nvt 0.9171 0.1362\nvt 0.8926 0.7973\nvt 0.8934 0.8028\nvt 0.9280 0.1362\nvt 0.9280 0.1395\nvt 0.9253 0.1395\nvt 0.9253 0.1362\nvt 0.5144 0.8309\nvt 0.5152 0.8364\nvt 0.9335 0.1362\nvt 0.9335 0.1398\nvt 0.9307 0.1398\nvt 0.9307 0.1362\nvt 0.3771 0.8309\nvt 0.3778 0.8365\nvt 0.9781 0.8154\nvt 0.9781 0.8193\nvt 0.9753 0.8193\nvt 0.9753 0.8154\nvt 0.2291 0.8310\nvt 0.2299 0.8365\nvt 0.9835 0.7674\nvt 0.9835 0.7631\nvt 0.9863 0.7631\nvt 0.9863 0.7674\nvt 0.0702 0.8310\nvt 0.0710 0.8366\nvt 0.9808 0.7760\nvt 0.9808 0.7714\nvt 0.9835 0.7714\nvt 0.9835 0.7760\nvt 0.6691 0.8978\nvt 0.6746 0.8970\nvt 0.9781 0.9924\nvt 0.9781 0.9875\nvt 0.9808 0.9875\nvt 0.9808 0.9924\nvt 0.6915 0.1112\nvt 0.7002 0.1099\nvt 0.2241 0.8205\nvt 0.2241 0.8151\nvt 0.2268 0.8151\nvt 0.2268 0.8205\nvt 0.6804 0.4242\nvt 0.6859 0.4234\nvt 0.2159 0.8292\nvt 0.2159 0.8235\nvt 0.2186 0.8235\nvt 0.2186 0.8292\nvt 0.6693 0.7036\nvt 0.6747 0.7028\nvt 0.9781 0.5797\nvt 0.9781 0.5857\nvt 0.9753 0.5857\nvt 0.9753 0.5797\nvt 0.0010 0.7323\nvt 0.0065 0.7316\nvt 0.9644 0.7212\nvt 0.9644 0.7275\nvt 0.9616 0.7275\nvt 0.9616 0.7212\nvt 0.2331 0.7275\nvt 0.2386 0.7267\nvt 0.9644 0.9741\nvt 0.9644 0.9675\nvt 0.9671 0.9675\nvt 0.9671 0.9741\nvt 0.4597 0.7227\nvt 0.4651 0.7219\nvt 0.9671 0.9827\nvt 0.9671 0.9758\nvt 0.9698 0.9758\nvt 0.9698 0.9827\nvt 0.4765 0.1495\nvt 0.4820 0.1487\nvt 0.9753 0.5797\nvt 0.9753 0.5869\nvt 0.9726 0.5869\nvt 0.9726 0.5797\nvt 0.4598 0.4625\nvt 0.4652 0.4617\nvt 0.9755 0.0000\nvt 0.9755 0.0076\nvt 0.9727 0.0076\nvt 0.9727 0.0000\nvt 0.2333 0.4689\nvt 0.2388 0.4681\nvt 0.9726 0.5797\nvt 0.9726 0.5876\nvt 0.9698 0.5876\nvt 0.9698 0.5797\nvt 0.0014 0.4752\nvt 0.0068 0.4744\nvt 0.9727 0.0000\nvt 0.9727 0.0082\nvt 0.9700 0.0082\nvt 0.9700 0.0000\nvt 0.2390 0.1750\nvt 0.2445 0.1742\nvt 0.9335 0.4818\nvt 0.8670 0.4818\nvt 0.1082 0.1528\nvt 0.0000 0.1489\nvt 0.4535 0.5963\nvt 0.4362 0.5963\nvt 0.9205 0.0000\nvt 0.9207 0.0056\nvt 0.9143 0.1423\nvt 0.9116 0.1423\nvt 0.9147 0.5797\nvt 0.9149 0.5852\nvt 0.9198 0.1429\nvt 0.9171 0.1429\nvt 0.9001 0.7967\nvt 0.9002 0.8023\nvt 0.9280 0.1435\nvt 0.9253 0.1435\nvt 0.5225 0.8303\nvt 0.5227 0.8358\nvt 0.9335 0.1442\nvt 0.9307 0.1442\nvt 0.3857 0.8303\nvt 0.3859 0.8359\nvt 0.9781 0.8240\nvt 0.9753 0.8240\nvt 0.2383 0.8303\nvt 0.2385 0.8359\nvt 0.9835 0.7581\nvt 0.9863 0.7581\nvt 0.0799 0.8303\nvt 0.0801 0.8359\nvt 0.9808 0.7661\nvt 0.9835 0.7661\nvt 0.6683 0.8873\nvt 0.6738 0.8871\nvt 0.9781 0.9819\nvt 0.9808 0.9819\nvt 0.6906 0.0998\nvt 0.6993 0.0995\nvt 0.2241 0.8091\nvt 0.2268 0.8091\nvt 0.6794 0.4122\nvt 0.6850 0.4120\nvt 0.2159 0.8171\nvt 0.2186 0.8171\nvt 0.6683 0.6910\nvt 0.6738 0.6908\nvt 0.9781 0.5924\nvt 0.9753 0.5924\nvt 0.0000 0.7192\nvt 0.0055 0.7190\nvt 0.9644 0.7345\nvt 0.9616 0.7345\nvt 0.2320 0.7138\nvt 0.2376 0.7136\nvt 0.9644 0.9602\nvt 0.9671 0.9602\nvt 0.4585 0.7084\nvt 0.4640 0.7082\nvt 0.9671 0.9682\nvt 0.9698 0.9682\nvt 0.4753 0.1346\nvt 0.4808 0.1344\nvt 0.9753 0.5949\nvt 0.9726 0.5949\nvt 0.4585 0.4470\nvt 0.4640 0.4468\nvt 0.9755 0.0158\nvt 0.9727 0.0158\nvt 0.2320 0.4528\nvt 0.2376 0.4526\nvt 0.9726 0.5961\nvt 0.9698 0.5961\nvt 0.0000 0.4586\nvt 0.0055 0.4584\nvt 0.9727 0.0171\nvt 0.9700 0.0171\nvt 0.2376 0.1578\nvt 0.2432 0.1576\nvt 0.9335 0.4971\nvt 0.8670 0.4971\nvt 0.1082 0.1539\nvt 0.0000 0.1579\nvt 0.4535 0.5970\nvt 0.4362 0.5970\nvt 0.9221 0.0000\nvt 0.9219 0.0056\nvt 0.9143 0.1432\nvt 0.9116 0.1432\nvt 0.9166 0.5797\nvt 0.9164 0.5852\nvt 0.9198 0.1441\nvt 0.9171 0.1441\nvt 0.9024 0.7967\nvt 0.9022 0.8023\nvt 0.9280 0.1449\nvt 0.9253 0.1449\nvt 0.5252 0.8303\nvt 0.5250 0.8358\nvt 0.9335 0.1458\nvt 0.9307 0.1458\nvt 0.3888 0.8303\nvt 0.3886 0.8359\nvt 0.9781 0.8259\nvt 0.9753 0.8259\nvt 0.2418 0.8303\nvt 0.2416 0.8359\nvt 0.9835 0.7560\nvt 0.9863 0.7560\nvt 0.0838 0.8303\nvt 0.0836 0.8359\nvt 0.9808 0.7638\nvt 0.9835 0.7638\nvt 0.6683 0.8830\nvt 0.6738 0.8832\nvt 0.9781 0.9793\nvt 0.9808 0.9793\nvt 0.6906 0.0948\nvt 0.6993 0.0951\nvt 0.2241 0.8061\nvt 0.2268 0.8061\nvt 0.6794 0.4069\nvt 0.6850 0.4071\nvt 0.2159 0.8139\nvt 0.2186 0.8139\nvt 0.6683 0.6853\nvt 0.6738 0.6855\nvt 0.9781 0.5958\nvt 0.9753 0.5958\nvt 0.0000 0.7130\nvt 0.0055 0.7132\nvt 0.9644 0.7382\nvt 0.9616 0.7382\nvt 0.2320 0.7072\nvt 0.2376 0.7074\nvt 0.9644 0.9563\nvt 0.9671 0.9563\nvt 0.4585 0.7014\nvt 0.4640 0.7016\nvt 0.9671 0.9640\nvt 0.9698 0.9640\nvt 0.4753 0.1272\nvt 0.4808 0.1274\nvt 0.9753 0.5993\nvt 0.9726 0.5993\nvt 0.4585 0.4392\nvt 0.4640 0.4394\nvt 0.9755 0.0205\nvt 0.9727 0.0205\nvt 0.2320 0.4446\nvt 0.2376 0.4448\nvt 0.9726 0.6010\nvt 0.9698 0.6010\nvt 0.0000 0.4500\nvt 0.0055 0.4502\nvt 0.9727 0.0222\nvt 0.9700 0.0222\nvt 0.2376 0.1488\nvt 0.2432 0.1490\nvt 0.9335 0.5047\nvt 0.8670 0.5047\nvt 0.1086 0.1597\nvt 0.0014 0.1752\nvt 0.4535 0.6008\nvt 0.4362 0.6008\nvt 0.9284 0.0005\nvt 0.9276 0.0060\nvt 0.9143 0.1474\nvt 0.9116 0.1474\nvt 0.9235 0.5802\nvt 0.9227 0.5857\nvt 0.9198 0.1487\nvt 0.9171 0.1487\nvt 0.9098 0.7973\nvt 0.9090 0.8028\nvt 0.9280 0.1499\nvt 0.9253 0.1499\nvt 0.5332 0.8309\nvt 0.5324 0.8364\nvt 0.9335 0.1512\nvt 0.9307 0.1512\nvt 0.3974 0.8310\nvt 0.3966 0.8365\nvt 0.9781 0.8316\nvt 0.9753 0.8316\nvt 0.2510 0.8310\nvt 0.2503 0.8365\nvt 0.9835 0.7499\nvt 0.9863 0.7499\nvt 0.0936 0.8311\nvt 0.0929 0.8366\nvt 0.9808 0.7572\nvt 0.9835 0.7572\nvt 0.6691 0.8725\nvt 0.6746 0.8733\nvt 0.9781 0.9724\nvt 0.9808 0.9724\nvt 0.6915 0.0834\nvt 0.7002 0.0846\nvt 0.2241 0.7985\nvt 0.2268 0.7985\nvt 0.6804 0.3948\nvt 0.6859 0.3956\nvt 0.2159 0.8059\nvt 0.2186 0.8059\nvt 0.6693 0.6726\nvt 0.6748 0.6734\nvt 0.9781 0.6042\nvt 0.9753 0.6042\nvt 0.0011 0.6998\nvt 0.0065 0.7006\nvt 0.9644 0.7470\nvt 0.9616 0.7470\nvt 0.2332 0.6934\nvt 0.2386 0.6942\nvt 0.9644 0.9471\nvt 0.9671 0.9471\nvt 0.4597 0.6870\nvt 0.4652 0.6878\nvt 0.9671 0.9545\nvt 0.9698 0.9545\nvt 0.4765 0.1122\nvt 0.4820 0.1130\nvt 0.9753 0.6092\nvt 0.9726 0.6092\nvt 0.4598 0.4236\nvt 0.4653 0.4244\nvt 0.9755 0.0308\nvt 0.9727 0.0308\nvt 0.2334 0.4284\nvt 0.2388 0.4292\nvt 0.9726 0.6117\nvt 0.9698 0.6117\nvt 0.0014 0.4332\nvt 0.0068 0.4340\nvt 0.9727 0.0333\nvt 0.9700 0.0333\nvt 0.2391 0.1314\nvt 0.2446 0.1322\nvt 0.9335 0.5185\nvt 0.8670 0.5185\nvt 0.1098 0.1653\nvt 0.0057 0.1953\nvt 0.4535 0.6051\nvt 0.4362 0.6051\nvt 0.9346 0.0018\nvt 0.9331 0.0072\nvt 0.9143 0.1523\nvt 0.9116 0.1523\nvt 0.9305 0.5817\nvt 0.9289 0.5871\nvt 0.9198 0.1541\nvt 0.9171 0.1541\nvt 0.9175 0.7990\nvt 0.9160 0.8044\nvt 0.9280 0.1559\nvt 0.9253 0.1559\nvt 0.5416 0.8327\nvt 0.5401 0.8381\nvt 0.9335 0.1577\nvt 0.9307 0.1577\nvt 0.4066 0.8329\nvt 0.4051 0.8384\nvt 0.9781 0.8388\nvt 0.9753 0.8388\nvt 0.2609 0.8332\nvt 0.2594 0.8385\nvt 0.9835 0.7422\nvt 0.9863 0.7422\nvt 0.1043 0.8334\nvt 0.1027 0.8387\nvt 0.9808 0.7489\nvt 0.9835 0.7489\nvt 0.6715 0.8610\nvt 0.6769 0.8625\nvt 0.9781 0.9635\nvt 0.9808 0.9635\nvt 0.6942 0.0707\nvt 0.7026 0.0731\nvt 0.2241 0.7888\nvt 0.2268 0.7888\nvt 0.6832 0.3814\nvt 0.6886 0.3829\nvt 0.2159 0.7956\nvt 0.2186 0.7956\nvt 0.6723 0.6585\nvt 0.6776 0.6600\nvt 0.9781 0.6150\nvt 0.9753 0.6150\nvt 0.0042 0.6849\nvt 0.0095 0.6864\nvt 0.9644 0.7584\nvt 0.9616 0.7584\nvt 0.2365 0.6778\nvt 0.2418 0.6793\nvt 0.9644 0.9351\nvt 0.9671 0.9351\nvt 0.4631 0.6707\nvt 0.4684 0.6722\nvt 0.9671 0.9419\nvt 0.9698 0.9419\nvt 0.4801 0.0951\nvt 0.4854 0.0966\nvt 0.9753 0.6223\nvt 0.9726 0.6223\nvt 0.4636 0.4058\nvt 0.4689 0.4073\nvt 0.9755 0.0445\nvt 0.9727 0.0445\nvt 0.2373 0.4098\nvt 0.2426 0.4114\nvt 0.9726 0.6260\nvt 0.9698 0.6260\nvt 0.0055 0.4139\nvt 0.0108 0.4154\nvt 0.9727 0.0481\nvt 0.9700 0.0481\nvt 0.2433 0.1114\nvt 0.2486 0.1129\nvt 0.9335 0.5331\nvt 0.8670 0.5331\nvt 0.1117 0.1706\nvt 0.0121 0.2137\nvt 0.4535 0.6098\nvt 0.4362 0.6098\nvt 0.9405 0.0040\nvt 0.9383 0.0091\nvt 0.9143 0.1575\nvt 0.9116 0.1575\nvt 0.9370 0.5841\nvt 0.9348 0.5892\nvt 0.9198 0.1599\nvt 0.9171 0.1599\nvt 0.9248 0.8016\nvt 0.9226 0.8067\nvt 0.9280 0.1624\nvt 0.9253 0.1624\nvt 0.5495 0.8356\nvt 0.5474 0.8407\nvt 0.9335 0.1648\nvt 0.9307 0.1648\nvt 0.4151 0.8360\nvt 0.4129 0.8412\nvt 0.9781 0.8464\nvt 0.9753 0.8464\nvt 0.2701 0.8365\nvt 0.2680 0.8416\nvt 0.9835 0.7339\nvt 0.9863 0.7339\nvt 0.1141 0.8369\nvt 0.1120 0.8421\nvt 0.9808 0.7401\nvt 0.9835 0.7401\nvt 0.6753 0.8503\nvt 0.6804 0.8525\nvt 0.9781 0.9541\nvt 0.9808 0.9541\nvt 0.6983 0.0590\nvt 0.7064 0.0624\nvt 0.2241 0.7785\nvt 0.2268 0.7785\nvt 0.6876 0.3690\nvt 0.6927 0.3712\nvt 0.2159 0.7847\nvt 0.2186 0.7847\nvt 0.6769 0.6454\nvt 0.6819 0.6476\nvt 0.9781 0.6265\nvt 0.9753 0.6265\nvt 0.0090 0.6712\nvt 0.0141 0.6734\nvt 0.9644 0.7705\nvt 0.9616 0.7705\nvt 0.2415 0.6634\nvt 0.2466 0.6656\nvt 0.9644 0.9224\nvt 0.9671 0.9224\nvt 0.4684 0.6556\nvt 0.4735 0.6578\nvt 0.9671 0.9286\nvt 0.9698 0.9286\nvt 0.4856 0.0793\nvt 0.4907 0.0816\nvt 0.9753 0.6362\nvt 0.9726 0.6362\nvt 0.4693 0.3894\nvt 0.4744 0.3916\nvt 0.9755 0.0589\nvt 0.9727 0.0589\nvt 0.2433 0.3928\nvt 0.2483 0.3950\nvt 0.9726 0.6410\nvt 0.9698 0.6410\nvt 0.0117 0.3962\nvt 0.0168 0.3984\nvt 0.9727 0.0638\nvt 0.9700 0.0638\nvt 0.2497 0.0929\nvt 0.2549 0.0951\nvt 0.9335 0.5451\nvt 0.8670 0.5451\nvt 0.1142 0.1756\nvt 0.0204 0.2304\nvt 0.4535 0.6148\nvt 0.4362 0.6148\nvt 0.9460 0.0068\nvt 0.9432 0.0116\nvt 0.9143 0.1631\nvt 0.9116 0.1631\nvt 0.9431 0.5872\nvt 0.9403 0.5920\nvt 0.9198 0.1661\nvt 0.9171 0.1661\nvt 0.9314 0.8050\nvt 0.9287 0.8098\nvt 0.9280 0.1691\nvt 0.9253 0.1691\nvt 0.5568 0.8393\nvt 0.5540 0.8441\nvt 0.9335 0.1721\nvt 0.9307 0.1721\nvt 0.4230 0.8400\nvt 0.4202 0.8449\nvt 0.9781 0.8544\nvt 0.9753 0.8544\nvt 0.2786 0.8408\nvt 0.2758 0.8456\nvt 0.9835 0.7254\nvt 0.9863 0.7254\nvt 0.1232 0.8415\nvt 0.1204 0.8464\nvt 0.9808 0.7310\nvt 0.9835 0.7310\nvt 0.6801 0.8406\nvt 0.6849 0.8434\nvt 0.9781 0.9444\nvt 0.9808 0.9444\nvt 0.7036 0.0482\nvt 0.7112 0.0527\nvt 0.2241 0.7678\nvt 0.2268 0.7678\nvt 0.6932 0.3577\nvt 0.6980 0.3605\nvt 0.2159 0.7734\nvt 0.2186 0.7734\nvt 0.6828 0.6335\nvt 0.6875 0.6363\nvt 0.9781 0.6385\nvt 0.9753 0.6385\nvt 0.0152 0.6587\nvt 0.0200 0.6615\nvt 0.9644 0.7830\nvt 0.9616 0.7830\nvt 0.2480 0.6503\nvt 0.2528 0.6531\nvt 0.9644 0.9093\nvt 0.9671 0.9093\nvt 0.4752 0.6419\nvt 0.4800 0.6447\nvt 0.9671 0.9149\nvt 0.9698 0.9149\nvt 0.4927 0.0650\nvt 0.4975 0.0678\nvt 0.9753 0.6505\nvt 0.9726 0.6505\nvt 0.4767 0.3745\nvt 0.4815 0.3773\nvt 0.9755 0.0738\nvt 0.9727 0.0738\nvt 0.2509 0.3772\nvt 0.2557 0.3800\nvt 0.9726 0.6565\nvt 0.9698 0.6565\nvt 0.0196 0.3800\nvt 0.0244 0.3828\nvt 0.9727 0.0799\nvt 0.9700 0.0799\nvt 0.2580 0.0762\nvt 0.2628 0.0790\nvt 0.9335 0.5547\nvt 0.8670 0.5547\nvt 0.1171 0.1801\nvt 0.0302 0.2455\nvt 0.4535 0.6199\nvt 0.4362 0.6199\nvt 0.9511 0.0102\nvt 0.9478 0.0147\nvt 0.9143 0.1689\nvt 0.9116 0.1689\nvt 0.9487 0.5909\nvt 0.9454 0.5954\nvt 0.9198 0.1725\nvt 0.9171 0.1725\nvt 0.9376 0.8091\nvt 0.9343 0.8136\nvt 0.9280 0.1761\nvt 0.9253 0.1761\nvt 0.5635 0.8437\nvt 0.5602 0.8482\nvt 0.9335 0.1797\nvt 0.9307 0.1797\nvt 0.4302 0.8448\nvt 0.4269 0.8493\nvt 0.9781 0.8626\nvt 0.9753 0.8626\nvt 0.2863 0.8459\nvt 0.2830 0.8504\nvt 0.9835 0.7166\nvt 0.9863 0.7166\nvt 0.1314 0.8470\nvt 0.1281 0.8515\nvt 0.9808 0.7216\nvt 0.9835 0.7216\nvt 0.6859 0.8317\nvt 0.6903 0.8350\nvt 0.9781 0.9344\nvt 0.9808 0.9344\nvt 0.7099 0.0385\nvt 0.7170 0.0438\nvt 0.2241 0.7568\nvt 0.2268 0.7568\nvt 0.6998 0.3474\nvt 0.7043 0.3508\nvt 0.2159 0.7619\nvt 0.2186 0.7619\nvt 0.6898 0.6227\nvt 0.6942 0.6260\nvt 0.9781 0.6506\nvt 0.9753 0.6506\nvt 0.0226 0.6473\nvt 0.0270 0.6507\nvt 0.9644 0.7957\nvt 0.9616 0.7957\nvt 0.2557 0.6384\nvt 0.2601 0.6417\nvt 0.9644 0.8960\nvt 0.9671 0.8960\nvt 0.4833 0.6295\nvt 0.4877 0.6328\nvt 0.9671 0.9010\nvt 0.9698 0.9010\nvt 0.5011 0.0521\nvt 0.5055 0.0554\nvt 0.9753 0.6650\nvt 0.9726 0.6650\nvt 0.4854 0.3610\nvt 0.4899 0.3643\nvt 0.9755 0.0890\nvt 0.9727 0.0890\nvt 0.2600 0.3632\nvt 0.2645 0.3666\nvt 0.9726 0.6722\nvt 0.9698 0.6722\nvt 0.0291 0.3655\nvt 0.0335 0.3688\nvt 0.9727 0.0962\nvt 0.9700 0.0962\nvt 0.2678 0.0611\nvt 0.2723 0.0645\nvt 0.9335 0.5620\nvt 0.8670 0.5620\nvt 0.1206 0.1843\nvt 0.0413 0.2591\nvt 0.4535 0.6252\nvt 0.4362 0.6252\nvt 0.9557 0.0140\nvt 0.9519 0.0181\nvt 0.9143 0.1748\nvt 0.9116 0.1748\nvt 0.9538 0.5952\nvt 0.9500 0.5993\nvt 0.9198 0.1790\nvt 0.9171 0.1790\nvt 0.9431 0.8137\nvt 0.9393 0.8178\nvt 0.9280 0.1832\nvt 0.9253 0.1832\nvt 0.5695 0.8488\nvt 0.5657 0.8529\nvt 0.9335 0.1874\nvt 0.9307 0.1874\nvt 0.4367 0.8503\nvt 0.4329 0.8544\nvt 0.9781 0.8709\nvt 0.9753 0.8709\nvt 0.2933 0.8518\nvt 0.2895 0.8559\nvt 0.9835 0.7077\nvt 0.9863 0.7077\nvt 0.1388 0.8533\nvt 0.1351 0.8574\nvt 0.9808 0.7121\nvt 0.9835 0.7121\nvt 0.6925 0.8237\nvt 0.6965 0.8275\nvt 0.9781 0.9243\nvt 0.9808 0.9243\nvt 0.7171 0.0298\nvt 0.7235 0.0358\nvt 0.2241 0.7458\nvt 0.2268 0.7458\nvt 0.7074 0.3382\nvt 0.7115 0.3420\nvt 0.2159 0.7502\nvt 0.2186 0.7502\nvt 0.6978 0.6130\nvt 0.7018 0.6168\nvt 0.9781 0.6629\nvt 0.9753 0.6629\nvt 0.0310 0.6371\nvt 0.0350 0.6409\nvt 0.9644 0.8086\nvt 0.9616 0.8086\nvt 0.2645 0.6277\nvt 0.2685 0.6315\nvt 0.9644 0.8825\nvt 0.9671 0.8825\nvt 0.4924 0.6183\nvt 0.4965 0.6221\nvt 0.9671 0.8869\nvt 0.9698 0.8869\nvt 0.5107 0.0404\nvt 0.5147 0.0443\nvt 0.9753 0.6798\nvt 0.9726 0.6798\nvt 0.4954 0.3489\nvt 0.4994 0.3527\nvt 0.9755 0.1043\nvt 0.9727 0.1043\nvt 0.2704 0.3506\nvt 0.2744 0.3545\nvt 0.9726 0.6882\nvt 0.9698 0.6882\nvt 0.0398 0.3524\nvt 0.0439 0.3562\nvt 0.9727 0.1127\nvt 0.9700 0.1127\nvt 0.2789 0.0476\nvt 0.2830 0.0514\nvt 1.0000 0.3066\nvt 1.0000 0.3156\nvt 0.9335 0.3156\nvt 0.9335 0.3066\nvt 0.1243 0.1880\nvt 0.0538 0.2712\nvt 0.4535 0.6304\nvt 0.4362 0.6304\nvt 0.9597 0.0183\nvt 0.9555 0.0220\nvt 0.9143 0.1806\nvt 0.9116 0.1806\nvt 0.9582 0.5999\nvt 0.9540 0.6035\nvt 0.9198 0.1855\nvt 0.9171 0.1855\nvt 0.9480 0.8189\nvt 0.9438 0.8226\nvt 0.9280 0.1903\nvt 0.9253 0.1903\nvt 0.5748 0.8544\nvt 0.5706 0.8580\nvt 0.9335 0.1951\nvt 0.9307 0.1951\nvt 0.4424 0.8564\nvt 0.4382 0.8600\nvt 0.9781 0.8792\nvt 0.9753 0.8792\nvt 0.2995 0.8583\nvt 0.2953 0.8619\nvt 0.9835 0.6987\nvt 0.9863 0.6987\nvt 0.1455 0.8603\nvt 0.1413 0.8639\nvt 0.9808 0.7025\nvt 0.9835 0.7025\nvt 0.6998 0.8165\nvt 0.7034 0.8208\nvt 0.9781 0.9140\nvt 0.9808 0.9140\nvt 0.7252 0.0219\nvt 0.7309 0.0287\nvt 0.2241 0.7346\nvt 0.2268 0.7346\nvt 0.7159 0.3299\nvt 0.7195 0.3342\nvt 0.2159 0.7383\nvt 0.2186 0.7383\nvt 0.7067 0.6043\nvt 0.7103 0.6085\nvt 0.9781 0.6753\nvt 0.9753 0.6753\nvt 0.0403 0.6280\nvt 0.0439 0.6323\nvt 0.9644 0.8217\nvt 0.9616 0.8217\nvt 0.2743 0.6182\nvt 0.2779 0.6224\nvt 0.9644 0.8688\nvt 0.9671 0.8688\nvt 0.5027 0.6083\nvt 0.5063 0.6126\nvt 0.9671 0.8726\nvt 0.9698 0.8726\nvt 0.5214 0.0300\nvt 0.5250 0.0343\nvt 0.9753 0.6947\nvt 0.9726 0.6947\nvt 0.5066 0.3380\nvt 0.5101 0.3423\nvt 0.9755 0.1199\nvt 0.9727 0.1199\nvt 0.2820 0.3394\nvt 0.2856 0.3436\nvt 0.9726 0.7044\nvt 0.9698 0.7044\nvt 0.0519 0.3407\nvt 0.0555 0.3449\nvt 0.9727 0.1295\nvt 0.9700 0.1295\nvt 0.2914 0.0354\nvt 0.2951 0.0397\nvt 1.0000 0.3261\nvt 0.9335 0.3261\nvt 0.1284 0.1911\nvt 0.0678 0.2820\nvt 0.4535 0.6356\nvt 0.4362 0.6356\nvt 0.9632 0.0229\nvt 0.9586 0.0260\nvt 0.9143 0.1864\nvt 0.9116 0.1864\nvt 0.9621 0.6050\nvt 0.9575 0.6081\nvt 0.9198 0.1919\nvt 0.9171 0.1919\nvt 0.9522 0.8245\nvt 0.9477 0.8277\nvt 0.9280 0.1974\nvt 0.9253 0.1974\nvt 0.5794 0.8605\nvt 0.5748 0.8637\nvt 0.9335 0.2029\nvt 0.9307 0.2029\nvt 0.4474 0.8630\nvt 0.4428 0.8662\nvt 0.9781 0.8876\nvt 0.9753 0.8876\nvt 0.3049 0.8655\nvt 0.3003 0.8686\nvt 0.9835 0.6897\nvt 0.9863 0.6897\nvt 0.1513 0.8680\nvt 0.1467 0.8711\nvt 0.9808 0.6928\nvt 0.9835 0.6928\nvt 0.7079 0.8103\nvt 0.7110 0.8149\nvt 0.9781 0.9037\nvt 0.9808 0.9037\nvt 0.7341 0.0151\nvt 0.7390 0.0224\nvt 0.2241 0.7232\nvt 0.2268 0.7232\nvt 0.7254 0.3227\nvt 0.7285 0.3273\nvt 0.2159 0.7263\nvt 0.2186 0.7263\nvt 0.7166 0.5966\nvt 0.7197 0.6013\nvt 0.9781 0.6880\nvt 0.9753 0.6880\nvt 0.0508 0.6199\nvt 0.0539 0.6246\nvt 0.9644 0.8350\nvt 0.9616 0.8350\nvt 0.2852 0.6097\nvt 0.2883 0.6144\nvt 0.9644 0.8549\nvt 0.9671 0.8549\nvt 0.5142 0.5995\nvt 0.5172 0.6041\nvt 0.9671 0.8580\nvt 0.9698 0.8580\nvt 0.5333 0.0208\nvt 0.5364 0.0254\nvt 0.9753 0.7099\nvt 0.9726 0.7099\nvt 0.5190 0.3284\nvt 0.5221 0.3330\nvt 0.9755 0.1357\nvt 0.9727 0.1357\nvt 0.2950 0.3293\nvt 0.2981 0.3340\nvt 0.9726 0.7209\nvt 0.9698 0.7209\nvt 0.0654 0.3303\nvt 0.0685 0.3349\nvt 0.9727 0.1467\nvt 0.9700 0.1467\nvt 0.3054 0.0246\nvt 0.3086 0.0293\nvt 1.0000 0.3383\nvt 0.9335 0.3383\nvt 0.1326 0.1936\nvt 0.0836 0.2914\nvt 0.4535 0.6405\nvt 0.4362 0.6405\nvt 0.9660 0.0278\nvt 0.9611 0.0303\nvt 0.9143 0.1920\nvt 0.9116 0.1920\nvt 0.9653 0.6105\nvt 0.9603 0.6130\nvt 0.9198 0.1982\nvt 0.9171 0.1982\nvt 0.9558 0.8306\nvt 0.9508 0.8331\nvt 0.9280 0.2044\nvt 0.9253 0.2044\nvt 0.5833 0.8672\nvt 0.5784 0.8697\nvt 0.9335 0.2106\nvt 0.9307 0.2106\nvt 0.4517 0.8703\nvt 0.4467 0.8728\nvt 0.9781 0.8960\nvt 0.9753 0.8960\nvt 0.3094 0.8734\nvt 0.3045 0.8759\nvt 0.9835 0.6806\nvt 0.9863 0.6806\nvt 0.1562 0.8764\nvt 0.1513 0.8789\nvt 0.9808 0.6830\nvt 0.9835 0.6830\nvt 0.7169 0.8050\nvt 0.7193 0.8099\nvt 0.9781 0.8933\nvt 0.9808 0.8933\nvt 0.7440 0.0092\nvt 0.7479 0.0171\nvt 0.2241 0.7117\nvt 0.2268 0.7117\nvt 0.7358 0.3164\nvt 0.7383 0.3214\nvt 0.2159 0.7141\nvt 0.2186 0.7141\nvt 0.7277 0.5900\nvt 0.7302 0.5950\nvt 0.9781 0.7009\nvt 0.9753 0.7009\nvt 0.0624 0.6130\nvt 0.0649 0.6180\nvt 0.9644 0.8486\nvt 0.9616 0.8486\nvt 0.2975 0.6024\nvt 0.3000 0.6074\nvt 0.9644 0.8405\nvt 0.9671 0.8405\nvt 0.5270 0.5918\nvt 0.5295 0.5968\nvt 0.9671 0.8430\nvt 0.9698 0.8430\nvt 0.5468 0.0128\nvt 0.5493 0.0178\nvt 0.9753 0.7256\nvt 0.9726 0.7256\nvt 0.5330 0.3200\nvt 0.5355 0.3250\nvt 0.9755 0.1521\nvt 0.9727 0.1521\nvt 0.3096 0.3206\nvt 0.3121 0.3256\nvt 0.9726 0.7380\nvt 0.9698 0.7380\nvt 0.0806 0.3212\nvt 0.0831 0.3262\nvt 0.9727 0.1645\nvt 0.9700 0.1645\nvt 0.3212 0.0152\nvt 0.3238 0.0202\nvt 1.0000 0.3526\nvt 0.9335 0.3526\nvt 0.1369 0.1955\nvt 0.1016 0.2992\nvt 0.4535 0.6451\nvt 0.4362 0.6451\nvt 0.9682 0.0328\nvt 0.9629 0.0347\nvt 0.9143 0.1974\nvt 0.9116 0.1974\nvt 0.9677 0.6163\nvt 0.9625 0.6181\nvt 0.9198 0.2043\nvt 0.9171 0.2043\nvt 0.9585 0.8371\nvt 0.9533 0.8389\nvt 0.9280 0.2112\nvt 0.9253 0.2112\nvt 0.5863 0.8744\nvt 0.5811 0.8762\nvt 0.9335 0.2182\nvt 0.9307 0.2182\nvt 0.4550 0.8782\nvt 0.4497 0.8800\nvt 0.9781 0.9043\nvt 0.9753 0.9043\nvt 0.3131 0.8820\nvt 0.3078 0.8838\nvt 0.9835 0.6715\nvt 0.9863 0.6715\nvt 0.1601 0.8857\nvt 0.1549 0.8876\nvt 0.9808 0.6732\nvt 0.9835 0.6732\nvt 0.7268 0.8007\nvt 0.7286 0.8060\nvt 0.9781 0.8827\nvt 0.9808 0.8827\nvt 0.7550 0.0044\nvt 0.7578 0.0128\nvt 0.2241 0.6999\nvt 0.2268 0.6999\nvt 0.7475 0.3114\nvt 0.7493 0.3167\nvt 0.2159 0.7016\nvt 0.2186 0.7016\nvt 0.7401 0.5847\nvt 0.7419 0.5900\nvt 0.9781 0.7142\nvt 0.9753 0.7142\nvt 0.0755 0.6074\nvt 0.0773 0.6126\nvt 0.9644 0.8626\nvt 0.9616 0.8626\nvt 0.3113 0.5965\nvt 0.3131 0.6018\nvt 0.9644 0.8258\nvt 0.9671 0.8258\nvt 0.5415 0.5856\nvt 0.5433 0.5909\nvt 0.9671 0.8275\nvt 0.9698 0.8275\nvt 0.5620 0.0062\nvt 0.5638 0.0116\nvt 0.9753 0.7419\nvt 0.9726 0.7419\nvt 0.5489 0.3132\nvt 0.5507 0.3185\nvt 0.9755 0.1691\nvt 0.9727 0.1691\nvt 0.3262 0.3135\nvt 0.3280 0.3188\nvt 0.9726 0.7557\nvt 0.9698 0.7557\nvt 0.0979 0.3138\nvt 0.0997 0.3191\nvt 0.9727 0.1830\nvt 0.9700 0.1830\nvt 0.3392 0.0075\nvt 0.3410 0.0128\nvt 1.0000 0.3693\nvt 0.9335 0.3693\nvt 0.1412 0.1966\nvt 0.1223 0.3046\nvt 0.4535 0.6493\nvt 0.4362 0.6493\nvt 0.9695 0.0381\nvt 0.9640 0.0391\nvt 0.9143 0.2024\nvt 0.9116 0.2024\nvt 0.9693 0.6223\nvt 0.9638 0.6233\nvt 0.9198 0.2102\nvt 0.9171 0.2102\nvt 0.9603 0.8440\nvt 0.9549 0.8450\nvt 0.9280 0.2179\nvt 0.9253 0.2179\nvt 0.5883 0.8822\nvt 0.5829 0.8831\nvt 0.9335 0.2256\nvt 0.9307 0.2256\nvt 0.4572 0.8868\nvt 0.4517 0.8878\nvt 0.9781 0.9126\nvt 0.9753 0.9126\nvt 0.3155 0.8914\nvt 0.3101 0.8924\nvt 0.9835 0.6624\nvt 0.9863 0.6624\nvt 0.1628 0.8960\nvt 0.1573 0.8970\nvt 0.9808 0.6633\nvt 0.9835 0.6633\nvt 0.7378 0.7978\nvt 0.7387 0.8033\nvt 0.9781 0.8720\nvt 0.9808 0.8720\nvt 0.7673 0.0012\nvt 0.7688 0.0099\nvt 0.2241 0.6879\nvt 0.2268 0.6879\nvt 0.7607 0.3079\nvt 0.7617 0.3134\nvt 0.2159 0.6888\nvt 0.2186 0.6888\nvt 0.7541 0.5810\nvt 0.7551 0.5865\nvt 0.9781 0.7278\nvt 0.9753 0.7278\nvt 0.0904 0.6034\nvt 0.0913 0.6090\nvt 0.9644 0.8770\nvt 0.9616 0.8770\nvt 0.3270 0.5923\nvt 0.3279 0.5978\nvt 0.9644 0.8106\nvt 0.9671 0.8106\nvt 0.5580 0.5812\nvt 0.5589 0.5867\nvt 0.9671 0.8115\nvt 0.9698 0.8115\nvt 0.5793 0.0017\nvt 0.5803 0.0072\nvt 0.9753 0.7587\nvt 0.9726 0.7587\nvt 0.5671 0.3084\nvt 0.5681 0.3139\nvt 0.9755 0.1868\nvt 0.9727 0.1868\nvt 0.3452 0.3085\nvt 0.3462 0.3140\nvt 0.9726 0.7741\nvt 0.9698 0.7741\nvt 0.1177 0.3086\nvt 0.1187 0.3141\nvt 0.9727 0.2022\nvt 0.9700 0.2022\nvt 0.3599 0.0020\nvt 0.3609 0.0075\nvt 1.0000 0.3891\nvt 0.9335 0.3891\nvt 0.1455 0.1970\nvt 0.1408 0.3066\nvt 0.4535 0.6530\nvt 0.4362 0.6530\nvt 0.9700 0.0431\nvt 0.9644 0.0434\nvt 0.9143 0.2068\nvt 0.9116 0.2068\nvt 0.9698 0.6281\nvt 0.9643 0.6284\nvt 0.9198 0.2151\nvt 0.9171 0.2151\nvt 0.9609 0.8505\nvt 0.9554 0.8508\nvt 0.9280 0.2235\nvt 0.9253 0.2235\nvt 0.5890 0.8894\nvt 0.5835 0.8897\nvt 0.9335 0.2319\nvt 0.9307 0.2319\nvt 0.4580 0.8948\nvt 0.4525 0.8950\nvt 0.9781 0.9195\nvt 0.9753 0.9195\nvt 0.3164 0.9002\nvt 0.3109 0.9004\nvt 0.9835 0.6549\nvt 0.9863 0.6549\nvt 0.1637 0.9055\nvt 0.1582 0.9057\nvt 0.9808 0.6551\nvt 0.9835 0.6551\nvt 0.7478 0.7967\nvt 0.7481 0.8023\nvt 0.9781 0.8632\nvt 0.9808 0.8632\nvt 0.7785 0.0000\nvt 0.7789 0.0088\nvt 0.2241 0.6781\nvt 0.2268 0.6781\nvt 0.7726 0.3066\nvt 0.7729 0.3123\nvt 0.2159 0.6783\nvt 0.2186 0.6783\nvt 0.7668 0.5797\nvt 0.7670 0.5852\nvt 0.9781 0.7389\nvt 0.9753 0.7389\nvt 0.1038 0.6020\nvt 0.1040 0.6076\nvt 0.9644 0.8888\nvt 0.9616 0.8888\nvt 0.3411 0.5908\nvt 0.3413 0.5964\nvt 0.9644 0.7982\nvt 0.9671 0.7982\nvt 0.5728 0.5797\nvt 0.5731 0.5852\nvt 0.9671 0.7984\nvt 0.9698 0.7984\nvt 0.5949 0.0000\nvt 0.5951 0.0056\nvt 0.9753 0.7724\nvt 0.9726 0.7724\nvt 0.5834 0.3066\nvt 0.5837 0.3122\nvt 0.9755 0.2011\nvt 0.9727 0.2011\nvt 0.3622 0.3066\nvt 0.3625 0.3122\nvt 0.9726 0.7891\nvt 0.9698 0.7891\nvt 0.1355 0.3066\nvt 0.1357 0.3122\nvt 0.9727 0.2178\nvt 0.9700 0.2178\nvt 0.3784 0.0000\nvt 0.3787 0.0056\nvt 1.0000 0.4072\nvt 0.9335 0.4072\nvt 0.1596 0.1970\nvt 0.1603 0.3066\nvt 0.4535 0.6645\nvt 0.4362 0.6645\nvt 0.9699 0.0577\nvt 0.9643 0.0577\nvt 0.9143 0.2184\nvt 0.9116 0.2184\nvt 0.9698 0.6430\nvt 0.9642 0.6430\nvt 0.9198 0.2270\nvt 0.9171 0.2270\nvt 0.9608 0.8657\nvt 0.9553 0.8656\nvt 0.9280 0.2356\nvt 0.9253 0.2356\nvt 0.5890 0.9048\nvt 0.5835 0.9048\nvt 0.9335 0.2442\nvt 0.9307 0.2442\nvt 0.4579 0.9105\nvt 0.4524 0.9105\nvt 0.9781 0.9321\nvt 0.9753 0.9321\nvt 0.3163 0.9161\nvt 0.3108 0.9161\nvt 0.9835 0.6421\nvt 0.9863 0.6421\nvt 0.1636 0.9218\nvt 0.1581 0.9217\nvt 0.9808 0.6421\nvt 0.9835 0.6421\nvt 0.7642 0.7968\nvt 0.7641 0.8024\nvt 0.9781 0.8499\nvt 0.9808 0.8499\nvt 0.7953 0.0000\nvt 0.7952 0.0089\nvt 0.2241 0.6645\nvt 0.2268 0.6645\nvt 0.7897 0.3067\nvt 0.7897 0.3123\nvt 0.2159 0.6645\nvt 0.2186 0.6645\nvt 0.7841 0.5797\nvt 0.7841 0.5853\nvt 0.9781 0.7529\nvt 0.9753 0.7529\nvt 0.1214 0.6021\nvt 0.1213 0.6076\nvt 0.9644 0.9031\nvt 0.9616 0.9031\nvt 0.3590 0.5909\nvt 0.3589 0.5965\nvt 0.9644 0.7837\nvt 0.9671 0.7837\nvt 0.5910 0.5797\nvt 0.5910 0.5853\nvt 0.9671 0.7837\nvt 0.9698 0.7837\nvt 0.6133 0.0000\nvt 0.6133 0.0056\nvt 0.9753 0.7873\nvt 0.9726 0.7873\nvt 0.6021 0.3066\nvt 0.6021 0.3122\nvt 0.9755 0.2163\nvt 0.9727 0.2163\nvt 0.3812 0.3066\nvt 0.3812 0.3122\nvt 0.9726 0.8045\nvt 0.9698 0.8045\nvt 0.1547 0.3066\nvt 0.1547 0.3122\nvt 0.9727 0.2334\nvt 0.9700 0.2334\nvt 0.3979 0.0000\nvt 0.3979 0.0056\nvt 1.0000 0.4267\nvt 0.9335 0.4267\nvt 0.1912 0.1967\nvt 0.1920 0.3064\nvt 0.4535 0.6900\nvt 0.4362 0.6900\nvt 0.9696 0.0898\nvt 0.9641 0.0897\nvt 0.9143 0.2440\nvt 0.9116 0.2440\nvt 0.9695 0.6750\nvt 0.9640 0.6750\nvt 0.9198 0.2526\nvt 0.9171 0.2526\nvt 0.9606 0.8977\nvt 0.9551 0.8977\nvt 0.9280 0.2612\nvt 0.9253 0.2612\nvt 0.5887 0.9369\nvt 0.5832 0.9369\nvt 0.9335 0.2698\nvt 0.9307 0.2698\nvt 0.4577 0.9426\nvt 0.4521 0.9425\nvt 0.9781 0.9577\nvt 0.9753 0.9577\nvt 0.3161 0.9482\nvt 0.3105 0.9482\nvt 0.9835 0.6165\nvt 0.9863 0.6165\nvt 0.1634 0.9538\nvt 0.1579 0.9538\nvt 0.9808 0.6165\nvt 0.9835 0.6165\nvt 0.7958 0.7970\nvt 0.7958 0.8026\nvt 0.9781 0.8243\nvt 0.9808 0.8243\nvt 0.8270 0.0003\nvt 0.8269 0.0091\nvt 0.2241 0.6389\nvt 0.2268 0.6389\nvt 0.8214 0.3069\nvt 0.8213 0.3125\nvt 0.2159 0.6389\nvt 0.2186 0.6389\nvt 0.8158 0.5799\nvt 0.8157 0.5855\nvt 0.9781 0.7785\nvt 0.9753 0.7785\nvt 0.1531 0.6023\nvt 0.1530 0.6079\nvt 0.9644 0.9287\nvt 0.9616 0.9287\nvt 0.3907 0.5911\nvt 0.3906 0.5967\nvt 0.9644 0.7580\nvt 0.9671 0.7580\nvt 0.6227 0.5799\nvt 0.6227 0.5855\nvt 0.9671 0.7581\nvt 0.9698 0.7581\nvt 0.6450 0.0002\nvt 0.6450 0.0059\nvt 0.9753 0.8130\nvt 0.9726 0.8130\nvt 0.6338 0.3069\nvt 0.6338 0.3125\nvt 0.9755 0.2419\nvt 0.9727 0.2419\nvt 0.4129 0.3069\nvt 0.4129 0.3125\nvt 0.9726 0.8302\nvt 0.9698 0.8302\nvt 0.1864 0.3069\nvt 0.1864 0.3125\nvt 0.9727 0.2591\nvt 0.9700 0.2591\nvt 0.4297 0.0002\nvt 0.4296 0.0059\nvt 1.0000 0.4585\nvt 0.9335 0.4585\nvt 0.2368 0.1964\nvt 0.2376 0.3061\nvt 0.4535 0.7269\nvt 0.4362 0.7269\nvt 0.9693 0.1359\nvt 0.9637 0.1359\nvt 0.9143 0.2809\nvt 0.9116 0.2809\nvt 0.9691 0.7212\nvt 0.9636 0.7212\nvt 0.9198 0.2894\nvt 0.9171 0.2894\nvt 0.9602 0.9439\nvt 0.9547 0.9439\nvt 0.9280 0.2980\nvt 0.9253 0.2980\nvt 0.5884 0.9831\nvt 0.5829 0.9830\nvt 0.9335 0.3066\nvt 0.9307 0.3066\nvt 0.4573 0.9887\nvt 0.4518 0.9887\nvt 0.9781 0.9945\nvt 0.9753 0.9945\nvt 0.3157 0.9944\nvt 0.3102 0.9943\nvt 0.9835 0.5797\nvt 0.9863 0.5797\nvt 0.1631 1.0000\nvt 0.1575 1.0000\nvt 0.9808 0.5797\nvt 0.9835 0.5797\nvt 0.8414 0.7974\nvt 0.8414 0.8030\nvt 0.9781 0.7875\nvt 0.9808 0.7875\nvt 0.8726 0.0006\nvt 0.8725 0.0095\nvt 0.2241 0.6020\nvt 0.2268 0.6020\nvt 0.8670 0.3073\nvt 0.8669 0.3129\nvt 0.2159 0.6020\nvt 0.2186 0.6020\nvt 0.8614 0.5803\nvt 0.8613 0.5859\nvt 0.9781 0.8154\nvt 0.9753 0.8154\nvt 0.1986 0.6026\nvt 0.1986 0.6082\nvt 0.9644 0.9655\nvt 0.9616 0.9655\nvt 0.4362 0.5915\nvt 0.4362 0.5970\nvt 0.9644 0.7212\nvt 0.9671 0.7212\nvt 0.6683 0.5803\nvt 0.6682 0.5859\nvt 0.9671 0.7212\nvt 0.9698 0.7212\nvt 0.6906 0.0006\nvt 0.6906 0.0062\nvt 0.9753 0.8498\nvt 0.9726 0.8498\nvt 0.6794 0.3072\nvt 0.6794 0.3128\nvt 0.9755 0.2788\nvt 0.9727 0.2788\nvt 0.4585 0.3072\nvt 0.4585 0.3128\nvt 0.9726 0.8670\nvt 0.9698 0.8670\nvt 0.2320 0.3072\nvt 0.2320 0.3128\nvt 0.9727 0.2960\nvt 0.9700 0.2960\nvt 0.4753 0.0006\nvt 0.4752 0.0062\nvt 1.0000 0.5041\nvt 0.9335 0.5041\nvn -1.0000 0.0000 0.0074\nvn -1.0000 -0.0001 0.0074\nvn -1.0000 0.0000 -0.0074\nvn 0.0000 -1.0000 -0.0000\nvn 0.0074 0.0000 -1.0000\nvn -0.0000 1.0000 0.0000\nvn -0.0074 -0.0000 1.0000\nvn 0.0070 0.0000 -1.0000\nvn -0.0070 -0.0000 1.0000\nvn 0.0057 0.0000 -1.0000\nvn 0.0052 -0.0000 -1.0000\nvn 0.0048 0.0000 -1.0000\nvn 0.0044 0.0000 -1.0000\nvn 0.0040 0.0000 -1.0000\nvn 0.0036 0.0000 -1.0000\nvn 0.0032 0.0000 -1.0000\nvn 0.0028 0.0000 -1.0000\nvn 0.0025 -0.0000 -1.0000\nvn 0.0019 0.0000 -1.0000\nvn 0.0016 0.0000 -1.0000\nvn 0.0013 0.0000 -1.0000\nvn 0.0010 0.0000 -1.0000\nvn 0.0007 0.0000 -1.0000\nvn 0.0004 -0.0000 -1.0000\nvn 0.0001 0.0000 -1.0000\nvn -0.0001 0.0000 -1.0000\nvn -0.0004 0.0000 -1.0000\nvn -0.0006 0.0000 -1.0000\nvn 0.0009 -0.0000 1.0000\nvn -0.0915 0.0000 -0.9958\nvn -0.0940 0.0000 -0.9956\nvn -0.0958 0.0000 -0.9954\nvn -0.0973 0.0000 -0.9953\nvn -0.0984 0.0000 -0.9951\nvn -0.0994 0.0000 -0.9951\nvn -0.1002 0.0000 -0.9950\nvn -0.1008 0.0000 -0.9949\nvn -0.1014 0.0000 -0.9948\nvn -0.1021 0.0000 -0.9948\nvn -0.1025 0.0000 -0.9947\nvn -0.1029 -0.0000 -0.9947\nvn -0.1032 0.0000 -0.9947\nvn -0.1035 0.0000 -0.9946\nvn -0.1037 -0.0000 -0.9946\nvn -0.1039 0.0000 -0.9946\nvn -0.1042 -0.0000 -0.9946\nvn -0.1043 0.0000 -0.9945\nvn -0.1045 0.0000 -0.9945\nvn 0.1047 -0.0000 0.9945\nvn -0.2551 0.0000 -0.9669\nvn -0.2543 0.0000 -0.9671\nvn -0.2537 0.0000 -0.9673\nvn -0.2532 0.0000 -0.9674\nvn -0.2529 0.0000 -0.9675\nvn -0.2526 0.0000 -0.9676\nvn -0.2524 0.0000 -0.9676\nvn -0.2522 0.0000 -0.9677\nvn -0.2521 0.0000 -0.9677\nvn -0.2518 0.0000 -0.9678\nvn -0.2517 0.0000 -0.9678\nvn -0.2516 0.0000 -0.9678\nvn -0.2515 0.0000 -0.9678\nvn -0.2515 0.0000 -0.9679\nvn -0.2514 0.0000 -0.9679\nvn -0.2513 -0.0000 -0.9679\nvn -0.2512 0.0000 -0.9679\nvn 0.2511 -0.0000 0.9680\nvn -0.3927 0.0000 -0.9197\nvn -0.3922 0.0000 -0.9199\nvn -0.3918 0.0000 -0.9200\nvn -0.3915 0.0000 -0.9202\nvn -0.3913 0.0000 -0.9203\nvn -0.3911 0.0000 -0.9203\nvn -0.3909 0.0000 -0.9204\nvn -0.3908 0.0000 -0.9205\nvn -0.3907 0.0000 -0.9205\nvn -0.3905 0.0000 -0.9206\nvn -0.3904 0.0000 -0.9206\nvn -0.3904 0.0000 -0.9207\nvn -0.3903 0.0000 -0.9207\nvn -0.3902 0.0000 -0.9207\nvn -0.3901 0.0000 -0.9208\nvn -0.3900 0.0000 -0.9208\nvn 0.3900 -0.0000 0.9208\nvn -0.5087 0.0000 -0.8609\nvn -0.5084 0.0000 -0.8611\nvn -0.5082 0.0000 -0.8612\nvn -0.5080 0.0000 -0.8613\nvn -0.5079 0.0000 -0.8614\nvn -0.5078 0.0000 -0.8615\nvn -0.5077 -0.0000 -0.8615\nvn -0.5076 0.0000 -0.8616\nvn -0.5075 0.0000 -0.8616\nvn -0.5074 -0.0000 -0.8617\nvn -0.5073 0.0000 -0.8618\nvn -0.5072 0.0000 -0.8618\nvn -0.5072 0.0000 -0.8619\nvn -0.5071 0.0000 -0.8619\nvn 0.5071 -0.0000 0.8619\nvn -0.6078 0.0000 -0.7941\nvn -0.6077 0.0000 -0.7942\nvn -0.6076 0.0000 -0.7942\nvn -0.6075 0.0000 -0.7943\nvn -0.6074 0.0000 -0.7944\nvn -0.6073 -0.0000 -0.7944\nvn -0.6073 0.0000 -0.7945\nvn -0.6072 0.0000 -0.7945\nvn -0.6072 0.0000 -0.7946\nvn -0.6071 0.0000 -0.7946\nvn -0.6071 0.0000 -0.7947\nvn -0.6070 0.0000 -0.7947\nvn 0.6070 0.0000 0.7947\nvn -0.6940 0.0000 -0.7200\nvn -0.6939 0.0000 -0.7201\nvn -0.6938 0.0000 -0.7201\nvn -0.6938 0.0000 -0.7202\nvn -0.6937 -0.0000 -0.7202\nvn 0.6937 -0.0000 0.7202\nvn -0.7698 0.0000 -0.6383\nvn -0.7698 0.0000 -0.6382\nvn -0.7699 0.0000 -0.6382\nvn -0.7699 0.0000 -0.6381\nvn -0.7700 -0.0000 -0.6381\nvn 0.7700 0.0000 0.6381\nvn -0.8367 0.0000 -0.5476\nvn -0.8368 0.0000 -0.5475\nvn -0.8369 -0.0000 -0.5474\nvn -0.8369 0.0000 -0.5473\nvn -0.8370 -0.0000 -0.5473\nvn -0.8370 -0.0000 -0.5472\nvn -0.8370 0.0000 -0.5471\nvn -0.8371 0.0000 -0.5471\nvn 0.8371 0.0000 0.5470\nvn -0.8948 0.0000 -0.4465\nvn -0.8949 0.0000 -0.4464\nvn -0.8949 0.0000 -0.4463\nvn -0.8950 0.0000 -0.4462\nvn -0.8950 -0.0000 -0.4461\nvn -0.8950 -0.0000 -0.4460\nvn -0.8951 0.0000 -0.4459\nvn -0.8951 -0.0000 -0.4458\nvn -0.8952 0.0000 -0.4457\nvn -0.8952 0.0000 -0.4456\nvn -0.8953 0.0000 -0.4456\nvn 0.8953 -0.0000 0.4455\nvn -0.9427 0.0000 -0.3336\nvn -0.9428 0.0000 -0.3334\nvn -0.9429 0.0000 -0.3332\nvn -0.9429 0.0000 -0.3331\nvn -0.9429 0.0000 -0.3330\nvn -0.9430 0.0000 -0.3329\nvn -0.9430 0.0000 -0.3328\nvn -0.9430 0.0000 -0.3327\nvn -0.9431 0.0000 -0.3326\nvn -0.9431 0.0000 -0.3325\nvn -0.9431 0.0000 -0.3324\nvn -0.9432 0.0000 -0.3324\nvn -0.9432 0.0000 -0.3323\nvn 0.9432 0.0000 0.3323\nvn -0.9781 0.0000 -0.2081\nvn -0.9781 0.0000 -0.2079\nvn -0.9782 0.0000 -0.2077\nvn -0.9782 0.0000 -0.2076\nvn -0.9782 0.0000 -0.2075\nvn -0.9783 0.0000 -0.2074\nvn -0.9783 0.0000 -0.2073\nvn -0.9783 0.0000 -0.2072\nvn -0.9783 0.0000 -0.2071\nvn -0.9783 0.0000 -0.2070\nvn -0.9784 0.0000 -0.2069\nvn -0.9784 0.0000 -0.2068\nvn 0.9784 0.0000 0.2067\nvn -0.9975 0.0000 -0.0713\nvn -0.9973 0.0000 -0.0728\nvn -0.9973 0.0000 -0.0741\nvn -0.9972 0.0000 -0.0751\nvn -0.9971 0.0000 -0.0761\nvn -0.9970 0.0000 -0.0769\nvn -0.9970 0.0000 -0.0776\nvn -0.9969 0.0000 -0.0782\nvn -0.9969 0.0000 -0.0787\nvn -0.9968 0.0000 -0.0795\nvn -0.9968 0.0000 -0.0799\nvn -0.9968 0.0000 -0.0803\nvn -0.9967 -0.0000 -0.0806\nvn -0.9967 0.0000 -0.0809\nvn -0.9967 0.0000 -0.0812\nvn -0.9967 0.0000 -0.0815\nvn -0.9967 0.0000 -0.0817\nvn -0.9966 0.0000 -0.0819\nvn -0.9966 0.0000 -0.0822\nvn 0.9966 0.0000 0.0824\nvn -1.0000 0.0000 0.0000\nvn -1.0000 0.0000 0.0001\nvn 1.0000 0.0000 -0.0001\nvn -0.9974 0.0000 0.0719\nvn -0.9973 0.0000 0.0734\nvn -0.9972 -0.0000 0.0747\nvn -0.9971 0.0000 0.0758\nvn -0.9971 0.0000 0.0767\nvn -0.9970 0.0000 0.0775\nvn -0.9969 0.0000 0.0782\nvn -0.9969 0.0000 0.0789\nvn -0.9968 0.0000 0.0794\nvn -0.9968 0.0000 0.0802\nvn -0.9967 0.0000 0.0806\nvn -0.9967 -0.0000 0.0810\nvn -0.9967 0.0000 0.0813\nvn -0.9967 0.0000 0.0816\nvn -0.9966 0.0000 0.0819\nvn -0.9966 0.0000 0.0822\nvn -0.9966 0.0000 0.0824\nvn -0.9966 -0.0000 0.0827\nvn -0.9966 0.0000 0.0829\nvn 0.9965 0.0000 -0.0831\nvn -0.9778 0.0000 0.2097\nvn -0.9778 0.0000 0.2095\nvn -0.9779 0.0000 0.2093\nvn -0.9779 0.0000 0.2092\nvn -0.9779 0.0000 0.2090\nvn -0.9779 0.0000 0.2089\nvn -0.9780 0.0000 0.2088\nvn -0.9780 0.0000 0.2087\nvn -0.9780 0.0000 0.2086\nvn -0.9780 0.0000 0.2085\nvn -0.9780 0.0000 0.2084\nvn -0.9781 0.0000 0.2084\nvn -0.9781 0.0000 0.2083\nvn 0.9781 0.0000 -0.2083\nvn -0.9420 0.0000 0.3357\nvn -0.9421 0.0000 0.3355\nvn -0.9421 -0.0000 0.3353\nvn -0.9422 0.0000 0.3352\nvn -0.9422 0.0000 0.3350\nvn -0.9422 0.0000 0.3349\nvn -0.9423 0.0000 0.3349\nvn -0.9423 0.0000 0.3348\nvn -0.9423 0.0000 0.3347\nvn -0.9423 0.0000 0.3346\nvn -0.9424 -0.0000 0.3346\nvn -0.9424 0.0000 0.3345\nvn -0.9424 0.0000 0.3344\nvn -0.9424 0.0000 0.3343\nvn 0.9425 0.0000 -0.3343\nvn -0.8937 0.0000 0.4487\nvn -0.8937 0.0000 0.4486\nvn -0.8938 -0.0000 0.4484\nvn -0.8939 0.0000 0.4483\nvn -0.8939 0.0000 0.4482\nvn -0.8940 0.0000 0.4481\nvn -0.8940 0.0000 0.4480\nvn -0.8941 0.0000 0.4479\nvn -0.8941 -0.0000 0.4478\nvn -0.8942 0.0000 0.4478\nvn -0.8942 0.0000 0.4477\nvn 0.8942 0.0000 -0.4477\nvn -0.8354 0.0000 0.5496\nvn -0.8355 0.0000 0.5495\nvn -0.8356 -0.0000 0.5494\nvn -0.8356 0.0000 0.5493\nvn -0.8357 -0.0000 0.5492\nvn -0.8357 0.0000 0.5491\nvn -0.8358 0.0000 0.5491\nvn -0.8358 0.0000 0.5490\nvn 0.8359 0.0000 -0.5490\nvn -0.7686 -0.0000 0.6397\nvn -0.7687 0.0000 0.6396\nvn -0.7688 -0.0000 0.6395\nvn 0.7688 0.0000 -0.6395\nvn -0.6931 -0.0000 0.7208\nvn -0.6931 0.0000 0.7209\nvn -0.6930 0.0000 0.7209\nvn -0.6930 0.0000 0.7210\nvn -0.6929 0.0000 0.7210\nvn -0.6929 0.0000 0.7211\nvn 0.6928 0.0000 -0.7211\nvn -0.6075 0.0000 0.7943\nvn -0.6074 0.0000 0.7944\nvn -0.6073 0.0000 0.7945\nvn -0.6072 0.0000 0.7946\nvn -0.6071 0.0000 0.7946\nvn -0.6070 0.0000 0.7947\nvn -0.6069 0.0000 0.7948\nvn -0.6068 0.0000 0.7948\nvn -0.6068 0.0000 0.7949\nvn -0.6067 -0.0000 0.7949\nvn 0.6067 0.0000 -0.7950\nvn -0.5091 -0.0000 0.8607\nvn -0.5088 0.0000 0.8609\nvn -0.5086 0.0000 0.8610\nvn -0.5084 -0.0000 0.8611\nvn -0.5083 0.0000 0.8612\nvn -0.5081 0.0000 0.8613\nvn -0.5080 0.0000 0.8613\nvn -0.5080 0.0000 0.8614\nvn -0.5079 -0.0000 0.8614\nvn -0.5078 -0.0000 0.8615\nvn -0.5077 0.0000 0.8615\nvn -0.5077 0.0000 0.8616\nvn -0.5076 0.0000 0.8616\nvn -0.5075 0.0000 0.8616\nvn -0.5075 0.0000 0.8617\nvn -0.5074 0.0000 0.8617\nvn 0.5074 0.0000 -0.8617\nvn -0.3938 0.0000 0.9192\nvn -0.3933 0.0000 0.9194\nvn -0.3929 0.0000 0.9196\nvn -0.3926 0.0000 0.9197\nvn -0.3923 0.0000 0.9198\nvn -0.3921 0.0000 0.9199\nvn -0.3920 0.0000 0.9200\nvn -0.3918 0.0000 0.9200\nvn -0.3917 0.0000 0.9201\nvn -0.3915 0.0000 0.9202\nvn -0.3914 0.0000 0.9202\nvn -0.3913 0.0000 0.9203\nvn -0.3912 0.0000 0.9203\nvn -0.3911 0.0000 0.9203\nvn -0.3911 0.0000 0.9204\nvn -0.3910 0.0000 0.9204\nvn 0.3910 0.0000 -0.9204\nvn -0.2565 0.0000 0.9665\nvn -0.2556 0.0000 0.9668\nvn -0.2550 0.0000 0.9669\nvn -0.2546 0.0000 0.9671\nvn -0.2542 0.0000 0.9671\nvn -0.2539 0.0000 0.9672\nvn -0.2537 0.0000 0.9673\nvn -0.2535 0.0000 0.9673\nvn -0.2533 0.0000 0.9674\nvn -0.2531 0.0000 0.9674\nvn -0.2530 -0.0000 0.9675\nvn -0.2529 0.0000 0.9675\nvn -0.2528 0.0000 0.9675\nvn -0.2527 0.0000 0.9675\nvn -0.2526 -0.0000 0.9676\nvn -0.2525 0.0000 0.9676\nvn -0.2524 -0.0000 0.9676\nvn 0.2524 0.0000 -0.9676\nvn -0.0923 -0.0000 0.9957\nvn -0.0949 0.0000 0.9955\nvn -0.0967 0.0000 0.9953\nvn -0.0982 -0.0000 0.9952\nvn -0.0993 -0.0000 0.9951\nvn -0.1002 -0.0000 0.9950\nvn -0.1010 0.0000 0.9949\nvn -0.1017 0.0000 0.9948\nvn -0.1022 0.0000 0.9948\nvn -0.1030 0.0000 0.9947\nvn -0.1034 0.0000 0.9946\nvn -0.1037 -0.0000 0.9946\nvn -0.1040 -0.0000 0.9946\nvn -0.1043 -0.0000 0.9945\nvn -0.1046 -0.0000 0.9945\nvn -0.1048 0.0000 0.9945\nvn -0.1050 0.0000 0.9945\nvn -0.1052 -0.0000 0.9945\nvn -0.1054 -0.0000 0.9944\nvn 0.1055 0.0000 -0.9944\nvn 0.0057 -0.0000 1.0000\nvn 0.0052 -0.0000 1.0000\nvn 0.0048 0.0000 1.0000\nvn 0.0044 -0.0000 1.0000\nvn 0.0040 -0.0000 1.0000\nvn 0.0036 -0.0000 1.0000\nvn 0.0032 0.0000 1.0000\nvn 0.0028 -0.0000 1.0000\nvn 0.0024 -0.0000 1.0000\nvn 0.0019 0.0000 1.0000\nvn 0.0016 0.0000 1.0000\nvn 0.0012 0.0000 1.0000\nvn 0.0006 -0.0000 1.0000\nvn 0.0003 0.0000 1.0000\nvn 0.0001 -0.0000 1.0000\nvn -0.0002 -0.0000 1.0000\nvn -0.0005 -0.0000 1.0000\nvn -0.0007 0.0000 1.0000\nvn 0.0070 -0.0000 1.0000\nvn -0.0070 0.0000 -1.0000\nvn 0.0074 -0.0000 1.0000\nvn -0.0074 0.0000 -1.0000\nusemtl Material.006\ns off\nf 748/122/841 749/123/841 750/124/841\nf 748/122/841 751/125/841 749/123/841\nf 748/122/841 752/126/841 751/125/841\nf 748/122/841 753/127/841 752/126/841\nf 748/122/841 754/128/841 753/127/841\nf 748/122/841 755/129/841 754/128/841\nf 748/122/841 756/130/841 755/129/841\nf 748/122/841 757/131/841 756/130/841\nf 748/122/841 758/132/841 757/131/841\nf 748/122/841 759/133/841 758/132/841\nf 748/122/841 760/134/841 759/133/841\nf 748/122/841 761/135/841 760/134/841\nf 748/122/841 762/136/841 761/135/841\nf 748/122/841 763/137/841 762/136/841\nf 748/122/841 764/138/841 763/137/841\nf 748/122/841 765/139/841 764/138/841\nf 748/122/841 766/140/841 765/139/841\nf 748/122/841 767/141/841 766/140/841\nf 748/122/841 768/142/841 767/141/841\nf 748/122/841 769/143/841 768/142/841\nf 748/122/841 770/144/841 769/143/841\nf 748/122/841 771/145/841 770/144/841\nf 748/122/841 772/146/841 771/145/841\nf 748/122/841 773/147/841 772/146/841\nf 748/122/841 774/148/841 773/147/841\nf 748/122/841 775/149/841 774/148/841\nf 748/122/841 776/150/841 775/149/841\nf 748/122/841 777/151/841 776/150/841\nf 748/122/841 778/152/841 777/151/841\nf 748/122/841 779/153/841 778/152/841\nf 748/122/841 780/154/841 779/153/841\nf 748/122/841 781/155/841 780/154/841\nf 748/122/841 782/156/841 781/155/841\nf 748/122/841 783/157/841 782/156/841\nf 748/122/842 784/158/842 783/157/842\nf 748/122/841 785/159/841 784/158/841\nf 748/122/841 786/160/841 785/159/841\nf 748/122/841 787/161/841 786/160/841\nf 788/162/843 789/163/843 790/164/843\nf 788/162/843 791/165/843 789/163/843\nf 792/166/843 788/162/843 793/167/843\nf 792/166/843 791/165/843 788/162/843\nf 794/168/843 792/166/843 795/169/843\nf 794/168/843 791/165/843 792/166/843\nf 796/170/843 794/168/843 797/171/843\nf 796/170/843 791/165/843 794/168/843\nf 798/172/843 796/170/843 799/173/843\nf 798/172/843 791/165/843 796/170/843\nf 800/174/843 798/172/843 801/175/843\nf 800/174/843 791/165/843 798/172/843\nf 802/176/843 800/174/843 803/177/843\nf 802/176/843 791/165/843 800/174/843\nf 804/178/843 802/176/843 805/179/843\nf 804/178/843 791/165/843 802/176/843\nf 806/180/843 804/178/843 807/181/843\nf 806/180/843 791/165/843 804/178/843\nf 808/182/843 806/180/843 809/183/843\nf 808/182/843 791/165/843 806/180/843\nf 810/184/843 808/182/843 811/185/843\nf 810/184/843 791/165/843 808/182/843\nf 812/186/843 810/184/843 813/187/843\nf 812/186/843 791/165/843 810/184/843\nf 814/188/843 812/186/843 815/189/843\nf 814/188/843 791/165/843 812/186/843\nf 816/190/843 814/188/843 817/191/843\nf 816/190/843 791/165/843 814/188/843\nf 818/192/843 816/190/843 819/193/843\nf 818/192/843 791/165/843 816/190/843\nf 820/194/843 818/192/843 821/195/843\nf 820/194/843 791/165/843 818/192/843\nf 822/196/843 820/194/843 823/197/843\nf 822/196/843 791/165/843 820/194/843\nf 824/198/843 822/196/843 825/199/843\nf 824/198/843 791/165/843 822/196/843\nf 826/200/843 824/198/843 827/201/843\nf 826/200/843 791/165/843 824/198/843\nf 828/202/844 829/203/844 830/204/844 831/205/844\nf 832/206/845 833/207/845 829/208/845 828/209/845\nf 834/210/846 835/211/846 833/212/846 832/213/846\nf 836/214/845 837/215/845 835/216/845 834/217/845\nf 838/218/846 839/219/846 837/220/846 836/221/846\nf 840/222/845 841/223/845 839/224/845 838/225/845\nf 842/226/846 843/227/846 841/228/846 840/229/846\nf 844/230/845 845/231/845 843/232/845 842/233/845\nf 846/234/846 847/235/846 845/236/846 844/237/846\nf 848/238/845 849/239/845 847/240/845 846/241/845\nf 850/242/846 851/243/846 849/244/846 848/245/846\nf 852/246/845 853/247/845 851/248/845 850/249/845\nf 854/250/846 855/251/846 853/252/846 852/253/846\nf 856/254/845 857/255/845 855/256/845 854/257/845\nf 858/258/846 859/259/846 857/260/846 856/261/846\nf 860/262/845 861/263/845 859/264/845 858/265/845\nf 862/266/846 863/267/846 861/268/846 860/269/846\nf 864/270/845 865/271/845 863/272/845 862/273/845\nf 866/274/846 867/275/846 865/276/846 864/277/846\nf 868/278/845 869/279/845 867/280/845 866/281/845\nf 870/282/846 871/283/846 869/284/846 868/285/846\nf 872/286/845 873/287/845 871/288/845 870/289/845\nf 874/290/846 875/291/846 873/292/846 872/293/846\nf 876/294/845 877/295/845 875/296/845 874/297/845\nf 878/298/846 879/299/846 877/300/846 876/301/846\nf 880/302/845 881/303/845 879/304/845 878/305/845\nf 882/306/846 883/307/846 881/308/846 880/309/846\nf 884/310/845 885/311/845 883/312/845 882/313/845\nf 886/314/846 887/315/846 885/316/846 884/317/846\nf 888/318/845 889/319/845 887/320/845 886/321/845\nf 890/322/846 891/323/846 889/324/846 888/325/846\nf 892/326/845 893/327/845 891/328/845 890/329/845\nf 894/330/846 895/331/846 893/332/846 892/333/846\nf 896/334/845 897/335/845 895/336/845 894/337/845\nf 898/338/846 899/339/846 897/340/846 896/341/846\nf 900/342/845 901/343/845 899/344/845 898/345/845\nf 902/346/846 903/347/846 901/348/846 900/349/846\nf 904/350/845 905/351/845 903/352/845 902/353/845\nf 906/354/846 907/355/846 905/356/846 904/357/846\nf 831/358/847 830/359/847 907/360/847 906/361/847\nf 829/203/844 908/362/844 909/363/844 830/204/844\nf 833/207/848 910/364/848 908/365/848 829/208/848\nf 835/211/846 911/366/846 910/367/846 833/212/846\nf 837/215/848 912/368/848 911/369/848 835/216/848\nf 839/219/846 913/370/846 912/371/846 837/220/846\nf 841/223/848 914/372/848 913/373/848 839/224/848\nf 843/227/846 915/374/846 914/375/846 841/228/846\nf 845/231/848 916/376/848 915/377/848 843/232/848\nf 847/235/846 917/378/846 916/379/846 845/236/846\nf 849/239/848 918/380/848 917/381/848 847/240/848\nf 851/243/846 919/382/846 918/383/846 849/244/846\nf 853/247/848 920/384/848 919/385/848 851/248/848\nf 855/251/846 921/386/846 920/387/846 853/252/846\nf 857/255/848 922/388/848 921/389/848 855/256/848\nf 859/259/846 923/390/846 922/391/846 857/260/846\nf 861/263/848 924/392/848 923/393/848 859/264/848\nf 863/267/846 925/394/846 924/395/846 861/268/846\nf 865/271/848 926/396/848 925/397/848 863/272/848\nf 867/275/846 927/398/846 926/399/846 865/276/846\nf 869/279/848 928/400/848 927/401/848 867/280/848\nf 871/283/846 929/402/846 928/403/846 869/284/846\nf 873/287/848 930/404/848 929/405/848 871/288/848\nf 875/291/846 931/406/846 930/407/846 873/292/846\nf 877/295/848 932/408/848 931/409/848 875/296/848\nf 879/299/846 933/410/846 932/411/846 877/300/846\nf 881/303/848 934/412/848 933/413/848 879/304/848\nf 883/307/846 935/414/846 934/415/846 881/308/846\nf 885/311/848 936/416/848 935/417/848 883/312/848\nf 887/315/846 937/418/846 936/419/846 885/316/846\nf 889/319/848 938/420/848 937/421/848 887/320/848\nf 891/323/846 939/422/846 938/423/846 889/324/846\nf 893/327/848 940/424/848 939/425/848 891/328/848\nf 895/331/846 941/426/846 940/427/846 893/332/846\nf 897/335/848 942/428/848 941/429/848 895/336/848\nf 899/339/846 943/430/846 942/431/846 897/340/846\nf 901/343/848 944/432/848 943/433/848 899/344/848\nf 903/347/846 945/434/846 944/435/846 901/348/846\nf 905/351/848 946/436/848 945/437/848 903/352/848\nf 907/355/846 947/438/846 946/439/846 905/356/846\nf 830/359/849 909/440/849 947/441/849 907/360/849\nf 908/362/844 948/442/844 949/443/844 909/363/844\nf 910/364/850 950/444/850 948/445/850 908/365/850\nf 911/366/846 951/446/846 950/447/846 910/367/846\nf 912/368/851 952/448/851 951/449/851 911/369/851\nf 913/370/846 953/450/846 952/451/846 912/371/846\nf 914/372/852 954/452/852 953/453/852 913/373/852\nf 915/374/846 955/454/846 954/455/846 914/375/846\nf 916/376/853 956/456/853 955/457/853 915/377/853\nf 917/378/846 957/458/846 956/459/846 916/379/846\nf 918/380/854 958/460/854 957/461/854 917/381/854\nf 919/382/846 959/462/846 958/463/846 918/383/846\nf 920/384/855 960/464/855 959/465/855 919/385/855\nf 921/386/846 961/466/846 960/467/846 920/387/846\nf 922/388/856 962/468/856 961/469/856 921/389/856\nf 923/390/846 963/470/846 962/471/846 922/391/846\nf 924/392/857 964/472/857 963/473/857 923/393/857\nf 925/394/846 965/474/846 964/475/846 924/395/846\nf 926/396/858 966/476/858 965/477/858 925/397/858\nf 927/398/846 967/478/846 966/479/846 926/399/846\nf 928/400/859 968/480/859 967/481/859 927/401/859\nf 929/402/846 969/482/846 968/483/846 928/403/846\nf 930/404/860 970/484/860 969/485/860 929/405/860\nf 931/406/846 971/486/846 970/487/846 930/407/846\nf 932/408/861 972/488/861 971/489/861 931/409/861\nf 933/410/846 973/490/846 972/491/846 932/411/846\nf 934/412/862 974/492/862 973/493/862 933/413/862\nf 935/414/846 975/494/846 974/495/846 934/415/846\nf 936/416/863 976/496/863 975/497/863 935/417/863\nf 937/418/846 977/498/846 976/499/846 936/419/846\nf 938/420/864 978/500/864 977/501/864 937/421/864\nf 939/422/846 979/502/846 978/503/846 938/423/846\nf 940/424/865 980/504/865 979/505/865 939/425/865\nf 941/426/846 981/506/846 980/507/846 940/427/846\nf 942/428/866 982/508/866 981/509/866 941/429/866\nf 943/430/846 983/510/846 982/511/846 942/431/846\nf 944/432/867 984/512/867 983/513/867 943/433/867\nf 945/434/846 985/514/846 984/515/846 944/435/846\nf 946/436/868 986/516/868 985/517/868 945/437/868\nf 947/438/846 987/518/846 986/519/846 946/439/846\nf 909/440/869 949/520/869 987/521/869 947/441/869\nf 948/442/844 988/522/844 989/523/844 949/443/844\nf 950/444/870 990/524/870 988/525/870 948/445/870\nf 951/446/846 991/526/846 990/527/846 950/447/846\nf 952/448/871 992/528/871 991/529/871 951/449/871\nf 953/450/846 993/530/846 992/531/846 952/451/846\nf 954/452/872 994/532/872 993/533/872 953/453/872\nf 955/454/846 995/534/846 994/535/846 954/455/846\nf 956/456/873 996/536/873 995/537/873 955/457/873\nf 957/458/846 997/538/846 996/539/846 956/459/846\nf 958/460/874 998/540/874 997/541/874 957/461/874\nf 959/462/846 999/542/846 998/543/846 958/463/846\nf 960/464/875 1000/544/875 999/545/875 959/465/875\nf 961/466/846 1001/546/846 1000/547/846 960/467/846\nf 962/468/876 1002/548/876 1001/549/876 961/469/876\nf 963/470/846 1003/550/846 1002/551/846 962/471/846\nf 964/472/877 1004/552/877 1003/553/877 963/473/877\nf 965/474/846 1005/554/846 1004/555/846 964/475/846\nf 966/476/878 1006/556/878 1005/557/878 965/477/878\nf 967/478/846 1007/558/846 1006/559/846 966/479/846\nf 968/480/879 1008/560/879 1007/561/879 967/481/879\nf 969/482/846 1009/562/846 1008/563/846 968/483/846\nf 970/484/880 1010/564/880 1009/565/880 969/485/880\nf 971/486/846 1011/566/846 1010/567/846 970/487/846\nf 972/488/881 1012/568/881 1011/569/881 971/489/881\nf 973/490/846 1013/570/846 1012/571/846 972/491/846\nf 974/492/882 1014/572/882 1013/573/882 973/493/882\nf 975/494/846 1015/574/846 1014/575/846 974/495/846\nf 976/496/883 1016/576/883 1015/577/883 975/497/883\nf 977/498/846 1017/578/846 1016/579/846 976/499/846\nf 978/500/884 1018/580/884 1017/581/884 977/501/884\nf 979/502/846 1019/582/846 1018/583/846 978/503/846\nf 980/504/885 1020/584/885 1019/585/885 979/505/885\nf 981/506/846 1021/586/846 1020/587/846 980/507/846\nf 982/508/886 1022/588/886 1021/589/886 981/509/886\nf 983/510/846 1023/590/846 1022/591/846 982/511/846\nf 984/512/887 1024/592/887 1023/593/887 983/513/887\nf 985/514/846 1025/594/846 1024/595/846 984/515/846\nf 986/516/888 1026/596/888 1025/597/888 985/517/888\nf 987/518/846 1027/598/846 1026/599/846 986/519/846\nf 949/520/889 989/600/889 1027/601/889 987/521/889\nf 988/522/844 1028/602/844 1029/603/844 989/523/844\nf 990/524/890 1030/604/890 1028/605/890 988/525/890\nf 991/526/846 1031/606/846 1030/607/846 990/527/846\nf 992/528/891 1032/608/891 1031/609/891 991/529/891\nf 993/530/846 1033/610/846 1032/611/846 992/531/846\nf 994/532/892 1034/612/892 1033/613/892 993/533/892\nf 995/534/846 1035/614/846 1034/615/846 994/535/846\nf 996/536/893 1036/616/893 1035/617/893 995/537/893\nf 997/538/846 1037/618/846 1036/619/846 996/539/846\nf 998/540/894 1038/620/894 1037/621/894 997/541/894\nf 999/542/846 1039/622/846 1038/623/846 998/543/846\nf 1000/544/895 1040/624/895 1039/625/895 999/545/895\nf 1001/546/846 1041/626/846 1040/627/846 1000/547/846\nf 1002/548/896 1042/628/896 1041/629/896 1001/549/896\nf 1003/550/846 1043/630/846 1042/631/846 1002/551/846\nf 1004/552/897 1044/632/897 1043/633/897 1003/553/897\nf 1005/554/846 1045/634/846 1044/635/846 1004/555/846\nf 1006/556/898 1046/636/898 1045/637/898 1005/557/898\nf 1007/558/846 1047/638/846 1046/639/846 1006/559/846\nf 1008/560/899 1048/640/899 1047/641/899 1007/561/899\nf 1009/562/846 1049/642/846 1048/643/846 1008/563/846\nf 1010/564/900 1050/644/900 1049/645/900 1009/565/900\nf 1011/566/846 1051/646/846 1050/647/846 1010/567/846\nf 1012/568/901 1052/648/901 1051/649/901 1011/569/901\nf 1013/570/846 1053/650/846 1052/651/846 1012/571/846\nf 1014/572/902 1054/652/902 1053/653/902 1013/573/902\nf 1015/574/846 1055/654/846 1054/655/846 1014/575/846\nf 1016/576/903 1056/656/903 1055/657/903 1015/577/903\nf 1017/578/846 1057/658/846 1056/659/846 1016/579/846\nf 1018/580/904 1058/660/904 1057/661/904 1017/581/904\nf 1019/582/846 1059/662/846 1058/663/846 1018/583/846\nf 1020/584/905 1060/664/905 1059/665/905 1019/585/905\nf 1021/586/846 1061/666/846 1060/667/846 1020/587/846\nf 1022/588/905 1062/668/905 1061/669/905 1021/589/905\nf 1023/590/846 1063/670/846 1062/671/846 1022/591/846\nf 1024/592/906 1064/672/906 1063/673/906 1023/593/906\nf 1025/594/846 1065/674/846 1064/675/846 1024/595/846\nf 1026/596/906 1066/676/906 1065/677/906 1025/597/906\nf 1027/598/846 1067/678/846 1066/679/846 1026/599/846\nf 989/680/907 1029/681/907 1067/682/907 1027/683/907\nf 1028/602/844 1068/684/844 1069/685/844 1029/603/844\nf 1030/604/908 1070/686/908 1068/687/908 1028/605/908\nf 1031/606/846 1071/688/846 1070/689/846 1030/607/846\nf 1032/608/909 1072/690/909 1071/691/909 1031/609/909\nf 1033/610/846 1073/692/846 1072/693/846 1032/611/846\nf 1034/612/910 1074/694/910 1073/695/910 1033/613/910\nf 1035/614/846 1075/696/846 1074/697/846 1034/615/846\nf 1036/616/911 1076/698/911 1075/699/911 1035/617/911\nf 1037/618/846 1077/700/846 1076/701/846 1036/619/846\nf 1038/620/912 1078/702/912 1077/703/912 1037/621/912\nf 1039/622/846 1079/704/846 1078/705/846 1038/623/846\nf 1040/624/913 1080/706/913 1079/707/913 1039/625/913\nf 1041/626/846 1081/708/846 1080/709/846 1040/627/846\nf 1042/628/914 1082/710/914 1081/711/914 1041/629/914\nf 1043/630/846 1083/712/846 1082/713/846 1042/631/846\nf 1044/632/915 1084/714/915 1083/715/915 1043/633/915\nf 1045/634/846 1085/716/846 1084/717/846 1044/635/846\nf 1046/636/916 1086/718/916 1085/719/916 1045/637/916\nf 1047/638/846 1087/720/846 1086/721/846 1046/639/846\nf 1048/640/917 1088/722/917 1087/723/917 1047/641/917\nf 1049/642/846 1089/724/846 1088/725/846 1048/643/846\nf 1050/644/918 1090/726/918 1089/727/918 1049/645/918\nf 1051/646/846 1091/728/846 1090/729/846 1050/647/846\nf 1052/648/919 1092/730/919 1091/731/919 1051/649/919\nf 1053/650/846 1093/732/846 1092/733/846 1052/651/846\nf 1054/652/920 1094/734/920 1093/735/920 1053/653/920\nf 1055/654/846 1095/736/846 1094/737/846 1054/655/846\nf 1056/656/921 1096/738/921 1095/739/921 1055/657/921\nf 1057/658/846 1097/740/846 1096/741/846 1056/659/846\nf 1058/660/921 1098/742/921 1097/743/921 1057/661/921\nf 1059/662/846 1099/744/846 1098/745/846 1058/663/846\nf 1060/664/922 1100/746/922 1099/747/922 1059/665/922\nf 1061/666/846 1101/748/846 1100/749/846 1060/667/846\nf 1062/668/922 1102/750/922 1101/751/922 1061/669/922\nf 1063/670/846 1103/752/846 1102/753/846 1062/671/846\nf 1064/672/922 1104/754/922 1103/755/922 1063/673/922\nf 1065/674/846 1105/756/846 1104/757/846 1064/675/846\nf 1066/676/923 1106/758/923 1105/759/923 1065/677/923\nf 1067/678/846 1107/760/846 1106/761/846 1066/679/846\nf 1029/681/924 1069/762/924 1107/763/924 1067/682/924\nf 1068/684/844 1108/764/844 1109/765/844 1069/685/844\nf 1070/686/925 1110/766/925 1108/767/925 1068/687/925\nf 1071/688/846 1111/768/846 1110/769/846 1070/689/846\nf 1072/690/926 1112/770/926 1111/771/926 1071/691/926\nf 1073/692/846 1113/772/846 1112/773/846 1072/693/846\nf 1074/694/927 1114/774/927 1113/775/927 1073/695/927\nf 1075/696/846 1115/776/846 1114/777/846 1074/697/846\nf 1076/698/928 1116/778/928 1115/779/928 1075/699/928\nf 1077/700/846 1117/780/846 1116/781/846 1076/701/846\nf 1078/702/929 1118/782/929 1117/783/929 1077/703/929\nf 1079/704/846 1119/784/846 1118/785/846 1078/705/846\nf 1080/706/930 1120/786/930 1119/787/930 1079/707/930\nf 1081/708/846 1121/788/846 1120/789/846 1080/709/846\nf 1082/710/931 1122/790/931 1121/791/931 1081/711/931\nf 1083/712/846 1123/792/846 1122/793/846 1082/713/846\nf 1084/714/932 1124/794/932 1123/795/932 1083/715/932\nf 1085/716/846 1125/796/846 1124/797/846 1084/717/846\nf 1086/718/933 1126/798/933 1125/799/933 1085/719/933\nf 1087/720/846 1127/800/846 1126/801/846 1086/721/846\nf 1088/722/934 1128/802/934 1127/803/934 1087/723/934\nf 1089/724/846 1129/804/846 1128/805/846 1088/725/846\nf 1090/726/934 1130/806/934 1129/807/934 1089/727/934\nf 1091/728/846 1131/808/846 1130/809/846 1090/729/846\nf 1092/730/935 1132/810/935 1131/811/935 1091/731/935\nf 1093/732/846 1133/812/846 1132/813/846 1092/733/846\nf 1094/734/935 1134/814/935 1133/815/935 1093/735/935\nf 1095/736/846 1135/816/846 1134/817/846 1094/737/846\nf 1096/738/936 1136/818/936 1135/819/936 1095/739/936\nf 1097/740/846 1137/820/846 1136/821/846 1096/741/846\nf 1098/742/936 1138/822/936 1137/823/936 1097/743/936\nf 1099/744/846 1139/824/846 1138/825/846 1098/745/846\nf 1100/746/937 1140/826/937 1139/827/937 1099/747/937\nf 1101/748/846 1141/828/846 1140/829/846 1100/749/846\nf 1102/750/938 1142/830/938 1141/831/938 1101/751/938\nf 1103/752/846 1143/832/846 1142/833/846 1102/753/846\nf 1104/754/938 1144/834/938 1143/835/938 1103/755/938\nf 1105/756/846 1145/836/846 1144/837/846 1104/757/846\nf 1106/758/938 1146/838/938 1145/839/938 1105/759/938\nf 1107/760/846 1147/840/846 1146/841/846 1106/761/846\nf 1069/762/939 1109/842/939 1147/843/939 1107/763/939\nf 1108/764/844 1148/844/844 1149/845/844 1109/765/844\nf 1110/766/940 1150/846/940 1148/847/940 1108/767/940\nf 1111/768/846 1151/848/846 1150/849/846 1110/769/846\nf 1112/770/941 1152/850/941 1151/851/941 1111/771/941\nf 1113/772/846 1153/852/846 1152/853/846 1112/773/846\nf 1114/774/942 1154/854/942 1153/855/942 1113/775/942\nf 1115/776/846 1155/856/846 1154/857/846 1114/777/846\nf 1116/778/943 1156/858/943 1155/859/943 1115/779/943\nf 1117/780/846 1157/860/846 1156/861/846 1116/781/846\nf 1118/782/944 1158/862/944 1157/863/944 1117/783/944\nf 1119/784/846 1159/864/846 1158/865/846 1118/785/846\nf 1120/786/944 1160/866/944 1159/867/944 1119/787/944\nf 1121/788/846 1161/868/846 1160/869/846 1120/789/846\nf 1122/790/945 1162/870/945 1161/871/945 1121/791/945\nf 1123/792/846 1163/872/846 1162/873/846 1122/793/846\nf 1124/794/946 1164/874/946 1163/875/946 1123/795/946\nf 1125/796/846 1165/876/846 1164/877/846 1124/797/846\nf 1126/798/947 1166/878/947 1165/879/947 1125/799/947\nf 1127/800/846 1167/880/846 1166/881/846 1126/801/846\nf 1128/802/948 1168/882/948 1167/883/948 1127/803/948\nf 1129/804/846 1169/884/846 1168/885/846 1128/805/846\nf 1130/806/948 1170/886/948 1169/887/948 1129/807/948\nf 1131/808/846 1171/888/846 1170/889/846 1130/809/846\nf 1132/810/949 1172/890/949 1171/891/949 1131/811/949\nf 1133/812/846 1173/892/846 1172/893/846 1132/813/846\nf 1134/814/949 1174/894/949 1173/895/949 1133/815/949\nf 1135/816/846 1175/896/846 1174/897/846 1134/817/846\nf 1136/818/949 1176/898/949 1175/899/949 1135/819/949\nf 1137/820/846 1177/900/846 1176/901/846 1136/821/846\nf 1138/822/949 1178/902/949 1177/903/949 1137/823/949\nf 1139/824/846 1179/904/846 1178/905/846 1138/825/846\nf 1140/826/950 1180/906/950 1179/907/950 1139/827/950\nf 1141/828/846 1181/908/846 1180/909/846 1140/829/846\nf 1142/830/951 1182/910/951 1181/911/951 1141/831/951\nf 1143/832/846 1183/912/846 1182/913/846 1142/833/846\nf 1144/834/951 1184/914/951 1183/915/951 1143/835/951\nf 1145/836/846 1185/916/846 1184/917/846 1144/837/846\nf 1146/838/951 1186/918/951 1185/919/951 1145/839/951\nf 1147/840/846 1187/920/846 1186/921/846 1146/841/846\nf 1109/842/952 1149/922/952 1187/923/952 1147/843/952\nf 1148/844/844 1188/924/844 1189/925/844 1149/845/844\nf 1150/846/953 1190/926/953 1188/927/953 1148/847/953\nf 1151/848/846 1191/928/846 1190/929/846 1150/849/846\nf 1152/850/953 1192/930/953 1191/931/953 1151/851/953\nf 1153/852/846 1193/932/846 1192/933/846 1152/853/846\nf 1154/854/954 1194/934/954 1193/935/954 1153/855/954\nf 1155/856/846 1195/936/846 1194/937/846 1154/857/846\nf 1156/858/954 1196/938/954 1195/939/954 1155/859/954\nf 1157/860/846 1197/940/846 1196/941/846 1156/861/846\nf 1158/862/954 1198/942/954 1197/943/954 1157/863/954\nf 1159/864/846 1199/944/846 1198/945/846 1158/865/846\nf 1160/866/954 1200/946/954 1199/947/954 1159/867/954\nf 1161/868/846 1201/948/846 1200/949/846 1160/869/846\nf 1162/870/955 1202/950/955 1201/951/955 1161/871/955\nf 1163/872/846 1203/952/846 1202/953/846 1162/873/846\nf 1164/874/955 1204/954/955 1203/955/955 1163/875/955\nf 1165/876/846 1205/956/846 1204/957/846 1164/877/846\nf 1166/878/956 1206/958/956 1205/959/956 1165/879/956\nf 1167/880/846 1207/960/846 1206/961/846 1166/881/846\nf 1168/882/956 1208/962/956 1207/963/956 1167/883/956\nf 1169/884/846 1209/964/846 1208/965/846 1168/885/846\nf 1170/886/956 1210/966/956 1209/967/956 1169/887/956\nf 1171/888/846 1211/968/846 1210/969/846 1170/889/846\nf 1172/890/956 1212/970/956 1211/971/956 1171/891/956\nf 1173/892/846 1213/972/846 1212/973/846 1172/893/846\nf 1174/894/956 1214/974/956 1213/975/956 1173/895/956\nf 1175/896/846 1215/976/846 1214/977/846 1174/897/846\nf 1176/898/956 1216/978/956 1215/979/956 1175/899/956\nf 1177/900/846 1217/980/846 1216/981/846 1176/901/846\nf 1178/902/957 1218/982/957 1217/983/957 1177/903/957\nf 1179/904/846 1219/984/846 1218/985/846 1178/905/846\nf 1180/906/957 1220/986/957 1219/987/957 1179/907/957\nf 1181/908/846 1221/988/846 1220/989/846 1180/909/846\nf 1182/910/957 1222/990/957 1221/991/957 1181/911/957\nf 1183/912/846 1223/992/846 1222/993/846 1182/913/846\nf 1184/914/957 1224/994/957 1223/995/957 1183/915/957\nf 1185/916/846 1225/996/846 1224/997/846 1184/917/846\nf 1186/918/957 1226/998/957 1225/999/957 1185/919/957\nf 1187/920/846 1227/1000/846 1226/1001/846 1186/921/846\nf 1149/922/958 1189/1002/958 1227/1003/958 1187/923/958\nf 1188/924/844 1228/1004/844 1229/1005/844 1189/925/844\nf 1190/926/959 1230/1006/959 1228/1007/959 1188/927/959\nf 1191/928/846 1231/1008/846 1230/1009/846 1190/929/846\nf 1192/930/960 1232/1010/960 1231/1011/960 1191/931/960\nf 1193/932/846 1233/1012/846 1232/1013/846 1192/933/846\nf 1194/934/961 1234/1014/961 1233/1015/961 1193/935/961\nf 1195/936/846 1235/1016/846 1234/1017/846 1194/937/846\nf 1196/938/961 1236/1018/961 1235/1019/961 1195/939/961\nf 1197/940/846 1237/1020/846 1236/1021/846 1196/941/846\nf 1198/942/961 1238/1022/961 1237/1023/961 1197/943/961\nf 1199/944/846 1239/1024/846 1238/1025/846 1198/945/846\nf 1200/946/961 1240/1026/961 1239/1027/961 1199/947/961\nf 1201/948/846 1241/1028/846 1240/1029/846 1200/949/846\nf 1202/950/961 1242/1030/961 1241/1031/961 1201/951/961\nf 1203/952/846 1243/1032/846 1242/1033/846 1202/953/846\nf 1204/954/961 1244/1034/961 1243/1035/961 1203/955/961\nf 1205/956/846 1245/1036/846 1244/1037/846 1204/957/846\nf 1206/958/962 1246/1038/962 1245/1039/962 1205/959/962\nf 1207/960/846 1247/1040/846 1246/1041/846 1206/961/846\nf 1208/962/962 1248/1042/962 1247/1043/962 1207/963/962\nf 1209/964/846 1249/1044/846 1248/1045/846 1208/965/846\nf 1210/966/962 1250/1046/962 1249/1047/962 1209/967/962\nf 1211/968/846 1251/1048/846 1250/1049/846 1210/969/846\nf 1212/970/962 1252/1050/962 1251/1051/962 1211/971/962\nf 1213/972/846 1253/1052/846 1252/1053/846 1212/973/846\nf 1214/974/962 1254/1054/962 1253/1055/962 1213/975/962\nf 1215/976/846 1255/1056/846 1254/1057/846 1214/977/846\nf 1216/978/962 1256/1058/962 1255/1059/962 1215/979/962\nf 1217/980/846 1257/1060/846 1256/1061/846 1216/981/846\nf 1218/982/962 1258/1062/962 1257/1063/962 1217/983/962\nf 1219/984/846 1259/1064/846 1258/1065/846 1218/985/846\nf 1220/986/962 1260/1066/962 1259/1067/962 1219/987/962\nf 1221/988/846 1261/1068/846 1260/1069/846 1220/989/846\nf 1222/990/962 1262/1070/962 1261/1071/962 1221/991/962\nf 1223/992/846 1263/1072/846 1262/1073/846 1222/993/846\nf 1224/994/962 1264/1074/962 1263/1075/962 1223/995/962\nf 1225/996/846 1265/1076/846 1264/1077/846 1224/997/846\nf 1226/998/963 1266/1078/963 1265/1079/963 1225/999/963\nf 1227/1000/846 1267/1080/846 1266/1081/846 1226/1001/846\nf 1189/1002/964 1229/1082/964 1267/1083/964 1227/1003/964\nf 1228/1004/844 1268/1084/844 1269/1085/844 1229/1005/844\nf 1230/1006/965 1270/1086/965 1268/1087/965 1228/1007/965\nf 1231/1008/846 1271/1088/846 1270/1089/846 1230/1009/846\nf 1232/1010/966 1272/1090/966 1271/1091/966 1231/1011/966\nf 1233/1012/846 1273/1092/846 1272/1093/846 1232/1013/846\nf 1234/1014/966 1274/1094/966 1273/1095/966 1233/1015/966\nf 1235/1016/846 1275/1096/846 1274/1097/846 1234/1017/846\nf 1236/1018/967 1276/1098/967 1275/1099/967 1235/1019/967\nf 1237/1020/846 1277/1100/846 1276/1101/846 1236/1021/846\nf 1238/1022/967 1278/1102/967 1277/1103/967 1237/1023/967\nf 1239/1024/846 1279/1104/846 1278/1105/846 1238/1025/846\nf 1240/1026/968 1280/1106/968 1279/1107/968 1239/1027/968\nf 1241/1028/846 1281/1108/846 1280/1109/846 1240/1029/846\nf 1242/1030/969 1282/1110/969 1281/1111/969 1241/1031/969\nf 1243/1032/846 1283/1112/846 1282/1113/846 1242/1033/846\nf 1244/1034/970 1284/1114/970 1283/1115/970 1243/1035/970\nf 1245/1036/846 1285/1116/846 1284/1117/846 1244/1037/846\nf 1246/1038/970 1286/1118/970 1285/1119/970 1245/1039/970\nf 1247/1040/846 1287/1120/846 1286/1121/846 1246/1041/846\nf 1248/1042/970 1288/1122/970 1287/1123/970 1247/1043/970\nf 1249/1044/846 1289/1124/846 1288/1125/846 1248/1045/846\nf 1250/1046/970 1290/1126/970 1289/1127/970 1249/1047/970\nf 1251/1048/846 1291/1128/846 1290/1129/846 1250/1049/846\nf 1252/1050/971 1292/1130/971 1291/1131/971 1251/1051/971\nf 1253/1052/846 1293/1132/846 1292/1133/846 1252/1053/846\nf 1254/1054/972 1294/1134/972 1293/1135/972 1253/1055/972\nf 1255/1056/846 1295/1136/846 1294/1137/846 1254/1057/846\nf 1256/1058/972 1296/1138/972 1295/1139/972 1255/1059/972\nf 1257/1060/846 1297/1140/846 1296/1141/846 1256/1061/846\nf 1258/1062/972 1298/1142/972 1297/1143/972 1257/1063/972\nf 1259/1064/846 1299/1144/846 1298/1145/846 1258/1065/846\nf 1260/1066/972 1300/1146/972 1299/1147/972 1259/1067/972\nf 1261/1068/846 1301/1148/846 1300/1149/846 1260/1069/846\nf 1262/1070/972 1302/1150/972 1301/1151/972 1261/1071/972\nf 1263/1072/846 1303/1152/846 1302/1153/846 1262/1073/846\nf 1264/1074/972 1304/1154/972 1303/1155/972 1263/1075/972\nf 1265/1076/846 1305/1156/846 1304/1157/846 1264/1077/846\nf 1266/1078/972 1306/1158/972 1305/1159/972 1265/1079/972\nf 1267/1080/846 1307/1160/846 1306/1161/846 1266/1081/846\nf 1229/1082/973 1269/1162/973 1307/1163/973 1267/1083/973\nf 1268/1084/844 1308/1164/844 1309/1165/844 1269/1085/844\nf 1270/1086/974 1310/1166/974 1308/1167/974 1268/1087/974\nf 1271/1088/846 1311/1168/846 1310/1169/846 1270/1089/846\nf 1272/1090/975 1312/1170/975 1311/1171/975 1271/1091/975\nf 1273/1092/846 1313/1172/846 1312/1173/846 1272/1093/846\nf 1274/1094/976 1314/1174/976 1313/1175/976 1273/1095/976\nf 1275/1096/846 1315/1176/846 1314/1177/846 1274/1097/846\nf 1276/1098/977 1316/1178/977 1315/1179/977 1275/1099/977\nf 1277/1100/846 1317/1180/846 1316/1181/846 1276/1101/846\nf 1278/1102/978 1318/1182/978 1317/1183/978 1277/1103/978\nf 1279/1104/846 1319/1184/846 1318/1185/846 1278/1105/846\nf 1280/1106/979 1320/1186/979 1319/1187/979 1279/1107/979\nf 1281/1108/846 1321/1188/846 1320/1189/846 1280/1109/846\nf 1282/1110/980 1322/1190/980 1321/1191/980 1281/1111/980\nf 1283/1112/846 1323/1192/846 1322/1193/846 1282/1113/846\nf 1284/1114/980 1324/1194/980 1323/1195/980 1283/1115/980\nf 1285/1116/846 1325/1196/846 1324/1197/846 1284/1117/846\nf 1286/1118/981 1326/1198/981 1325/1199/981 1285/1119/981\nf 1287/1120/846 1327/1200/846 1326/1201/846 1286/1121/846\nf 1288/1122/981 1328/1202/981 1327/1203/981 1287/1123/981\nf 1289/1124/846 1329/1204/846 1328/1205/846 1288/1125/846\nf 1290/1126/982 1330/1206/982 1329/1207/982 1289/1127/982\nf 1291/1128/846 1331/1208/846 1330/1209/846 1290/1129/846\nf 1292/1130/982 1332/1210/982 1331/1211/982 1291/1131/982\nf 1293/1132/846 1333/1212/846 1332/1213/846 1292/1133/846\nf 1294/1134/982 1334/1214/982 1333/1215/982 1293/1135/982\nf 1295/1136/846 1335/1216/846 1334/1217/846 1294/1137/846\nf 1296/1138/982 1336/1218/982 1335/1219/982 1295/1139/982\nf 1297/1140/846 1337/1220/846 1336/1221/846 1296/1141/846\nf 1298/1142/983 1338/1222/983 1337/1223/983 1297/1143/983\nf 1299/1144/846 1339/1224/846 1338/1225/846 1298/1145/846\nf 1300/1146/983 1340/1226/983 1339/1227/983 1299/1147/983\nf 1301/1148/846 1341/1228/846 1340/1229/846 1300/1149/846\nf 1302/1150/983 1342/1230/983 1341/1231/983 1301/1151/983\nf 1303/1152/846 1343/1232/846 1342/1233/846 1302/1153/846\nf 1304/1154/983 1344/1234/983 1343/1235/983 1303/1155/983\nf 1305/1156/846 1345/1236/846 1344/1237/846 1304/1157/846\nf 1306/1158/984 1346/1238/984 1345/1239/984 1305/1159/984\nf 1307/1160/846 1347/1240/846 1346/1241/846 1306/1161/846\nf 1269/1162/985 1309/1242/985 1347/1243/985 1307/1163/985\nf 1308/1164/844 1348/1244/844 1349/1245/844 1309/1165/844\nf 1310/1166/986 1350/1246/986 1348/1247/986 1308/1167/986\nf 1311/1168/846 1351/1248/846 1350/1249/846 1310/1169/846\nf 1312/1170/987 1352/1250/987 1351/1251/987 1311/1171/987\nf 1313/1172/846 1353/1252/846 1352/1253/846 1312/1173/846\nf 1314/1174/988 1354/1254/988 1353/1255/988 1313/1175/988\nf 1315/1176/846 1355/1256/846 1354/1257/846 1314/1177/846\nf 1316/1178/989 1356/1258/989 1355/1259/989 1315/1179/989\nf 1317/1180/846 1357/1260/846 1356/1261/846 1316/1181/846\nf 1318/1182/990 1358/1262/990 1357/1263/990 1317/1183/990\nf 1319/1184/846 1359/1264/846 1358/1265/846 1318/1185/846\nf 1320/1186/991 1360/1266/991 1359/1267/991 1319/1187/991\nf 1321/1188/846 1361/1268/846 1360/1269/846 1320/1189/846\nf 1322/1190/992 1362/1270/992 1361/1271/992 1321/1191/992\nf 1323/1192/846 1363/1272/846 1362/1273/846 1322/1193/846\nf 1324/1194/993 1364/1274/993 1363/1275/993 1323/1195/993\nf 1325/1196/846 1365/1276/846 1364/1277/846 1324/1197/846\nf 1326/1198/993 1366/1278/993 1365/1279/993 1325/1199/993\nf 1327/1200/846 1367/1280/846 1366/1281/846 1326/1201/846\nf 1328/1202/994 1368/1282/994 1367/1283/994 1327/1203/994\nf 1329/1204/846 1369/1284/846 1368/1285/846 1328/1205/846\nf 1330/1206/995 1370/1286/995 1369/1287/995 1329/1207/995\nf 1331/1208/846 1371/1288/846 1370/1289/846 1330/1209/846\nf 1332/1210/995 1372/1290/995 1371/1291/995 1331/1211/995\nf 1333/1212/846 1373/1292/846 1372/1293/846 1332/1213/846\nf 1334/1214/995 1374/1294/995 1373/1295/995 1333/1215/995\nf 1335/1216/846 1375/1296/846 1374/1297/846 1334/1217/846\nf 1336/1218/996 1376/1298/996 1375/1299/996 1335/1219/996\nf 1337/1220/846 1377/1300/846 1376/1301/846 1336/1221/846\nf 1338/1222/996 1378/1302/996 1377/1303/996 1337/1223/996\nf 1339/1224/846 1379/1304/846 1378/1305/846 1338/1225/846\nf 1340/1226/997 1380/1306/997 1379/1307/997 1339/1227/997\nf 1341/1228/846 1381/1308/846 1380/1309/846 1340/1229/846\nf 1342/1230/998 1382/1310/998 1381/1311/998 1341/1231/998\nf 1343/1232/846 1383/1312/846 1382/1313/846 1342/1233/846\nf 1344/1234/998 1384/1314/998 1383/1315/998 1343/1235/998\nf 1345/1236/846 1385/1316/846 1384/1317/846 1344/1237/846\nf 1346/1238/998 1386/1318/998 1385/1319/998 1345/1239/998\nf 1347/1240/846 1387/1320/846 1386/1321/846 1346/1241/846\nf 1309/1242/999 1349/1322/999 1387/1323/999 1347/1243/999\nf 1348/1244/844 1388/1324/844 1389/1325/844 1349/1245/844\nf 1350/1326/1000 1390/1327/1000 1388/1328/1000 1348/1329/1000\nf 1351/1248/846 1391/1330/846 1390/1331/846 1350/1249/846\nf 1352/1332/1001 1392/1333/1001 1391/1334/1001 1351/1335/1001\nf 1353/1252/846 1393/1336/846 1392/1337/846 1352/1253/846\nf 1354/1338/1002 1394/1339/1002 1393/1340/1002 1353/1341/1002\nf 1355/1256/846 1395/1342/846 1394/1343/846 1354/1257/846\nf 1356/1344/1003 1396/1345/1003 1395/1346/1003 1355/1347/1003\nf 1357/1260/846 1397/1348/846 1396/1349/846 1356/1261/846\nf 1358/1350/1004 1398/1351/1004 1397/1352/1004 1357/1353/1004\nf 1359/1264/846 1399/1354/846 1398/1355/846 1358/1265/846\nf 1360/1356/1005 1400/1357/1005 1399/1358/1005 1359/1359/1005\nf 1361/1268/846 1401/1360/846 1400/1361/846 1360/1269/846\nf 1362/1362/1006 1402/1363/1006 1401/1364/1006 1361/1365/1006\nf 1363/1272/846 1403/1366/846 1402/1367/846 1362/1273/846\nf 1364/1368/1007 1404/1369/1007 1403/1370/1007 1363/1371/1007\nf 1365/1276/846 1405/1372/846 1404/1373/846 1364/1277/846\nf 1366/1374/1008 1406/1375/1008 1405/1376/1008 1365/1377/1008\nf 1367/1280/846 1407/1378/846 1406/1379/846 1366/1281/846\nf 1368/1380/1008 1408/1381/1008 1407/1382/1008 1367/1383/1008\nf 1369/1284/846 1409/1384/846 1408/1385/846 1368/1285/846\nf 1370/1386/1009 1410/1387/1009 1409/1388/1009 1369/1389/1009\nf 1371/1288/846 1411/1390/846 1410/1391/846 1370/1289/846\nf 1372/1392/1009 1412/1393/1009 1411/1394/1009 1371/1395/1009\nf 1373/1292/846 1413/1396/846 1412/1397/846 1372/1293/846\nf 1374/1398/1010 1414/1399/1010 1413/1400/1010 1373/1401/1010\nf 1375/1296/846 1415/1402/846 1414/1403/846 1374/1297/846\nf 1376/1404/1010 1416/1405/1010 1415/1406/1010 1375/1407/1010\nf 1377/1300/846 1417/1408/846 1416/1409/846 1376/1301/846\nf 1378/1410/1010 1418/1411/1010 1417/1412/1010 1377/1413/1010\nf 1379/1304/846 1419/1414/846 1418/1415/846 1378/1305/846\nf 1380/1416/1011 1420/1417/1011 1419/1418/1011 1379/1419/1011\nf 1381/1308/846 1421/1420/846 1420/1421/846 1380/1309/846\nf 1382/1422/1011 1422/1423/1011 1421/1424/1011 1381/1425/1011\nf 1383/1312/846 1423/1426/846 1422/1427/846 1382/1313/846\nf 1384/1428/1011 1424/1429/1011 1423/1430/1011 1383/1431/1011\nf 1385/1316/846 1425/1432/846 1424/1433/846 1384/1317/846\nf 1386/1434/1011 1426/1435/1011 1425/1436/1011 1385/1437/1011\nf 1387/1320/846 1427/1438/846 1426/1439/846 1386/1321/846\nf 1349/1322/1012 1389/1440/1012 1427/1441/1012 1387/1323/1012\nf 1388/1324/844 1428/1442/844 1429/1443/844 1389/1325/844\nf 1390/1327/1013 1430/1444/1013 1428/1445/1013 1388/1328/1013\nf 1391/1330/846 1431/1446/846 1430/1447/846 1390/1331/846\nf 1392/1333/1014 1432/1448/1014 1431/1449/1014 1391/1334/1014\nf 1393/1336/846 1433/1450/846 1432/1451/846 1392/1337/846\nf 1394/1339/1015 1434/1452/1015 1433/1453/1015 1393/1340/1015\nf 1395/1342/846 1435/1454/846 1434/1455/846 1394/1343/846\nf 1396/1345/1016 1436/1456/1016 1435/1457/1016 1395/1346/1016\nf 1397/1348/846 1437/1458/846 1436/1459/846 1396/1349/846\nf 1398/1351/1017 1438/1460/1017 1437/1461/1017 1397/1352/1017\nf 1399/1354/846 1439/1462/846 1438/1463/846 1398/1355/846\nf 1400/1357/1018 1440/1464/1018 1439/1465/1018 1399/1358/1018\nf 1401/1360/846 1441/1466/846 1440/1467/846 1400/1361/846\nf 1402/1363/1019 1442/1468/1019 1441/1469/1019 1401/1364/1019\nf 1403/1366/846 1443/1470/846 1442/1471/846 1402/1367/846\nf 1404/1369/1020 1444/1472/1020 1443/1473/1020 1403/1370/1020\nf 1405/1372/846 1445/1474/846 1444/1475/846 1404/1373/846\nf 1406/1375/1021 1446/1476/1021 1445/1477/1021 1405/1376/1021\nf 1407/1378/846 1447/1478/846 1446/1479/846 1406/1379/846\nf 1408/1381/1022 1448/1480/1022 1447/1481/1022 1407/1382/1022\nf 1409/1384/846 1449/1482/846 1448/1483/846 1408/1385/846\nf 1410/1387/1023 1450/1484/1023 1449/1485/1023 1409/1388/1023\nf 1411/1390/846 1451/1486/846 1450/1487/846 1410/1391/846\nf 1412/1393/1024 1452/1488/1024 1451/1489/1024 1411/1394/1024\nf 1413/1396/846 1453/1490/846 1452/1491/846 1412/1397/846\nf 1414/1399/1025 1454/1492/1025 1453/1493/1025 1413/1400/1025\nf 1415/1402/846 1455/1494/846 1454/1495/846 1414/1403/846\nf 1416/1405/1026 1456/1496/1026 1455/1497/1026 1415/1406/1026\nf 1417/1408/846 1457/1498/846 1456/1499/846 1416/1409/846\nf 1418/1411/1027 1458/1500/1027 1457/1501/1027 1417/1412/1027\nf 1419/1414/846 1459/1502/846 1458/1503/846 1418/1415/846\nf 1420/1417/1028 1460/1504/1028 1459/1505/1028 1419/1418/1028\nf 1421/1420/846 1461/1506/846 1460/1507/846 1420/1421/846\nf 1422/1423/1029 1462/1508/1029 1461/1509/1029 1421/1424/1029\nf 1423/1426/846 1463/1510/846 1462/1511/846 1422/1427/846\nf 1424/1429/1030 1464/1512/1030 1463/1513/1030 1423/1430/1030\nf 1425/1432/846 1465/1514/846 1464/1515/846 1424/1433/846\nf 1426/1435/1031 1466/1516/1031 1465/1517/1031 1425/1436/1031\nf 1427/1438/846 1467/1518/846 1466/1519/846 1426/1439/846\nf 1389/1440/1032 1429/1520/1032 1467/1521/1032 1427/1441/1032\nf 1428/1442/844 1468/1522/844 1469/1523/844 1429/1443/844\nf 1430/1444/1033 1470/1524/1033 1468/1525/1033 1428/1445/1033\nf 1431/1446/846 1471/1526/846 1470/1527/846 1430/1447/846\nf 1432/1448/1034 1472/1528/1034 1471/1529/1034 1431/1449/1034\nf 1433/1450/846 1473/1530/846 1472/1531/846 1432/1451/846\nf 1434/1452/1034 1474/1532/1034 1473/1533/1034 1433/1453/1034\nf 1435/1454/846 1475/1534/846 1474/1535/846 1434/1455/846\nf 1436/1456/1034 1476/1536/1034 1475/1537/1034 1435/1457/1034\nf 1437/1458/846 1477/1538/846 1476/1539/846 1436/1459/846\nf 1438/1460/1034 1478/1540/1034 1477/1541/1034 1437/1461/1034\nf 1439/1462/846 1479/1542/846 1478/1543/846 1438/1463/846\nf 1440/1464/1034 1480/1544/1034 1479/1545/1034 1439/1465/1034\nf 1441/1466/846 1481/1546/846 1480/1547/846 1440/1467/846\nf 1442/1468/1034 1482/1548/1034 1481/1549/1034 1441/1469/1034\nf 1443/1470/846 1483/1550/846 1482/1551/846 1442/1471/846\nf 1444/1472/1034 1484/1552/1034 1483/1553/1034 1443/1473/1034\nf 1445/1474/846 1485/1554/846 1484/1555/846 1444/1475/846\nf 1446/1476/1034 1486/1556/1034 1485/1557/1034 1445/1477/1034\nf 1447/1478/846 1487/1558/846 1486/1559/846 1446/1479/846\nf 1448/1480/1034 1488/1560/1034 1487/1561/1034 1447/1481/1034\nf 1449/1482/846 1489/1562/846 1488/1563/846 1448/1483/846\nf 1450/1484/1034 1490/1564/1034 1489/1565/1034 1449/1485/1034\nf 1451/1486/846 1491/1566/846 1490/1567/846 1450/1487/846\nf 1452/1488/1034 1492/1568/1034 1491/1569/1034 1451/1489/1034\nf 1453/1490/846 1493/1570/846 1492/1571/846 1452/1491/846\nf 1454/1492/1034 1494/1572/1034 1493/1573/1034 1453/1493/1034\nf 1455/1494/846 1495/1574/846 1494/1575/846 1454/1495/846\nf 1456/1496/1034 1496/1576/1034 1495/1577/1034 1455/1497/1034\nf 1457/1498/846 1497/1578/846 1496/1579/846 1456/1499/846\nf 1458/1500/1034 1498/1580/1034 1497/1581/1034 1457/1501/1034\nf 1459/1502/846 1499/1582/846 1498/1583/846 1458/1503/846\nf 1460/1504/1034 1500/1584/1034 1499/1585/1034 1459/1505/1034\nf 1461/1506/846 1501/1586/846 1500/1587/846 1460/1507/846\nf 1462/1508/1034 1502/1588/1034 1501/1589/1034 1461/1509/1034\nf 1463/1510/846 1503/1590/846 1502/1591/846 1462/1511/846\nf 1464/1512/1034 1504/1592/1034 1503/1593/1034 1463/1513/1034\nf 1465/1514/846 1505/1594/846 1504/1595/846 1464/1515/846\nf 1466/1516/1034 1506/1596/1034 1505/1597/1034 1465/1517/1034\nf 1467/1518/846 1507/1598/846 1506/1599/846 1466/1519/846\nf 1429/1520/1035 1469/1600/1035 1507/1601/1035 1467/1521/1035\nf 1468/1522/844 1508/1602/844 1509/1603/844 1469/1523/844\nf 1470/1524/1036 1510/1604/1036 1508/1605/1036 1468/1525/1036\nf 1471/1526/846 1511/1606/846 1510/1607/846 1470/1527/846\nf 1472/1528/1037 1512/1608/1037 1511/1609/1037 1471/1529/1037\nf 1473/1530/846 1513/1610/846 1512/1611/846 1472/1531/846\nf 1474/1532/1038 1514/1612/1038 1513/1613/1038 1473/1533/1038\nf 1475/1534/846 1515/1614/846 1514/1615/846 1474/1535/846\nf 1476/1536/1039 1516/1616/1039 1515/1617/1039 1475/1537/1039\nf 1477/1538/846 1517/1618/846 1516/1619/846 1476/1539/846\nf 1478/1540/1040 1518/1620/1040 1517/1621/1040 1477/1541/1040\nf 1479/1542/846 1519/1622/846 1518/1623/846 1478/1543/846\nf 1480/1544/1041 1520/1624/1041 1519/1625/1041 1479/1545/1041\nf 1481/1546/846 1521/1626/846 1520/1627/846 1480/1547/846\nf 1482/1548/1042 1522/1628/1042 1521/1629/1042 1481/1549/1042\nf 1483/1550/846 1523/1630/846 1522/1631/846 1482/1551/846\nf 1484/1552/1043 1524/1632/1043 1523/1633/1043 1483/1553/1043\nf 1485/1554/846 1525/1634/846 1524/1635/846 1484/1555/846\nf 1486/1556/1044 1526/1636/1044 1525/1637/1044 1485/1557/1044\nf 1487/1558/846 1527/1638/846 1526/1639/846 1486/1559/846\nf 1488/1560/1045 1528/1640/1045 1527/1641/1045 1487/1561/1045\nf 1489/1562/846 1529/1642/846 1528/1643/846 1488/1563/846\nf 1490/1564/1046 1530/1644/1046 1529/1645/1046 1489/1565/1046\nf 1491/1566/846 1531/1646/846 1530/1647/846 1490/1567/846\nf 1492/1568/1047 1532/1648/1047 1531/1649/1047 1491/1569/1047\nf 1493/1570/846 1533/1650/846 1532/1651/846 1492/1571/846\nf 1494/1572/1048 1534/1652/1048 1533/1653/1048 1493/1573/1048\nf 1495/1574/846 1535/1654/846 1534/1655/846 1494/1575/846\nf 1496/1576/1049 1536/1656/1049 1535/1657/1049 1495/1577/1049\nf 1497/1578/846 1537/1658/846 1536/1659/846 1496/1579/846\nf 1498/1580/1050 1538/1660/1050 1537/1661/1050 1497/1581/1050\nf 1499/1582/846 1539/1662/846 1538/1663/846 1498/1583/846\nf 1500/1584/1051 1540/1664/1051 1539/1665/1051 1499/1585/1051\nf 1501/1586/846 1541/1666/846 1540/1667/846 1500/1587/846\nf 1502/1588/1052 1542/1668/1052 1541/1669/1052 1501/1589/1052\nf 1503/1590/846 1543/1670/846 1542/1671/846 1502/1591/846\nf 1504/1592/1053 1544/1672/1053 1543/1673/1053 1503/1593/1053\nf 1505/1594/846 1545/1674/846 1544/1675/846 1504/1595/846\nf 1506/1596/1054 1546/1676/1054 1545/1677/1054 1505/1597/1054\nf 1507/1598/846 1547/1678/846 1546/1679/846 1506/1599/846\nf 1469/1600/1055 1509/1680/1055 1547/1681/1055 1507/1601/1055\nf 1508/1602/844 1548/1682/844 1549/1683/844 1509/1603/844\nf 1510/1604/1056 1550/1684/1056 1548/1685/1056 1508/1605/1056\nf 1511/1606/846 1551/1686/846 1550/1687/846 1510/1607/846\nf 1512/1608/1057 1552/1688/1057 1551/1689/1057 1511/1609/1057\nf 1513/1610/846 1553/1690/846 1552/1691/846 1512/1611/846\nf 1514/1612/1058 1554/1692/1058 1553/1693/1058 1513/1613/1058\nf 1515/1614/846 1555/1694/846 1554/1695/846 1514/1615/846\nf 1516/1616/1059 1556/1696/1059 1555/1697/1059 1515/1617/1059\nf 1517/1618/846 1557/1698/846 1556/1699/846 1516/1619/846\nf 1518/1620/1060 1558/1700/1060 1557/1701/1060 1517/1621/1060\nf 1519/1622/846 1559/1702/846 1558/1703/846 1518/1623/846\nf 1520/1624/1061 1560/1704/1061 1559/1705/1061 1519/1625/1061\nf 1521/1626/846 1561/1706/846 1560/1707/846 1520/1627/846\nf 1522/1628/1062 1562/1708/1062 1561/1709/1062 1521/1629/1062\nf 1523/1630/846 1563/1710/846 1562/1711/846 1522/1631/846\nf 1524/1632/1062 1564/1712/1062 1563/1713/1062 1523/1633/1062\nf 1525/1634/846 1565/1714/846 1564/1715/846 1524/1635/846\nf 1526/1636/1063 1566/1716/1063 1565/1717/1063 1525/1637/1063\nf 1527/1638/846 1567/1718/846 1566/1719/846 1526/1639/846\nf 1528/1640/1064 1568/1720/1064 1567/1721/1064 1527/1641/1064\nf 1529/1642/846 1569/1722/846 1568/1723/846 1528/1643/846\nf 1530/1644/1065 1570/1724/1065 1569/1725/1065 1529/1645/1065\nf 1531/1646/846 1571/1726/846 1570/1727/846 1530/1647/846\nf 1532/1648/1065 1572/1728/1065 1571/1729/1065 1531/1649/1065\nf 1533/1650/846 1573/1730/846 1572/1731/846 1532/1651/846\nf 1534/1652/1065 1574/1732/1065 1573/1733/1065 1533/1653/1065\nf 1535/1654/846 1575/1734/846 1574/1735/846 1534/1655/846\nf 1536/1656/1066 1576/1736/1066 1575/1737/1066 1535/1657/1066\nf 1537/1658/846 1577/1738/846 1576/1739/846 1536/1659/846\nf 1538/1660/1066 1578/1740/1066 1577/1741/1066 1537/1661/1066\nf 1539/1662/846 1579/1742/846 1578/1743/846 1538/1663/846\nf 1540/1664/1067 1580/1744/1067 1579/1745/1067 1539/1665/1067\nf 1541/1666/846 1581/1746/846 1580/1747/846 1540/1667/846\nf 1542/1668/1068 1582/1748/1068 1581/1749/1068 1541/1669/1068\nf 1543/1670/846 1583/1750/846 1582/1751/846 1542/1671/846\nf 1544/1672/1068 1584/1752/1068 1583/1753/1068 1543/1673/1068\nf 1545/1674/846 1585/1754/846 1584/1755/846 1544/1675/846\nf 1546/1676/1068 1586/1756/1068 1585/1757/1068 1545/1677/1068\nf 1547/1678/846 1587/1758/846 1586/1759/846 1546/1679/846\nf 1509/1680/1069 1549/1760/1069 1587/1761/1069 1547/1681/1069\nf 1548/1682/844 1588/1762/844 1589/1763/844 1549/1683/844\nf 1550/1684/1070 1590/1764/1070 1588/1765/1070 1548/1685/1070\nf 1551/1686/846 1591/1766/846 1590/1767/846 1550/1687/846\nf 1552/1688/1071 1592/1768/1071 1591/1769/1071 1551/1689/1071\nf 1553/1690/846 1593/1770/846 1592/1771/846 1552/1691/846\nf 1554/1692/1072 1594/1772/1072 1593/1773/1072 1553/1693/1072\nf 1555/1694/846 1595/1774/846 1594/1775/846 1554/1695/846\nf 1556/1696/1073 1596/1776/1073 1595/1777/1073 1555/1697/1073\nf 1557/1698/846 1597/1778/846 1596/1779/846 1556/1699/846\nf 1558/1700/1074 1598/1780/1074 1597/1781/1074 1557/1701/1074\nf 1559/1702/846 1599/1782/846 1598/1783/846 1558/1703/846\nf 1560/1704/1075 1600/1784/1075 1599/1785/1075 1559/1705/1075\nf 1561/1706/846 1601/1786/846 1600/1787/846 1560/1707/846\nf 1562/1708/1076 1602/1788/1076 1601/1789/1076 1561/1709/1076\nf 1563/1710/846 1603/1790/846 1602/1791/846 1562/1711/846\nf 1564/1712/1077 1604/1792/1077 1603/1793/1077 1563/1713/1077\nf 1565/1714/846 1605/1794/846 1604/1795/846 1564/1715/846\nf 1566/1716/1078 1606/1796/1078 1605/1797/1078 1565/1717/1078\nf 1567/1718/846 1607/1798/846 1606/1799/846 1566/1719/846\nf 1568/1720/1079 1608/1800/1079 1607/1801/1079 1567/1721/1079\nf 1569/1722/846 1609/1802/846 1608/1803/846 1568/1723/846\nf 1570/1724/1080 1610/1804/1080 1609/1805/1080 1569/1725/1080\nf 1571/1726/846 1611/1806/846 1610/1807/846 1570/1727/846\nf 1572/1728/1080 1612/1808/1080 1611/1809/1080 1571/1729/1080\nf 1573/1730/846 1613/1810/846 1612/1811/846 1572/1731/846\nf 1574/1732/1081 1614/1812/1081 1613/1813/1081 1573/1733/1081\nf 1575/1734/846 1615/1814/846 1614/1815/846 1574/1735/846\nf 1576/1736/1081 1616/1816/1081 1615/1817/1081 1575/1737/1081\nf 1577/1738/846 1617/1818/846 1616/1819/846 1576/1739/846\nf 1578/1740/1081 1618/1820/1081 1617/1821/1081 1577/1741/1081\nf 1579/1742/846 1619/1822/846 1618/1823/846 1578/1743/846\nf 1580/1744/1082 1620/1824/1082 1619/1825/1082 1579/1745/1082\nf 1581/1746/846 1621/1826/846 1620/1827/846 1580/1747/846\nf 1582/1748/1082 1622/1828/1082 1621/1829/1082 1581/1749/1082\nf 1583/1750/846 1623/1830/846 1622/1831/846 1582/1751/846\nf 1584/1752/1082 1624/1832/1082 1623/1833/1082 1583/1753/1082\nf 1585/1754/846 1625/1834/846 1624/1835/846 1584/1755/846\nf 1586/1756/1083 1626/1836/1083 1625/1837/1083 1585/1757/1083\nf 1587/1758/846 1627/1838/846 1626/1839/846 1586/1759/846\nf 1549/1760/1084 1589/1840/1084 1627/1841/1084 1587/1761/1084\nf 1588/1762/844 1628/1842/844 1629/1843/844 1589/1763/844\nf 1590/1764/1085 1630/1844/1085 1628/1845/1085 1588/1765/1085\nf 1591/1766/846 1631/1846/846 1630/1847/846 1590/1767/846\nf 1592/1768/1086 1632/1848/1086 1631/1849/1086 1591/1769/1086\nf 1593/1770/846 1633/1850/846 1632/1851/846 1592/1771/846\nf 1594/1772/1087 1634/1852/1087 1633/1853/1087 1593/1773/1087\nf 1595/1774/846 1635/1854/846 1634/1855/846 1594/1775/846\nf 1596/1776/1088 1636/1856/1088 1635/1857/1088 1595/1777/1088\nf 1597/1778/846 1637/1858/846 1636/1859/846 1596/1779/846\nf 1598/1780/1088 1638/1860/1088 1637/1861/1088 1597/1781/1088\nf 1599/1782/846 1639/1862/846 1638/1863/846 1598/1783/846\nf 1600/1784/1089 1640/1864/1089 1639/1865/1089 1599/1785/1089\nf 1601/1786/846 1641/1866/846 1640/1867/846 1600/1787/846\nf 1602/1788/1090 1642/1868/1090 1641/1869/1090 1601/1789/1090\nf 1603/1790/846 1643/1870/846 1642/1871/846 1602/1791/846\nf 1604/1792/1090 1644/1872/1090 1643/1873/1090 1603/1793/1090\nf 1605/1794/846 1645/1874/846 1644/1875/846 1604/1795/846\nf 1606/1796/1091 1646/1876/1091 1645/1877/1091 1605/1797/1091\nf 1607/1798/846 1647/1878/846 1646/1879/846 1606/1799/846\nf 1608/1800/1092 1648/1880/1092 1647/1881/1092 1607/1801/1092\nf 1609/1802/846 1649/1882/846 1648/1883/846 1608/1803/846\nf 1610/1804/1092 1650/1884/1092 1649/1885/1092 1609/1805/1092\nf 1611/1806/846 1651/1886/846 1650/1887/846 1610/1807/846\nf 1612/1808/1092 1652/1888/1092 1651/1889/1092 1611/1809/1092\nf 1613/1810/846 1653/1890/846 1652/1891/846 1612/1811/846\nf 1614/1812/1093 1654/1892/1093 1653/1893/1093 1613/1813/1093\nf 1615/1814/846 1655/1894/846 1654/1895/846 1614/1815/846\nf 1616/1816/1093 1656/1896/1093 1655/1897/1093 1615/1817/1093\nf 1617/1818/846 1657/1898/846 1656/1899/846 1616/1819/846\nf 1618/1820/1093 1658/1900/1093 1657/1901/1093 1617/1821/1093\nf 1619/1822/846 1659/1902/846 1658/1903/846 1618/1823/846\nf 1620/1824/1093 1660/1904/1093 1659/1905/1093 1619/1825/1093\nf 1621/1826/846 1661/1906/846 1660/1907/846 1620/1827/846\nf 1622/1828/1094 1662/1908/1094 1661/1909/1094 1621/1829/1094\nf 1623/1830/846 1663/1910/846 1662/1911/846 1622/1831/846\nf 1624/1832/1095 1664/1912/1095 1663/1913/1095 1623/1833/1095\nf 1625/1834/846 1665/1914/846 1664/1915/846 1624/1835/846\nf 1626/1836/1095 1666/1916/1095 1665/1917/1095 1625/1837/1095\nf 1627/1838/846 1667/1918/846 1666/1919/846 1626/1839/846\nf 1589/1840/1096 1629/1920/1096 1667/1921/1096 1627/1841/1096\nf 1628/1842/844 1668/1922/844 1669/1923/844 1629/1843/844\nf 1630/1844/1097 1670/1924/1097 1668/1925/1097 1628/1845/1097\nf 1631/1846/846 1671/1926/846 1670/1927/846 1630/1847/846\nf 1632/1848/1098 1672/1928/1098 1671/1929/1098 1631/1849/1098\nf 1633/1850/846 1673/1930/846 1672/1931/846 1632/1851/846\nf 1634/1852/1099 1674/1932/1099 1673/1933/1099 1633/1853/1099\nf 1635/1854/846 1675/1934/846 1674/1935/846 1634/1855/846\nf 1636/1856/1100 1676/1936/1100 1675/1937/1100 1635/1857/1100\nf 1637/1858/846 1677/1938/846 1676/1939/846 1636/1859/846\nf 1638/1860/1100 1678/1940/1100 1677/1941/1100 1637/1861/1100\nf 1639/1862/846 1679/1942/846 1678/1943/846 1638/1863/846\nf 1640/1864/1101 1680/1944/1101 1679/1945/1101 1639/1865/1101\nf 1641/1866/846 1681/1946/846 1680/1947/846 1640/1867/846\nf 1642/1868/1101 1682/1948/1101 1681/1949/1101 1641/1869/1101\nf 1643/1870/846 1683/1950/846 1682/1951/846 1642/1871/846\nf 1644/1872/1101 1684/1952/1101 1683/1953/1101 1643/1873/1101\nf 1645/1874/846 1685/1954/846 1684/1955/846 1644/1875/846\nf 1646/1876/1102 1686/1956/1102 1685/1957/1102 1645/1877/1102\nf 1647/1878/846 1687/1958/846 1686/1959/846 1646/1879/846\nf 1648/1880/1103 1688/1960/1103 1687/1961/1103 1647/1881/1103\nf 1649/1882/846 1689/1962/846 1688/1963/846 1648/1883/846\nf 1650/1884/1103 1690/1964/1103 1689/1965/1103 1649/1885/1103\nf 1651/1886/846 1691/1966/846 1690/1967/846 1650/1887/846\nf 1652/1888/1103 1692/1968/1103 1691/1969/1103 1651/1889/1103\nf 1653/1890/846 1693/1970/846 1692/1971/846 1652/1891/846\nf 1654/1892/1104 1694/1972/1104 1693/1973/1104 1653/1893/1104\nf 1655/1894/846 1695/1974/846 1694/1975/846 1654/1895/846\nf 1656/1896/1104 1696/1976/1104 1695/1977/1104 1655/1897/1104\nf 1657/1898/846 1697/1978/846 1696/1979/846 1656/1899/846\nf 1658/1900/1104 1698/1980/1104 1697/1981/1104 1657/1901/1104\nf 1659/1902/846 1699/1982/846 1698/1983/846 1658/1903/846\nf 1660/1904/1104 1700/1984/1104 1699/1985/1104 1659/1905/1104\nf 1661/1906/846 1701/1986/846 1700/1987/846 1660/1907/846\nf 1662/1908/1104 1702/1988/1104 1701/1989/1104 1661/1909/1104\nf 1663/1910/846 1703/1990/846 1702/1991/846 1662/1911/846\nf 1664/1912/1104 1704/1992/1104 1703/1993/1104 1663/1913/1104\nf 1665/1914/846 1705/1994/846 1704/1995/846 1664/1915/846\nf 1666/1916/1104 1706/1996/1104 1705/1997/1104 1665/1917/1104\nf 1667/1918/846 1707/1998/846 1706/1999/846 1666/1919/846\nf 1629/1920/1105 1669/2000/1105 1707/2001/1105 1667/1921/1105\nf 1668/1922/844 1708/2002/844 1709/2003/844 1669/1923/844\nf 1670/1924/1106 1710/2004/1106 1708/2005/1106 1668/1925/1106\nf 1671/1926/846 1711/2006/846 1710/2007/846 1670/1927/846\nf 1672/1928/1106 1712/2008/1106 1711/2009/1106 1671/1929/1106\nf 1673/1930/846 1713/2010/846 1712/2011/846 1672/1931/846\nf 1674/1932/1106 1714/2012/1106 1713/2013/1106 1673/1933/1106\nf 1675/1934/846 1715/2014/846 1714/2015/846 1674/1935/846\nf 1676/1936/1107 1716/2016/1107 1715/2017/1107 1675/1937/1107\nf 1677/1938/846 1717/2018/846 1716/2019/846 1676/1939/846\nf 1678/1940/1107 1718/2020/1107 1717/2021/1107 1677/1941/1107\nf 1679/1942/846 1719/2022/846 1718/2023/846 1678/1943/846\nf 1680/1944/1107 1720/2024/1107 1719/2025/1107 1679/1945/1107\nf 1681/1946/846 1721/2026/846 1720/2027/846 1680/1947/846\nf 1682/1948/1107 1722/2028/1107 1721/2029/1107 1681/1949/1107\nf 1683/1950/846 1723/2030/846 1722/2031/846 1682/1951/846\nf 1684/1952/1107 1724/2032/1107 1723/2033/1107 1683/1953/1107\nf 1685/1954/846 1725/2034/846 1724/2035/846 1684/1955/846\nf 1686/1956/1107 1726/2036/1107 1725/2037/1107 1685/1957/1107\nf 1687/1958/846 1727/2038/846 1726/2039/846 1686/1959/846\nf 1688/1960/1107 1728/2040/1107 1727/2041/1107 1687/1961/1107\nf 1689/1962/846 1729/2042/846 1728/2043/846 1688/1963/846\nf 1690/1964/1107 1730/2044/1107 1729/2045/1107 1689/1965/1107\nf 1691/1966/846 1731/2046/846 1730/2047/846 1690/1967/846\nf 1692/1968/1107 1732/2048/1107 1731/2049/1107 1691/1969/1107\nf 1693/1970/846 1733/2050/846 1732/2051/846 1692/1971/846\nf 1694/1972/1107 1734/2052/1107 1733/2053/1107 1693/1973/1107\nf 1695/1974/846 1735/2054/846 1734/2055/846 1694/1975/846\nf 1696/1976/1107 1736/2056/1107 1735/2057/1107 1695/1977/1107\nf 1697/1978/846 1737/2058/846 1736/2059/846 1696/1979/846\nf 1698/1980/1108 1738/2060/1108 1737/2061/1108 1697/1981/1108\nf 1699/1982/846 1739/2062/846 1738/2063/846 1698/1983/846\nf 1700/1984/1108 1740/2064/1108 1739/2065/1108 1699/1985/1108\nf 1701/1986/846 1741/2066/846 1740/2067/846 1700/1987/846\nf 1702/1988/1108 1742/2068/1108 1741/2069/1108 1701/1989/1108\nf 1703/1990/846 1743/2070/846 1742/2071/846 1702/1991/846\nf 1704/1992/1108 1744/2072/1108 1743/2073/1108 1703/1993/1108\nf 1705/1994/846 1745/2074/846 1744/2075/846 1704/1995/846\nf 1706/1996/1108 1746/2076/1108 1745/2077/1108 1705/1997/1108\nf 1707/1998/846 1747/2078/846 1746/2079/846 1706/1999/846\nf 1669/2080/1109 1709/2081/1109 1747/2082/1109 1707/2083/1109\nf 1708/2002/844 1748/2084/844 1749/2085/844 1709/2003/844\nf 1710/2004/1110 1750/2086/1110 1748/2087/1110 1708/2005/1110\nf 1711/2006/846 1751/2088/846 1750/2089/846 1710/2007/846\nf 1712/2008/1111 1752/2090/1111 1751/2091/1111 1711/2009/1111\nf 1713/2010/846 1753/2092/846 1752/2093/846 1712/2011/846\nf 1714/2012/1112 1754/2094/1112 1753/2095/1112 1713/2013/1112\nf 1715/2014/846 1755/2096/846 1754/2097/846 1714/2015/846\nf 1716/2016/1112 1756/2098/1112 1755/2099/1112 1715/2017/1112\nf 1717/2018/846 1757/2100/846 1756/2101/846 1716/2019/846\nf 1718/2020/1113 1758/2102/1113 1757/2103/1113 1717/2021/1113\nf 1719/2022/846 1759/2104/846 1758/2105/846 1718/2023/846\nf 1720/2024/1113 1760/2106/1113 1759/2107/1113 1719/2025/1113\nf 1721/2026/846 1761/2108/846 1760/2109/846 1720/2027/846\nf 1722/2028/1114 1762/2110/1114 1761/2111/1114 1721/2029/1114\nf 1723/2030/846 1763/2112/846 1762/2113/846 1722/2031/846\nf 1724/2032/1114 1764/2114/1114 1763/2115/1114 1723/2033/1114\nf 1725/2034/846 1765/2116/846 1764/2117/846 1724/2035/846\nf 1726/2036/1114 1766/2118/1114 1765/2119/1114 1725/2037/1114\nf 1727/2038/846 1767/2120/846 1766/2121/846 1726/2039/846\nf 1728/2040/1114 1768/2122/1114 1767/2123/1114 1727/2041/1114\nf 1729/2042/846 1769/2124/846 1768/2125/846 1728/2043/846\nf 1730/2044/1114 1770/2126/1114 1769/2127/1114 1729/2045/1114\nf 1731/2046/846 1771/2128/846 1770/2129/846 1730/2047/846\nf 1732/2048/1114 1772/2130/1114 1771/2131/1114 1731/2049/1114\nf 1733/2050/846 1773/2132/846 1772/2133/846 1732/2051/846\nf 1734/2052/1114 1774/2134/1114 1773/2135/1114 1733/2053/1114\nf 1735/2054/846 1775/2136/846 1774/2137/846 1734/2055/846\nf 1736/2056/1115 1776/2138/1115 1775/2139/1115 1735/2057/1115\nf 1737/2058/846 1777/2140/846 1776/2141/846 1736/2059/846\nf 1738/2060/1115 1778/2142/1115 1777/2143/1115 1737/2061/1115\nf 1739/2062/846 1779/2144/846 1778/2145/846 1738/2063/846\nf 1740/2064/1115 1780/2146/1115 1779/2147/1115 1739/2065/1115\nf 1741/2066/846 1781/2148/846 1780/2149/846 1740/2067/846\nf 1742/2068/1115 1782/2150/1115 1781/2151/1115 1741/2069/1115\nf 1743/2070/846 1783/2152/846 1782/2153/846 1742/2071/846\nf 1744/2072/1115 1784/2154/1115 1783/2155/1115 1743/2073/1115\nf 1745/2074/846 1785/2156/846 1784/2157/846 1744/2075/846\nf 1746/2076/1115 1786/2158/1115 1785/2159/1115 1745/2077/1115\nf 1747/2078/846 1787/2160/846 1786/2161/846 1746/2079/846\nf 1709/2081/1116 1749/2162/1116 1787/2163/1116 1747/2082/1116\nf 1748/2084/844 1788/2164/844 1789/2165/844 1749/2085/844\nf 1750/2086/1117 1790/2166/1117 1788/2167/1117 1748/2087/1117\nf 1751/2088/846 1791/2168/846 1790/2169/846 1750/2089/846\nf 1752/2090/1118 1792/2170/1118 1791/2171/1118 1751/2091/1118\nf 1753/2092/846 1793/2172/846 1792/2173/846 1752/2093/846\nf 1754/2094/1119 1794/2174/1119 1793/2175/1119 1753/2095/1119\nf 1755/2096/846 1795/2176/846 1794/2177/846 1754/2097/846\nf 1756/2098/1120 1796/2178/1120 1795/2179/1120 1755/2099/1120\nf 1757/2100/846 1797/2180/846 1796/2181/846 1756/2101/846\nf 1758/2102/1121 1798/2182/1121 1797/2183/1121 1757/2103/1121\nf 1759/2104/846 1799/2184/846 1798/2185/846 1758/2105/846\nf 1760/2106/1122 1800/2186/1122 1799/2187/1122 1759/2107/1122\nf 1761/2108/846 1801/2188/846 1800/2189/846 1760/2109/846\nf 1762/2110/1122 1802/2190/1122 1801/2191/1122 1761/2111/1122\nf 1763/2112/846 1803/2192/846 1802/2193/846 1762/2113/846\nf 1764/2114/1122 1804/2194/1122 1803/2195/1122 1763/2115/1122\nf 1765/2116/846 1805/2196/846 1804/2197/846 1764/2117/846\nf 1766/2118/1123 1806/2198/1123 1805/2199/1123 1765/2119/1123\nf 1767/2120/846 1807/2200/846 1806/2201/846 1766/2121/846\nf 1768/2122/1123 1808/2202/1123 1807/2203/1123 1767/2123/1123\nf 1769/2124/846 1809/2204/846 1808/2205/846 1768/2125/846\nf 1770/2126/1124 1810/2206/1124 1809/2207/1124 1769/2127/1124\nf 1771/2128/846 1811/2208/846 1810/2209/846 1770/2129/846\nf 1772/2130/1125 1812/2210/1125 1811/2211/1125 1771/2131/1125\nf 1773/2132/846 1813/2212/846 1812/2213/846 1772/2133/846\nf 1774/2134/1125 1814/2214/1125 1813/2215/1125 1773/2135/1125\nf 1775/2136/846 1815/2216/846 1814/2217/846 1774/2137/846\nf 1776/2138/1125 1816/2218/1125 1815/2219/1125 1775/2139/1125\nf 1777/2140/846 1817/2220/846 1816/2221/846 1776/2141/846\nf 1778/2142/1126 1818/2222/1126 1817/2223/1126 1777/2143/1126\nf 1779/2144/846 1819/2224/846 1818/2225/846 1778/2145/846\nf 1780/2146/1126 1820/2226/1126 1819/2227/1126 1779/2147/1126\nf 1781/2148/846 1821/2228/846 1820/2229/846 1780/2149/846\nf 1782/2150/1126 1822/2230/1126 1821/2231/1126 1781/2151/1126\nf 1783/2152/846 1823/2232/846 1822/2233/846 1782/2153/846\nf 1784/2154/1126 1824/2234/1126 1823/2235/1126 1783/2155/1126\nf 1785/2156/846 1825/2236/846 1824/2237/846 1784/2157/846\nf 1786/2158/1126 1826/2238/1126 1825/2239/1126 1785/2159/1126\nf 1787/2160/846 1827/2240/846 1826/2241/846 1786/2161/846\nf 1749/2162/1127 1789/2242/1127 1827/2243/1127 1787/2163/1127\nf 1788/2164/844 1828/2244/844 1829/2245/844 1789/2165/844\nf 1790/2166/1128 1830/2246/1128 1828/2247/1128 1788/2167/1128\nf 1791/2168/846 1831/2248/846 1830/2249/846 1790/2169/846\nf 1792/2170/1129 1832/2250/1129 1831/2251/1129 1791/2171/1129\nf 1793/2172/846 1833/2252/846 1832/2253/846 1792/2173/846\nf 1794/2174/1130 1834/2254/1130 1833/2255/1130 1793/2175/1130\nf 1795/2176/846 1835/2256/846 1834/2257/846 1794/2177/846\nf 1796/2178/1131 1836/2258/1131 1835/2259/1131 1795/2179/1131\nf 1797/2180/846 1837/2260/846 1836/2261/846 1796/2181/846\nf 1798/2182/1132 1838/2262/1132 1837/2263/1132 1797/2183/1132\nf 1799/2184/846 1839/2264/846 1838/2265/846 1798/2185/846\nf 1800/2186/1133 1840/2266/1133 1839/2267/1133 1799/2187/1133\nf 1801/2188/846 1841/2268/846 1840/2269/846 1800/2189/846\nf 1802/2190/1134 1842/2270/1134 1841/2271/1134 1801/2191/1134\nf 1803/2192/846 1843/2272/846 1842/2273/846 1802/2193/846\nf 1804/2194/1135 1844/2274/1135 1843/2275/1135 1803/2195/1135\nf 1805/2196/846 1845/2276/846 1844/2277/846 1804/2197/846\nf 1806/2198/1136 1846/2278/1136 1845/2279/1136 1805/2199/1136\nf 1807/2200/846 1847/2280/846 1846/2281/846 1806/2201/846\nf 1808/2202/1137 1848/2282/1137 1847/2283/1137 1807/2203/1137\nf 1809/2204/846 1849/2284/846 1848/2285/846 1808/2205/846\nf 1810/2206/1138 1850/2286/1138 1849/2287/1138 1809/2207/1138\nf 1811/2208/846 1851/2288/846 1850/2289/846 1810/2209/846\nf 1812/2210/1139 1852/2290/1139 1851/2291/1139 1811/2211/1139\nf 1813/2212/846 1853/2292/846 1852/2293/846 1812/2213/846\nf 1814/2214/1140 1854/2294/1140 1853/2295/1140 1813/2215/1140\nf 1815/2216/846 1855/2296/846 1854/2297/846 1814/2217/846\nf 1816/2218/1140 1856/2298/1140 1855/2299/1140 1815/2219/1140\nf 1817/2220/846 1857/2300/846 1856/2301/846 1816/2221/846\nf 1818/2222/1140 1858/2302/1140 1857/2303/1140 1817/2223/1140\nf 1819/2224/846 1859/2304/846 1858/2305/846 1818/2225/846\nf 1820/2226/1141 1860/2306/1141 1859/2307/1141 1819/2227/1141\nf 1821/2228/846 1861/2308/846 1860/2309/846 1820/2229/846\nf 1822/2230/1142 1862/2310/1142 1861/2311/1142 1821/2231/1142\nf 1823/2232/846 1863/2312/846 1862/2313/846 1822/2233/846\nf 1824/2234/1142 1864/2314/1142 1863/2315/1142 1823/2235/1142\nf 1825/2236/846 1865/2316/846 1864/2317/846 1824/2237/846\nf 1826/2238/1143 1866/2318/1143 1865/2319/1143 1825/2239/1143\nf 1827/2240/846 1867/2320/846 1866/2321/846 1826/2241/846\nf 1789/2242/1144 1829/2322/1144 1867/2323/1144 1827/2243/1144\nf 1828/2244/844 1868/2324/844 1869/2325/844 1829/2245/844\nf 1830/2246/1145 1870/2326/1145 1868/2327/1145 1828/2247/1145\nf 1831/2248/846 1871/2328/846 1870/2329/846 1830/2249/846\nf 1832/2250/1146 1872/2330/1146 1871/2331/1146 1831/2251/1146\nf 1833/2252/846 1873/2332/846 1872/2333/846 1832/2253/846\nf 1834/2254/1147 1874/2334/1147 1873/2335/1147 1833/2255/1147\nf 1835/2256/846 1875/2336/846 1874/2337/846 1834/2257/846\nf 1836/2258/1148 1876/2338/1148 1875/2339/1148 1835/2259/1148\nf 1837/2260/846 1877/2340/846 1876/2341/846 1836/2261/846\nf 1838/2262/1149 1878/2342/1149 1877/2343/1149 1837/2263/1149\nf 1839/2264/846 1879/2344/846 1878/2345/846 1838/2265/846\nf 1840/2266/1150 1880/2346/1150 1879/2347/1150 1839/2267/1150\nf 1841/2268/846 1881/2348/846 1880/2349/846 1840/2269/846\nf 1842/2270/1151 1882/2350/1151 1881/2351/1151 1841/2271/1151\nf 1843/2272/846 1883/2352/846 1882/2353/846 1842/2273/846\nf 1844/2274/1152 1884/2354/1152 1883/2355/1152 1843/2275/1152\nf 1845/2276/846 1885/2356/846 1884/2357/846 1844/2277/846\nf 1846/2278/1153 1886/2358/1153 1885/2359/1153 1845/2279/1153\nf 1847/2280/846 1887/2360/846 1886/2361/846 1846/2281/846\nf 1848/2282/1154 1888/2362/1154 1887/2363/1154 1847/2283/1154\nf 1849/2284/846 1889/2364/846 1888/2365/846 1848/2285/846\nf 1850/2286/1154 1890/2366/1154 1889/2367/1154 1849/2287/1154\nf 1851/2288/846 1891/2368/846 1890/2369/846 1850/2289/846\nf 1852/2290/1155 1892/2370/1155 1891/2371/1155 1851/2291/1155\nf 1853/2292/846 1893/2372/846 1892/2373/846 1852/2293/846\nf 1854/2294/1156 1894/2374/1156 1893/2375/1156 1853/2295/1156\nf 1855/2296/846 1895/2376/846 1894/2377/846 1854/2297/846\nf 1856/2298/1157 1896/2378/1157 1895/2379/1157 1855/2299/1157\nf 1857/2300/846 1897/2380/846 1896/2381/846 1856/2301/846\nf 1858/2302/1157 1898/2382/1157 1897/2383/1157 1857/2303/1157\nf 1859/2304/846 1899/2384/846 1898/2385/846 1858/2305/846\nf 1860/2306/1158 1900/2386/1158 1899/2387/1158 1859/2307/1158\nf 1861/2308/846 1901/2388/846 1900/2389/846 1860/2309/846\nf 1862/2310/1159 1902/2390/1159 1901/2391/1159 1861/2311/1159\nf 1863/2312/846 1903/2392/846 1902/2393/846 1862/2313/846\nf 1864/2314/1159 1904/2394/1159 1903/2395/1159 1863/2315/1159\nf 1865/2316/846 1905/2396/846 1904/2397/846 1864/2317/846\nf 1866/2318/1160 1906/2398/1160 1905/2399/1160 1865/2319/1160\nf 1867/2320/846 1907/2400/846 1906/2401/846 1866/2321/846\nf 1829/2322/1161 1869/2402/1161 1907/2403/1161 1867/2323/1161\nf 1868/2324/844 1908/2404/844 1909/2405/844 1869/2325/844\nf 1870/2326/1162 1910/2406/1162 1908/2407/1162 1868/2327/1162\nf 1871/2328/846 1911/2408/846 1910/2409/846 1870/2329/846\nf 1872/2330/1163 1912/2410/1163 1911/2411/1163 1871/2331/1163\nf 1873/2332/846 1913/2412/846 1912/2413/846 1872/2333/846\nf 1874/2334/1164 1914/2414/1164 1913/2415/1164 1873/2335/1164\nf 1875/2336/846 1915/2416/846 1914/2417/846 1874/2337/846\nf 1876/2338/1165 1916/2418/1165 1915/2419/1165 1875/2339/1165\nf 1877/2340/846 1917/2420/846 1916/2421/846 1876/2341/846\nf 1878/2342/1166 1918/2422/1166 1917/2423/1166 1877/2343/1166\nf 1879/2344/846 1919/2424/846 1918/2425/846 1878/2345/846\nf 1880/2346/1167 1920/2426/1167 1919/2427/1167 1879/2347/1167\nf 1881/2348/846 1921/2428/846 1920/2429/846 1880/2349/846\nf 1882/2350/1168 1922/2430/1168 1921/2431/1168 1881/2351/1168\nf 1883/2352/846 1923/2432/846 1922/2433/846 1882/2353/846\nf 1884/2354/1169 1924/2434/1169 1923/2435/1169 1883/2355/1169\nf 1885/2356/846 1925/2436/846 1924/2437/846 1884/2357/846\nf 1886/2358/1170 1926/2438/1170 1925/2439/1170 1885/2359/1170\nf 1887/2360/846 1927/2440/846 1926/2441/846 1886/2361/846\nf 1888/2362/1171 1928/2442/1171 1927/2443/1171 1887/2363/1171\nf 1889/2364/846 1929/2444/846 1928/2445/846 1888/2365/846\nf 1890/2366/1172 1930/2446/1172 1929/2447/1172 1889/2367/1172\nf 1891/2368/846 1931/2448/846 1930/2449/846 1890/2369/846\nf 1892/2370/1173 1932/2450/1173 1931/2451/1173 1891/2371/1173\nf 1893/2372/846 1933/2452/846 1932/2453/846 1892/2373/846\nf 1894/2374/1174 1934/2454/1174 1933/2455/1174 1893/2375/1174\nf 1895/2376/846 1935/2456/846 1934/2457/846 1894/2377/846\nf 1896/2378/1175 1936/2458/1175 1935/2459/1175 1895/2379/1175\nf 1897/2380/846 1937/2460/846 1936/2461/846 1896/2381/846\nf 1898/2382/1176 1938/2462/1176 1937/2463/1176 1897/2383/1176\nf 1899/2384/846 1939/2464/846 1938/2465/846 1898/2385/846\nf 1900/2386/1176 1940/2466/1176 1939/2467/1176 1899/2387/1176\nf 1901/2388/846 1941/2468/846 1940/2469/846 1900/2389/846\nf 1902/2390/1177 1942/2470/1177 1941/2471/1177 1901/2391/1177\nf 1903/2392/846 1943/2472/846 1942/2473/846 1902/2393/846\nf 1904/2394/1177 1944/2474/1177 1943/2475/1177 1903/2395/1177\nf 1905/2396/846 1945/2476/846 1944/2477/846 1904/2397/846\nf 1906/2398/1178 1946/2478/1178 1945/2479/1178 1905/2399/1178\nf 1907/2400/846 1947/2480/846 1946/2481/846 1906/2401/846\nf 1869/2402/1179 1909/2482/1179 1947/2483/1179 1907/2403/1179\nf 1908/2404/844 1948/2484/844 1949/2485/844 1909/2405/844\nf 1910/2406/1180 1950/2486/1180 1948/2487/1180 1908/2407/1180\nf 1911/2408/846 1951/2488/846 1950/2489/846 1910/2409/846\nf 1912/2410/1181 1952/2490/1181 1951/2491/1181 1911/2411/1181\nf 1913/2412/846 1953/2492/846 1952/2493/846 1912/2413/846\nf 1914/2414/1182 1954/2494/1182 1953/2495/1182 1913/2415/1182\nf 1915/2416/846 1955/2496/846 1954/2497/846 1914/2417/846\nf 1916/2418/1183 1956/2498/1183 1955/2499/1183 1915/2419/1183\nf 1917/2420/846 1957/2500/846 1956/2501/846 1916/2421/846\nf 1918/2422/1184 1958/2502/1184 1957/2503/1184 1917/2423/1184\nf 1919/2424/846 1959/2504/846 1958/2505/846 1918/2425/846\nf 1920/2426/1185 1960/2506/1185 1959/2507/1185 1919/2427/1185\nf 1921/2428/846 1961/2508/846 1960/2509/846 1920/2429/846\nf 1922/2430/1186 1962/2510/1186 1961/2511/1186 1921/2431/1186\nf 1923/2432/846 1963/2512/846 1962/2513/846 1922/2433/846\nf 1924/2434/1187 1964/2514/1187 1963/2515/1187 1923/2435/1187\nf 1925/2436/846 1965/2516/846 1964/2517/846 1924/2437/846\nf 1926/2438/1188 1966/2518/1188 1965/2519/1188 1925/2439/1188\nf 1927/2440/846 1967/2520/846 1966/2521/846 1926/2441/846\nf 1928/2442/1189 1968/2522/1189 1967/2523/1189 1927/2443/1189\nf 1929/2444/846 1969/2524/846 1968/2525/846 1928/2445/846\nf 1930/2446/1190 1970/2526/1190 1969/2527/1190 1929/2447/1190\nf 1931/2448/846 1971/2528/846 1970/2529/846 1930/2449/846\nf 1932/2450/1191 1972/2530/1191 1971/2531/1191 1931/2451/1191\nf 1933/2452/846 1973/2532/846 1972/2533/846 1932/2453/846\nf 1934/2454/1192 1974/2534/1192 1973/2535/1192 1933/2455/1192\nf 1935/2456/846 1975/2536/846 1974/2537/846 1934/2457/846\nf 1936/2458/1193 1976/2538/1193 1975/2539/1193 1935/2459/1193\nf 1937/2460/846 1977/2540/846 1976/2541/846 1936/2461/846\nf 1938/2462/1194 1978/2542/1194 1977/2543/1194 1937/2463/1194\nf 1939/2464/846 1979/2544/846 1978/2545/846 1938/2465/846\nf 1940/2466/1195 1980/2546/1195 1979/2547/1195 1939/2467/1195\nf 1941/2468/846 1981/2548/846 1980/2549/846 1940/2469/846\nf 1942/2470/1196 1982/2550/1196 1981/2551/1196 1941/2471/1196\nf 1943/2472/846 1983/2552/846 1982/2553/846 1942/2473/846\nf 1944/2474/1197 1984/2554/1197 1983/2555/1197 1943/2475/1197\nf 1945/2476/846 1985/2556/846 1984/2557/846 1944/2477/846\nf 1946/2478/1198 1986/2558/1198 1985/2559/1198 1945/2479/1198\nf 1947/2480/846 1987/2560/846 1986/2561/846 1946/2481/846\nf 1909/2482/1199 1949/2562/1199 1987/2563/1199 1947/2483/1199\nf 1948/2484/844 1988/2564/844 1989/2565/844 1949/2485/844\nf 1950/2486/1200 1990/2566/1200 1988/2567/1200 1948/2487/1200\nf 1951/2488/846 1991/2568/846 1990/2569/846 1950/2489/846\nf 1952/2490/1201 1992/2570/1201 1991/2571/1201 1951/2491/1201\nf 1953/2492/846 1993/2572/846 1992/2573/846 1952/2493/846\nf 1954/2494/1202 1994/2574/1202 1993/2575/1202 1953/2495/1202\nf 1955/2496/846 1995/2576/846 1994/2577/846 1954/2497/846\nf 1956/2498/1203 1996/2578/1203 1995/2579/1203 1955/2499/1203\nf 1957/2500/846 1997/2580/846 1996/2581/846 1956/2501/846\nf 1958/2502/1204 1998/2582/1204 1997/2583/1204 1957/2503/1204\nf 1959/2504/846 1999/2584/846 1998/2585/846 1958/2505/846\nf 1960/2506/1205 2000/2586/1205 1999/2587/1205 1959/2507/1205\nf 1961/2508/846 2001/2588/846 2000/2589/846 1960/2509/846\nf 1962/2510/1206 2002/2590/1206 2001/2591/1206 1961/2511/1206\nf 1963/2512/846 2003/2592/846 2002/2593/846 1962/2513/846\nf 1964/2514/1207 2004/2594/1207 2003/2595/1207 1963/2515/1207\nf 1965/2516/846 2005/2596/846 2004/2597/846 1964/2517/846\nf 1966/2518/1208 2006/2598/1208 2005/2599/1208 1965/2519/1208\nf 1967/2520/846 2007/2600/846 2006/2601/846 1966/2521/846\nf 1968/2522/1209 2008/2602/1209 2007/2603/1209 1967/2523/1209\nf 1969/2524/846 2009/2604/846 2008/2605/846 1968/2525/846\nf 1970/2526/1210 2010/2606/1210 2009/2607/1210 1969/2527/1210\nf 1971/2528/846 2011/2608/846 2010/2609/846 1970/2529/846\nf 1972/2530/1211 2012/2610/1211 2011/2611/1211 1971/2531/1211\nf 1973/2532/846 2013/2612/846 2012/2613/846 1972/2533/846\nf 1974/2534/869 2014/2614/869 2013/2615/869 1973/2535/869\nf 1975/2536/846 2015/2616/846 2014/2617/846 1974/2537/846\nf 1976/2538/1212 2016/2618/1212 2015/2619/1212 1975/2539/1212\nf 1977/2540/846 2017/2620/846 2016/2621/846 1976/2541/846\nf 1978/2542/1213 2018/2622/1213 2017/2623/1213 1977/2543/1213\nf 1979/2544/846 2019/2624/846 2018/2625/846 1978/2545/846\nf 1980/2546/1214 2020/2626/1214 2019/2627/1214 1979/2547/1214\nf 1981/2548/846 2021/2628/846 2020/2629/846 1980/2549/846\nf 1982/2550/1215 2022/2630/1215 2021/2631/1215 1981/2551/1215\nf 1983/2552/846 2023/2632/846 2022/2633/846 1982/2553/846\nf 1984/2554/1216 2024/2634/1216 2023/2635/1216 1983/2555/1216\nf 1985/2556/846 2025/2636/846 2024/2637/846 1984/2557/846\nf 1986/2558/1217 2026/2638/1217 2025/2639/1217 1985/2559/1217\nf 1987/2560/846 2027/2640/846 2026/2641/846 1986/2561/846\nf 1949/2562/862 1989/2642/862 2027/2643/862 1987/2563/862\nf 1988/2564/844 2028/2644/844 2029/2645/844 1989/2565/844\nf 1990/2566/1218 2030/2646/1218 2028/2647/1218 1988/2567/1218\nf 1991/2568/846 2031/2648/846 2030/2649/846 1990/2569/846\nf 1992/2570/1218 2032/2650/1218 2031/2651/1218 1991/2571/1218\nf 1993/2572/846 2033/2652/846 2032/2653/846 1992/2573/846\nf 1994/2574/1218 2034/2654/1218 2033/2655/1218 1993/2575/1218\nf 1995/2576/846 2035/2656/846 2034/2657/846 1994/2577/846\nf 1996/2578/1218 2036/2658/1218 2035/2659/1218 1995/2579/1218\nf 1997/2580/846 2037/2660/846 2036/2661/846 1996/2581/846\nf 1998/2582/1218 2038/2662/1218 2037/2663/1218 1997/2583/1218\nf 1999/2584/846 2039/2664/846 2038/2665/846 1998/2585/846\nf 2000/2586/1218 2040/2666/1218 2039/2667/1218 1999/2587/1218\nf 2001/2588/846 2041/2668/846 2040/2669/846 2000/2589/846\nf 2002/2590/1218 2042/2670/1218 2041/2671/1218 2001/2591/1218\nf 2003/2592/846 2043/2672/846 2042/2673/846 2002/2593/846\nf 2004/2594/1218 2044/2674/1218 2043/2675/1218 2003/2595/1218\nf 2005/2596/846 2045/2676/846 2044/2677/846 2004/2597/846\nf 2006/2598/1218 2046/2678/1218 2045/2679/1218 2005/2599/1218\nf 2007/2600/846 2047/2680/846 2046/2681/846 2006/2601/846\nf 2008/2602/1218 2048/2682/1218 2047/2683/1218 2007/2603/1218\nf 2009/2604/846 2049/2684/846 2048/2685/846 2008/2605/846\nf 2010/2606/1218 2050/2686/1218 2049/2687/1218 2009/2607/1218\nf 2011/2608/846 2051/2688/846 2050/2689/846 2010/2609/846\nf 2012/2610/1218 2052/2690/1218 2051/2691/1218 2011/2611/1218\nf 2013/2612/846 2053/2692/846 2052/2693/846 2012/2613/846\nf 2014/2614/1218 2054/2694/1218 2053/2695/1218 2013/2615/1218\nf 2015/2616/846 2055/2696/846 2054/2697/846 2014/2617/846\nf 2016/2618/1218 2056/2698/1218 2055/2699/1218 2015/2619/1218\nf 2017/2620/846 2057/2700/846 2056/2701/846 2016/2621/846\nf 2018/2622/1218 2058/2702/1218 2057/2703/1218 2017/2623/1218\nf 2019/2624/846 2059/2704/846 2058/2705/846 2018/2625/846\nf 2020/2626/1218 2060/2706/1218 2059/2707/1218 2019/2627/1218\nf 2021/2628/846 2061/2708/846 2060/2709/846 2020/2629/846\nf 2022/2630/1218 2062/2710/1218 2061/2711/1218 2021/2631/1218\nf 2023/2632/846 2063/2712/846 2062/2713/846 2022/2633/846\nf 2024/2634/1218 2064/2714/1218 2063/2715/1218 2023/2635/1218\nf 2025/2636/846 2065/2716/846 2064/2717/846 2024/2637/846\nf 2026/2638/1218 2066/2718/1218 2065/2719/1218 2025/2639/1218\nf 2027/2640/846 2067/2720/846 2066/2721/846 2026/2641/846\nf 1989/2642/1219 2029/2722/1219 2067/2723/1219 2027/2643/1219\nf 2028/2644/844 2068/2724/844 2069/2725/844 2029/2645/844\nf 2030/2646/1220 2070/2726/1220 2068/2727/1220 2028/2647/1220\nf 2031/2648/846 2071/2728/846 2070/2729/846 2030/2649/846\nf 2032/2650/1220 2072/2730/1220 2071/2731/1220 2031/2651/1220\nf 2033/2652/846 2073/2732/846 2072/2733/846 2032/2653/846\nf 2034/2654/1220 2074/2734/1220 2073/2735/1220 2033/2655/1220\nf 2035/2656/846 2075/2736/846 2074/2737/846 2034/2657/846\nf 2036/2658/1220 2076/2738/1220 2075/2739/1220 2035/2659/1220\nf 2037/2660/846 2077/2740/846 2076/2741/846 2036/2661/846\nf 2038/2662/1220 2078/2742/1220 2077/2743/1220 2037/2663/1220\nf 2039/2664/846 2079/2744/846 2078/2745/846 2038/2665/846\nf 2040/2666/1220 2080/2746/1220 2079/2747/1220 2039/2667/1220\nf 2041/2668/846 2081/2748/846 2080/2749/846 2040/2669/846\nf 2042/2670/1220 2082/2750/1220 2081/2751/1220 2041/2671/1220\nf 2043/2672/846 2083/2752/846 2082/2753/846 2042/2673/846\nf 2044/2674/1220 2084/2754/1220 2083/2755/1220 2043/2675/1220\nf 2045/2676/846 2085/2756/846 2084/2757/846 2044/2677/846\nf 2046/2678/1220 2086/2758/1220 2085/2759/1220 2045/2679/1220\nf 2047/2680/846 2087/2760/846 2086/2761/846 2046/2681/846\nf 2048/2682/1220 2088/2762/1220 2087/2763/1220 2047/2683/1220\nf 2049/2684/846 2089/2764/846 2088/2765/846 2048/2685/846\nf 2050/2686/1220 2090/2766/1220 2089/2767/1220 2049/2687/1220\nf 2051/2688/846 2091/2768/846 2090/2769/846 2050/2689/846\nf 2052/2690/1220 2092/2770/1220 2091/2771/1220 2051/2691/1220\nf 2053/2692/846 2093/2772/846 2092/2773/846 2052/2693/846\nf 2054/2694/1220 2094/2774/1220 2093/2775/1220 2053/2695/1220\nf 2055/2696/846 2095/2776/846 2094/2777/846 2054/2697/846\nf 2056/2698/1220 2096/2778/1220 2095/2779/1220 2055/2699/1220\nf 2057/2700/846 2097/2780/846 2096/2781/846 2056/2701/846\nf 2058/2702/1220 2098/2782/1220 2097/2783/1220 2057/2703/1220\nf 2059/2704/846 2099/2784/846 2098/2785/846 2058/2705/846\nf 2060/2706/1220 2100/2786/1220 2099/2787/1220 2059/2707/1220\nf 2061/2708/846 2101/2788/846 2100/2789/846 2060/2709/846\nf 2062/2710/1220 2102/2790/1220 2101/2791/1220 2061/2711/1220\nf 2063/2712/846 2103/2792/846 2102/2793/846 2062/2713/846\nf 2064/2714/1220 2104/2794/1220 2103/2795/1220 2063/2715/1220\nf 2065/2716/846 2105/2796/846 2104/2797/846 2064/2717/846\nf 2066/2718/1220 2106/2798/1220 2105/2799/1220 2065/2719/1220\nf 2067/2720/846 2107/2800/846 2106/2801/846 2066/2721/846\nf 2029/2722/1221 2069/2802/1221 2107/2803/1221 2067/2723/1221\no RAMP_Mesh.017\nv -255.084946 189.054291 2.777265\nv -240.045197 187.871811 2.777262\nv -240.045197 187.871811 -2.777140\nv -255.084946 189.054291 -2.777141\nv -226.951599 186.161636 2.777263\nv -226.951599 186.161636 -2.777143\nv -215.597656 183.931839 2.777263\nv -215.597656 183.931839 -2.777144\nv -205.776840 181.190460 2.777262\nv -205.776840 181.190460 -2.777144\nv -197.282715 177.945572 2.777261\nv -197.282715 177.945572 -2.777146\nv -189.908752 174.205231 2.777258\nv -189.908752 174.205231 -2.777148\nv -183.448486 169.977478 2.777258\nv -183.448486 169.977478 -2.777148\nv -177.695419 165.270386 2.777256\nv -177.695419 165.270386 -2.777151\nv -172.443054 160.092010 2.777254\nv -172.443054 160.092010 -2.777153\nv -167.484894 154.450409 2.777251\nv -167.484894 154.450409 -2.777155\nv -162.614456 148.353638 2.777249\nv -162.614456 148.353638 -2.777157\nv -157.625259 141.809769 2.777247\nv -157.625259 141.809769 -2.777159\nv -151.971558 134.742279 2.777244\nv -151.971558 134.742279 -2.777161\nv -145.915741 127.964714 2.777242\nv -145.915741 127.964714 -2.777164\nv -139.494339 121.538956 2.777240\nv -139.494339 121.538956 -2.777166\nv -132.743790 115.526878 2.777238\nv -132.743790 115.526878 -2.777168\nv -125.700638 109.990364 2.777236\nv -125.700638 109.990364 -2.777171\nv -118.401337 104.991287 2.777233\nv -118.401337 104.991287 -2.777173\nv -110.882385 100.591522 2.777231\nv -110.882385 100.591522 -2.777174\nv -103.180298 96.852966 2.777231\nv -103.180298 96.852966 -2.777175\nv -95.331543 93.837479 2.777229\nv -95.331543 93.837479 -2.777177\nv -87.372627 91.606949 2.777229\nv -87.372627 91.606949 -2.777177\nv -79.340027 90.223259 2.777229\nv -79.340027 90.223259 -2.777177\nv -71.270264 89.748283 2.777229\nv -71.270264 89.748283 -2.777178\nv -70.247032 89.755798 2.777229\nv -70.247032 89.755798 -2.777178\nv -69.302040 89.776558 2.777229\nv -69.302040 89.776558 -2.777178\nv -68.437325 89.807922 2.777229\nv -68.437325 89.807922 -2.777178\nv -67.654938 89.847237 2.777229\nv -67.654938 89.847237 -2.777178\nv -66.956924 89.891853 2.777229\nv -66.956924 89.891853 -2.777178\nv -66.345337 89.939117 2.777229\nv -66.345337 89.939117 -2.777178\nv -65.822235 89.986382 2.777229\nv -65.822235 89.986382 -2.777178\nv -65.389641 90.031006 2.777229\nv -65.389641 90.031006 -2.777177\nv -65.049606 90.070312 2.777229\nv -65.049606 90.070312 -2.777177\nv -64.804199 90.101685 2.777229\nv -64.804199 90.101685 -2.777177\nv -64.655457 90.122437 2.777228\nv -64.655457 90.122437 -2.777177\nv -64.605415 90.129959 2.777228\nv -64.605415 90.129959 -2.777177\nv -110.882385 100.741409 -2.777174\nv -118.401337 105.141159 -2.777173\nv -205.776840 181.340347 2.777262\nv -197.282715 178.095459 2.777261\nv -132.743790 115.676758 -2.777168\nv -139.494339 121.688835 -2.777166\nv -87.372627 91.756836 2.777229\nv -79.340027 90.373138 2.777229\nv -205.776840 181.340347 -2.777144\nv -215.597656 184.081726 -2.777144\nv -183.448486 170.127350 2.777258\nv -177.695419 165.420258 2.777256\nv -145.915741 128.114594 -2.777164\nv -68.437325 89.957794 2.777229\nv -67.654938 89.997116 2.777229\nv -65.049606 90.220200 2.777229\nv -64.804199 90.251556 2.777229\nv -66.345337 90.088997 -2.777177\nv -66.956924 90.041733 -2.777177\nv -157.625259 141.959641 -2.777159\nv -162.614456 148.503525 -2.777157\nv -139.494339 121.688835 2.777240\nv -132.743790 115.676758 2.777238\nv -103.180298 97.002846 -2.777175\nv -125.700638 110.140244 2.777236\nv -118.401337 105.141159 2.777233\nv -157.625259 141.959641 2.777247\nv -151.971558 134.892151 2.777244\nv -70.247032 89.905678 -2.777178\nv -71.270264 89.898163 -2.777178\nv -162.614456 148.503525 2.777249\nv -71.270264 89.898163 2.777229\nv -167.484894 154.600281 -2.777155\nv -64.605415 90.279839 -2.777177\nv -64.655457 90.272324 -2.777177\nv -226.951599 186.311523 -2.777143\nv -240.045197 188.021698 -2.777140\nv -66.956924 90.041733 2.777229\nv -66.345337 90.088997 2.777229\nv -189.908752 174.355103 2.777258\nv -95.331543 93.987366 2.777229\nv -226.951599 186.311523 2.777263\nv -215.597656 184.081726 2.777263\nv -189.908752 174.355103 -2.777148\nv -197.282715 178.095459 -2.777146\nv -110.882385 100.741409 2.777231\nv -103.180298 97.002846 2.777231\nv -172.443054 160.241882 -2.777153\nv -125.700638 110.140244 -2.777171\nv -64.804199 90.251556 -2.777177\nv -240.045197 188.021698 2.777262\nv -177.695419 165.420258 -2.777151\nv -145.915741 128.114594 2.777242\nv -87.372627 91.756836 -2.777177\nv -95.331543 93.987366 -2.777177\nv -65.822235 90.136261 2.777229\nv -65.389641 90.180878 2.777229\nv -172.443054 160.241882 2.777254\nv -167.484894 154.600281 2.777251\nv -65.049606 90.220200 -2.777177\nv -68.437325 89.957794 -2.777178\nv -69.302040 89.926437 -2.777178\nv -70.247032 89.905678 2.777229\nv -67.654938 89.997116 -2.777178\nv -255.084946 189.204163 -2.777141\nv -183.448486 170.127350 -2.777148\nv -79.340027 90.373138 -2.777177\nv -65.389641 90.180878 -2.777177\nv -151.971558 134.892151 -2.777161\nv -64.655457 90.272324 2.777228\nv -65.822235 90.136261 -2.777177\nv -69.302040 89.926437 2.777229\nv -64.605415 90.279839 2.777228\nv -255.084946 189.204163 2.777265\nv -157.625259 143.959641 2.777247\nv -151.971558 136.892151 2.777244\nv -69.302040 91.926437 -2.777177\nv -70.247032 91.905678 -2.777177\nv -67.654938 91.997116 2.777229\nv -66.956924 92.041733 2.777229\nv -64.605415 92.279839 -2.777177\nv -64.655457 92.272324 -2.777177\nv -189.908752 176.355103 2.777260\nv -183.448486 172.127350 2.777258\nv -255.084946 191.204163 2.777265\nv -240.045197 190.021698 2.777264\nv -66.345337 92.089005 2.777229\nv -215.597656 186.081726 -2.777144\nv -226.951599 188.311523 -2.777141\nv -87.372627 93.756836 2.777229\nv -79.340027 92.373138 2.777229\nv -110.882385 102.741409 2.777233\nv -103.180298 99.002846 2.777231\nv -110.882385 102.741409 -2.777173\nv -118.401337 107.141167 -2.777172\nv -139.494339 123.688835 -2.777166\nv -145.915741 130.114594 -2.777164\nv -167.484894 156.600281 -2.777153\nv -172.443054 162.241882 -2.777152\nv -132.743790 117.676758 -2.777168\nv -157.625259 143.959641 -2.777159\nv -162.614456 150.503525 -2.777155\nv -226.951599 188.311523 2.777265\nv -177.695419 167.420258 2.777256\nv -71.270264 91.898163 -2.777177\nv -197.282715 180.095459 -2.777146\nv -205.776840 183.340347 -2.777143\nv -66.345337 92.089005 -2.777177\nv -66.956924 92.041733 -2.777177\nv -71.270264 91.898163 2.777229\nv -95.331543 95.987366 -2.777175\nv -103.180298 99.002846 -2.777175\nv -125.700638 112.140244 2.777236\nv -118.401337 107.141167 2.777233\nv -240.045197 190.021698 -2.777140\nv -151.971558 136.892151 -2.777161\nv -162.614456 150.503525 2.777250\nv -95.331543 95.987366 2.777231\nv -65.822235 92.136261 -2.777177\nv -197.282715 180.095459 2.777261\nv -64.655457 92.272324 2.777228\nv -64.605415 92.279839 2.777228\nv -215.597656 186.081726 2.777263\nv -125.700638 112.140244 -2.777170\nv -67.654938 91.997116 -2.777177\nv -68.437325 91.957802 -2.777177\nv -177.695419 167.420258 -2.777150\nv -145.915741 130.114594 2.777242\nv -139.494339 123.688835 2.777240\nv -132.743790 117.676758 2.777238\nv -65.822235 92.136261 2.777229\nv -65.389641 92.180878 2.777229\nv -172.443054 162.241882 2.777255\nv -167.484894 156.600281 2.777251\nv -205.776840 183.340347 2.777263\nv -64.804199 92.251556 -2.777177\nv -65.049606 92.220200 -2.777177\nv -68.437325 91.957802 2.777229\nv -183.448486 172.127350 -2.777148\nv -65.389641 92.180878 -2.777177\nv -65.049606 92.220200 2.777229\nv -189.908752 176.355103 -2.777146\nv -79.340027 92.373138 -2.777177\nv -87.372627 93.756836 -2.777177\nv -70.247032 91.905678 2.777229\nv -69.302040 91.926437 2.777229\nv -255.084946 191.204163 -2.777141\nv -64.804199 92.251556 2.777229\nv -172.443054 162.241882 -2.777152\nv -177.695419 167.420258 -2.777150\nv -145.915741 130.114594 2.777242\nv -139.494339 123.688835 2.777240\nv -132.743790 117.676758 2.777238\nv -125.700638 112.140244 2.777236\nv -65.822235 92.136261 2.777229\nv -65.389641 92.180878 2.777229\nv -172.443054 162.241882 2.777255\nv -167.484894 156.600281 2.777251\nv -205.776840 183.340347 2.777263\nv -197.282715 180.095459 2.777261\nv -68.437325 91.957802 -2.777177\nv -69.302040 91.926437 -2.777177\nv -64.804199 92.251556 -2.777177\nv -65.049606 92.220200 -2.777177\nv -68.437325 91.957802 2.777229\nv -67.654938 91.997116 2.777229\nv -183.448486 172.127350 -2.777148\nv -66.956924 92.041733 -2.777177\nv -67.654938 91.997116 -2.777177\nv -65.389641 92.180878 -2.777177\nv -151.971558 136.892151 2.777244\nv -162.614456 150.503525 -2.777155\nv -167.484894 156.600281 -2.777153\nv -65.049606 92.220200 2.777229\nv -189.908752 176.355103 -2.777146\nv -197.282715 180.095459 -2.777146\nv -71.270264 91.898163 -2.777177\nv -79.340027 92.373138 -2.777177\nv -215.597656 186.081726 2.777263\nv -103.180298 99.002846 2.777231\nv -95.331543 95.987366 2.777231\nv -64.655457 92.272324 -2.777177\nv -151.971558 136.892151 -2.777161\nv -157.625259 143.959641 -2.777159\nv -87.372627 93.756836 -2.777177\nv -95.331543 95.987366 -2.777175\nv -177.695419 167.420258 2.777256\nv -162.614456 150.503525 2.777250\nv -66.345337 92.089005 2.777229\nv -71.270264 91.898163 2.777229\nv -70.247032 91.905678 2.777229\nv -69.302040 91.926437 2.777229\nv -240.045197 190.021698 -2.777140\nv -255.084946 191.204163 -2.777141\nv -205.776840 183.340347 -2.777143\nv -215.597656 186.081726 -2.777144\nv -125.700638 112.140244 -2.777170\nv -132.743790 117.676758 -2.777168\nv -64.804199 92.251556 2.777229\nv -64.655457 92.272324 2.777228\nv -103.180298 99.002846 -2.777175\nv -110.882385 102.741409 -2.777173\nv -65.822235 92.136261 -2.777177\nv -157.625259 143.959641 2.777247\nv -70.247032 91.905678 -2.777177\nv -66.956924 92.041733 2.777229\nv -64.605415 92.279839 -2.777177\nv -189.908752 176.355103 2.777260\nv -183.448486 172.127350 2.777258\nv -255.084946 191.204163 2.777265\nv -240.045197 190.021698 2.777264\nv -226.951599 188.311523 -2.777141\nv -87.372627 93.756836 2.777229\nv -79.340027 92.373138 2.777229\nv -110.882385 102.741409 2.777233\nv -118.401337 107.141167 -2.777172\nv -139.494339 123.688835 -2.777166\nv -145.915741 130.114594 -2.777164\nv -226.951599 188.311523 2.777265\nv -66.345337 92.089005 -2.777177\nv -118.401337 107.141167 2.777233\nv -64.605415 92.279839 2.777228\nv -240.045181 190.492188 -1.990285\nv -255.084930 191.674652 -1.990285\nv -205.776825 183.810852 -1.990288\nv -215.597641 186.552216 -1.990288\nv -125.700638 112.610741 -1.990314\nv -132.743790 118.147255 -1.990312\nv -65.049606 92.690697 1.990373\nv -64.804199 92.722061 1.990373\nv -79.340027 92.843643 -1.990320\nv -87.372627 94.227333 -1.990320\nv -64.655472 92.742821 1.990372\nv -103.180298 99.473343 -1.990318\nv -110.882385 103.211906 -1.990316\nv -69.302048 92.396942 1.990373\nv -68.437325 92.428299 1.990373\nv -65.389648 92.651382 -1.990320\nv -65.822235 92.606766 -1.990320\nv -157.625259 144.430145 1.990391\nv -151.971558 137.362656 1.990388\nv -69.302048 92.396942 -1.990320\nv -70.247032 92.376175 -1.990320\nv -67.654938 92.467621 1.990373\nv -66.956940 92.512238 1.990373\nv -64.605415 92.750336 -1.990320\nv -64.655472 92.742821 -1.990320\nv -189.908752 176.825607 1.990403\nv -183.448486 172.597855 1.990401\nv -255.084930 191.674652 1.990408\nv -240.045181 190.492188 1.990408\nv -66.345352 92.559494 1.990373\nv -226.951599 188.782013 -1.990285\nv -87.372627 94.227333 1.990373\nv -79.340027 92.843643 1.990373\nv -110.882385 103.211906 1.990377\nv -103.180298 99.473343 1.990375\nv -118.401337 107.611664 -1.990314\nv -139.494339 124.159332 -1.990309\nv -145.915741 130.585098 -1.990307\nv -167.484879 157.070786 -1.990296\nv -172.443039 162.712387 -1.990296\nv -157.625259 144.430145 -1.990303\nv -162.614441 150.974030 -1.990298\nv -226.951599 188.782013 1.990408\nv -177.695419 167.890762 1.990400\nv -71.270264 92.368668 -1.990320\nv -197.282700 180.565948 -1.990290\nv -66.345352 92.559494 -1.990320\nv -66.956940 92.512238 -1.990320\nv -71.270264 92.368668 1.990373\nv -95.331543 96.457863 -1.990318\nv -125.700638 112.610741 1.990380\nv -118.401337 107.611664 1.990378\nv -151.971558 137.362656 -1.990305\nv -162.614441 150.974030 1.990394\nv -95.331543 96.457863 1.990375\nv -197.282700 180.565948 1.990404\nv -64.605415 92.750336 1.990372\nv -215.597641 186.552216 1.990406\nv -67.654938 92.467621 -1.990320\nv -68.437325 92.428299 -1.990320\nv -177.695419 167.890762 -1.990294\nv -145.915741 130.585098 1.990386\nv -139.494339 124.159332 1.990384\nv -132.743790 118.147255 1.990382\nv -65.822235 92.606766 1.990373\nv -65.389648 92.651382 1.990373\nv -172.443039 162.712387 1.990397\nv -167.484879 157.070786 1.990397\nv -205.776825 183.810852 1.990406\nv -64.804199 92.722061 -1.990320\nv -65.049606 92.690697 -1.990320\nv -183.448486 172.597855 -1.990292\nv -189.908752 176.825607 -1.990290\nv -70.247032 92.376175 1.990373\nv -255.509201 188.666656 2.923226\nv -255.509201 188.666656 -2.923102\nv -240.469452 187.484177 -2.923101\nv -240.469452 187.484177 2.923223\nv -227.375854 185.774017 -2.923104\nv -227.375854 185.774017 2.923223\nv -216.021912 183.544205 -2.923104\nv -216.021912 183.544205 2.923224\nv -206.201111 180.802826 -2.923105\nv -206.201111 180.802826 2.923223\nv -197.706970 177.557953 -2.923107\nv -197.706970 177.557953 2.923222\nv -190.333023 173.817596 -2.923108\nv -190.333023 173.817596 2.923219\nv -183.872757 169.589844 -2.923109\nv -183.872757 169.589844 2.923219\nv -178.119690 164.882751 -2.923111\nv -178.119690 164.882751 2.923217\nv -172.867310 159.704376 -2.923113\nv -172.867310 159.704376 2.923214\nv -167.909149 154.062790 -2.923115\nv -167.909149 154.062790 2.923212\nv -163.038727 147.966019 -2.923117\nv -163.038727 147.966019 2.923210\nv -158.049515 141.422134 -2.923120\nv -158.049515 141.422134 2.923208\nv -152.395828 134.354645 -2.923122\nv -152.395828 134.354645 2.923205\nv -146.340012 127.577087 -2.923125\nv -146.340012 127.577087 2.923203\nv -139.918610 121.151329 -2.923127\nv -139.918610 121.151329 2.923200\nv -133.168060 115.139252 -2.923129\nv -133.168060 115.139252 2.923199\nv -126.124908 109.602737 -2.923131\nv -126.124908 109.602737 2.923196\nv -118.825607 104.603653 -2.923133\nv -118.825607 104.603653 2.923194\nv -111.306664 100.203903 -2.923136\nv -111.306664 100.203903 2.923192\nv -103.604568 96.465332 -2.923136\nv -103.604568 96.465332 2.923192\nv -95.755814 93.449852 -2.923138\nv -95.755814 93.449852 2.923190\nv -87.796898 91.219330 -2.923138\nv -87.796898 91.219330 2.923189\nv -79.764297 89.835632 -2.923138\nv -79.764297 89.835632 2.923190\nv -71.694542 89.360657 -2.923138\nv -71.694542 89.360657 2.923187\nv -70.671310 89.368164 -2.923138\nv -70.671310 89.368164 2.923187\nv -69.726318 89.388931 -2.923138\nv -69.726318 89.388931 2.923187\nv -68.861603 89.420288 -2.923138\nv -68.861603 89.420288 2.923187\nv -68.079208 89.459610 -2.923138\nv -68.079208 89.459610 2.923187\nv -67.381210 89.504227 -2.923138\nv -67.381210 89.504227 2.923187\nv -66.769623 89.551491 -2.923138\nv -66.769623 89.551491 2.923187\nv -66.246506 89.598755 -2.923138\nv -66.246506 89.598755 2.923187\nv -65.813919 89.643372 -2.923138\nv -65.813919 89.643372 2.923187\nv -65.473892 89.682693 -2.923138\nv -65.473892 89.682693 2.923190\nv -65.228485 89.714050 -2.923138\nv -65.228485 89.714050 2.923190\nv -65.079735 89.734810 -2.923137\nv -65.079735 89.734810 2.923187\nv -65.029694 89.742325 -2.923137\nv -65.029694 89.742325 2.923187\nv -118.825607 104.753540 -2.923133\nv -111.306664 100.353783 -2.923135\nv -197.706970 177.707825 2.923222\nv -206.201111 180.952713 2.923223\nv -139.918610 121.301208 -2.923127\nv -133.168060 115.289131 -2.923129\nv -79.764297 89.985512 2.923190\nv -87.796898 91.369202 2.923189\nv -216.021912 183.694092 -2.923104\nv -206.201111 180.952713 -2.923105\nv -178.119690 165.032639 2.923217\nv -183.872757 169.739731 2.923219\nv -146.340012 127.726967 -2.923125\nv -68.079208 89.609489 2.923187\nv -68.861603 89.570175 2.923187\nv -65.228485 89.863930 2.923190\nv -65.473892 89.832565 2.923190\nv -67.381210 89.654106 -2.923138\nv -66.769623 89.701370 -2.923138\nv -163.038727 148.115891 -2.923117\nv -158.049515 141.572021 -2.923120\nv -133.168060 115.289131 2.923199\nv -139.918610 121.301208 2.923200\nv -103.604568 96.615219 -2.923136\nv -118.825607 104.753540 2.923194\nv -126.124908 109.752617 2.923196\nv -152.395828 134.504532 2.923205\nv -158.049515 141.572021 2.923208\nv -71.694542 89.510536 -2.923138\nv -70.671310 89.518051 -2.923138\nv -163.038727 148.115891 2.923210\nv -71.694542 89.510536 2.923187\nv -167.909149 154.212662 -2.923115\nv -65.079735 89.884689 -2.923137\nv -65.029694 89.892212 -2.923137\nv -240.469452 187.634064 -2.923101\nv -227.375854 185.923889 -2.923104\nv -66.769623 89.701370 2.923187\nv -67.381210 89.654106 2.923187\nv -190.333023 173.967468 2.923219\nv -95.755814 93.599731 2.923190\nv -216.021912 183.694092 2.923224\nv -227.375854 185.923889 2.923223\nv -197.706970 177.707825 -2.923107\nv -190.333023 173.967468 -2.923108\nv -103.604568 96.615219 2.923192\nv -111.306664 100.353783 2.923193\nv -172.867310 159.854263 -2.923113\nv -126.124908 109.752617 -2.923131\nv -65.228485 89.863930 -2.923138\nv -240.469452 187.634064 2.923223\nv -178.119690 165.032639 -2.923111\nv -146.340012 127.726967 2.923203\nv -95.755814 93.599731 -2.923138\nv -87.796898 91.369202 -2.923138\nv -65.813919 89.793251 2.923190\nv -66.246506 89.748634 2.923190\nv -167.909149 154.212662 2.923212\nv -172.867310 159.854263 2.923214\nv -65.473892 89.832565 -2.923138\nv -69.726318 89.538811 -2.923138\nv -68.861603 89.570175 -2.923138\nv -70.671310 89.518051 2.923187\nv -68.079208 89.609489 -2.923138\nv -255.509201 188.816528 -2.923102\nv -183.872757 169.739731 -2.923109\nv -79.764297 89.985512 -2.923138\nv -65.813919 89.793251 -2.923138\nv -152.395828 134.504532 -2.923122\nv -65.079735 89.884689 2.923187\nv -66.246506 89.748634 -2.923138\nv -69.726318 89.538811 2.923187\nv -65.029694 89.892212 2.923187\nv -255.509201 188.816528 2.923226\nv -152.395828 136.504532 2.923205\nv -158.049515 143.572021 2.923208\nv -70.671310 91.518051 -2.923138\nv -69.726318 91.538811 -2.923138\nv -67.381210 91.654106 2.923189\nv -68.079208 91.609489 2.923189\nv -65.079735 91.884689 -2.923137\nv -65.029694 91.892212 -2.923137\nv -183.872757 171.739731 2.923219\nv -190.333023 175.967484 2.923221\nv -240.469452 189.634064 2.923225\nv -255.509201 190.816528 2.923226\nv -66.769623 91.701370 2.923189\nv -227.375854 187.923889 -2.923101\nv -216.021912 185.694092 -2.923104\nv -79.764297 91.985512 2.923190\nv -87.796898 93.369209 2.923189\nv -103.604568 98.615219 2.923192\nv -111.306664 102.353783 2.923194\nv -118.825607 106.753540 -2.923133\nv -111.306664 102.353783 -2.923134\nv -146.340012 129.726974 -2.923125\nv -139.918610 123.301208 -2.923126\nv -172.867310 161.854263 -2.923113\nv -167.909149 156.212662 -2.923115\nv -133.168060 117.289131 -2.923129\nv -163.038727 150.115906 -2.923116\nv -158.049515 143.572021 -2.923120\nv -227.375854 187.923889 2.923223\nv -178.119690 167.032639 2.923217\nv -71.694542 91.510536 -2.923138\nv -206.201111 182.952713 -2.923104\nv -197.706970 179.707825 -2.923107\nv -67.381210 91.654106 -2.923138\nv -66.769623 91.701370 -2.923138\nv -71.694542 91.510536 2.923190\nv -103.604568 98.615219 -2.923136\nv -95.755814 95.599731 -2.923136\nv -118.825607 106.753540 2.923194\nv -126.124908 111.752617 2.923197\nv -240.469452 189.634064 -2.923101\nv -152.395828 136.504532 -2.923122\nv -163.038727 150.115906 2.923212\nv -95.755814 95.599731 2.923192\nv -66.246506 91.748634 -2.923138\nv -197.706970 179.707825 2.923222\nv -65.029694 91.892212 2.923189\nv -65.079735 91.884689 2.923189\nv -216.021912 185.694092 2.923224\nv -126.124908 111.752617 -2.923131\nv -68.861603 91.570175 -2.923138\nv -68.079208 91.609489 -2.923138\nv -178.119690 167.032639 -2.923111\nv -139.918610 123.301208 2.923201\nv -146.340012 129.726974 2.923203\nv -133.168060 117.289131 2.923199\nv -65.813919 91.793259 2.923190\nv -66.246506 91.748634 2.923190\nv -167.909149 156.212662 2.923213\nv -172.867310 161.854263 2.923215\nv -206.201111 182.952713 2.923224\nv -65.473892 91.832565 -2.923138\nv -65.228485 91.863937 -2.923138\nv -68.861603 91.570175 2.923190\nv -183.872757 171.739731 -2.923109\nv -65.813919 91.793259 -2.923138\nv -65.473892 91.832565 2.923190\nv -190.333023 175.967484 -2.923106\nv -79.764297 91.985512 -2.923138\nv -87.796898 93.369209 -2.923138\nv -70.671310 91.518051 2.923189\nv -69.726318 91.538811 2.923190\nv -255.509201 190.816528 -2.923102\nv -65.228485 91.863937 2.923190\nv -178.119690 167.032639 -2.923111\nv -172.867310 161.854263 -2.923113\nv -139.918610 123.301208 2.923201\nv -146.340012 129.726974 2.923203\nv -126.124908 111.752617 2.923197\nv -133.168060 117.289131 2.923199\nv -65.813919 91.793259 2.923190\nv -66.246506 91.748634 2.923190\nv -167.909149 156.212662 2.923213\nv -172.867310 161.854263 2.923215\nv -197.706970 179.707825 2.923222\nv -206.201111 182.952713 2.923224\nv -69.726318 91.538811 -2.923138\nv -68.861603 91.570175 -2.923138\nv -65.473892 91.832565 -2.923138\nv -65.228485 91.863937 -2.923138\nv -68.079208 91.609489 2.923189\nv -68.861603 91.570175 2.923190\nv -183.872757 171.739731 -2.923109\nv -68.079208 91.609489 -2.923138\nv -67.381210 91.654106 -2.923138\nv -65.813919 91.793259 -2.923138\nv -152.395828 136.504532 2.923205\nv -167.909149 156.212662 -2.923115\nv -163.038727 150.115906 -2.923116\nv -65.473892 91.832565 2.923190\nv -190.333023 175.967484 -2.923106\nv -197.706970 179.707825 -2.923107\nv -79.764297 91.985512 -2.923138\nv -71.694542 91.510536 -2.923138\nv -216.021912 185.694092 2.923224\nv -95.755814 95.599731 2.923192\nv -103.604568 98.615219 2.923192\nv -65.079735 91.884689 -2.923137\nv -158.049515 143.572021 -2.923120\nv -152.395828 136.504532 -2.923122\nv -95.755814 95.599731 -2.923136\nv -87.796898 93.369209 -2.923138\nv -178.119690 167.032639 2.923217\nv -163.038727 150.115906 2.923212\nv -66.769623 91.701370 2.923189\nv -70.671310 91.518051 2.923189\nv -71.694542 91.510536 2.923190\nv -69.726318 91.538811 2.923190\nv -255.509201 190.816528 -2.923102\nv -240.469452 189.634064 -2.923101\nv -216.021912 185.694092 -2.923104\nv -206.201111 182.952713 -2.923104\nv -133.168060 117.289131 -2.923129\nv -126.124908 111.752617 -2.923131\nv -65.228485 91.863937 2.923190\nv -65.079735 91.884689 2.923189\nv -111.306664 102.353783 -2.923134\nv -103.604568 98.615219 -2.923136\nv -66.246506 91.748634 -2.923138\nv -158.049515 143.572021 2.923208\nv -70.671310 91.518051 -2.923138\nv -67.381210 91.654106 2.923189\nv -65.029694 91.892212 -2.923137\nv -183.872757 171.739731 2.923219\nv -190.333023 175.967484 2.923221\nv -240.469452 189.634064 2.923225\nv -255.509201 190.816528 2.923226\nv -227.375854 187.923889 -2.923101\nv -79.764297 91.985512 2.923190\nv -87.796898 93.369209 2.923189\nv -111.306664 102.353783 2.923194\nv -118.825607 106.753540 -2.923133\nv -146.340012 129.726974 -2.923125\nv -139.918610 123.301208 -2.923126\nv -227.375854 187.923889 2.923223\nv -66.769623 91.701370 -2.923138\nv -118.825607 106.753540 2.923194\nv -65.029694 91.892212 2.923189\nv -255.509186 191.287033 -2.094892\nv -240.469452 190.104553 -2.094891\nv -216.021912 186.164581 -2.094894\nv -206.201111 183.423218 -2.094894\nv -133.168060 117.759628 -2.094918\nv -126.124908 112.223114 -2.094920\nv -65.228485 92.334427 2.094979\nv -65.473892 92.303070 2.094979\nv -87.796898 93.839706 -2.094926\nv -79.764297 92.456009 -2.094927\nv -65.079750 92.355194 2.094979\nv -111.306664 102.824280 -2.094922\nv -103.604568 99.085716 -2.094925\nv -68.861603 92.040672 2.094979\nv -69.726334 92.009308 2.094979\nv -66.246506 92.219131 -2.094927\nv -65.813934 92.263748 -2.094927\nv -152.395828 136.975021 2.094994\nv -158.049515 144.042511 2.094996\nv -70.671310 91.988548 -2.094926\nv -69.726334 92.009308 -2.094927\nv -67.381226 92.124603 2.094979\nv -68.079208 92.079987 2.094979\nv -65.079750 92.355194 -2.094926\nv -65.029694 92.362717 -2.094926\nv -183.872742 172.210236 2.095008\nv -190.333008 176.437973 2.095009\nv -240.469452 190.104553 2.095014\nv -255.509186 191.287033 2.095014\nv -66.769638 92.171875 2.094979\nv -227.375854 188.394394 -2.094891\nv -79.764297 92.456009 2.094979\nv -87.796898 93.839706 2.094979\nv -103.604568 99.085716 2.094981\nv -111.306664 102.824280 2.094983\nv -118.825607 107.224037 -2.094922\nv -146.340012 130.197464 -2.094913\nv -139.918610 123.771706 -2.094915\nv -172.867310 162.324768 -2.094902\nv -167.909149 156.683167 -2.094903\nv -163.038712 150.586395 -2.094904\nv -158.049515 144.042511 -2.094909\nv -227.375854 188.394394 2.095014\nv -178.119690 167.503143 2.095006\nv -71.694542 91.981033 -2.094927\nv -197.706970 180.178314 -2.094896\nv -67.381226 92.124603 -2.094926\nv -66.769638 92.171875 -2.094926\nv -71.694542 91.981033 2.094979\nv -95.755814 96.070236 -2.094925\nv -118.825607 107.224037 2.094983\nv -126.124908 112.223114 2.094986\nv -152.395828 136.975021 -2.094911\nv -163.038712 150.586395 2.095000\nv -95.755814 96.070236 2.094981\nv -197.706970 180.178314 2.095010\nv -65.029694 92.362717 2.094979\nv -216.021912 186.164581 2.095012\nv -68.861603 92.040672 -2.094927\nv -68.079208 92.079987 -2.094926\nv -178.119690 167.503143 -2.094900\nv -139.918610 123.771706 2.094990\nv -146.340012 130.197464 2.094992\nv -133.168060 117.759628 2.094988\nv -65.813934 92.263748 2.094979\nv -66.246506 92.219131 2.094979\nv -167.909149 156.683167 2.095001\nv -172.867310 162.324768 2.095003\nv -206.201111 183.423218 2.095012\nv -65.473892 92.303070 -2.094927\nv -65.228485 92.334427 -2.094927\nv -183.872742 172.210236 -2.094898\nv -190.333008 176.437973 -2.094896\nv -70.671310 91.988548 2.094979\nvt 0.9004 0.9189\nvt 0.9004 0.8489\nvt 0.9366 0.8489\nvt 0.9366 0.9189\nvt 0.9004 0.7876\nvt 0.9366 0.7876\nvt 0.9004 0.7343\nvt 0.9366 0.7343\nvt 0.9004 0.6878\nvt 0.9366 0.6878\nvt 0.9004 0.6472\nvt 0.9366 0.6472\nvt 0.9004 0.6117\nvt 0.9366 0.6117\nvt 0.9004 0.5802\nvt 0.9366 0.5802\nvt 0.9004 0.5518\nvt 0.9366 0.5518\nvt 0.9004 0.5255\nvt 0.9366 0.5255\nvt 0.9004 0.5005\nvt 0.9366 0.5005\nvt 0.9004 0.4756\nvt 0.9366 0.4756\nvt 0.9004 0.4500\nvt 0.9366 0.4500\nvt 0.9004 0.4212\nvt 0.9366 0.4212\nvt 0.9004 0.3906\nvt 0.9366 0.3906\nvt 0.9004 0.3584\nvt 0.9366 0.3584\nvt 0.9004 0.3249\nvt 0.9366 0.3249\nvt 0.9004 0.2902\nvt 0.9366 0.2902\nvt 0.9004 0.2546\nvt 0.9366 0.2546\nvt 0.9004 0.2181\nvt 0.9366 0.2181\nvt 0.9004 0.1810\nvt 0.9366 0.1810\nvt 0.9004 0.1436\nvt 0.9366 0.1436\nvt 0.9004 0.1059\nvt 0.9366 0.1059\nvt 0.9004 0.0682\nvt 0.9366 0.0682\nvt 0.9004 0.0307\nvt 0.9366 0.0307\nvt 0.9004 0.0260\nvt 0.9366 0.0260\nvt 0.9004 0.0216\nvt 0.9366 0.0216\nvt 0.9004 0.0176\nvt 0.9366 0.0176\nvt 0.9004 0.0140\nvt 0.9366 0.0140\nvt 0.9004 0.0108\nvt 0.9366 0.0108\nvt 0.9004 0.0080\nvt 0.9366 0.0080\nvt 0.9004 0.0056\nvt 0.9366 0.0056\nvt 0.9004 0.0036\nvt 0.9366 0.0036\nvt 0.9004 0.0020\nvt 0.9366 0.0020\nvt 0.9004 0.0009\nvt 0.9366 0.0009\nvt 0.9004 0.0002\nvt 0.9366 0.0002\nvt 0.9004 0.0000\nvt 0.9366 0.0000\nvt 0.3083 0.7509\nvt 0.3072 0.7913\nvt 0.3064 0.7909\nvt 0.3074 0.7505\nvt 0.0162 0.7381\nvt 0.0270 0.7796\nvt 0.0261 0.7800\nvt 0.0153 0.7385\nvt 0.2878 0.6273\nvt 0.2983 0.6685\nvt 0.2975 0.6682\nvt 0.2870 0.6269\nvt 0.1037 0.0586\nvt 0.1232 0.0938\nvt 0.1224 0.0942\nvt 0.1029 0.0590\nvt 0.1992 0.1748\nvt 0.1811 0.2204\nvt 0.1803 0.2200\nvt 0.1983 0.1745\nvt 0.0202 0.6298\nvt 0.0135 0.6640\nvt 0.0127 0.6644\nvt 0.0194 0.6302\nvt 0.2739 0.5863\nvt 0.2731 0.5859\nvt 0.0661 0.0114\nvt 0.0690 0.0144\nvt 0.0682 0.0148\nvt 0.0653 0.0118\nvt 0.0550 0.0007\nvt 0.0560 0.0016\nvt 0.0552 0.0020\nvt 0.0542 0.0011\nvt 0.2176 0.9913\nvt 0.2153 0.9936\nvt 0.2145 0.9932\nvt 0.2168 0.9909\nvt 0.2172 0.4708\nvt 0.2366 0.5064\nvt 0.2358 0.5061\nvt 0.2164 0.4705\nvt 0.1442 0.3315\nvt 0.1337 0.3727\nvt 0.1329 0.3731\nvt 0.1434 0.3318\nvt 0.3019 0.8309\nvt 0.3010 0.8305\nvt 0.1541 0.2491\nvt 0.1511 0.2902\nvt 0.1503 0.2905\nvt 0.1533 0.2495\nvt 0.1026 0.4541\nvt 0.0825 0.4936\nvt 0.0817 0.4939\nvt 0.1018 0.4545\nvt 0.2331 0.9745\nvt 0.2296 0.9785\nvt 0.2287 0.9782\nvt 0.2322 0.9741\nvt 0.0631 0.5292\nvt 0.0622 0.5295\nvt 0.0789 0.0255\nvt 0.0781 0.0259\nvt 0.1998 0.4368\nvt 0.1990 0.4364\nvt 0.2085 0.9998\nvt 0.2083 1.0000\nvt 0.2075 0.9996\nvt 0.2077 0.9995\nvt 0.2602 0.0684\nvt 0.2253 0.1245\nvt 0.2245 0.1241\nvt 0.2594 0.0681\nvt 0.0612 0.0064\nvt 0.0635 0.0087\nvt 0.0627 0.0091\nvt 0.0603 0.0068\nvt 0.0120 0.6998\nvt 0.0111 0.7002\nvt 0.1379 0.1307\nvt 0.1370 0.1311\nvt 0.0450 0.8252\nvt 0.0712 0.8755\nvt 0.0703 0.8759\nvt 0.0442 0.8255\nvt 0.1703 0.2619\nvt 0.1661 0.3002\nvt 0.1652 0.2998\nvt 0.1695 0.2615\nvt 0.1477 0.1691\nvt 0.1531 0.2087\nvt 0.1522 0.2091\nvt 0.1469 0.1695\nvt 0.1853 0.4035\nvt 0.1844 0.4031\nvt 0.3052 0.7098\nvt 0.3044 0.7095\nvt 0.2092 0.9993\nvt 0.2083 0.9989\nvt 0.1061 0.9316\nvt 0.1053 0.9319\nvt 0.1743 0.3702\nvt 0.1735 0.3698\nvt 0.1198 0.4137\nvt 0.1189 0.4141\nvt 0.2920 0.8693\nvt 0.2774 0.9062\nvt 0.2765 0.9058\nvt 0.2912 0.8689\nvt 0.0574 0.0029\nvt 0.0591 0.0045\nvt 0.0583 0.0048\nvt 0.0566 0.0032\nvt 0.0457 0.5632\nvt 0.0312 0.5965\nvt 0.0303 0.5969\nvt 0.0449 0.5636\nvt 0.2102 0.9984\nvt 0.2093 0.9980\nvt 0.2262 0.9822\nvt 0.2231 0.9856\nvt 0.2223 0.9852\nvt 0.2254 0.9819\nvt 0.0754 0.0215\nvt 0.0746 0.0218\nvt 0.2202 0.9886\nvt 0.2194 0.9882\nvt 0.3047 0.0059\nvt 0.3039 0.0056\nvt 0.1677 0.3360\nvt 0.1668 0.3356\nvt 0.2578 0.9414\nvt 0.2570 0.9410\nvt 0.2115 0.9971\nvt 0.2107 0.9968\nvt 0.2568 0.5459\nvt 0.2559 0.5455\nvt 0.0544 0.0002\nvt 0.0536 0.0005\nvt 0.2133 0.9955\nvt 0.2124 0.9952\nvt 0.0721 0.0178\nvt 0.0713 0.0181\nvt 0.0542 0.0000\nvt 0.0534 0.0004\nvt 0.1506 0.9941\nvt 0.1497 0.9944\nvt 0.0706 0.4988\nvt 0.0907 0.4593\nvt 0.2143 0.9770\nvt 0.2176 0.9733\nvt 0.0542 0.0166\nvt 0.0515 0.0139\nvt 0.1964 0.9948\nvt 0.1966 0.9946\nvt 0.0000 0.7050\nvt 0.0016 0.6692\nvt 0.1386 0.9992\nvt 0.0942 0.9368\nvt 0.0492 0.0116\nvt 0.1872 0.1696\nvt 0.2134 0.1193\nvt 0.1113 0.0990\nvt 0.0917 0.0638\nvt 0.1411 0.2139\nvt 0.1358 0.1743\nvt 0.2953 0.7861\nvt 0.2963 0.7457\nvt 0.2759 0.6221\nvt 0.2619 0.5811\nvt 0.1879 0.4316\nvt 0.1733 0.3983\nvt 0.2864 0.6634\nvt 0.2247 0.5012\nvt 0.2052 0.4656\nvt 0.0592 0.8807\nvt 0.0082 0.6350\nvt 0.2211 0.9693\nvt 0.1584 0.2567\nvt 0.1691 0.2152\nvt 0.2033 0.9884\nvt 0.2057 0.9861\nvt 0.0670 0.0307\nvt 0.2800 0.8641\nvt 0.2899 0.8257\nvt 0.1392 0.2953\nvt 0.1422 0.2543\nvt 0.2483 0.0632\nvt 0.2448 0.5407\nvt 0.0511 0.5344\nvt 0.1259 0.1359\nvt 0.2013 0.9903\nvt 0.0042 0.7433\nvt 0.0425 0.0054\nvt 0.0422 0.0052\nvt 0.0331 0.8304\nvt 0.2933 0.7046\nvt 0.2083 0.9834\nvt 0.2112 0.9804\nvt 0.1624 0.3650\nvt 0.1078 0.4189\nvt 0.1217 0.3779\nvt 0.1323 0.3366\nvt 0.0472 0.0097\nvt 0.0455 0.0081\nvt 0.0192 0.6017\nvt 0.0337 0.5684\nvt 0.0150 0.7848\nvt 0.1972 0.9941\nvt 0.1982 0.9932\nvt 0.0570 0.0196\nvt 0.1557 0.3308\nvt 0.1996 0.9919\nvt 0.0441 0.0068\nvt 0.1541 0.2950\nvt 0.2459 0.9362\nvt 0.2654 0.9010\nvt 0.0635 0.0267\nvt 0.0601 0.0230\nvt 0.2927 0.0008\nvt 0.0431 0.0059\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.9930 0.0020\nvt 0.9930 0.0720\nvt 0.9879 0.0719\nvt 0.9878 0.0018\nvt 0.9932 0.1865\nvt 0.9932 0.2329\nvt 0.9881 0.2328\nvt 0.9880 0.1864\nvt 0.9936 0.5930\nvt 0.9936 0.6274\nvt 0.9885 0.6273\nvt 0.9885 0.5928\nvt 1.0000 0.0009\nvt 1.0000 0.0020\nvt 0.9949 0.0022\nvt 0.9949 0.0011\nvt 0.9938 0.8110\nvt 0.9938 0.8487\nvt 0.9887 0.8485\nvt 0.9887 0.8109\nvt 1.0000 0.0002\nvt 0.9949 0.0004\nvt 0.9937 0.6992\nvt 0.9937 0.7361\nvt 0.9886 0.7359\nvt 0.9886 0.6990\nvt 1.0000 0.0176\nvt 1.0000 0.0216\nvt 0.9948 0.0218\nvt 0.9949 0.0178\nvt 0.9939 0.9114\nvt 0.9939 0.9134\nvt 0.9888 0.9132\nvt 0.9888 0.9112\nvt 0.9996 0.4194\nvt 0.9995 0.4479\nvt 0.9944 0.4481\nvt 0.9944 0.4196\nvt 0.9939 0.8910\nvt 0.9939 0.8953\nvt 0.9888 0.8952\nvt 0.9888 0.8908\nvt 1.0000 0.0108\nvt 1.0000 0.0140\nvt 0.9949 0.0142\nvt 0.9949 0.0110\nvt 0.9939 0.9167\nvt 0.9939 0.9170\nvt 0.9888 0.9168\nvt 0.9888 0.9166\nvt 0.9994 0.5769\nvt 0.9994 0.6082\nvt 0.9942 0.6084\nvt 0.9943 0.5771\nvt 0.9991 0.8449\nvt 0.9991 0.9150\nvt 0.9939 0.9151\nvt 0.9940 0.8451\nvt 1.0000 0.0080\nvt 0.9949 0.0081\nvt 0.9931 0.1332\nvt 0.9880 0.1331\nvt 0.9999 0.0683\nvt 0.9999 0.1059\nvt 0.9948 0.1061\nvt 0.9948 0.0684\nvt 0.9998 0.1809\nvt 0.9998 0.2178\nvt 0.9946 0.2179\nvt 0.9947 0.1810\nvt 0.9937 0.6629\nvt 0.9885 0.6628\nvt 0.9935 0.5278\nvt 0.9935 0.5597\nvt 0.9884 0.5596\nvt 0.9884 0.5277\nvt 0.9934 0.3943\nvt 0.9934 0.4192\nvt 0.9883 0.4190\nvt 0.9882 0.3942\nvt 0.9934 0.4437\nvt 0.9935 0.4690\nvt 0.9883 0.4689\nvt 0.9883 0.4436\nvt 0.9992 0.7837\nvt 0.9941 0.7839\nvt 0.9994 0.5487\nvt 0.9943 0.5488\nvt 0.9939 0.8862\nvt 0.9888 0.8861\nvt 0.9933 0.2733\nvt 0.9881 0.2732\nvt 0.9939 0.9062\nvt 0.9939 0.9090\nvt 0.9888 0.9088\nvt 0.9888 0.9060\nvt 1.0000 0.0307\nvt 0.9948 0.0309\nvt 0.9938 0.7734\nvt 0.9886 0.7733\nvt 0.9997 0.2541\nvt 0.9997 0.2895\nvt 0.9946 0.2897\nvt 0.9946 0.2542\nvt 0.9935 0.4975\nvt 0.9884 0.4974\nvt 0.9995 0.4732\nvt 0.9944 0.4734\nvt 0.9999 0.1435\nvt 0.9947 0.1437\nvt 0.9993 0.6436\nvt 0.9942 0.6438\nvt 1.0000 0.0000\nvt 0.9949 0.0002\nvt 0.9992 0.7304\nvt 0.9941 0.7306\nvt 0.9939 0.8993\nvt 0.9939 0.9029\nvt 0.9888 0.9028\nvt 0.9888 0.8992\nvt 0.9934 0.3683\nvt 0.9882 0.3681\nvt 0.9996 0.3572\nvt 0.9996 0.3891\nvt 0.9945 0.3893\nvt 0.9945 0.3574\nvt 0.9997 0.3240\nvt 0.9945 0.3241\nvt 1.0000 0.0036\nvt 1.0000 0.0056\nvt 0.9949 0.0057\nvt 0.9949 0.0038\nvt 0.9995 0.4978\nvt 0.9995 0.5226\nvt 0.9943 0.5228\nvt 0.9944 0.4980\nvt 0.9993 0.6840\nvt 0.9942 0.6842\nvt 0.9939 0.9149\nvt 0.9939 0.9160\nvt 0.9888 0.9159\nvt 0.9888 0.9148\nvt 0.9933 0.3401\nvt 0.9882 0.3399\nvt 0.9933 0.3087\nvt 0.9882 0.3086\nvt 1.0000 0.0260\nvt 0.9948 0.0262\nvt 0.9757 0.9168\nvt 0.9376 0.9168\nvt 0.9376 0.8468\nvt 0.9757 0.8468\nvt 0.9376 0.7856\nvt 0.9757 0.7856\nvt 0.9376 0.7323\nvt 0.9757 0.7323\nvt 0.9376 0.6859\nvt 0.9757 0.6859\nvt 0.9376 0.6454\nvt 0.9757 0.6454\nvt 0.9376 0.6101\nvt 0.9757 0.6101\nvt 0.9376 0.5787\nvt 0.9757 0.5787\nvt 0.9376 0.5505\nvt 0.9757 0.5505\nvt 0.9376 0.5245\nvt 0.9757 0.5245\nvt 0.9376 0.4996\nvt 0.9757 0.4996\nvt 0.9376 0.4751\nvt 0.9757 0.4751\nvt 0.9376 0.4498\nvt 0.9757 0.4498\nvt 0.9376 0.4212\nvt 0.9757 0.4212\nvt 0.9376 0.3909\nvt 0.9757 0.3909\nvt 0.9376 0.3591\nvt 0.9757 0.3591\nvt 0.9376 0.3258\nvt 0.9757 0.3258\nvt 0.9376 0.2914\nvt 0.9757 0.2914\nvt 0.9376 0.2559\nvt 0.9757 0.2559\nvt 0.9376 0.2196\nvt 0.9757 0.2196\nvt 0.9376 0.1827\nvt 0.9757 0.1827\nvt 0.9376 0.1454\nvt 0.9757 0.1454\nvt 0.9376 0.1078\nvt 0.9757 0.1078\nvt 0.9376 0.0701\nvt 0.9757 0.0701\nvt 0.9376 0.0326\nvt 0.9757 0.0326\nvt 0.9376 0.0278\nvt 0.9757 0.0278\nvt 0.9376 0.0235\nvt 0.9757 0.0235\nvt 0.9376 0.0195\nvt 0.9757 0.0195\nvt 0.9376 0.0159\nvt 0.9757 0.0159\nvt 0.9376 0.0126\nvt 0.9757 0.0126\nvt 0.9376 0.0098\nvt 0.9757 0.0098\nvt 0.9376 0.0074\nvt 0.9757 0.0074\nvt 0.9376 0.0054\nvt 0.9757 0.0054\nvt 0.9376 0.0039\nvt 0.9757 0.0039\nvt 0.9376 0.0027\nvt 0.9757 0.0027\nvt 0.9376 0.0021\nvt 0.9757 0.0021\nvt 0.9376 0.0018\nvt 0.9757 0.0018\nvt 0.6122 0.2496\nvt 0.6113 0.2500\nvt 0.6101 0.2096\nvt 0.6109 0.2092\nvt 0.3246 0.2609\nvt 0.3238 0.2605\nvt 0.3347 0.2190\nvt 0.3356 0.2194\nvt 0.5923 0.3733\nvt 0.5915 0.3736\nvt 0.6018 0.3323\nvt 0.6026 0.3320\nvt 0.4089 0.9405\nvt 0.4080 0.9402\nvt 0.4278 0.9050\nvt 0.4286 0.9054\nvt 0.5058 0.8259\nvt 0.5050 0.8263\nvt 0.4867 0.7808\nvt 0.4875 0.7804\nvt 0.3281 0.3691\nvt 0.3273 0.3688\nvt 0.3208 0.3346\nvt 0.3216 0.3349\nvt 0.5786 0.4143\nvt 0.5777 0.4146\nvt 0.3711 0.9877\nvt 0.3702 0.9873\nvt 0.3731 0.9843\nvt 0.3740 0.9847\nvt 0.3599 0.9983\nvt 0.3591 0.9980\nvt 0.3601 0.9971\nvt 0.3609 0.9974\nvt 0.5204 0.0095\nvt 0.5196 0.0098\nvt 0.5172 0.0075\nvt 0.5180 0.0071\nvt 0.5224 0.5299\nvt 0.5216 0.5302\nvt 0.5409 0.4946\nvt 0.5417 0.4942\nvt 0.4507 0.6678\nvt 0.4499 0.6674\nvt 0.4395 0.6261\nvt 0.4404 0.6265\nvt 0.6045 0.1700\nvt 0.6054 0.1696\nvt 0.4602 0.7501\nvt 0.4594 0.7498\nvt 0.4565 0.7088\nvt 0.4574 0.7091\nvt 0.4097 0.5451\nvt 0.4089 0.5447\nvt 0.3889 0.5052\nvt 0.3898 0.5055\nvt 0.5359 0.0262\nvt 0.5351 0.0265\nvt 0.5315 0.0225\nvt 0.5324 0.0221\nvt 0.3697 0.4695\nvt 0.3705 0.4699\nvt 0.3840 0.9736\nvt 0.3831 0.9732\nvt 0.5052 0.5640\nvt 0.5044 0.5643\nvt 0.5113 0.0009\nvt 0.5104 0.0013\nvt 0.5102 0.0011\nvt 0.5110 0.0007\nvt 0.5674 0.9322\nvt 0.5666 0.9325\nvt 0.5314 0.8766\nvt 0.5322 0.8762\nvt 0.3661 0.9926\nvt 0.3653 0.9923\nvt 0.3676 0.9899\nvt 0.3684 0.9903\nvt 0.3202 0.2991\nvt 0.3194 0.2987\nvt 0.4425 0.8681\nvt 0.4434 0.8685\nvt 0.3539 0.1739\nvt 0.3530 0.1735\nvt 0.3794 0.1232\nvt 0.3803 0.1235\nvt 0.4765 0.7389\nvt 0.4757 0.7393\nvt 0.4713 0.7010\nvt 0.4721 0.7007\nvt 0.4534 0.8301\nvt 0.4526 0.8298\nvt 0.4581 0.7902\nvt 0.4590 0.7906\nvt 0.4908 0.5973\nvt 0.4900 0.5976\nvt 0.6093 0.2906\nvt 0.6085 0.2910\nvt 0.5119 0.0014\nvt 0.5110 0.0018\nvt 0.4146 0.0672\nvt 0.4154 0.0676\nvt 0.4800 0.6306\nvt 0.4792 0.6310\nvt 0.4258 0.5851\nvt 0.4266 0.5855\nvt 0.5953 0.1313\nvt 0.5945 0.1316\nvt 0.5797 0.0947\nvt 0.5805 0.0944\nvt 0.3623 0.9962\nvt 0.3615 0.9958\nvt 0.3632 0.9942\nvt 0.3640 0.9946\nvt 0.3533 0.4358\nvt 0.3524 0.4354\nvt 0.3381 0.4021\nvt 0.3389 0.4025\nvt 0.5129 0.0023\nvt 0.5121 0.0027\nvt 0.5290 0.0184\nvt 0.5282 0.0188\nvt 0.5251 0.0155\nvt 0.5259 0.0151\nvt 0.3804 0.9776\nvt 0.3796 0.9773\nvt 0.5230 0.0121\nvt 0.5222 0.0125\nvt 0.6122 0.9945\nvt 0.6113 0.9949\nvt 0.4735 0.6648\nvt 0.4727 0.6652\nvt 0.5600 0.0596\nvt 0.5608 0.0592\nvt 0.5143 0.0036\nvt 0.5134 0.0040\nvt 0.5616 0.4547\nvt 0.5608 0.4551\nvt 0.3593 0.9989\nvt 0.3585 0.9985\nvt 0.5152 0.0056\nvt 0.5160 0.0052\nvt 0.3762 0.9810\nvt 0.3771 0.9813\nvt 0.3591 0.9990\nvt 0.3583 0.9987\nvt 0.4594 0.0049\nvt 0.4602 0.0052\nvt 0.3978 0.5398\nvt 0.3778 0.5003\nvt 0.5204 0.0274\nvt 0.5171 0.0237\nvt 0.3565 0.9851\nvt 0.3591 0.9824\nvt 0.4993 0.0061\nvt 0.4991 0.0060\nvt 0.3097 0.3297\nvt 0.3083 0.2939\nvt 0.4035 0.0624\nvt 0.4483 0.0000\nvt 0.3542 0.9874\nvt 0.5203 0.8815\nvt 0.4939 0.8311\nvt 0.3969 0.9353\nvt 0.4167 0.9002\nvt 0.4415 0.8249\nvt 0.4470 0.7853\nvt 0.6002 0.2549\nvt 0.5990 0.2144\nvt 0.5667 0.4195\nvt 0.5804 0.3785\nvt 0.4789 0.6025\nvt 0.4933 0.5692\nvt 0.5907 0.3372\nvt 0.5105 0.5351\nvt 0.5298 0.4995\nvt 0.3683 0.1183\nvt 0.3162 0.3639\nvt 0.5240 0.0314\nvt 0.4756 0.7856\nvt 0.4646 0.7441\nvt 0.5085 0.0147\nvt 0.5061 0.0124\nvt 0.3720 0.9684\nvt 0.5934 0.1749\nvt 0.5834 0.1365\nvt 0.4483 0.7449\nvt 0.4455 0.7039\nvt 0.5555 0.9374\nvt 0.5497 0.4599\nvt 0.3586 0.4647\nvt 0.4314 0.8633\nvt 0.5041 0.0104\nvt 0.3127 0.2556\nvt 0.3472 0.9938\nvt 0.3474 0.9936\nvt 0.3420 0.1686\nvt 0.5974 0.2959\nvt 0.5140 0.0203\nvt 0.5111 0.0173\nvt 0.4681 0.6359\nvt 0.4284 0.6213\nvt 0.4147 0.5803\nvt 0.4388 0.6626\nvt 0.3504 0.9910\nvt 0.3521 0.9893\nvt 0.3413 0.4306\nvt 0.3270 0.3973\nvt 0.3236 0.2141\nvt 0.5010 0.0076\nvt 0.4999 0.0067\nvt 0.3620 0.9794\nvt 0.4616 0.6701\nvt 0.5023 0.0088\nvt 0.3490 0.9922\nvt 0.4602 0.7059\nvt 0.5489 0.0645\nvt 0.5686 0.0996\nvt 0.3685 0.9724\nvt 0.3651 0.9761\nvt 0.6002 0.9998\nvt 0.3480 0.9931\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.0000 0.0000\nvt 0.9824 0.0002\nvt 0.9878 0.0000\nvt 0.9878 0.0700\nvt 0.9824 0.0702\nvt 0.9823 0.1848\nvt 0.9877 0.1847\nvt 0.9877 0.2311\nvt 0.9823 0.2313\nvt 0.9820 0.5942\nvt 0.9874 0.5940\nvt 0.9874 0.6287\nvt 0.9820 0.6289\nvt 0.9757 0.0027\nvt 0.9811 0.0029\nvt 0.9811 0.0040\nvt 0.9757 0.0038\nvt 0.9818 0.8132\nvt 0.9872 0.8130\nvt 0.9872 0.8507\nvt 0.9818 0.8509\nvt 0.9757 0.0020\nvt 0.9811 0.0022\nvt 0.9819 0.7010\nvt 0.9873 0.7008\nvt 0.9873 0.7379\nvt 0.9819 0.7381\nvt 0.9757 0.0194\nvt 0.9811 0.0196\nvt 0.9811 0.0236\nvt 0.9757 0.0234\nvt 0.9818 0.9135\nvt 0.9872 0.9133\nvt 0.9872 0.9153\nvt 0.9818 0.9155\nvt 0.9760 0.4230\nvt 0.9814 0.4232\nvt 0.9814 0.4520\nvt 0.9760 0.4518\nvt 0.9818 0.8931\nvt 0.9872 0.8930\nvt 0.9872 0.8973\nvt 0.9818 0.8975\nvt 0.9757 0.0126\nvt 0.9811 0.0128\nvt 0.9811 0.0160\nvt 0.9757 0.0158\nvt 0.9818 0.9189\nvt 0.9872 0.9187\nvt 0.9872 0.9189\nvt 0.9818 0.9191\nvt 0.9761 0.5820\nvt 0.9815 0.5822\nvt 0.9815 0.6137\nvt 0.9761 0.6135\nvt 0.9763 0.8507\nvt 0.9817 0.8509\nvt 0.9818 0.9209\nvt 0.9764 0.9207\nvt 0.9757 0.0098\nvt 0.9811 0.0100\nvt 0.9823 0.1314\nvt 0.9877 0.1313\nvt 0.9757 0.0700\nvt 0.9811 0.0702\nvt 0.9812 0.1079\nvt 0.9758 0.1077\nvt 0.9758 0.1829\nvt 0.9812 0.1830\nvt 0.9812 0.2201\nvt 0.9758 0.2199\nvt 0.9819 0.6645\nvt 0.9873 0.6644\nvt 0.9821 0.5285\nvt 0.9874 0.5283\nvt 0.9874 0.5605\nvt 0.9820 0.5607\nvt 0.9822 0.3936\nvt 0.9875 0.3934\nvt 0.9875 0.4185\nvt 0.9821 0.4186\nvt 0.9821 0.4435\nvt 0.9875 0.4433\nvt 0.9875 0.4689\nvt 0.9821 0.4691\nvt 0.9763 0.7895\nvt 0.9817 0.7896\nvt 0.9761 0.5536\nvt 0.9815 0.5538\nvt 0.9818 0.8884\nvt 0.9872 0.8882\nvt 0.9876 0.2717\nvt 0.9822 0.2718\nvt 0.9818 0.9083\nvt 0.9872 0.9081\nvt 0.9872 0.9109\nvt 0.9818 0.9111\nvt 0.9757 0.0325\nvt 0.9811 0.0327\nvt 0.9873 0.7753\nvt 0.9819 0.7755\nvt 0.9759 0.2564\nvt 0.9813 0.2566\nvt 0.9813 0.2922\nvt 0.9759 0.2920\nvt 0.9821 0.4979\nvt 0.9875 0.4977\nvt 0.9814 0.4776\nvt 0.9760 0.4774\nvt 0.9812 0.1456\nvt 0.9758 0.1454\nvt 0.9816 0.6492\nvt 0.9762 0.6491\nvt 0.9757 0.0018\nvt 0.9811 0.0020\nvt 0.9762 0.7361\nvt 0.9816 0.7363\nvt 0.9818 0.9015\nvt 0.9872 0.9013\nvt 0.9872 0.9049\nvt 0.9818 0.9051\nvt 0.9822 0.3673\nvt 0.9876 0.3671\nvt 0.9759 0.3603\nvt 0.9813 0.3604\nvt 0.9814 0.3926\nvt 0.9760 0.3924\nvt 0.9813 0.3269\nvt 0.9759 0.3267\nvt 0.9757 0.0054\nvt 0.9811 0.0056\nvt 0.9811 0.0076\nvt 0.9757 0.0074\nvt 0.9761 0.5023\nvt 0.9815 0.5024\nvt 0.9815 0.5275\nvt 0.9761 0.5274\nvt 0.9816 0.6898\nvt 0.9762 0.6896\nvt 0.9818 0.9171\nvt 0.9872 0.9169\nvt 0.9872 0.9180\nvt 0.9818 0.9182\nvt 0.9822 0.3389\nvt 0.9876 0.3387\nvt 0.9822 0.3074\nvt 0.9876 0.3072\nvt 0.9757 0.0278\nvt 0.9811 0.0280\nvt 0.8958 0.7456\nvt 0.8995 0.7449\nvt 0.8982 0.7853\nvt 0.8946 0.7861\nvt 0.7949 0.9944\nvt 0.7985 0.9936\nvt 0.7983 0.9938\nvt 0.7947 0.9945\nvt 0.8159 0.1190\nvt 0.8195 0.1183\nvt 0.7931 0.1686\nvt 0.7895 0.1694\nvt 0.3074 0.0048\nvt 0.3083 0.0052\nvt 0.7522 0.2489\nvt 0.7558 0.2496\nvt 0.7530 0.2906\nvt 0.7494 0.2899\nvt 0.6630 0.0114\nvt 0.6667 0.0121\nvt 0.6696 0.0151\nvt 0.6659 0.0144\nvt 0.6309 0.5966\nvt 0.6345 0.5973\nvt 0.6237 0.6306\nvt 0.6201 0.6299\nvt 0.8623 0.5810\nvt 0.8659 0.5803\nvt 0.8796 0.6213\nvt 0.8760 0.6220\nvt 0.8863 0.6633\nvt 0.8899 0.6626\nvt 0.8966 0.7039\nvt 0.8930 0.7046\nvt 0.7997 0.9901\nvt 0.8033 0.9893\nvt 0.8016 0.9910\nvt 0.7979 0.9917\nvt 0.7745 0.3980\nvt 0.7781 0.3973\nvt 0.7925 0.4306\nvt 0.7889 0.4313\nvt 0.7712 0.2149\nvt 0.7748 0.2141\nvt 0.7638 0.2556\nvt 0.7602 0.2564\nvt 0.6727 0.0184\nvt 0.6691 0.0177\nvt 0.6519 0.0007\nvt 0.6555 0.0014\nvt 0.6565 0.0023\nvt 0.6529 0.0016\nvt 0.8096 0.9802\nvt 0.8132 0.9794\nvt 0.8103 0.9824\nvt 0.8067 0.9832\nvt 0.6172 0.6648\nvt 0.6136 0.6641\nvt 0.6604 0.0087\nvt 0.6640 0.0095\nvt 0.9376 0.9207\nvt 0.8995 0.9207\nvt 0.6579 0.0036\nvt 0.6543 0.0029\nvt 0.9827 0.9209\nvt 0.9878 0.9207\nvt 0.8453 0.5406\nvt 0.8489 0.5398\nvt 0.6625 0.5291\nvt 0.6661 0.5299\nvt 0.6489 0.5640\nvt 0.6452 0.5632\nvt 0.8002 0.9922\nvt 0.7966 0.9929\nvt 0.6158 0.7007\nvt 0.6122 0.6999\nvt 0.6202 0.7389\nvt 0.6166 0.7382\nvt 0.6759 0.0254\nvt 0.6795 0.0262\nvt 0.7045 0.0592\nvt 0.7008 0.0585\nvt 0.9885 0.0000\nvt 0.9939 0.0002\nvt 0.8890 0.8256\nvt 0.8927 0.8249\nvt 0.8826 0.8633\nvt 0.8790 0.8640\nvt 0.3546 0.9994\nvt 0.3555 0.9998\nvt 0.6513 0.0002\nvt 0.6549 0.0009\nvt 0.7017 0.4540\nvt 0.7053 0.4547\nvt 0.6854 0.4942\nvt 0.6817 0.4935\nvt 1.0000 0.9168\nvt 0.9946 0.9170\nvt 0.1541 0.9948\nvt 0.1533 0.9952\nvt 0.7206 0.0936\nvt 0.7242 0.0944\nvt 0.7390 0.1313\nvt 0.7353 0.1305\nvt 0.7637 0.3646\nvt 0.7673 0.3639\nvt 0.9747 0.0000\nvt 0.9385 0.0000\nvt 0.8097 0.4647\nvt 0.8061 0.4654\nvt 0.5066 0.0004\nvt 0.4955 0.0052\nvt 0.8017 0.9881\nvt 0.8053 0.9874\nvt 0.9818 0.0002\nvt 0.9766 0.0000\nvt 0.8196 0.9691\nvt 0.8232 0.9684\nvt 0.8197 0.9724\nvt 0.8160 0.9731\nvt 0.8163 0.9761\nvt 0.8127 0.9768\nvt 0.7074 0.9315\nvt 0.7110 0.9322\nvt 0.7558 0.9945\nvt 0.7522 0.9938\nvt 0.6276 0.7797\nvt 0.6312 0.7804\nvt 0.6495 0.8259\nvt 0.6459 0.8252\nvt 0.7463 0.3320\nvt 0.7427 0.3312\nvt 0.7992 0.9931\nvt 0.7955 0.9938\nvt 0.1422 1.0000\nvt 0.7454 0.1689\nvt 0.7490 0.1696\nvt 0.7546 0.2092\nvt 0.7509 0.2085\nvt 0.6596 0.0052\nvt 0.6560 0.0045\nvt 0.8254 0.5010\nvt 0.8290 0.5003\nvt 0.6760 0.0221\nvt 0.6724 0.0214\nvt 0.8077 0.9851\nvt 0.8041 0.9858\nvt 0.6511 0.0000\nvt 0.6547 0.0007\nvt 0.7558 0.2946\nvt 0.7594 0.2939\nvt 0.7608 0.3297\nvt 0.7572 0.3304\nvt 0.8958 0.0007\nvt 0.8995 0.0000\nvt 0.8547 0.0624\nvt 0.8511 0.0631\nvt 0.6759 0.8762\nvt 0.6722 0.8755\nvt 0.8642 0.9009\nvt 0.8678 0.9002\nvt 0.8481 0.9353\nvt 0.8445 0.9360\nvt 0.7323 0.3725\nvt 0.7360 0.3733\nvt 0.7222 0.4143\nvt 0.7186 0.4136\nvt 0.6581 0.0064\nvt 0.6617 0.0071\nvt 0.5074 0.0000\nvt 0.2963 0.0000\nvt 0.3435 0.9945\nvn 0.0784 0.9969 0.0000\nvn 0.1295 0.9916 0.0000\nvn 0.1927 0.9813 0.0000\nvn 0.2689 0.9632 0.0000\nvn 0.3569 0.9342 0.0000\nvn 0.4524 0.8918 0.0000\nvn 0.5476 0.8367 0.0000\nvn 0.6332 0.7740 0.0000\nvn 0.7021 0.7121 0.0000\nvn 0.7511 0.6601 0.0000\nvn 0.7813 0.6241 0.0000\nvn 0.7952 0.6063 0.0000\nvn 0.7809 0.6247 0.0000\nvn 0.7457 0.6663 0.0000\nvn 0.7073 0.7069 0.0000\nvn 0.6651 0.7468 0.0000\nvn 0.6180 0.7862 0.0000\nvn 0.5651 0.8251 0.0000\nvn 0.5050 0.8631 0.0000\nvn 0.4367 0.8996 0.0000\nvn 0.3586 0.9335 0.0000\nvn 0.2699 0.9629 0.0000\nvn 0.1698 0.9855 0.0000\nvn 0.0588 0.9983 0.0000\nvn -0.0073 1.0000 0.0000\nvn -0.0220 0.9998 0.0000\nvn -0.0362 0.9993 0.0000\nvn -0.0502 0.9987 0.0000\nvn -0.0638 0.9980 0.0000\nvn -0.0771 0.9970 0.0000\nvn -0.0900 0.9959 0.0000\nvn -0.1026 0.9947 0.0000\nvn -0.1148 0.9934 0.0000\nvn -0.1268 0.9919 0.0000\nvn -0.1382 0.9904 0.0000\nvn -0.1487 0.9889 0.0000\nvn 0.0000 0.0000 1.0000\nvn 0.0000 0.0000 -1.0000\nvn -0.0673 -0.8563 0.5120\nvn -0.2330 -0.8346 0.4991\nvn -0.5593 -0.7115 0.4254\nvn 0.1090 -0.8532 -0.5101\nvn -0.1463 -0.8490 0.5077\nvn 0.1190 -0.8522 -0.5095\nvn -0.3846 -0.7923 0.4737\nvn 0.0311 -0.8579 -0.5130\nvn 0.0882 -0.8549 0.5112\nvn -0.7315 -0.5852 -0.3499\nvn 0.0189 -0.8581 0.5131\nvn 0.0548 -0.8570 -0.5124\nvn 0.1278 -0.8512 0.5090\nvn -0.4897 -0.7483 -0.4475\nvn -0.0673 -0.8563 -0.5120\nvn 0.0662 -0.8564 -0.5121\nvn -0.1662 -0.8463 0.5061\nvn -0.1463 -0.8490 -0.5077\nvn -0.3846 -0.7923 -0.4737\nvn -0.4488 -0.7670 0.4586\nvn -0.6515 -0.6511 0.3893\nvn -0.6987 -0.6140 0.3672\nvn -0.6073 -0.6819 0.4077\nvn -0.7476 -0.5700 0.3408\nvn -0.1114 -0.8529 -0.5100\nvn -0.5747 -0.7024 -0.4200\nvn 0.0063 -0.8582 0.5132\nvn -0.3116 -0.8155 0.4877\nvn 0.0662 -0.8564 0.5121\nvn -0.0505 -0.8572 -0.5126\nvn -0.3132 -0.8151 0.4874\nvn -0.5067 -0.7399 -0.4424\nvn -0.1114 -0.8529 0.5100\nvn -0.6927 -0.6190 0.3701\nvn -0.7476 -0.5700 -0.3408\nvn -0.2339 -0.8345 -0.4990\nvn 0.0773 -0.8557 0.5117\nvn -0.3992 -0.7869 -0.4705\nvn -0.4488 -0.7670 -0.4586\nvn 0.1278 -0.8512 -0.5090\nvn -0.1662 -0.8463 -0.5061\nvn -0.5067 -0.7399 0.4424\nvn 0.0431 -0.8575 0.5127\nvn -0.6460 -0.6552 0.3918\nvn -0.6515 -0.6511 -0.3893\nvn -0.5593 -0.7115 -0.4254\nvn 0.0882 -0.8549 -0.5112\nvn -0.6987 -0.6140 -0.3672\nvn -0.3116 -0.8155 -0.4877\nvn 0.0311 -0.8579 0.5130\nvn 0.1090 -0.8532 0.5101\nvn 0.0431 -0.8575 -0.5127\nvn -0.5747 -0.7024 0.4200\nvn 0.0548 -0.8570 0.5124\nvn -0.6073 -0.6819 -0.4077\nvn 0.0988 -0.8541 0.5107\nvn -0.6927 -0.6190 -0.3701\nvn -0.7320 -0.5848 0.3497\nvn 0.0988 -0.8541 -0.5107\nvn -0.4897 -0.7483 0.4475\nvn -0.3992 -0.7869 0.4705\nvn -0.0505 -0.8572 0.5126\nvn -0.2330 -0.8346 -0.4991\nvn -0.3132 -0.8151 -0.4874\nvn 0.1190 -0.8522 0.5096\nvn -0.7315 -0.5852 0.3499\nvn -0.2339 -0.8345 0.4990\nvn -0.6460 -0.6552 -0.3918\nvn -0.7320 -0.5848 -0.3497\nvn 0.0773 -0.8557 -0.5117\nvn 0.0063 -0.8582 -0.5132\nvn 0.0189 -0.8581 -0.5131\nvn -0.0784 -0.9969 0.0000\nvn -0.1295 -0.9916 0.0000\nvn -0.1927 -0.9813 0.0000\nvn -0.2689 -0.9632 0.0000\nvn -0.3569 -0.9342 0.0000\nvn -0.4524 -0.8918 0.0000\nvn -0.5476 -0.8367 0.0000\nvn -0.6332 -0.7740 0.0000\nvn -0.7021 -0.7121 0.0000\nvn -0.7511 -0.6601 0.0000\nvn -0.7813 -0.6241 0.0000\nvn -0.7952 -0.6063 0.0000\nvn -0.7809 -0.6247 0.0000\nvn -0.7457 -0.6663 0.0000\nvn -0.7073 -0.7069 0.0000\nvn -0.6651 -0.7468 0.0000\nvn -0.6180 -0.7862 0.0000\nvn -0.5651 -0.8251 0.0000\nvn -0.5050 -0.8631 0.0000\nvn -0.4367 -0.8996 0.0000\nvn -0.3586 -0.9335 0.0000\nvn -0.2699 -0.9629 0.0000\nvn -0.1698 -0.9855 0.0000\nvn -0.0588 -0.9983 0.0000\nvn 0.0073 -1.0000 0.0000\nvn 0.0220 -0.9998 0.0000\nvn 0.0362 -0.9993 0.0000\nvn 0.0502 -0.9987 0.0000\nvn 0.0638 -0.9980 0.0000\nvn 0.0771 -0.9970 0.0000\nvn 0.0900 -0.9959 0.0000\nvn 0.1026 -0.9947 0.0000\nvn 0.1149 -0.9934 0.0000\nvn 0.1267 -0.9919 0.0000\nvn 0.1382 -0.9904 0.0000\nvn 0.1485 -0.9889 0.0000\nvn 0.0682 0.8675 -0.4928\nvn 0.2359 0.8450 -0.4800\nvn 0.5643 0.7178 -0.4078\nvn -0.1104 0.8642 0.4909\nvn 0.1481 0.8599 -0.4885\nvn -0.1205 0.8632 0.4903\nvn 0.3888 0.8011 -0.4551\nvn -0.0315 0.8691 0.4937\nvn -0.0893 0.8660 -0.4920\nvn 0.7359 0.5887 0.3344\nvn -0.0191 0.8693 -0.4939\nvn -0.0555 0.8681 0.4932\nvn -0.1296 0.8622 -0.4898\nvn 0.4946 0.7557 0.4293\nvn 0.0682 0.8675 0.4928\nvn -0.0670 0.8675 0.4928\nvn 0.1683 0.8571 -0.4869\nvn 0.1481 0.8599 0.4885\nvn 0.3888 0.8011 0.4551\nvn 0.4535 0.7750 -0.4402\nvn 0.6564 0.6560 -0.3726\nvn 0.7033 0.6181 -0.3511\nvn 0.6123 0.6875 -0.3905\nvn 0.7519 0.5733 -0.3257\nvn 0.1128 0.8639 0.4908\nvn 0.5797 0.7085 0.4025\nvn -0.0064 0.8695 -0.4939\nvn 0.3152 0.8252 -0.4688\nvn -0.0670 0.8675 -0.4928\nvn 0.0511 0.8684 0.4933\nvn 0.3168 0.8247 -0.4685\nvn 0.5116 0.7471 0.4244\nvn 0.1128 0.8639 -0.4908\nvn 0.6974 0.6231 -0.3540\nvn 0.7519 0.5733 0.3257\nvn 0.2368 0.8448 0.4799\nvn -0.0783 0.8668 -0.4924\nvn 0.4035 0.7956 0.4520\nvn 0.4535 0.7750 0.4402\nvn -0.1296 0.8622 0.4898\nvn 0.1683 0.8571 0.4869\nvn 0.5116 0.7471 -0.4244\nvn -0.0436 0.8687 -0.4935\nvn 0.6508 0.6601 -0.3750\nvn 0.6564 0.6560 0.3726\nvn 0.5643 0.7178 0.4078\nvn -0.0893 0.8660 0.4920\nvn 0.7033 0.6181 0.3511\nvn 0.3152 0.8252 0.4688\nvn -0.0315 0.8691 -0.4937\nvn -0.1104 0.8642 -0.4909\nvn -0.0436 0.8687 0.4935\nvn 0.5797 0.7085 -0.4025\nvn -0.0555 0.8681 -0.4932\nvn 0.6123 0.6875 0.3905\nvn -0.1000 0.8651 -0.4915\nvn 0.6974 0.6231 0.3540\nvn 0.7364 0.5883 -0.3342\nvn -0.1000 0.8651 0.4915\nvn 0.4946 0.7557 -0.4293\nvn 0.4035 0.7956 -0.4520\nvn 0.0511 0.8684 -0.4933\nvn 0.2359 0.8450 0.4800\nvn 0.3168 0.8247 0.4685\nvn -0.1205 0.8632 -0.4903\nvn 0.7359 0.5887 -0.3344\nvn 0.2368 0.8448 -0.4799\nvn 0.6508 0.6601 0.3750\nvn 0.7364 0.5883 0.3342\nvn -0.0783 0.8668 0.4924\nvn -0.0064 0.8695 0.4939\nvn -0.0191 0.8693 0.4939\nvn 0.0946 0.1616 0.9823\nvn -0.0461 0.3070 0.9506\nvn 0.0425 0.2166 0.9753\nvn -0.3253 0.0000 0.9456\nvn 0.1038 0.1516 -0.9830\nvn -0.0138 0.2746 -0.9615\nvn 0.1259 0.1277 -0.9838\nvn 0.1268 0.1267 0.9838\nvn 0.1121 0.1426 0.9834\nvn -0.0300 0.2909 0.9563\nvn 0.1345 0.1182 0.9838\nvn 0.0712 0.1865 0.9799\nvn -0.0098 0.2705 -0.9627\nvn -0.0382 0.2991 -0.9534\nvn -0.0138 0.2746 0.9615\nvn 0.1146 0.1400 -0.9835\nvn -0.0178 0.2786 -0.9602\nvn -0.6745 0.7383 0.0000\nvn 0.1197 0.1344 0.9837\nvn -0.0341 0.2950 -0.9549\nvn -0.5395 0.7275 -0.4239\nvn 0.1335 0.1193 0.9838\nvn 0.1402 0.1120 -0.9838\nvn -0.0341 0.2950 0.9549\nvn 0.1011 0.1545 -0.9828\nvn 0.0864 0.1703 -0.9816\nvn 0.0145 0.2457 -0.9692\nvn 0.5395 -0.7275 0.4238\nvn 0.0564 0.2021 0.9777\nvn 0.0715 0.1862 0.9799\nvn 0.3253 0.0000 0.9456\nvn -0.0423 0.3032 -0.9520\nvn 0.1401 0.1121 -0.9838\nvn 0.5395 -0.7275 -0.4238\nvn -0.3253 0.0000 -0.9456\nvn 0.0566 0.2019 -0.9778\nvn 0.1259 0.1277 0.9838\nvn 0.6745 -0.7383 0.0000\nvn 0.1402 0.1120 0.9838\nvn 0.3253 0.0000 -0.9456\nvn -0.0259 0.2868 0.9576\nvn -0.5395 0.7275 0.4239\nvn -0.0019 0.2625 0.9649\nvn -0.0059 0.2665 0.9638\nvn 0.0190 0.2411 -0.9703\nvn 0.0564 0.2021 -0.9777\nvn 0.1121 0.1426 -0.9834\nvn -0.0382 0.2991 0.9534\nvn 0.0381 0.2213 -0.9745\nvn -0.0423 0.3032 0.9520\nvn 0.0839 0.1729 -0.9813\nvn -0.0098 0.2705 0.9627\nvn -0.0300 0.2909 -0.9563\nvn 0.1401 0.1121 0.9838\nvn -0.0059 0.2665 -0.9638\nvn -0.0178 0.2786 0.9602\nvn -0.0461 0.3070 -0.9506\nvn 0.1011 0.1545 0.9828\nvn 0.0190 0.2411 0.9703\nvn -0.0218 0.2827 0.9590\nvn 0.0425 0.2166 -0.9753\nvn 0.0381 0.2213 0.9745\nvn 0.0839 0.1729 0.9813\nvn 0.0946 0.1616 -0.9823\nvn 0.1268 0.1267 -0.9838\nvn 0.1345 0.1182 -0.9838\nvn 0.1197 0.1344 -0.9837\nvn 0.1430 0.1090 -0.9837\nvn 0.0300 0.2297 0.9728\nvn 0.1146 0.1400 0.9835\nvn -0.0019 0.2625 -0.9649\nvn 0.0712 0.1865 -0.9799\nvn -0.0218 0.2827 -0.9590\nvn 0.0145 0.2457 0.9692\nvn 0.0715 0.1862 -0.9799\nvn 0.1038 0.1516 0.9830\nvn 0.0300 0.2297 -0.9728\nvn 0.1335 0.1193 -0.9838\nvn 0.1430 0.1090 0.9837\nvn 0.0566 0.2019 0.9778\nvn -0.0259 0.2868 -0.9576\nvn 0.0864 0.1703 0.9816\nusemtl None\ns off\nf 2108/2804/1222 2109/2805/1222 2110/2806/1222 2111/2807/1222\nf 2109/2805/1223 2112/2808/1223 2113/2809/1223 2110/2806/1223\nf 2112/2808/1224 2114/2810/1224 2115/2811/1224 2113/2809/1224\nf 2114/2810/1225 2116/2812/1225 2117/2813/1225 2115/2811/1225\nf 2116/2812/1226 2118/2814/1226 2119/2815/1226 2117/2813/1226\nf 2118/2814/1227 2120/2816/1227 2121/2817/1227 2119/2815/1227\nf 2120/2816/1228 2122/2818/1228 2123/2819/1228 2121/2817/1228\nf 2122/2818/1229 2124/2820/1229 2125/2821/1229 2123/2819/1229\nf 2124/2820/1230 2126/2822/1230 2127/2823/1230 2125/2821/1230\nf 2126/2822/1231 2128/2824/1231 2129/2825/1231 2127/2823/1231\nf 2128/2824/1232 2130/2826/1232 2131/2827/1232 2129/2825/1232\nf 2130/2826/1233 2132/2828/1233 2133/2829/1233 2131/2827/1233\nf 2132/2828/1234 2134/2830/1234 2135/2831/1234 2133/2829/1234\nf 2134/2830/1235 2136/2832/1235 2137/2833/1235 2135/2831/1235\nf 2136/2832/1236 2138/2834/1236 2139/2835/1236 2137/2833/1236\nf 2138/2834/1237 2140/2836/1237 2141/2837/1237 2139/2835/1237\nf 2140/2836/1238 2142/2838/1238 2143/2839/1238 2141/2837/1238\nf 2142/2838/1239 2144/2840/1239 2145/2841/1239 2143/2839/1239\nf 2144/2840/1240 2146/2842/1240 2147/2843/1240 2145/2841/1240\nf 2146/2842/1241 2148/2844/1241 2149/2845/1241 2147/2843/1241\nf 2148/2844/1242 2150/2846/1242 2151/2847/1242 2149/2845/1242\nf 2150/2846/1243 2152/2848/1243 2153/2849/1243 2151/2847/1243\nf 2152/2848/1244 2154/2850/1244 2155/2851/1244 2153/2849/1244\nf 2154/2850/1245 2156/2852/1245 2157/2853/1245 2155/2851/1245\nf 2156/2852/1246 2158/2854/1246 2159/2855/1246 2157/2853/1246\nf 2158/2854/1247 2160/2856/1247 2161/2857/1247 2159/2855/1247\nf 2160/2856/1248 2162/2858/1248 2163/2859/1248 2161/2857/1248\nf 2162/2858/1249 2164/2860/1249 2165/2861/1249 2163/2859/1249\nf 2164/2860/1250 2166/2862/1250 2167/2863/1250 2165/2861/1250\nf 2166/2862/1251 2168/2864/1251 2169/2865/1251 2167/2863/1251\nf 2168/2864/1252 2170/2866/1252 2171/2867/1252 2169/2865/1252\nf 2170/2866/1253 2172/2868/1253 2173/2869/1253 2171/2867/1253\nf 2172/2868/1254 2174/2870/1254 2175/2871/1254 2173/2869/1254\nf 2174/2870/1255 2176/2872/1255 2177/2873/1255 2175/2871/1255\nf 2176/2872/1256 2178/2874/1256 2179/2875/1256 2177/2873/1256\nf 2178/2874/1257 2180/2876/1257 2181/2877/1257 2179/2875/1257\nf 2145/2878/1258 2147/2879/1258 2182/2880/1258 2183/2881/1258\nf 2118/2882/1259 2116/2883/1259 2184/2884/1259 2185/2885/1259\nf 2139/2886/1258 2141/2887/1258 2186/2888/1258 2187/2889/1258\nf 2154/2890/1259 2152/2891/1259 2188/2892/1259 2189/2893/1259\nf 2115/2894/1258 2117/2895/1258 2190/2896/1258 2191/2897/1258\nf 2124/2898/1259 2122/2899/1259 2192/2900/1259 2193/2901/1259\nf 2137/2902/1258 2139/2886/1258 2187/2889/1258 2194/2903/1258\nf 2164/2904/1259 2162/2905/1259 2195/2906/1259 2196/2907/1259\nf 2176/2908/1259 2174/2909/1259 2197/2910/1259 2198/2911/1259\nf 2167/2912/1258 2169/2913/1258 2199/2914/1258 2200/2915/1258\nf 2131/2916/1258 2133/2917/1258 2201/2918/1258 2202/2919/1258\nf 2140/2920/1259 2138/2921/1259 2203/2922/1259 2204/2923/1259\nf 2147/2879/1258 2149/2924/1258 2205/2925/1258 2182/2880/1258\nf 2144/2926/1259 2142/2927/1259 2206/2928/1259 2207/2929/1259\nf 2134/2930/1259 2132/2931/1259 2208/2932/1259 2209/2933/1259\nf 2157/2934/1258 2159/2935/1258 2210/2936/1258 2211/2937/1258\nf 2132/2931/1259 2130/2938/1259 2212/2939/1259 2208/2932/1259\nf 2156/2940/1259 2154/2890/1259 2189/2893/1259 2213/2941/1259\nf 2129/2942/1258 2131/2916/1258 2202/2919/1258 2214/2943/1258\nf 2179/2944/1258 2181/2945/1258 2215/2946/1258 2216/2947/1258\nf 2110/2948/1258 2113/2949/1258 2217/2950/1258 2218/2951/1258\nf 2168/2952/1259 2166/2953/1259 2219/2954/1259 2220/2955/1259\nf 2120/2956/1259 2118/2882/1259 2185/2885/1259 2221/2957/1259\nf 2152/2891/1259 2150/2958/1259 2222/2959/1259 2188/2892/1259\nf 2114/2960/1259 2112/2961/1259 2223/2962/1259 2224/2963/1259\nf 2119/2964/1258 2121/2965/1258 2225/2966/1258 2226/2967/1258\nf 2148/2968/1259 2146/2969/1259 2227/2970/1259 2228/2971/1259\nf 2146/2969/1259 2144/2926/1259 2207/2929/1259 2227/2970/1259\nf 2116/2883/1259 2114/2960/1259 2224/2963/1259 2184/2884/1259\nf 2127/2972/1258 2129/2942/1258 2214/2943/1258 2229/2973/1258\nf 2143/2974/1258 2145/2878/1258 2183/2881/1258 2230/2975/1258\nf 2177/2976/1258 2179/2944/1258 2216/2947/1258 2231/2977/1258\nf 2112/2961/1259 2109/2978/1259 2232/2979/1259 2223/2962/1259\nf 2125/2980/1258 2127/2972/1258 2229/2973/1258 2233/2981/1258\nf 2138/2921/1259 2136/2982/1259 2234/2983/1259 2203/2922/1259\nf 2151/2984/1258 2153/2985/1258 2235/2986/1258 2236/2987/1258\nf 2172/2988/1259 2170/2989/1259 2237/2990/1259 2238/2991/1259\nf 2128/2992/1259 2126/2993/1259 2239/2994/1259 2240/2995/1259\nf 2130/2938/1259 2128/2992/1259 2240/2995/1259 2212/2939/1259\nf 2175/2996/1258 2177/2976/1258 2231/2977/1258 2241/2997/1258\nf 2161/2998/1258 2163/2999/1258 2242/3000/1258 2243/3001/1258\nf 2158/3002/1259 2156/2940/1259 2213/2941/1259 2244/3003/1259\nf 2165/3004/1258 2167/2912/1258 2200/2915/1258 2245/3005/1258\nf 2111/3006/1258 2110/2948/1258 2218/2951/1258 2246/3007/1258\nf 2117/2895/1258 2119/2964/1258 2226/2967/1258 2190/2896/1258\nf 2123/3008/1258 2125/2980/1258 2233/2981/1258 2247/3009/1258\nf 2153/2985/1258 2155/3010/1258 2248/3011/1258 2235/2986/1258\nf 2149/2924/1258 2151/2984/1258 2236/2987/1258 2205/2925/1258\nf 2173/3012/1258 2175/2996/1258 2241/2997/1258 2249/3013/1258\nf 2141/2887/1258 2143/2974/1258 2230/2975/1258 2186/2888/1258\nf 2135/3014/1258 2137/2902/1258 2194/2903/1258 2250/3015/1258\nf 2174/2909/1259 2172/2988/1259 2238/2991/1259 2197/2910/1259\nf 2136/2982/1259 2134/2930/1259 2209/2933/1259 2234/2983/1259\nf 2178/3016/1259 2176/2908/1259 2198/2911/1259 2251/3017/1259\nf 2169/2913/1258 2171/3018/1258 2252/3019/1258 2199/2914/1258\nf 2155/3010/1258 2157/2934/1258 2211/2937/1258 2248/3011/1258\nf 2162/2905/1259 2160/3020/1259 2253/3021/1259 2195/2906/1259\nf 2121/2965/1258 2123/3008/1258 2247/3009/1258 2225/2966/1258\nf 2150/2958/1259 2148/2968/1259 2228/2971/1259 2222/2959/1259\nf 2159/2935/1258 2161/2998/1258 2243/3001/1258 2210/2936/1258\nf 2171/3018/1258 2173/3012/1258 2249/3013/1258 2252/3019/1258\nf 2133/2917/1258 2135/3014/1258 2250/3015/1258 2201/2918/1258\nf 2122/2899/1259 2120/2956/1259 2221/2957/1259 2192/2900/1259\nf 2166/2953/1259 2164/2904/1259 2196/2907/1259 2219/2954/1259\nf 2180/3022/1259 2178/3016/1259 2251/3017/1259 2254/3023/1259\nf 2126/2993/1259 2124/2898/1259 2193/2901/1259 2239/2994/1259\nf 2113/2949/1258 2115/2894/1258 2191/2897/1258 2217/2950/1258\nf 2109/2978/1259 2108/3024/1259 2255/3025/1259 2232/2979/1259\nf 2163/2999/1258 2165/3004/1258 2245/3005/1258 2242/3000/1258\nf 2170/2989/1259 2168/2952/1259 2220/2955/1259 2237/2990/1259\nf 2160/3020/1259 2158/3002/1259 2244/3003/1259 2253/3021/1259\nf 2142/2927/1259 2140/2920/1259 2204/2923/1259 2206/2928/1259\nf 2209/2933/1259 2208/2932/1259 2256/3026/1259 2257/3027/1259\nf 2210/2936/1258 2243/3001/1258 2258/3028/1258 2259/3029/1258\nf 2219/2954/1259 2196/2907/1259 2260/3030/1259 2261/3031/1259\nf 2216/2947/1258 2215/2946/1258 2262/3032/1258 2263/3033/1258\nf 2192/2900/1259 2221/2957/1259 2264/3034/1259 2265/3035/1259\nf 2232/2979/1259 2255/3025/1259 2266/3036/1259 2267/3037/1259\nf 2220/2955/1259 2219/2954/1259 2261/3031/1259 2268/3038/1259\nf 2217/2950/1258 2191/2897/1258 2269/3039/1258 2270/3040/1258\nf 2189/2893/1259 2188/2892/1259 2271/3041/1259 2272/3042/1259\nf 2228/2971/1259 2227/2970/1259 2273/3043/1259 2274/3044/1259\nf 2183/2881/1258 2182/2880/1258 2275/3045/1258 2276/3046/1258\nf 2194/2903/1258 2187/2889/1258 2277/3047/1258 2278/3048/1258\nf 2229/2973/1258 2214/2943/1258 2279/3049/1258 2280/3050/1258\nf 2187/2889/1258 2186/2888/1258 2281/3051/1258 2277/3047/1258\nf 2202/2919/1258 2201/2918/1258 2282/3052/1258 2283/3053/1258\nf 2223/2962/1259 2232/2979/1259 2267/3037/1259 2284/3054/1259\nf 2193/2901/1259 2192/2900/1259 2265/3035/1259 2285/3055/1259\nf 2211/2937/1258 2210/2936/1258 2259/3029/1258 2286/3056/1258\nf 2190/2896/1258 2226/2967/1258 2287/3057/1258 2288/3058/1258\nf 2200/2915/1258 2199/2914/1258 2289/3059/1258 2290/3060/1258\nf 2213/2941/1259 2189/2893/1259 2272/3042/1259 2291/3061/1259\nf 2205/2925/1258 2236/2987/1258 2292/3062/1258 2293/3063/1258\nf 2207/2929/1259 2206/2928/1259 2294/3064/1259 2295/3065/1259\nf 2218/2951/1258 2217/2950/1258 2270/3040/1258 2296/3066/1258\nf 2250/3015/1258 2194/2903/1258 2278/3048/1258 2297/3067/1258\nf 2208/2932/1259 2212/2939/1259 2298/3068/1259 2256/3026/1259\nf 2188/2892/1259 2222/2959/1259 2299/3069/1259 2271/3041/1259\nf 2199/2914/1258 2252/3019/1258 2300/3070/1258 2289/3059/1258\nf 2221/2957/1259 2185/2885/1259 2301/3071/1259 2264/3034/1259\nf 2227/2970/1259 2207/2929/1259 2295/3065/1259 2273/3043/1259\nf 2254/3023/1259 2251/3017/1259 2302/3072/1259 2303/3073/1259\nf 2224/2963/1259 2223/2962/1259 2284/3054/1259 2304/3074/1259\nf 2230/2975/1258 2183/2881/1258 2276/3046/1258 2305/3075/1258\nf 2242/3000/1258 2245/3005/1258 2306/3076/1258 2307/3077/1258\nf 2233/2981/1258 2229/2973/1258 2280/3050/1258 2308/3078/1258\nf 2203/2922/1259 2234/2983/1259 2309/3079/1259 2310/3080/1259\nf 2206/2928/1259 2204/2923/1259 2311/3081/1259 2294/3064/1259\nf 2238/2991/1259 2237/2990/1259 2312/3082/1259 2313/3083/1259\nf 2240/2995/1259 2239/2994/1259 2314/3084/1259 2315/3085/1259\nf 2185/2885/1259 2184/2884/1259 2316/3086/1259 2301/3071/1259\nf 2243/3001/1258 2242/3000/1258 2307/3077/1258 2258/3028/1258\nf 2241/2997/1258 2231/2977/1258 2317/3087/1258 2318/3088/1258\nf 2196/2907/1259 2195/2906/1259 2319/3089/1259 2260/3030/1259\nf 2247/3009/1258 2233/2981/1258 2308/3078/1258 2320/3090/1258\nf 2245/3005/1258 2200/2915/1258 2290/3060/1258 2306/3076/1258\nf 2204/2923/1259 2203/2922/1259 2310/3080/1259 2311/3081/1259\nf 2249/3013/1258 2241/2997/1258 2318/3088/1258 2321/3091/1258\nf 2234/2983/1259 2209/2933/1259 2257/3027/1259 2309/3079/1259\nf 2214/2943/1258 2202/2919/1258 2283/3053/1258 2279/3049/1258\nf 2197/2910/1259 2238/2991/1259 2313/3083/1259 2322/3092/1259\nf 2225/2966/1258 2247/3009/1258 2320/3090/1258 2323/3093/1258\nf 2226/2967/1258 2225/2966/1258 2323/3093/1258 2287/3057/1258\nf 2248/3011/1258 2211/2937/1258 2286/3056/1258 2324/3094/1258\nf 2184/2884/1259 2224/2963/1259 2304/3074/1259 2316/3086/1259\nf 2222/2959/1259 2228/2971/1259 2274/3044/1259 2299/3069/1259\nf 2231/2977/1258 2216/2947/1258 2263/3033/1258 2317/3087/1258\nf 2201/2918/1258 2250/3015/1258 2297/3067/1258 2282/3052/1258\nf 2236/2987/1258 2235/2986/1258 2325/3095/1258 2292/3062/1258\nf 2239/2994/1259 2193/2901/1259 2285/3055/1259 2314/3084/1259\nf 2212/2939/1259 2240/2995/1259 2315/3085/1259 2298/3068/1259\nf 2237/2990/1259 2220/2955/1259 2268/3038/1259 2312/3082/1259\nf 2244/3003/1259 2213/2941/1259 2291/3061/1259 2326/3096/1259\nf 2253/3021/1259 2244/3003/1259 2326/3096/1259 2327/3097/1259\nf 2246/3007/1258 2218/2951/1258 2296/3066/1258 2328/3098/1258\nf 2191/2897/1258 2190/2896/1258 2288/3058/1258 2269/3039/1258\nf 2186/2888/1258 2230/2975/1258 2305/3075/1258 2281/3051/1258\nf 2198/2911/1259 2197/2910/1259 2322/3092/1259 2329/3099/1259\nf 2235/2986/1258 2248/3011/1258 2324/3094/1258 2325/3095/1258\nf 2251/3017/1259 2198/2911/1259 2329/3099/1259 2302/3072/1259\nf 2182/2880/1258 2205/2925/1258 2293/3063/1258 2275/3045/1258\nf 2195/2906/1259 2253/3021/1259 2327/3097/1259 2319/3089/1259\nf 2252/3019/1258 2249/3013/1258 2321/3091/1258 2300/3070/1258\nf 2308/3100/1258 2280/3101/1258 2330/3102/1258 2331/3103/1258\nf 2310/3104/1258 2309/3105/1258 2332/3106/1258 2333/3107/1258\nf 2294/3108/1258 2311/3109/1258 2334/3110/1258 2335/3111/1258\nf 2313/3112/1258 2312/3113/1258 2336/3114/1258 2337/3115/1258\nf 2315/3116/1258 2314/3117/1258 2338/3118/1258 2339/3119/1258\nf 2301/3120/1258 2316/3121/1258 2340/3122/1258 2341/3123/1258\nf 2258/3124/1258 2307/3125/1258 2342/3126/1258 2343/3127/1258\nf 2318/3128/1258 2317/3129/1258 2344/3130/1258 2345/3131/1258\nf 2260/3132/1258 2319/3133/1258 2346/3134/1258 2347/3135/1258\nf 2320/3136/1258 2308/3100/1258 2331/3103/1258 2348/3137/1258\nf 2306/3138/1258 2290/3139/1258 2349/3140/1258 2350/3141/1258\nf 2311/3109/1258 2310/3104/1258 2333/3107/1258 2334/3110/1258\nf 2321/3142/1258 2318/3128/1258 2345/3131/1258 2351/3143/1258\nf 2309/3105/1258 2257/3144/1258 2352/3145/1258 2332/3106/1258\nf 2279/3146/1258 2283/3147/1258 2353/3148/1258 2354/3149/1258\nf 2322/3150/1258 2313/3112/1258 2337/3115/1258 2355/3151/1258\nf 2323/3152/1258 2320/3136/1258 2348/3137/1258 2356/3153/1258\nf 2287/3154/1258 2323/3152/1258 2356/3153/1258 2357/3155/1258\nf 2324/3156/1258 2286/3157/1258 2358/3158/1258 2359/3159/1258\nf 2316/3121/1258 2304/3160/1258 2360/3161/1258 2340/3122/1258\nf 2299/3162/1258 2274/3163/1258 2361/3164/1258 2362/3165/1258\nf 2317/3129/1258 2263/3166/1258 2363/3167/1258 2344/3130/1258\nf 2282/3168/1258 2297/3169/1258 2364/3170/1258 2365/3171/1258\nf 2292/3172/1258 2325/3173/1258 2366/3174/1258 2367/3175/1258\nf 2314/3117/1258 2285/3176/1258 2368/3177/1258 2338/3118/1258\nf 2298/3178/1258 2315/3116/1258 2339/3119/1258 2369/3179/1258\nf 2312/3113/1258 2268/3180/1258 2370/3181/1258 2336/3114/1258\nf 2326/3182/1258 2291/3183/1258 2371/3184/1258 2372/3185/1258\nf 2327/3186/1258 2326/3182/1258 2372/3185/1258 2373/3187/1258\nf 2328/3188/1258 2296/3189/1258 2374/3190/1258 2375/3191/1258\nf 2269/3192/1258 2288/3193/1258 2376/3194/1258 2377/3195/1258\nf 2281/3196/1258 2305/3197/1258 2378/3198/1258 2379/3199/1258\nf 2329/3200/1258 2322/3150/1258 2355/3151/1258 2380/3201/1258\nf 2325/3173/1258 2324/3156/1258 2359/3159/1258 2366/3174/1258\nf 2302/3202/1258 2329/3200/1258 2380/3201/1258 2381/3203/1258\nf 2275/3204/1258 2293/3205/1258 2382/3206/1258 2383/3207/1258\nf 2319/3133/1258 2327/3186/1258 2373/3187/1258 2346/3134/1258\nf 2300/3208/1258 2321/3142/1258 2351/3143/1258 2384/3209/1258\nf 2257/3144/1258 2256/3210/1258 2385/3211/1258 2352/3145/1258\nf 2259/3212/1258 2258/3124/1258 2343/3127/1258 2386/3213/1258\nf 2261/3214/1258 2260/3132/1258 2347/3135/1258 2387/3215/1258\nf 2263/3166/1258 2262/3216/1258 2388/3217/1258 2363/3167/1258\nf 2265/3218/1258 2264/3219/1258 2389/3220/1258 2390/3221/1258\nf 2267/3222/1258 2266/3223/1258 2391/3224/1258 2392/3225/1258\nf 2268/3180/1258 2261/3214/1258 2387/3215/1258 2370/3181/1258\nf 2270/3226/1258 2269/3192/1258 2377/3195/1258 2393/3227/1258\nf 2272/3228/1258 2271/3229/1258 2394/3230/1258 2395/3231/1258\nf 2274/3163/1258 2273/3232/1258 2396/3233/1258 2361/3164/1258\nf 2276/3234/1258 2275/3204/1258 2383/3207/1258 2397/3235/1258\nf 2278/3236/1258 2277/3237/1258 2398/3238/1258 2399/3239/1258\nf 2280/3101/1258 2279/3146/1258 2354/3149/1258 2330/3102/1258\nf 2277/3237/1258 2281/3196/1258 2379/3199/1258 2398/3238/1258\nf 2283/3147/1258 2282/3168/1258 2365/3171/1258 2353/3148/1258\nf 2284/3240/1258 2267/3222/1258 2392/3225/1258 2400/3241/1258\nf 2285/3176/1258 2265/3218/1258 2390/3221/1258 2368/3177/1258\nf 2286/3157/1258 2259/3212/1258 2386/3213/1258 2358/3158/1258\nf 2288/3193/1258 2287/3154/1258 2357/3155/1258 2376/3194/1258\nf 2290/3139/1258 2289/3242/1258 2401/3243/1258 2349/3140/1258\nf 2291/3183/1258 2272/3228/1258 2395/3231/1258 2371/3184/1258\nf 2293/3205/1258 2292/3172/1258 2367/3175/1258 2382/3206/1258\nf 2295/3244/1258 2294/3108/1258 2335/3111/1258 2402/3245/1258\nf 2296/3189/1258 2270/3226/1258 2393/3227/1258 2374/3190/1258\nf 2297/3169/1258 2278/3236/1258 2399/3239/1258 2364/3170/1258\nf 2256/3210/1258 2298/3178/1258 2369/3179/1258 2385/3211/1258\nf 2271/3229/1258 2299/3162/1258 2362/3165/1258 2394/3230/1258\nf 2289/3242/1258 2300/3208/1258 2384/3209/1258 2401/3243/1258\nf 2264/3219/1258 2301/3120/1258 2341/3123/1258 2389/3220/1258\nf 2273/3232/1258 2295/3244/1258 2402/3245/1258 2396/3233/1258\nf 2303/3246/1258 2302/3202/1258 2381/3203/1258 2403/3247/1258\nf 2304/3160/1258 2284/3240/1258 2400/3241/1258 2360/3161/1258\nf 2305/3197/1258 2276/3234/1258 2397/3235/1258 2378/3198/1258\nf 2307/3125/1258 2306/3138/1258 2350/3141/1258 2342/3126/1258\nf 2375/3248/1260 2374/3249/1260 2404/3250/1260 2405/3251/1260\nf 2377/3252/1261 2376/3253/1261 2406/3254/1261 2407/3255/1261\nf 2379/3256/1262 2378/3257/1262 2408/3258/1262 2409/3259/1262\nf 2380/3260/1263 2355/3261/1263 2410/3262/1263 2411/3263/1263\nf 2366/3264/1264 2359/3265/1264 2412/3266/1264 2413/3267/1264\nf 2381/3268/1265 2380/3260/1265 2411/3263/1265 2414/3269/1265\nf 2383/3270/1266 2382/3271/1266 2415/3272/1266 2416/3273/1266\nf 2346/3274/1267 2373/3275/1267 2417/3276/1267 2418/3277/1267\nf 2384/3278/1268 2351/3279/1268 2419/3280/1268 2420/3281/1268\nf 2352/3282/1269 2385/3283/1269 2421/3284/1269 2422/3285/1269\nf 2386/3286/1270 2343/3287/1270 2423/3288/1270 2424/3289/1270\nf 2387/3290/1271 2347/3291/1271 2425/3292/1271 2426/3293/1271\nf 2363/3294/1272 2388/3295/1272 2427/3296/1272 2428/3297/1272\nf 2390/3298/1273 2389/3299/1273 2429/3300/1273 2430/3301/1273\nf 2392/3302/1274 2391/3303/1274 2431/3304/1274 2432/3305/1274\nf 2370/3306/1275 2387/3290/1275 2426/3293/1275 2433/3307/1275\nf 2393/3308/1276 2377/3252/1276 2407/3255/1276 2434/3309/1276\nf 2395/3310/1277 2394/3311/1277 2435/3312/1277 2436/3313/1277\nf 2361/3314/1278 2396/3315/1278 2437/3316/1278 2438/3317/1278\nf 2397/3318/1279 2383/3270/1279 2416/3273/1279 2439/3319/1279\nf 2399/3320/1280 2398/3321/1280 2440/3322/1280 2441/3323/1280\nf 2330/3324/1281 2354/3325/1281 2442/3326/1281 2443/3327/1281\nf 2398/3321/1282 2379/3256/1282 2409/3259/1282 2440/3322/1282\nf 2353/3328/1283 2365/3329/1283 2444/3330/1283 2445/3331/1283\nf 2400/3332/1284 2392/3302/1284 2432/3305/1284 2446/3333/1284\nf 2368/3334/1285 2390/3298/1285 2430/3301/1285 2447/3335/1285\nf 2358/3336/1286 2386/3286/1286 2424/3289/1286 2448/3337/1286\nf 2376/3253/1287 2357/3338/1287 2449/3339/1287 2406/3254/1287\nf 2349/3340/1288 2401/3341/1288 2450/3342/1288 2451/3343/1288\nf 2371/3344/1289 2395/3310/1289 2436/3313/1289 2452/3345/1289\nf 2382/3271/1290 2367/3346/1290 2453/3347/1290 2415/3272/1290\nf 2402/3348/1291 2335/3349/1291 2454/3350/1291 2455/3351/1291\nf 2374/3249/1292 2393/3308/1292 2434/3309/1292 2404/3250/1292\nf 2364/3352/1293 2399/3320/1293 2441/3323/1293 2456/3353/1293\nf 2385/3283/1294 2369/3354/1294 2457/3355/1294 2421/3284/1294\nf 2394/3311/1295 2362/3356/1295 2458/3357/1295 2435/3312/1295\nf 2401/3341/1296 2384/3278/1296 2420/3281/1296 2450/3342/1296\nf 2389/3299/1297 2341/3358/1297 2459/3359/1297 2429/3300/1297\nf 2396/3315/1298 2402/3348/1298 2455/3351/1298 2437/3316/1298\nf 2403/3360/1299 2381/3268/1299 2414/3269/1299 2460/3361/1299\nf 2360/3362/1300 2400/3332/1300 2446/3333/1300 2461/3363/1300\nf 2378/3257/1301 2397/3318/1301 2439/3319/1301 2408/3258/1301\nf 2342/3364/1302 2350/3365/1302 2462/3366/1302 2463/3367/1302\nf 2331/3368/1303 2330/3324/1303 2443/3327/1303 2464/3369/1303\nf 2333/3370/1304 2332/3371/1304 2465/3372/1304 2466/3373/1304\nf 2335/3349/1305 2334/3374/1305 2467/3375/1305 2454/3350/1305\nf 2337/3376/1306 2336/3377/1306 2468/3378/1306 2469/3379/1306\nf 2339/3380/1307 2338/3381/1307 2470/3382/1307 2471/3383/1307\nf 2341/3358/1308 2340/3384/1308 2472/3385/1308 2459/3359/1308\nf 2343/3287/1309 2342/3364/1309 2463/3367/1309 2423/3288/1309\nf 2345/3386/1310 2344/3387/1310 2473/3388/1310 2474/3389/1310\nf 2347/3291/1311 2346/3274/1311 2418/3277/1311 2425/3292/1311\nf 2348/3390/1312 2331/3368/1312 2464/3369/1312 2475/3391/1312\nf 2350/3365/1313 2349/3340/1313 2451/3343/1313 2462/3366/1313\nf 2334/3374/1314 2333/3370/1314 2466/3373/1314 2467/3375/1314\nf 2351/3279/1315 2345/3386/1315 2474/3389/1315 2419/3280/1315\nf 2332/3371/1316 2352/3282/1316 2422/3285/1316 2465/3372/1316\nf 2354/3325/1317 2353/3328/1317 2445/3331/1317 2442/3326/1317\nf 2355/3261/1318 2337/3376/1318 2469/3379/1318 2410/3262/1318\nf 2356/3392/1319 2348/3390/1319 2475/3391/1319 2476/3393/1319\nf 2357/3338/1320 2356/3392/1320 2476/3393/1320 2449/3339/1320\nf 2359/3265/1321 2358/3336/1321 2448/3337/1321 2412/3266/1321\nf 2340/3384/1322 2360/3362/1322 2461/3363/1322 2472/3385/1322\nf 2362/3356/1323 2361/3314/1323 2438/3317/1323 2458/3357/1323\nf 2344/3387/1324 2363/3294/1324 2428/3297/1324 2473/3388/1324\nf 2365/3329/1325 2364/3352/1325 2456/3353/1325 2444/3330/1325\nf 2367/3346/1326 2366/3264/1326 2413/3267/1326 2453/3347/1326\nf 2338/3381/1327 2368/3334/1327 2447/3335/1327 2470/3382/1327\nf 2369/3354/1328 2339/3380/1328 2471/3383/1328 2457/3355/1328\nf 2336/3377/1329 2370/3306/1329 2433/3307/1329 2468/3378/1329\nf 2372/3394/1330 2371/3344/1330 2452/3345/1330 2477/3395/1330\nf 2373/3275/1331 2372/3394/1331 2477/3395/1331 2417/3276/1331\nf 2478/3396/1332 2479/3397/1332 2480/3398/1332 2481/3399/1332\nf 2481/3399/1333 2480/3398/1333 2482/3400/1333 2483/3401/1333\nf 2483/3401/1334 2482/3400/1334 2484/3402/1334 2485/3403/1334\nf 2485/3403/1335 2484/3402/1335 2486/3404/1335 2487/3405/1335\nf 2487/3405/1336 2486/3404/1336 2488/3406/1336 2489/3407/1336\nf 2489/3407/1337 2488/3406/1337 2490/3408/1337 2491/3409/1337\nf 2491/3409/1338 2490/3408/1338 2492/3410/1338 2493/3411/1338\nf 2493/3411/1339 2492/3410/1339 2494/3412/1339 2495/3413/1339\nf 2495/3413/1340 2494/3412/1340 2496/3414/1340 2497/3415/1340\nf 2497/3415/1341 2496/3414/1341 2498/3416/1341 2499/3417/1341\nf 2499/3417/1342 2498/3416/1342 2500/3418/1342 2501/3419/1342\nf 2501/3419/1343 2500/3418/1343 2502/3420/1343 2503/3421/1343\nf 2503/3421/1344 2502/3420/1344 2504/3422/1344 2505/3423/1344\nf 2505/3423/1345 2504/3422/1345 2506/3424/1345 2507/3425/1345\nf 2507/3425/1346 2506/3424/1346 2508/3426/1346 2509/3427/1346\nf 2509/3427/1347 2508/3426/1347 2510/3428/1347 2511/3429/1347\nf 2511/3429/1348 2510/3428/1348 2512/3430/1348 2513/3431/1348\nf 2513/3431/1349 2512/3430/1349 2514/3432/1349 2515/3433/1349\nf 2515/3433/1350 2514/3432/1350 2516/3434/1350 2517/3435/1350\nf 2517/3435/1351 2516/3434/1351 2518/3436/1351 2519/3437/1351\nf 2519/3437/1352 2518/3436/1352 2520/3438/1352 2521/3439/1352\nf 2521/3439/1353 2520/3438/1353 2522/3440/1353 2523/3441/1353\nf 2523/3441/1354 2522/3440/1354 2524/3442/1354 2525/3443/1354\nf 2525/3443/1355 2524/3442/1355 2526/3444/1355 2527/3445/1355\nf 2527/3445/1356 2526/3444/1356 2528/3446/1356 2529/3447/1356\nf 2529/3447/1357 2528/3446/1357 2530/3448/1357 2531/3449/1357\nf 2531/3449/1358 2530/3448/1358 2532/3450/1358 2533/3451/1358\nf 2533/3451/1359 2532/3450/1359 2534/3452/1359 2535/3453/1359\nf 2535/3453/1360 2534/3452/1360 2536/3454/1360 2537/3455/1360\nf 2537/3455/1361 2536/3454/1361 2538/3456/1361 2539/3457/1361\nf 2539/3457/1362 2538/3456/1362 2540/3458/1362 2541/3459/1362\nf 2541/3459/1363 2540/3458/1363 2542/3460/1363 2543/3461/1363\nf 2543/3461/1364 2542/3460/1364 2544/3462/1364 2545/3463/1364\nf 2545/3463/1365 2544/3462/1365 2546/3464/1365 2547/3465/1365\nf 2547/3465/1366 2546/3464/1366 2548/3466/1366 2549/3467/1366\nf 2549/3467/1367 2548/3466/1367 2550/3468/1367 2551/3469/1367\nf 2514/3470/1259 2552/3471/1259 2553/3472/1259 2516/3473/1259\nf 2489/3474/1258 2554/3475/1258 2555/3476/1258 2487/3477/1258\nf 2508/3478/1259 2556/3479/1259 2557/3480/1259 2510/3481/1259\nf 2525/3482/1258 2558/3483/1258 2559/3484/1258 2523/3485/1258\nf 2484/3486/1259 2560/3487/1259 2561/3488/1259 2486/3489/1259\nf 2495/3490/1258 2562/3491/1258 2563/3492/1258 2493/3493/1258\nf 2506/3494/1259 2564/3495/1259 2556/3479/1259 2508/3478/1259\nf 2535/3496/1258 2565/3497/1258 2566/3498/1258 2533/3499/1258\nf 2547/3500/1258 2567/3501/1258 2568/3502/1258 2545/3503/1258\nf 2536/3504/1259 2569/3505/1259 2570/3506/1259 2538/3507/1259\nf 2500/3508/1259 2571/3509/1259 2572/3510/1259 2502/3511/1259\nf 2511/3512/1258 2573/3513/1258 2574/3514/1258 2509/3515/1258\nf 2516/3473/1259 2553/3472/1259 2575/3516/1259 2518/3517/1259\nf 2515/3518/1258 2576/3519/1258 2577/3520/1258 2513/3521/1258\nf 2505/3522/1258 2578/3523/1258 2579/3524/1258 2503/3525/1258\nf 2526/3526/1259 2580/3527/1259 2581/3528/1259 2528/3529/1259\nf 2503/3525/1258 2579/3524/1258 2582/3530/1258 2501/3531/1258\nf 2527/3532/1258 2583/3533/1258 2558/3483/1258 2525/3482/1258\nf 2498/3534/1259 2584/3535/1259 2571/3509/1259 2500/3508/1259\nf 2548/3536/1259 2585/3537/1259 2586/3538/1259 2550/3539/1259\nf 2480/3540/1259 2587/3541/1259 2588/3542/1259 2482/3543/1259\nf 2539/3544/1258 2589/3545/1258 2590/3546/1258 2537/3547/1258\nf 2491/3548/1258 2591/3549/1258 2554/3475/1258 2489/3474/1258\nf 2523/3485/1258 2559/3484/1258 2592/3550/1258 2521/3551/1258\nf 2485/3552/1258 2593/3553/1258 2594/3554/1258 2483/3555/1258\nf 2488/3556/1259 2595/3557/1259 2596/3558/1259 2490/3559/1259\nf 2519/3560/1258 2597/3561/1258 2598/3562/1258 2517/3563/1258\nf 2517/3563/1258 2598/3562/1258 2576/3519/1258 2515/3518/1258\nf 2487/3477/1258 2555/3476/1258 2593/3553/1258 2485/3552/1258\nf 2496/3564/1259 2599/3565/1259 2584/3535/1259 2498/3534/1259\nf 2512/3566/1259 2600/3567/1259 2552/3471/1259 2514/3470/1259\nf 2546/3568/1259 2601/3569/1259 2585/3537/1259 2548/3536/1259\nf 2483/3555/1258 2594/3554/1258 2602/3570/1258 2481/3571/1258\nf 2494/3572/1259 2603/3573/1259 2599/3565/1259 2496/3564/1259\nf 2509/3515/1258 2574/3514/1258 2604/3574/1258 2507/3575/1258\nf 2520/3576/1259 2605/3577/1259 2606/3578/1259 2522/3579/1259\nf 2543/3580/1258 2607/3581/1258 2608/3582/1258 2541/3583/1258\nf 2499/3584/1258 2609/3585/1258 2610/3586/1258 2497/3587/1258\nf 2501/3531/1258 2582/3530/1258 2609/3585/1258 2499/3584/1258\nf 2544/3588/1259 2611/3589/1259 2601/3569/1259 2546/3568/1259\nf 2530/3590/1259 2612/3591/1259 2613/3592/1259 2532/3593/1259\nf 2529/3594/1258 2614/3595/1258 2583/3533/1258 2527/3532/1258\nf 2534/3596/1259 2615/3597/1259 2569/3505/1259 2536/3504/1259\nf 2479/3598/1259 2616/3599/1259 2587/3541/1259 2480/3540/1259\nf 2486/3489/1259 2561/3488/1259 2595/3557/1259 2488/3556/1259\nf 2492/3600/1259 2617/3601/1259 2603/3573/1259 2494/3572/1259\nf 2522/3579/1259 2606/3578/1259 2618/3602/1259 2524/3603/1259\nf 2518/3517/1259 2575/3516/1259 2605/3577/1259 2520/3576/1259\nf 2542/3604/1259 2619/3605/1259 2611/3589/1259 2544/3588/1259\nf 2510/3481/1259 2557/3480/1259 2600/3567/1259 2512/3566/1259\nf 2504/3606/1259 2620/3607/1259 2564/3495/1259 2506/3494/1259\nf 2545/3503/1258 2568/3502/1258 2607/3581/1258 2543/3580/1258\nf 2507/3575/1258 2604/3574/1258 2578/3523/1258 2505/3522/1258\nf 2549/3608/1258 2621/3609/1258 2567/3501/1258 2547/3500/1258\nf 2538/3507/1259 2570/3506/1259 2622/3610/1259 2540/3611/1259\nf 2524/3603/1259 2618/3602/1259 2580/3527/1259 2526/3526/1259\nf 2533/3499/1258 2566/3498/1258 2623/3612/1258 2531/3613/1258\nf 2490/3559/1259 2596/3558/1259 2617/3601/1259 2492/3600/1259\nf 2521/3551/1258 2592/3550/1258 2597/3561/1258 2519/3560/1258\nf 2528/3529/1259 2581/3528/1259 2612/3591/1259 2530/3590/1259\nf 2540/3611/1259 2622/3610/1259 2619/3605/1259 2542/3604/1259\nf 2502/3511/1259 2572/3510/1259 2620/3607/1259 2504/3606/1259\nf 2493/3493/1258 2563/3492/1258 2591/3549/1258 2491/3548/1258\nf 2537/3547/1258 2590/3546/1258 2565/3497/1258 2535/3496/1258\nf 2551/3614/1258 2624/3615/1258 2621/3609/1258 2549/3608/1258\nf 2497/3587/1258 2610/3586/1258 2562/3491/1258 2495/3490/1258\nf 2482/3543/1259 2588/3542/1259 2560/3487/1259 2484/3486/1259\nf 2481/3571/1258 2602/3570/1258 2625/3616/1258 2478/3617/1258\nf 2532/3593/1259 2613/3592/1259 2615/3597/1259 2534/3596/1259\nf 2541/3583/1258 2608/3582/1258 2589/3545/1258 2539/3544/1258\nf 2531/3613/1258 2623/3612/1258 2614/3595/1258 2529/3594/1258\nf 2513/3521/1258 2577/3520/1258 2573/3513/1258 2511/3512/1258\nf 2578/3523/1258 2626/3618/1258 2627/3619/1258 2579/3524/1258\nf 2581/3528/1259 2628/3620/1259 2629/3621/1259 2612/3591/1259\nf 2590/3546/1258 2630/3622/1258 2631/3623/1258 2565/3497/1258\nf 2585/3537/1259 2632/3624/1259 2633/3625/1259 2586/3538/1259\nf 2563/3492/1258 2634/3626/1258 2635/3627/1258 2591/3549/1258\nf 2602/3570/1258 2636/3628/1258 2637/3629/1258 2625/3616/1258\nf 2589/3545/1258 2638/3630/1258 2630/3622/1258 2590/3546/1258\nf 2588/3542/1259 2639/3631/1259 2640/3632/1259 2560/3487/1259\nf 2558/3483/1258 2641/3633/1258 2642/3634/1258 2559/3484/1258\nf 2597/3561/1258 2643/3635/1258 2644/3636/1258 2598/3562/1258\nf 2552/3471/1259 2645/3637/1259 2646/3638/1259 2553/3472/1259\nf 2564/3495/1259 2647/3639/1259 2648/3640/1259 2556/3479/1259\nf 2599/3565/1259 2649/3641/1259 2650/3642/1259 2584/3535/1259\nf 2556/3479/1259 2648/3640/1259 2651/3643/1259 2557/3480/1259\nf 2571/3509/1259 2652/3644/1259 2653/3645/1259 2572/3510/1259\nf 2594/3554/1258 2654/3646/1258 2636/3628/1258 2602/3570/1258\nf 2562/3491/1258 2655/3647/1258 2634/3626/1258 2563/3492/1258\nf 2580/3527/1259 2656/3648/1259 2628/3620/1259 2581/3528/1259\nf 2561/3488/1259 2657/3649/1259 2658/3650/1259 2595/3557/1259\nf 2569/3505/1259 2659/3651/1259 2660/3652/1259 2570/3506/1259\nf 2583/3533/1258 2661/3653/1258 2641/3633/1258 2558/3483/1258\nf 2575/3516/1259 2662/3654/1259 2663/3655/1259 2605/3577/1259\nf 2576/3519/1258 2664/3656/1258 2665/3657/1258 2577/3520/1258\nf 2587/3541/1259 2666/3658/1259 2639/3631/1259 2588/3542/1259\nf 2620/3607/1259 2667/3659/1259 2647/3639/1259 2564/3495/1259\nf 2579/3524/1258 2627/3619/1258 2668/3660/1258 2582/3530/1258\nf 2559/3484/1258 2642/3634/1258 2669/3661/1258 2592/3550/1258\nf 2570/3506/1259 2660/3652/1259 2670/3662/1259 2622/3610/1259\nf 2591/3549/1258 2635/3627/1258 2671/3663/1258 2554/3475/1258\nf 2598/3562/1258 2644/3636/1258 2664/3656/1258 2576/3519/1258\nf 2624/3615/1258 2672/3664/1258 2673/3665/1258 2621/3609/1258\nf 2593/3553/1258 2674/3666/1258 2654/3646/1258 2594/3554/1258\nf 2600/3567/1259 2675/3667/1259 2645/3637/1259 2552/3471/1259\nf 2613/3592/1259 2676/3668/1259 2677/3669/1259 2615/3597/1259\nf 2603/3573/1259 2678/3670/1259 2649/3641/1259 2599/3565/1259\nf 2574/3514/1258 2679/3671/1258 2680/3672/1258 2604/3574/1258\nf 2577/3520/1258 2665/3657/1258 2681/3673/1258 2573/3513/1258\nf 2607/3581/1258 2682/3674/1258 2683/3675/1258 2608/3582/1258\nf 2609/3585/1258 2684/3676/1258 2685/3677/1258 2610/3586/1258\nf 2554/3475/1258 2671/3663/1258 2686/3678/1258 2555/3476/1258\nf 2612/3591/1259 2629/3621/1259 2676/3668/1259 2613/3592/1259\nf 2611/3589/1259 2687/3679/1259 2688/3680/1259 2601/3569/1259\nf 2565/3497/1258 2631/3623/1258 2689/3681/1258 2566/3498/1258\nf 2617/3601/1259 2690/3682/1259 2678/3670/1259 2603/3573/1259\nf 2615/3597/1259 2677/3669/1259 2659/3651/1259 2569/3505/1259\nf 2573/3513/1258 2681/3673/1258 2679/3671/1258 2574/3514/1258\nf 2619/3605/1259 2691/3683/1259 2687/3679/1259 2611/3589/1259\nf 2604/3574/1258 2680/3672/1258 2626/3618/1258 2578/3523/1258\nf 2584/3535/1259 2650/3642/1259 2652/3644/1259 2571/3509/1259\nf 2568/3502/1258 2692/3684/1258 2682/3674/1258 2607/3581/1258\nf 2596/3558/1259 2693/3685/1259 2690/3682/1259 2617/3601/1259\nf 2595/3557/1259 2658/3650/1259 2693/3685/1259 2596/3558/1259\nf 2618/3602/1259 2694/3686/1259 2656/3648/1259 2580/3527/1259\nf 2555/3476/1258 2686/3678/1258 2674/3666/1258 2593/3553/1258\nf 2592/3550/1258 2669/3661/1258 2643/3635/1258 2597/3561/1258\nf 2601/3569/1259 2688/3680/1259 2632/3624/1259 2585/3537/1259\nf 2572/3510/1259 2653/3645/1259 2667/3659/1259 2620/3607/1259\nf 2605/3577/1259 2663/3655/1259 2695/3687/1259 2606/3578/1259\nf 2610/3586/1258 2685/3677/1258 2655/3647/1258 2562/3491/1258\nf 2582/3530/1258 2668/3660/1258 2684/3676/1258 2609/3585/1258\nf 2608/3582/1258 2683/3675/1258 2638/3630/1258 2589/3545/1258\nf 2614/3595/1258 2696/3688/1258 2661/3653/1258 2583/3533/1258\nf 2623/3612/1258 2697/3689/1258 2696/3688/1258 2614/3595/1258\nf 2616/3599/1259 2698/3690/1259 2666/3658/1259 2587/3541/1259\nf 2560/3487/1259 2640/3632/1259 2657/3649/1259 2561/3488/1259\nf 2557/3480/1259 2651/3643/1259 2675/3667/1259 2600/3567/1259\nf 2567/3501/1258 2699/3691/1258 2692/3684/1258 2568/3502/1258\nf 2606/3578/1259 2695/3687/1259 2694/3686/1259 2618/3602/1259\nf 2621/3609/1258 2673/3665/1258 2699/3691/1258 2567/3501/1258\nf 2553/3472/1259 2646/3638/1259 2662/3654/1259 2575/3516/1259\nf 2566/3498/1258 2689/3681/1258 2697/3689/1258 2623/3612/1258\nf 2622/3610/1259 2670/3662/1259 2691/3683/1259 2619/3605/1259\nf 2678/3692/1258 2700/3693/1258 2701/3694/1258 2649/3695/1258\nf 2679/3696/1258 2702/3697/1258 2703/3698/1258 2680/3699/1258\nf 2665/3700/1258 2704/3701/1258 2705/3702/1258 2681/3703/1258\nf 2682/3704/1258 2706/3705/1258 2707/3706/1258 2683/3707/1258\nf 2684/3708/1258 2708/3709/1258 2709/3710/1258 2685/3711/1258\nf 2671/3712/1258 2710/3713/1258 2711/3714/1258 2686/3715/1258\nf 2629/3716/1258 2712/3717/1258 2713/3718/1258 2676/3719/1258\nf 2687/3720/1258 2714/3721/1258 2715/3722/1258 2688/3723/1258\nf 2631/3724/1258 2716/3725/1258 2717/3726/1258 2689/3727/1258\nf 2690/3728/1258 2718/3729/1258 2700/3693/1258 2678/3692/1258\nf 2677/3730/1258 2719/3731/1258 2720/3732/1258 2659/3733/1258\nf 2681/3703/1258 2705/3702/1258 2702/3697/1258 2679/3696/1258\nf 2691/3734/1258 2721/3735/1258 2714/3721/1258 2687/3720/1258\nf 2680/3699/1258 2703/3698/1258 2722/3736/1258 2626/3737/1258\nf 2650/3738/1258 2723/3739/1258 2724/3740/1258 2652/3741/1258\nf 2692/3742/1258 2725/3743/1258 2706/3705/1258 2682/3704/1258\nf 2693/3744/1258 2726/3745/1258 2718/3729/1258 2690/3728/1258\nf 2658/3746/1258 2727/3747/1258 2726/3745/1258 2693/3744/1258\nf 2694/3748/1258 2728/3749/1258 2729/3750/1258 2656/3751/1258\nf 2686/3715/1258 2711/3714/1258 2730/3752/1258 2674/3753/1258\nf 2669/3754/1258 2731/3755/1258 2732/3756/1258 2643/3757/1258\nf 2688/3723/1258 2715/3722/1258 2733/3758/1258 2632/3759/1258\nf 2653/3760/1258 2734/3761/1258 2735/3762/1258 2667/3763/1258\nf 2663/3764/1258 2736/3765/1258 2737/3766/1258 2695/3767/1258\nf 2685/3711/1258 2709/3710/1258 2738/3768/1258 2655/3769/1258\nf 2668/3770/1258 2739/3771/1258 2708/3709/1258 2684/3708/1258\nf 2683/3707/1258 2707/3706/1258 2740/3772/1258 2638/3773/1258\nf 2696/3774/1258 2741/3775/1258 2742/3776/1258 2661/3777/1258\nf 2697/3778/1258 2743/3779/1258 2741/3775/1258 2696/3774/1258\nf 2698/3780/1258 2744/3781/1258 2745/3782/1258 2666/3783/1258\nf 2640/3784/1258 2746/3785/1258 2747/3786/1258 2657/3787/1258\nf 2651/3788/1258 2748/3789/1258 2749/3790/1258 2675/3791/1258\nf 2699/3792/1258 2750/3793/1258 2725/3743/1258 2692/3742/1258\nf 2695/3767/1258 2737/3766/1258 2728/3749/1258 2694/3748/1258\nf 2673/3794/1258 2751/3795/1258 2750/3793/1258 2699/3792/1258\nf 2646/3796/1258 2752/3797/1258 2753/3798/1258 2662/3799/1258\nf 2689/3727/1258 2717/3726/1258 2743/3779/1258 2697/3778/1258\nf 2670/3800/1258 2754/3801/1258 2721/3735/1258 2691/3734/1258\nf 2626/3737/1258 2722/3736/1258 2755/3802/1258 2627/3803/1258\nf 2628/3804/1258 2756/3805/1258 2712/3717/1258 2629/3716/1258\nf 2630/3806/1258 2757/3807/1258 2716/3725/1258 2631/3724/1258\nf 2632/3759/1258 2733/3758/1258 2758/3808/1258 2633/3809/1258\nf 2634/3810/1258 2759/3811/1258 2760/3812/1258 2635/3813/1258\nf 2636/3814/1258 2761/3815/1258 2762/3816/1258 2637/3817/1258\nf 2638/3773/1258 2740/3772/1258 2757/3807/1258 2630/3806/1258\nf 2639/3818/1258 2763/3819/1258 2746/3785/1258 2640/3784/1258\nf 2641/3820/1258 2764/3821/1258 2765/3822/1258 2642/3823/1258\nf 2643/3757/1258 2732/3756/1258 2766/3824/1258 2644/3825/1258\nf 2645/3826/1258 2767/3827/1258 2752/3797/1258 2646/3796/1258\nf 2647/3828/1258 2768/3829/1258 2769/3830/1258 2648/3831/1258\nf 2649/3695/1258 2701/3694/1258 2723/3739/1258 2650/3738/1258\nf 2648/3831/1258 2769/3830/1258 2748/3789/1258 2651/3788/1258\nf 2652/3741/1258 2724/3740/1258 2734/3761/1258 2653/3760/1258\nf 2654/3832/1258 2770/3833/1258 2761/3815/1258 2636/3814/1258\nf 2655/3769/1258 2738/3768/1258 2759/3811/1258 2634/3810/1258\nf 2656/3751/1258 2729/3750/1258 2756/3805/1258 2628/3804/1258\nf 2657/3787/1258 2747/3786/1258 2727/3747/1258 2658/3746/1258\nf 2659/3733/1258 2720/3732/1258 2771/3834/1258 2660/3835/1258\nf 2661/3777/1258 2742/3776/1258 2764/3821/1258 2641/3820/1258\nf 2662/3799/1258 2753/3798/1258 2736/3765/1258 2663/3764/1258\nf 2664/3836/1258 2772/3837/1258 2704/3701/1258 2665/3700/1258\nf 2666/3783/1258 2745/3782/1258 2763/3819/1258 2639/3818/1258\nf 2667/3763/1258 2735/3762/1258 2768/3829/1258 2647/3828/1258\nf 2627/3803/1258 2755/3802/1258 2739/3771/1258 2668/3770/1258\nf 2642/3823/1258 2765/3822/1258 2731/3755/1258 2669/3754/1258\nf 2660/3835/1258 2771/3834/1258 2754/3801/1258 2670/3800/1258\nf 2635/3813/1258 2760/3812/1258 2710/3713/1258 2671/3712/1258\nf 2644/3825/1258 2766/3824/1258 2772/3837/1258 2664/3836/1258\nf 2672/3838/1258 2773/3839/1258 2751/3795/1258 2673/3794/1258\nf 2674/3753/1258 2730/3752/1258 2770/3833/1258 2654/3832/1258\nf 2675/3791/1258 2749/3790/1258 2767/3827/1258 2645/3826/1258\nf 2676/3719/1258 2713/3718/1258 2719/3731/1258 2677/3730/1258\nf 2744/3840/1368 2774/3841/1368 2775/3842/1368 2745/3843/1368\nf 2746/3844/1369 2776/3845/1369 2777/3846/1369 2747/3847/1369\nf 2748/3848/1370 2778/3849/1370 2779/3850/1370 2749/3851/1370\nf 2750/3852/1371 2780/3853/1371 2781/3854/1371 2725/3855/1371\nf 2737/3856/1372 2782/3857/1372 2783/3858/1372 2728/3859/1372\nf 2751/3860/1373 2784/3861/1373 2780/3853/1373 2750/3852/1373\nf 2752/3862/1374 2785/3863/1374 2786/3864/1374 2753/3865/1374\nf 2717/3866/1375 2787/3867/1375 2788/3868/1375 2743/3869/1375\nf 2754/3870/1376 2789/3871/1376 2790/3872/1376 2721/3873/1376\nf 2722/3874/1377 2791/3875/1377 2792/3876/1377 2755/3877/1377\nf 2756/3878/1378 2793/3879/1378 2794/3880/1378 2712/3881/1378\nf 2757/3882/1379 2795/3883/1379 2796/3884/1379 2716/3885/1379\nf 2733/3886/1380 2797/3887/1380 2798/3888/1380 2758/3889/1380\nf 2759/3890/1381 2799/3891/1381 2800/3892/1381 2760/3893/1381\nf 2761/3894/1382 2801/3895/1382 2802/3896/1382 2762/3897/1382\nf 2740/3898/1383 2803/3899/1383 2795/3883/1383 2757/3882/1383\nf 2763/3900/1384 2804/3901/1384 2776/3845/1384 2746/3844/1384\nf 2764/3902/1385 2805/3903/1385 2806/3904/1385 2765/3905/1385\nf 2732/3906/1386 2807/3907/1386 2808/3908/1386 2766/3909/1386\nf 2767/3910/1387 2809/3911/1387 2785/3863/1387 2752/3862/1387\nf 2768/3912/1388 2810/3913/1388 2811/3914/1388 2769/3915/1388\nf 2701/3916/1389 2812/3917/1389 2813/3918/1389 2723/3919/1389\nf 2769/3915/1390 2811/3914/1390 2778/3849/1390 2748/3848/1390\nf 2724/3920/1391 2814/3921/1391 2815/3922/1391 2734/3923/1391\nf 2770/3924/1392 2816/3925/1392 2801/3895/1392 2761/3894/1392\nf 2738/3926/1393 2817/3927/1393 2799/3891/1393 2759/3890/1393\nf 2729/3928/1394 2818/3929/1394 2793/3879/1394 2756/3878/1394\nf 2747/3847/1395 2777/3846/1395 2819/3930/1395 2727/3931/1395\nf 2720/3932/1396 2820/3933/1396 2821/3934/1396 2771/3935/1396\nf 2742/3936/1397 2822/3937/1397 2805/3903/1397 2764/3902/1397\nf 2753/3865/1398 2786/3864/1398 2823/3938/1398 2736/3939/1398\nf 2772/3940/1399 2824/3941/1399 2825/3942/1399 2704/3943/1399\nf 2745/3843/1400 2775/3842/1400 2804/3901/1400 2763/3900/1400\nf 2735/3944/1401 2826/3945/1401 2810/3913/1401 2768/3912/1401\nf 2755/3877/1402 2792/3876/1402 2827/3946/1402 2739/3947/1402\nf 2765/3905/1403 2806/3904/1403 2828/3948/1403 2731/3949/1403\nf 2771/3935/1404 2821/3934/1404 2789/3871/1404 2754/3870/1404\nf 2760/3893/1405 2800/3892/1405 2829/3950/1405 2710/3951/1405\nf 2766/3909/1406 2808/3908/1406 2824/3941/1406 2772/3940/1406\nf 2773/3952/1407 2830/3953/1407 2784/3861/1407 2751/3860/1407\nf 2730/3954/1408 2831/3955/1408 2816/3925/1408 2770/3924/1408\nf 2749/3851/1409 2779/3850/1409 2809/3911/1409 2767/3910/1409\nf 2713/3956/1410 2832/3957/1410 2833/3958/1410 2719/3959/1410\nf 2700/3960/1411 2834/3961/1411 2812/3917/1411 2701/3916/1411\nf 2702/3962/1412 2835/3963/1412 2836/3964/1412 2703/3965/1412\nf 2704/3943/1413 2825/3942/1413 2837/3966/1413 2705/3967/1413\nf 2706/3968/1414 2838/3969/1414 2839/3970/1414 2707/3971/1414\nf 2708/3972/1415 2840/3973/1415 2841/3974/1415 2709/3975/1415\nf 2710/3951/1416 2829/3950/1416 2842/3976/1416 2711/3977/1416\nf 2712/3881/1417 2794/3880/1417 2832/3957/1417 2713/3956/1417\nf 2714/3978/1418 2843/3979/1418 2844/3980/1418 2715/3981/1418\nf 2716/3885/1419 2796/3884/1419 2787/3867/1419 2717/3866/1419\nf 2718/3982/1420 2845/3983/1420 2834/3961/1420 2700/3960/1420\nf 2719/3959/1421 2833/3958/1421 2820/3933/1421 2720/3932/1421\nf 2705/3967/1422 2837/3966/1422 2835/3963/1422 2702/3962/1422\nf 2721/3873/1423 2790/3872/1423 2843/3979/1423 2714/3978/1423\nf 2703/3965/1424 2836/3964/1424 2791/3875/1424 2722/3874/1424\nf 2723/3919/1425 2813/3918/1425 2814/3921/1425 2724/3920/1425\nf 2725/3855/1426 2781/3854/1426 2838/3969/1426 2706/3968/1426\nf 2726/3984/1427 2846/3985/1427 2845/3983/1427 2718/3982/1427\nf 2727/3931/1428 2819/3930/1428 2846/3985/1428 2726/3984/1428\nf 2728/3859/1429 2783/3858/1429 2818/3929/1429 2729/3928/1429\nf 2711/3977/1430 2842/3976/1430 2831/3955/1430 2730/3954/1430\nf 2731/3949/1431 2828/3948/1431 2807/3907/1431 2732/3906/1431\nf 2715/3981/1432 2844/3980/1432 2797/3887/1432 2733/3886/1432\nf 2734/3923/1433 2815/3922/1433 2826/3945/1433 2735/3944/1433\nf 2736/3939/1434 2823/3938/1434 2782/3857/1434 2737/3856/1434\nf 2709/3975/1435 2841/3974/1435 2817/3927/1435 2738/3926/1435\nf 2739/3947/1436 2827/3946/1436 2840/3973/1436 2708/3972/1436\nf 2707/3971/1437 2839/3970/1437 2803/3899/1437 2740/3898/1437\nf 2741/3986/1438 2847/3987/1438 2822/3937/1438 2742/3936/1438\nf 2743/3869/1439 2788/3868/1439 2847/3987/1439 2741/3986/1439\nf 2455/3988/1440 2824/3989/1440 2808/3990/1440 2437/3991/1440\nf 2414/3992/1441 2784/3993/1441 2830/3994/1441 2460/3995/1441\nf 2446/3996/1442 2816/3997/1442 2831/3998/1442 2461/3999/1442\nf 2246/3007/1443 2616/4000/1443 2479/4001/1443 2111/3006/1443\nf 2439/4002/1444 2809/4003/1444 2779/4004/1444 2408/4005/1444\nf 2462/4006/1445 2833/4007/1445 2832/4008/1445 2463/4009/1445\nf 2443/4010/1446 2812/4011/1446 2834/4012/1446 2464/4013/1446\nf 2465/4014/1447 2836/4015/1447 2835/4016/1447 2466/4017/1447\nf 2467/4018/1448 2837/4019/1448 2825/4020/1448 2454/4021/1448\nf 2468/4022/1449 2839/4023/1449 2838/4024/1449 2469/4025/1449\nf 2266/3223/1258 2637/3817/1258 2762/3816/1258 2391/3224/1258\nf 2470/4026/1450 2841/4027/1450 2840/4028/1450 2471/4029/1450\nf 2472/4030/1451 2842/4031/1451 2829/4032/1451 2459/4033/1451\nf 2463/4009/1452 2832/4008/1452 2794/4034/1452 2423/4035/1452\nf 2473/4036/1453 2844/4037/1453 2843/4038/1453 2474/4039/1453\nf 2418/4040/1454 2787/4041/1454 2796/4042/1454 2425/4043/1454\nf 2464/4013/1455 2834/4012/1455 2845/4044/1455 2475/4045/1455\nf 2451/4046/1456 2820/4047/1456 2833/4007/1456 2462/4006/1456\nf 2111/2807/1457 2479/4048/1457 2478/4049/1457 2108/2804/1457\nf 2466/4017/1458 2835/4016/1458 2837/4019/1458 2467/4018/1458\nf 2474/4039/1459 2843/4038/1459 2790/4050/1459 2419/4051/1459\nf 2388/4052/1460 2758/3889/1460 2798/3888/1460 2427/4053/1460\nf 2422/4054/1461 2791/4055/1461 2836/4015/1461 2465/4014/1461\nf 2445/4056/1462 2814/4057/1462 2813/4058/1462 2442/4059/1462\nf 2469/4025/1463 2838/4024/1463 2781/4060/1463 2410/4061/1463\nf 2475/4045/1464 2845/4044/1464 2846/4062/1464 2476/4063/1464\nf 2476/4063/1465 2846/4062/1465 2819/4064/1465 2449/4065/1465\nf 2448/4066/1466 2818/4067/1466 2783/4068/1466 2412/4069/1466\nf 2405/3251/1467 2774/4070/1467 2744/4071/1467 2375/3248/1467\nf 2461/3999/1468 2831/3998/1468 2842/4031/1468 2472/4030/1468\nf 2438/4072/1469 2807/4073/1469 2828/4074/1469 2458/4075/1469\nf 2254/4076/1470 2624/3615/1470 2551/3614/1470 2180/4077/1470\nf 2428/4078/1471 2797/4079/1471 2844/4037/1471 2473/4036/1471\nf 2456/4080/1472 2826/4081/1472 2815/4082/1472 2444/4083/1472\nf 2391/3303/1473 2762/4084/1473 2802/4085/1473 2431/3304/1473\nf 2108/3024/1474 2478/4086/1474 2625/4087/1474 2255/3025/1474\nf 2413/4088/1475 2782/4089/1475 2823/4090/1475 2453/4091/1475\nf 2447/4092/1476 2817/4093/1476 2841/4027/1476 2470/4026/1476\nf 2180/4094/1477 2551/3469/1477 2550/3468/1477 2181/4095/1477\nf 2375/3191/1258 2744/3781/1258 2698/3780/1258 2328/3188/1258\nf 2471/4029/1478 2840/4028/1478 2827/4096/1478 2457/4097/1478\nf 2215/4098/1479 2586/3538/1479 2633/3625/1479 2262/4099/1479\nf 2433/4100/1480 2803/4101/1480 2839/4023/1480 2468/4022/1480\nf 2460/4102/1481 2830/3953/1481 2773/3952/1481 2403/4103/1481\nf 2452/4104/1482 2822/4105/1482 2847/4106/1482 2477/4107/1482\nf 2477/4107/1483 2847/4106/1483 2788/4108/1483 2417/4109/1483\nf 2404/4110/1484 2775/4111/1484 2774/4112/1484 2405/4113/1484\nf 2406/4114/1485 2777/4115/1485 2776/4116/1485 2407/4117/1485\nf 2403/3247/1258 2773/3839/1258 2672/3838/1258 2303/3246/1258\nf 2408/4005/1486 2779/4004/1486 2778/4118/1486 2409/4119/1486\nf 2410/4061/1487 2781/4060/1487 2780/4120/1487 2411/4121/1487\nf 2412/4069/1488 2783/4068/1488 2782/4089/1488 2413/4088/1488\nf 2411/4121/1489 2780/4120/1489 2784/3993/1489 2414/3992/1489\nf 2255/3025/1474 2625/4087/1474 2637/4122/1474 2266/3036/1474\nf 2415/4123/1490 2786/4124/1490 2785/4125/1490 2416/4126/1490\nf 2417/4109/1491 2788/4108/1491 2787/4041/1491 2418/4040/1491\nf 2419/4051/1492 2790/4050/1492 2789/4127/1492 2420/4128/1492\nf 2421/4129/1493 2792/4130/1493 2791/4055/1493 2422/4054/1493\nf 2423/4035/1494 2794/4034/1494 2793/4131/1494 2424/4132/1494\nf 2425/4043/1495 2796/4042/1495 2795/4133/1495 2426/4134/1495\nf 2427/4135/1496 2798/4136/1496 2797/4079/1496 2428/4078/1496\nf 2429/4137/1497 2800/4138/1497 2799/4139/1497 2430/4140/1497\nf 2431/4141/1498 2802/4142/1498 2801/4143/1498 2432/4144/1498\nf 2426/4134/1499 2795/4133/1499 2803/4101/1499 2433/4100/1499\nf 2407/4117/1500 2776/4116/1500 2804/4145/1500 2434/4146/1500\nf 2435/4147/1501 2806/4148/1501 2805/4149/1501 2436/4150/1501\nf 2437/3991/1502 2808/3990/1502 2807/4073/1502 2438/4072/1502\nf 2416/4126/1503 2785/4125/1503 2809/4003/1503 2439/4002/1503\nf 2440/4151/1504 2811/4152/1504 2810/4153/1504 2441/4154/1504\nf 2442/4059/1505 2813/4058/1505 2812/4011/1505 2443/4010/1505\nf 2409/4119/1506 2778/4118/1506 2811/4152/1506 2440/4151/1506\nf 2444/4083/1507 2815/4082/1507 2814/4057/1507 2445/4056/1507\nf 2432/4144/1508 2801/4143/1508 2816/3997/1508 2446/3996/1508\nf 2430/4140/1509 2799/4139/1509 2817/4093/1509 2447/4092/1509\nf 2424/4132/1510 2793/4131/1510 2818/4067/1510 2448/4066/1510\nf 2449/4065/1511 2819/4064/1511 2777/4115/1511 2406/4114/1511\nf 2450/4155/1512 2821/4156/1512 2820/4047/1512 2451/4046/1512\nf 2436/4150/1513 2805/4149/1513 2822/4105/1513 2452/4104/1513\nf 2181/4157/1479 2550/3539/1479 2586/3538/1479 2215/4098/1479\nf 2453/4091/1514 2823/4090/1514 2786/4124/1514 2415/4123/1514\nf 2454/4021/1515 2825/4020/1515 2824/3989/1515 2455/3988/1515\nf 2328/3098/1443 2698/4158/1443 2616/4000/1443 2246/3007/1443\nf 2303/4159/1470 2672/3664/1470 2624/3615/1470 2254/4076/1470\nf 2434/4146/1516 2804/4145/1516 2775/4111/1516 2404/4110/1516\nf 2441/4154/1517 2810/4153/1517 2826/4081/1517 2456/4080/1517\nf 2457/4097/1518 2827/4096/1518 2792/4130/1518 2421/4129/1518\nf 2262/3216/1258 2633/3809/1258 2758/3808/1258 2388/3217/1258\nf 2458/4075/1519 2828/4074/1519 2806/4148/1519 2435/4147/1519\nf 2420/4128/1520 2789/4127/1520 2821/4156/1520 2450/4155/1520\nf 2459/4033/1521 2829/4032/1521 2800/4138/1521 2429/4137/1521\no SNOW_MOUNTAIN_Mesh.026\nv 136.986618 3.707556 -19.627850\nv 157.397324 0.137387 -35.201069\nv 123.208176 14.724163 -35.211708\nv 44.574692 3.955262 41.895180\nv 119.725357 20.876938 44.109921\nv 85.927353 -10.522045 34.951088\nv 132.913071 -22.346573 0.826819\nv 155.295700 -22.684826 -11.480874\nv -235.831451 168.204437 -3.661919\nv -199.399490 135.707809 -1.244572\nv -219.355759 163.510620 -18.463140\nv 139.893112 21.105255 -47.464821\nv 33.250900 40.633148 -42.011848\nv -34.488220 69.797493 23.967520\nv -15.667694 38.460701 15.999853\nv -45.309784 58.140594 8.900663\nv -16.357452 61.232773 42.402363\nv -4.953842 31.311939 34.147259\nv -65.988869 87.485992 32.688793\nv -191.714249 167.249130 26.028786\nv -98.185074 120.336922 24.852198\nv -148.286728 109.067551 9.779497\nv 94.524948 -11.555275 -23.424318\nv -159.105972 140.134933 -28.870028\nv -153.370712 110.239517 -7.522749\nv -1.730438 49.988998 -37.863968\nv 3.079132 21.249458 -23.697498\nv 40.011780 0.675253 -20.065109\nv -254.826813 189.041275 3.386910\nv -254.826813 189.041275 -5.218803\nv -83.078125 70.672813 -7.269681\nv -61.587784 81.168884 -26.152521\nv -110.235977 104.310349 -21.653122\nv -45.187286 56.285049 -4.002582\nv -12.373337 34.855072 -4.451915\nv -32.317520 65.358902 -19.924009\nv 109.967056 -22.251949 -12.799252\nv 214.676193 -23.304228 9.754509\nv 216.235367 -15.182276 -12.098026\nv 186.551987 -0.076047 -13.720529\nv 202.407028 14.341290 -32.731335\nv 12.173477 47.178360 48.202065\nv 23.761002 22.901001 41.066269\nv 38.228104 45.252090 56.941273\nv 98.444321 39.858116 76.363091\nv 140.159103 27.327190 58.579483\nv 147.034348 -2.067683 33.480675\nv -215.666397 171.535156 22.334940\nv -194.842377 132.319077 7.690012\nv -230.715164 176.338470 14.129620\nv -74.035477 68.167336 11.985109\nv 166.226547 12.186279 45.899933\nv -66.443016 104.110985 -445.127258\nv -13.762711 85.797531 -500.000061\nv -72.248985 105.842514 -499.999939\nv -159.369736 110.697464 0.542705\nv -49.012253 80.574768 -133.187897\nv -24.430252 69.318832 -95.432060\nv -60.799240 86.336708 -303.450317\nv -438.678955 282.910980 -107.888374\nv -396.216858 271.189545 -109.813950\nv -453.397949 292.458984 -140.767746\nv 130.580215 26.694790 -274.536316\nv 168.184738 25.089741 -294.302429\nv 83.581253 39.296791 -310.214722\nv 321.866211 70.096809 334.167175\nv 362.123657 69.563889 280.040161\nv 301.603638 57.205482 302.760864\nv 27.162827 93.157440 340.923889\nv 41.391327 72.409218 279.544006\nv -12.642578 101.306244 281.081604\nv -457.512817 309.441345 -416.102234\nv -449.248779 290.239807 -446.243347\nv -473.396362 305.821350 -435.263855\nv -102.084732 112.832703 -356.348877\nv -54.985001 96.871994 -409.245850\nv -187.261673 185.047760 115.844223\nv -156.526688 171.777252 94.874222\nv -184.080414 177.788467 79.690170\nv 300.684143 40.951920 224.766907\nv 336.060547 51.337593 201.356064\nv 320.293945 38.852531 161.187805\nv -348.452148 198.760925 272.787109\nv -406.255615 220.028381 279.861572\nv -405.719849 215.064865 294.217224\nv -375.292358 203.194275 296.949768\nv -446.626648 305.276794 -304.309143\nv -430.258606 302.956604 -371.105957\nv -458.508240 314.825195 -382.437134\nv -253.096619 182.584091 -292.534973\nv -233.458511 182.257568 -363.110596\nv -275.654694 188.753433 -354.293213\nv 121.276505 25.653656 -94.206619\nv 154.285416 22.063133 -72.099442\nv 139.256973 21.622654 -99.993370\nv 243.231857 14.008901 -102.884476\nv 268.471069 21.788486 -52.133476\nv 264.490112 7.816473 -115.330963\nv -367.591064 249.047150 -61.262928\nv -337.228882 237.839920 -107.652100\nv 105.526199 29.957653 -218.387131\nv 137.835129 30.659496 -179.905670\nv 180.022446 25.090881 -184.434845\nv 165.951523 20.224209 -222.688171\nv -302.534454 183.051529 277.774902\nv -267.413086 182.619965 309.054443\nv -246.979324 175.848328 265.350220\nv -213.587845 173.823318 54.761940\nv -15.586029 63.460770 54.281662\nv 251.787643 77.444618 -452.664856\nv 231.553940 69.181641 -500.000061\nv 416.439514 16.409630 18.426821\nv 442.798645 10.615662 -0.837347\nv 9.853546 55.490807 75.550079\nv -127.843811 149.813004 66.065887\nv -147.306961 152.432083 49.376564\nv -432.429993 251.100845 72.795166\nv -400.027100 245.887802 37.249279\nv -440.612549 262.393738 6.994886\nv -330.177490 191.725098 274.739807\nv 198.990402 16.847599 -198.161743\nv 71.305008 32.977295 -197.376343\nv 64.395615 30.021603 -176.821930\nv 79.530319 28.827480 -181.043884\nv -378.423950 266.596619 -140.758530\nv -390.050995 274.956970 -223.889481\nv -420.172272 286.302185 -170.263962\nv -486.679077 284.699707 -51.683331\nv -460.264343 281.835571 -69.038803\nv -500.000000 287.289856 -81.017181\nv -500.000000 286.790497 -64.418121\nv -255.930206 187.978668 -67.869354\nv -219.398987 177.809784 -61.239605\nv -249.150223 184.780838 -96.053596\nv -78.904816 106.000534 -56.554470\nv -78.951248 106.120926 -86.803032\nv -138.011765 139.319626 -79.275070\nv 231.900497 19.095772 -72.610191\nv 215.302078 23.757042 -117.033470\nv 188.064133 26.853886 -105.233620\nv 251.222824 86.915520 449.066956\nv 298.551025 77.308067 387.563477\nv 213.936722 70.777885 406.482666\nv 125.878403 50.013374 401.939087\nv -455.061157 208.409363 446.026123\nv -468.451538 213.525970 376.558350\nv -500.000000 211.193924 399.817932\nv -500.000000 208.666687 432.653687\nv -271.552246 203.308563 201.304428\nv -209.970047 190.161713 163.927536\nv -257.689850 203.376190 172.920349\nv -168.334015 149.025513 191.553955\nv -124.305847 124.586716 181.622925\nv -135.394958 134.886673 169.872070\nv -183.700211 164.353027 -380.307861\nv -220.743027 171.766098 -294.690552\nv -187.494461 156.150909 -293.026855\nv 379.433777 50.458199 -299.083313\nv 402.951538 74.372017 -388.773743\nv 322.349792 71.870483 -333.942139\nv 234.912491 45.635895 -319.223206\nv 255.418228 58.766785 -329.425293\nv 208.291153 55.429924 -342.944366\nv -403.543457 277.101929 -290.504333\nv -414.585144 291.513885 -375.016785\nv 31.631577 101.424942 452.503784\nv 23.383835 103.552406 443.504639\nv 9.056335 104.103462 499.378662\nv 23.354553 100.269310 499.518677\nv -458.767090 295.698578 -263.365540\nv -305.689209 210.272568 -248.181412\nv -276.782440 196.019913 -232.183853\nv -304.498840 196.601898 -315.864746\nv 199.131119 15.024277 -231.734055\nv 216.295425 19.164181 -274.282715\nv 422.940674 19.213684 -237.050552\nv 452.256531 52.566216 -310.562134\nv 155.986374 8.152325 200.620209\nv 86.319595 17.123711 158.308960\nv 74.554306 20.798538 187.276932\nv -434.658691 241.049622 252.095474\nv -369.024170 229.761292 240.343735\nv -429.214478 246.115326 232.448257\nv 172.618271 26.099979 -46.256016\nv -333.852295 205.815353 109.006760\nv -303.292603 195.307999 107.083481\nv -291.872375 187.362595 80.069504\nv -320.796082 198.765289 93.201630\nv 95.938858 -21.747894 1.807192\nv 59.841019 -13.599470 -8.654372\nv -214.558090 171.096237 -35.857491\nv -293.448700 191.652023 28.966953\nv -292.725525 206.637070 -141.653580\nv -306.640076 203.347031 -40.530205\nv -388.995239 247.005417 7.223638\nv -483.541382 292.270844 -129.315338\nv -357.256531 256.873505 -176.361984\nv 76.249771 31.388149 -132.282669\nv 95.262985 28.416786 -160.426544\nv 178.536667 29.285847 -150.130630\nv 136.363449 27.324467 -153.146652\nv 460.650391 63.553642 112.278519\nv 488.924072 73.513802 124.564606\nv 485.003601 48.107521 65.973198\nv 144.994003 63.856285 -397.949585\nv 82.334335 74.140350 -437.903320\nv 25.970413 72.297119 -393.754089\nv -407.124573 274.921814 -412.008728\nv -428.499878 294.395782 -414.848328\nv -427.070801 278.445862 -440.981689\nv -312.825073 194.841934 -381.148926\nv -310.301331 188.916229 -427.431030\nv -335.000244 188.966034 -448.286377\nv 417.764648 76.965355 -458.177979\nv 458.840027 76.068398 -446.604797\nv 375.265381 26.176971 47.169140\nv 416.507019 51.635941 101.751350\nv -119.925110 151.268967 103.768692\nv -89.569603 121.914795 74.081985\nv -255.868912 199.465897 128.982895\nv -268.493561 182.689407 78.562279\nv -230.057770 177.745270 62.611069\nv -375.964539 226.021896 120.632019\nv -342.957458 196.914062 333.819946\nv -27.782349 118.702980 359.134766\nv -90.661018 133.186340 313.052368\nv 42.939133 41.011047 -197.579437\nv -296.057190 208.927841 -209.624405\nv -339.074310 243.775360 -213.686386\nv -118.878922 127.225250 -45.514202\nv -53.251831 82.722641 -42.888172\nv 241.828018 1.480269 -15.229703\nv -320.523438 215.169037 228.330795\nv -380.894012 240.438614 212.834000\nv -217.878922 187.332489 184.608627\nv -250.323013 183.531754 220.558334\nv -205.379852 164.785767 213.552933\nv 460.210876 82.834526 210.895889\nv 500.056274 84.449203 196.979950\nv 500.122009 85.128334 176.892288\nv 481.489685 81.988724 163.837585\nv -479.873413 312.436218 -292.469666\nv -443.807678 293.737061 -267.743164\nv -488.829163 317.133545 -306.705688\nv -338.946777 215.500031 -329.608887\nv -339.139832 207.744247 -376.282715\nv -366.080444 235.871399 -358.655518\nv 425.987915 64.136490 -339.165771\nv 451.736267 75.260864 -391.165100\nv -349.796417 201.296158 426.719177\nv -299.549286 202.034348 426.590759\nv -313.970642 198.662354 381.661377\nv -272.783447 203.381882 436.023438\nv -270.381042 200.513458 408.952393\nv 27.155106 100.034370 402.021057\nv 2.463898 110.747055 387.722412\nv 8.022919 110.585411 419.374329\nv 265.305176 16.757753 11.929949\nv 263.349304 14.638098 76.627625\nv 288.038208 17.260197 87.089188\nv 295.117615 12.525463 10.284422\nv 476.058533 13.892984 -216.528320\nv 504.210144 18.071518 -229.490891\nv 503.402649 27.133049 -252.875870\nv 368.134705 63.639336 216.338974\nv 325.622803 54.372490 250.951126\nv 23.607117 62.158386 192.999893\nv -62.671021 108.403877 202.371185\nv -293.959717 182.068329 261.405090\nv 53.611877 2.975423 29.509258\nv 89.136276 -3.506859 26.223736\nv 69.366531 -3.387823 16.396133\nv 158.154617 -24.049259 10.266556\nv 187.313065 7.106346 17.487522\nv 180.074234 -10.539187 10.790764\nv 211.344254 19.673178 42.460648\nv 227.525528 0.498509 22.480972\nv 246.993088 16.510345 43.484535\nv -2.926102 81.681725 -443.734924\nv 17.876328 77.759628 -439.266418\nv 3.706741 80.299637 -500.000000\nv -0.372910 81.070808 -500.000061\nv 464.482117 69.544228 -489.669739\nv 467.719666 67.405914 -500.000000\nv 452.453552 69.019226 -500.000000\nv 343.739624 78.755959 -466.480408\nv 352.925415 74.954987 -500.000000\nv 329.533264 76.473991 -500.000000\nv -419.397278 227.901733 -500.000000\nv -437.680328 243.454987 -500.000000\nv -441.897156 246.416946 -499.999939\nv -457.460205 255.717560 -500.000000\nv -385.179199 211.634857 -459.593018\nv -409.399628 215.016586 -499.999878\nv -176.910309 159.429260 -499.999878\nv 267.391418 72.518158 -500.000000\nv 297.635620 75.739594 -499.999939\nv 396.147461 77.891106 -481.275085\nv 410.408997 73.282516 -500.000000\nv 379.979675 75.409760 -500.000000\nv 343.868896 19.390110 37.039501\nv 355.007141 7.458376 -7.388343\nv 317.878418 21.682915 65.307205\nv 324.969910 7.952930 -8.752350\nv 112.851334 -20.476830 22.706869\nv 46.299179 4.764200 18.725136\nv 21.844940 16.203480 29.474693\nv -486.807617 275.982849 -25.659893\nv -482.708679 227.972168 291.355469\nv -500.000061 240.345612 260.639404\nv -500.000000 228.959305 289.808899\nv -500.000000 244.069595 250.861649\nv -442.293457 223.859253 289.675903\nv -253.924149 178.112457 237.557724\nv -302.530273 187.308044 253.071030\nv -213.630814 168.090836 294.255127\nv -228.543243 172.015839 230.362274\nv 82.216110 34.304802 261.536072\nv 206.630753 12.144424 232.639221\nv 249.769211 14.221491 158.997986\nv 174.347672 13.006306 267.166138\nv 216.070114 22.141834 273.977295\nv 241.453201 19.766788 225.557983\nv 281.550293 43.502579 273.088562\nv 453.066711 83.527901 292.980042\nv 414.578247 78.815048 271.822510\nv 380.956665 26.781380 -254.034348\nv 377.873840 15.815868 -221.921951\nv 345.488953 36.276299 -261.088715\nv 239.561874 11.577799 -217.018158\nv 259.436646 16.241154 -248.222549\nv -417.306946 286.666382 -218.536469\nv -451.318298 296.130493 -205.724380\nv -140.122452 130.411041 -110.658569\nv 316.624512 0.355901 -63.604027\nv 318.888733 -0.256296 -113.606392\nv 293.241943 2.610595 -92.654251\nv 342.558472 0.006108 -61.600811\nv 351.481079 1.556833 -125.400436\nv 460.691223 80.542488 415.007874\nv 480.328735 81.542839 379.075317\nv 448.585510 84.896996 388.173462\nv 420.281067 -0.569216 -85.055870\nv 444.065308 -0.036279 -68.997200\nv 444.019470 1.263328 -116.431152\nv 213.816757 56.328766 375.368286\nv -72.244041 135.651550 390.069885\nv -118.574387 146.272903 374.343384\nv -108.052597 142.146866 444.839722\nv -371.851257 201.868347 401.432068\nv -415.145020 211.109421 344.916260\nv -406.115540 207.214645 401.747559\nv -384.857117 232.299286 143.263901\nv -420.601929 239.909943 129.959183\nv -477.747314 249.240906 148.939133\nv -378.336914 240.671356 181.551468\nv -275.938477 207.888901 152.000961\nv -308.624268 212.330673 141.388412\nv -221.131607 194.873383 142.062973\nv -178.499039 175.353485 163.971420\nv -157.158401 171.466751 137.557968\nv -122.216064 147.290649 134.467514\nv -101.674004 114.356720 147.066299\nv -65.018440 88.099174 121.706055\nv -74.707642 98.433754 108.727112\nv 235.473160 16.216808 107.289169\nv 201.495132 21.465809 124.141022\nv 500.212952 70.840446 -359.694519\nv 500.005859 72.650398 -405.872742\nv 288.404358 75.078041 -352.725342\nv 207.050552 63.125732 -373.325256\nv -17.572800 66.128311 -312.767090\nv 22.426788 59.081017 -344.742554\nv -1.313904 76.390907 -389.960938\nv -383.390381 260.220642 -310.406128\nv -400.283203 277.063629 -376.592651\nv -465.627380 252.433884 212.845718\nv -434.285767 250.896286 189.018280\nv -485.045166 296.695221 -263.291382\nv -500.000000 312.426697 -292.281677\nv -500.000061 307.204437 -282.615967\nv 23.455872 50.500656 -292.121094\nv 200.251816 30.413338 -309.925110\nv 291.053101 45.719177 -284.115112\nv 408.874817 70.099724 179.781937\nv 444.085083 73.839951 157.121735\nv 404.463013 73.711510 232.522430\nv 363.329407 49.683884 140.857742\nv -25.668671 122.391426 437.484192\nv -39.657822 126.818062 406.098083\nv -59.318893 131.422272 445.449951\nv 84.876480 84.669563 449.344421\nv 151.787186 86.748199 459.699829\nv 489.949829 61.204712 472.076538\nv 500.004822 56.216827 476.931580\nv 500.006653 57.917435 467.853516\nv 427.151306 2.900967 -37.123363\nv 451.885559 4.305020 -35.555275\nv 14.942017 52.159073 -57.206436\nv -401.400269 264.995728 -66.453110\nv -447.011108 284.590668 -90.242424\nv 219.993393 16.100212 -162.228348\nv 285.699707 6.875070 -169.770966\nv -499.219727 303.139862 -161.063828\nv -491.023804 304.329041 -203.919006\nv -278.606384 199.020187 -155.485611\nv -256.504395 189.288040 -183.901199\nv 103.156296 28.423660 -183.551697\nv -58.772720 87.224289 49.693924\nv -93.640251 125.540901 104.705933\nv 398.700012 4.999028 -152.115997\nv 340.793518 14.726126 -206.071198\nv 319.455139 5.955744 -168.367935\nv 252.254562 44.917793 314.020325\nv 232.495621 59.855614 353.261292\nv 436.636963 84.493584 360.600281\nv 376.580078 79.676361 339.260315\nv 111.025009 28.580944 336.042480\nv 125.144363 15.663145 288.427307\nv 76.134018 51.364159 314.649414\nv -239.593765 187.735626 369.004639\nv -232.546890 178.301361 329.486084\nv -500.000000 222.469223 329.765259\nv -500.000000 215.775467 365.075928\nv -200.482925 168.208633 38.325550\nv 52.817322 28.547218 164.703796\nv 49.819626 47.663437 104.012787\nv 500.000122 72.944740 -422.410645\nv 499.999878 71.373337 -437.268555\nv -352.077637 201.337616 -426.127197\nv -366.992737 225.177155 -399.608154\nv -484.200012 319.756836 -394.195740\nv -500.480225 315.757385 -419.754089\nv 134.132370 48.452766 -353.082886\nv 174.546143 68.444908 -426.022949\nv 298.329712 23.917515 130.194824\nv 324.817322 31.188362 113.332214\nv 180.313400 31.887123 80.450851\nv 157.377579 11.775433 151.674377\nv 123.390244 12.976820 147.888596\nv 142.651688 27.119804 118.137665\nv -500.000000 253.978424 108.505608\nv -500.000000 252.520157 117.158615\nv -214.884598 185.864090 434.025513\nv -167.985397 152.997742 330.940491\nv -18.823776 119.447128 400.550842\nv 375.473694 85.251373 396.622314\nv 500.058716 81.687988 349.611877\nv 500.072876 82.693932 333.588074\nv 386.134094 3.283097 -50.522041\nv 112.451584 25.537102 -116.714355\nv 131.529800 23.058987 -123.882889\nv -220.766235 173.549774 -106.626450\nv -75.733742 72.981232 1.151184\nv 9.219131 26.047451 9.528671\nv 216.227585 20.407089 -48.545807\nv 468.601257 14.832977 -0.054791\nv -187.689011 155.706558 258.392578\nv 278.191589 27.413891 193.846542\nv 247.159897 27.029968 -285.390747\nv -421.249146 287.715454 -281.686768\nv -7.802322 116.205032 418.779480\nv -9.859329 116.192810 459.273499\nv 3.393692 112.639717 454.652405\nv -55.848648 88.501038 -353.798157\nv 134.451523 40.698242 -333.056641\nv 182.081223 46.015999 -342.019836\nv 500.247375 83.774178 162.232407\nv -238.232193 194.707474 434.954224\nv 105.351959 66.106720 410.654724\nv 320.003296 86.282761 431.678223\nv 342.650269 82.579865 389.384155\nv 451.965881 72.669998 456.942261\nv 413.282593 82.441757 441.279114\nv 475.285400 70.763954 441.822632\nv 476.005981 3.035255 -70.803375\nv 506.246155 2.528259 -94.365883\nv 506.054504 2.788996 -122.566422\nv 479.768860 4.151125 -147.145767\nv 184.608749 23.369194 -70.400681\nv 98.520767 33.988548 -59.980064\nv 444.394409 7.111186 -173.943893\nv 168.162643 24.824223 316.158813\nv -500.000061 268.191986 23.055847\nv -500.000061 263.405518 48.187435\nv -96.920410 123.384735 53.716358\nv 83.127609 39.387703 105.692078\nv 344.372070 32.206345 88.219307\nv -7.386444 83.128708 -500.000061\nv -243.038345 184.625473 -451.740540\nv -217.331177 179.424500 -412.581055\nv -208.367798 175.146332 -499.999939\nv -215.368317 176.822693 -499.999939\nv -258.598450 185.252945 -499.999939\nv -264.524353 185.752197 -499.999878\nv -378.804474 191.468475 -499.999939\nv -360.791931 184.686066 -500.000000\nv 188.255692 64.637848 -500.000061\nv -347.098022 225.515549 -2.176026\nv -201.166809 168.316483 -84.667282\nv 414.338013 84.956841 408.271912\nv -168.383224 162.695648 406.338318\nv -182.162933 172.088654 444.628296\nv 48.801041 93.958733 447.512268\nv 34.692291 98.500740 499.598267\nv 81.751816 89.697784 500.017273\nv 223.394516 21.641182 69.467339\nv 501.971252 65.286728 95.604111\nv -175.549271 161.880463 -422.720825\nv 300.272034 5.301116 -41.369728\nv 501.106079 56.318001 -311.676819\nv 262.678772 77.026962 -399.450989\nv 500.767395 77.898811 131.192490\nv 501.242310 73.157013 115.380783\nv 130.911728 38.472046 370.144531\nv -485.440796 294.329559 -105.786568\nv 2.305038 29.774269 19.624174\nv -4.434891 29.364441 4.104695\nv 155.123276 67.437241 -500.000000\nv 500.596008 64.601196 -332.792664\nv 405.237915 76.500977 471.056396\nv 429.923584 65.017731 500.014526\nv 455.672363 60.545296 500.008850\nv 297.237305 19.098507 -225.583557\nv 499.999878 69.751945 -449.495483\nv 499.999939 64.203415 -483.370728\nv -356.447052 183.058411 -499.999939\nv 505.382141 6.955060 -177.754868\nv 504.850403 11.658819 -203.970261\nv 367.806580 84.412018 452.743896\nv 44.982773 90.639938 419.866211\nv 278.901855 26.476067 -262.141510\nv 473.622253 56.960045 500.006104\nv 493.936401 53.750237 500.003235\nv -10.958694 61.604370 -51.473278\nv 70.790359 67.746048 370.267456\nv -271.362213 186.035904 -500.000000\nv 505.747314 4.489916 -150.305084\nv -259.689423 199.666702 500.000061\nv -250.611267 197.385681 500.000061\nv 97.367416 72.876534 -500.000000\nv 84.198349 73.790138 -500.000000\nv -201.793793 172.395554 -499.999939\nv -482.734863 292.437073 -459.120300\nv -479.488403 263.748138 -500.000000\nv -493.254456 266.364563 -499.999939\nv -465.077393 258.247131 -500.000000\nv 138.491592 -20.226170 15.697128\nv 500.031677 73.583420 394.011536\nv 500.036560 76.205399 382.092834\nv 500.022888 69.826797 411.432739\nv 192.161148 92.973015 500.061829\nv 232.052902 92.457748 500.051147\nv -500.000000 252.612091 127.322937\nv 505.710999 14.842425 -8.964741\nv 506.107605 7.939831 -37.406643\nv 500.002197 51.306633 500.002258\nv 271.781311 90.428246 500.058105\nv 292.845459 89.815109 500.059814\nv 132.038406 92.317757 500.118408\nv 1.321640 106.104469 499.289551\nv 4.406204 105.121643 499.316772\nv 12.877121 108.034286 444.684937\nv -229.909576 191.161926 500.000061\nv 500.054993 84.300293 227.627960\nv 500.489014 80.830933 144.903107\nv -386.351501 197.338364 500.000061\nv -379.796661 196.311447 500.000061\nv 506.229797 4.578086 -65.893845\nv 500.076355 83.342201 307.416870\nv 500.007568 58.394989 461.916931\nv 500.011414 60.820885 442.136597\nv 500.072815 83.953918 266.082886\nv 499.999878 62.522469 -494.469666\nv 494.003479 62.747627 -499.999939\nv 500.015991 65.512741 427.257080\nv -223.854263 188.866913 500.000061\nv -4.974594 106.851257 499.290588\nv -306.002106 200.983139 500.000061\nv -293.943390 201.159897 500.000061\nv -500.000061 295.864349 -111.321594\nv -500.000000 293.031647 -99.540810\nv -287.026489 201.547607 500.000061\nv 344.089661 83.799675 500.045654\nv 387.473206 75.268036 500.028809\nv -440.917053 202.747696 500.000122\nv -429.285645 201.625961 500.000122\nv -500.000000 266.579163 -500.000061\nv -500.000000 273.348511 -489.520630\nv -500.000000 250.335526 155.427841\nv -500.000061 250.705444 160.572266\nv -196.266098 177.913818 500.000122\nv -151.845261 157.218628 499.987793\nv -500.779602 200.201614 499.331421\nv 404.640259 71.545761 500.022705\nv -327.166626 181.799789 -499.999939\nv -500.000000 304.282532 -214.653793\nv -500.000061 305.256042 -206.775299\nv -145.003891 153.330276 499.975830\nv -500.000000 250.984299 166.974854\nv -95.246078 130.893173 499.662720\nv -77.340416 124.770660 499.514099\nv -500.000000 322.202209 -367.667725\nv -500.000000 321.089417 -344.224548\nv -500.000000 293.037567 -133.508743\nv -500.000000 294.934326 -123.456985\nv -500.000000 296.795380 -267.916992\nv -500.000000 277.632874 -31.334997\nv -500.000000 298.019287 -144.712021\nv -205.386459 181.764297 500.000061\nv -500.000000 245.456116 245.475266\nv -500.000000 314.304169 -298.000000\nv -22.190048 110.111252 499.188477\nv -500.000000 304.846222 -441.439392\nv -331.580627 182.265610 -500.000000\nv -500.000000 322.306061 -373.634277\nv -500.000000 317.554443 -309.937317\nv 310.441406 88.528015 500.055603\nv 500.042114 78.947304 366.933838\nv 15.942856 79.621124 -500.000000\nv -500.000000 283.442017 -48.682549\nv -500.000000 285.740234 -55.637836\nv -500.000000 250.814163 198.223633\nv -372.919434 198.027115 500.000122\nv -367.548950 198.126526 500.000122\nv -31.084076 111.907280 499.168518\nv -130.456924 146.791962 499.928833\nv -116.383072 139.281921 499.843628\nv 500.000000 61.337440 -500.000061\nv -45.231552 116.002930 499.177612\nv -500.000000 320.686646 -395.810974\nv -500.000000 299.702972 -449.992554\nv 156.346512 -11.273720 -23.340971\nv 192.429138 9.212238 -23.225931\nv 187.512650 20.220634 -39.493675\nv 168.873474 -14.561135 -12.600700\nv 177.534760 9.831267 -29.988272\nv 165.007797 13.118683 -40.728542\nv 166.940643 -0.721226 -26.664623\nv 185.267410 -2.188522 10.942528\nv 197.375214 -16.921707 10.272636\nv 200.994629 -2.863775 13.621016\nv -393.466919 268.661285 -300.455231\nv -384.403900 268.911438 -232.898743\nv -322.317993 212.886292 -288.895142\nv -342.773499 221.590668 -303.296387\nv -371.308899 260.438629 -252.095352\nv -344.539795 235.246597 -279.293762\nv -361.232361 251.998001 -262.046265\nv -322.381775 227.023956 -230.933899\nv -364.562653 259.366180 -218.787933\nv 119.101242 21.228561 231.078140\nv 227.928650 15.370991 -245.650436\nv 219.346497 13.301037 -224.376099\nv 335.184906 0.650269 -119.503418\nv 319.171936 2.849724 -140.987167\nv 140.565369 11.907734 244.523758\nv 335.468109 3.756288 -146.884186\nv 103.680237 24.983974 274.981689\nv 118.053207 28.326221 -246.461731\nv 77.018044 38.597725 -283.328705\nv 207.713272 17.094231 -253.008392\nv 64.491035 40.229156 -255.254120\nvt 0.6333 0.5197\nvt 0.6536 0.5353\nvt 0.6196 0.5353\nvt 0.5415 0.4582\nvt 0.6162 0.4560\nvt 0.5826 0.4651\nvt 0.6293 0.4992\nvt 0.6515 0.5115\nvt 0.2631 0.5037\nvt 0.2993 0.5013\nvt 0.2795 0.5185\nvt 0.6362 0.5475\nvt 0.5303 0.5421\nvt 0.4630 0.4761\nvt 0.4817 0.4841\nvt 0.4523 0.4912\nvt 0.4810 0.4577\nvt 0.4924 0.4659\nvt 0.4318 0.4674\nvt 0.3069 0.4740\nvt 0.3998 0.4752\nvt 0.3500 0.4903\nvt 0.5912 0.5235\nvt 0.3393 0.5289\nvt 0.3450 0.5076\nvt 0.5003 0.5238\nvt 0.4956 0.5379\nvt 0.2442 0.4967\nvt 0.2442 0.5053\nvt 0.4148 0.5073\nvt 0.4361 0.5262\nvt 0.3878 0.5217\nvt 0.4524 0.5041\nvt 0.4850 0.5045\nvt 0.4652 0.5200\nvt 0.5370 0.5201\nvt 0.6065 0.5129\nvt 0.7105 0.4903\nvt 0.7120 0.5122\nvt 0.6825 0.5138\nvt 0.6983 0.5328\nvt 0.5094 0.4519\nvt 0.5209 0.4590\nvt 0.5352 0.4431\nvt 0.5950 0.4237\nvt 0.6365 0.4415\nvt 0.6433 0.4666\nvt 0.2831 0.4777\nvt 0.3038 0.4924\nvt 0.2682 0.4859\nvt 0.4238 0.4881\nvt 0.6624 0.4542\nvt 0.6525 0.5234\nvt 0.4313 0.9451\nvt 0.4836 1.0000\nvt 0.4255 1.0000\nvt 0.3390 0.4995\nvt 0.4486 0.6332\nvt 0.4730 0.5955\nvt 0.4369 0.8035\nvt 0.0617 0.6079\nvt 0.1038 0.6099\nvt 0.0471 0.6408\nvt 0.6270 0.7746\nvt 0.6643 0.7943\nvt 0.5803 0.8102\nvt 0.8169 0.1659\nvt 0.8569 0.2201\nvt 0.7968 0.1973\nvt 0.5243 0.1592\nvt 0.5384 0.2205\nvt 0.4847 0.2190\nvt 0.0430 0.9161\nvt 0.0512 0.9462\nvt 0.0272 0.9353\nvt 0.3959 0.8564\nvt 0.4427 0.9093\nvt 0.3113 0.3842\nvt 0.3419 0.4052\nvt 0.3145 0.4204\nvt 0.7959 0.2753\nvt 0.8310 0.2987\nvt 0.8153 0.3389\nvt 0.0939 0.2202\nvt 0.1246 0.2031\nvt 0.1513 0.2273\nvt 0.0538 0.8043\nvt 0.0700 0.8711\nvt 0.0420 0.8825\nvt 0.2460 0.7926\nvt 0.2655 0.8631\nvt 0.2236 0.8543\nvt 0.6177 0.5943\nvt 0.6505 0.5722\nvt 0.6356 0.6000\nvt 0.7388 0.6029\nvt 0.7639 0.5522\nvt 0.7599 0.6154\nvt 0.1323 0.5613\nvt 0.1624 0.6077\nvt 0.6342 0.6799\nvt 0.6621 0.7227\nvt 0.6021 0.7184\nvt 0.1969 0.2223\nvt 0.2317 0.1910\nvt 0.2520 0.2347\nvt 0.2852 0.4453\nvt 0.4818 0.4458\nvt 0.5071 0.4245\nvt 0.3703 0.4340\nvt 0.3510 0.4507\nvt 0.0679 0.4273\nvt 0.1000 0.4628\nvt 0.0597 0.4931\nvt 0.1694 0.2254\nvt 0.6761 0.6845\nvt 0.6949 0.6982\nvt 0.5681 0.6974\nvt 0.5612 0.6769\nvt 0.5763 0.6811\nvt 0.1215 0.6408\nvt 0.1100 0.7239\nvt 0.0800 0.6703\nvt 0.0140 0.5517\nvt 0.0008 0.5811\nvt 0.0008 0.5645\nvt 0.2431 0.5679\nvt 0.2794 0.5613\nvt 0.2499 0.5961\nvt 0.4189 0.5566\nvt 0.4189 0.5869\nvt 0.3602 0.5793\nvt 0.7276 0.5727\nvt 0.7111 0.6171\nvt 0.6840 0.6053\nvt 0.7468 0.0510\nvt 0.7938 0.1125\nvt 0.7097 0.0936\nvt 0.0454 0.0541\nvt 0.0008 0.1003\nvt 0.0008 0.0675\nvt 0.2276 0.2988\nvt 0.2888 0.3362\nvt 0.2414 0.3272\nvt 0.3301 0.3085\nvt 0.3738 0.3185\nvt 0.3628 0.3302\nvt 0.3149 0.8803\nvt 0.2781 0.7947\nvt 0.3111 0.7931\nvt 0.8741 0.7991\nvt 0.8974 0.8888\nvt 0.8174 0.8340\nvt 0.7306 0.8192\nvt 0.7509 0.8294\nvt 0.7041 0.8507\nvt 0.0966 0.7905\nvt 0.0856 0.8750\nvt 0.5287 0.0476\nvt 0.5063 0.0007\nvt 0.5205 0.0006\nvt 0.1937 0.7482\nvt 0.2224 0.7322\nvt 0.1949 0.8159\nvt 0.6950 0.7318\nvt 0.7035 0.7530\nvt 0.7121 0.7743\nvt 0.6522 0.2995\nvt 0.5830 0.3418\nvt 0.5713 0.3128\nvt 0.0657 0.2480\nvt 0.1308 0.2597\nvt 0.0711 0.2676\nvt 0.6736 0.5300\nvt 0.6611 0.5408\nvt 0.6631 0.5267\nvt 0.1961 0.3930\nvt 0.1787 0.4069\nvt 0.1658 0.3911\nvt 0.5926 0.4983\nvt 0.5567 0.5087\nvt 0.2842 0.5359\nvt 0.2059 0.4711\nvt 0.2066 0.6417\nvt 0.1928 0.5406\nvt 0.1110 0.4928\nvt 0.0171 0.6294\nvt 0.1425 0.6764\nvt 0.5730 0.6323\nvt 0.5919 0.6605\nvt 0.6746 0.6502\nvt 0.6327 0.6532\nvt 0.9547 0.3878\nvt 0.9828 0.3755\nvt 0.9789 0.4341\nvt 0.6413 0.8980\nvt 0.5790 0.9379\nvt 0.5231 0.8938\nvt 0.0930 0.9120\nvt 0.0718 0.9149\nvt 0.0732 0.9410\nvt 0.1866 0.8812\nvt 0.1891 0.9274\nvt 0.1646 0.9483\nvt 0.9121 0.9582\nvt 0.9529 0.9466\nvt 0.3782 0.3963\nvt 0.4083 0.4260\nvt 0.2432 0.3711\nvt 0.2307 0.4215\nvt 0.2688 0.4375\nvt 0.2074 0.4200\nvt 0.1239 0.3794\nvt 0.1567 0.1663\nvt 0.4697 0.1410\nvt 0.4073 0.1870\nvt 0.5399 0.6976\nvt 0.2033 0.7097\nvt 0.1606 0.7137\nvt 0.3792 0.5456\nvt 0.0402 0.5691\nvt 0.4444 0.5429\nvt 0.7374 0.5153\nvt 0.1790 0.2718\nvt 0.1190 0.2873\nvt 0.2809 0.3155\nvt 0.2487 0.2795\nvt 0.2933 0.2865\nvt 0.9939 0.3031\nvt 0.9754 0.3362\nvt 0.9543 0.2892\nvt 0.0208 0.7925\nvt 0.0417 0.7634\nvt 0.0566 0.7678\nvt 0.0119 0.8067\nvt 0.9203 0.8392\nvt 0.9459 0.8912\nvt 0.1499 0.0734\nvt 0.1998 0.0735\nvt 0.1855 0.1184\nvt 0.2264 0.0641\nvt 0.2288 0.0912\nvt 0.5243 0.0981\nvt 0.4997 0.1124\nvt 0.5053 0.0807\nvt 0.7588 0.4234\nvt 0.7903 0.4898\nvt 0.7607 0.4881\nvt 0.9700 0.7166\nvt 0.9980 0.7295\nvt 0.9972 0.7529\nvt 0.8629 0.2837\nvt 0.8206 0.2491\nvt 0.5207 0.3071\nvt 0.4351 0.2977\nvt 0.2054 0.2387\nvt 0.5505 0.4706\nvt 0.5858 0.4738\nvt 0.5662 0.4837\nvt 0.6833 0.4826\nvt 0.6761 0.4893\nvt 0.6543 0.4898\nvt 0.7072 0.4576\nvt 0.6969 0.4864\nvt 0.7232 0.4776\nvt 0.7426 0.4566\nvt 0.4944 0.9437\nvt 0.5010 1.0000\nvt 0.4969 1.0000\nvt 0.9585 0.9897\nvt 0.9617 1.0000\nvt 0.9466 1.0000\nvt 0.8386 0.9665\nvt 0.8477 1.0000\nvt 0.8245 1.0000\nvt 0.0808 1.0000\nvt 0.0627 1.0000\nvt 0.0585 1.0000\nvt 0.0430 1.0000\nvt 0.3216 1.0000\nvt 0.7473 0.9527\nvt 0.7628 1.0000\nvt 0.7272 1.0000\nvt 0.7928 1.0000\nvt 0.8907 0.9813\nvt 0.9048 1.0000\nvt 0.8746 1.0000\nvt 0.8388 0.4630\nvt 0.8699 0.4529\nvt 0.8498 0.5074\nvt 0.8129 0.4348\nvt 0.8200 0.5088\nvt 0.6093 0.4774\nvt 0.5433 0.4813\nvt 0.5190 0.4706\nvt 0.0139 0.5257\nvt 0.0179 0.2087\nvt 0.0008 0.2395\nvt 0.0008 0.2103\nvt 0.0008 0.2492\nvt 0.0581 0.2104\nvt 0.2451 0.2625\nvt 0.1969 0.2470\nvt 0.2851 0.2058\nvt 0.2703 0.2697\nvt 0.5789 0.2386\nvt 0.7025 0.2674\nvt 0.7453 0.3411\nvt 0.6704 0.2329\nvt 0.7118 0.2261\nvt 0.7371 0.2745\nvt 0.7769 0.2270\nvt 0.9472 0.2071\nvt 0.9090 0.2283\nvt 0.8725 0.7220\nvt 0.8756 0.7541\nvt 0.8404 0.7611\nvt 0.7352 0.7171\nvt 0.7549 0.7483\nvt 0.7236 0.7457\nvt 0.0829 0.7186\nvt 0.0491 0.7058\nvt 0.3581 0.6107\nvt 0.8117 0.5637\nvt 0.8139 0.6137\nvt 0.7885 0.5927\nvt 0.8375 0.5617\nvt 0.8463 0.6254\nvt 0.8301 0.6195\nvt 0.9548 0.0851\nvt 0.9743 0.1210\nvt 0.9427 0.1119\nvt 0.9146 0.5851\nvt 0.9383 0.5690\nvt 0.9382 0.6165\nvt 0.4255 0.1100\nvt 0.3795 0.1258\nvt 0.3900 0.0553\nvt 0.1280 0.0987\nvt 0.0850 0.1552\nvt 0.0940 0.0984\nvt 0.1151 0.3568\nvt 0.0796 0.3701\nvt 0.0229 0.3511\nvt 0.1216 0.3185\nvt 0.2233 0.3481\nvt 0.1908 0.3587\nvt 0.2777 0.3580\nvt 0.3200 0.3361\nvt 0.3412 0.3625\nvt 0.3759 0.3656\nvt 0.3963 0.3530\nvt 0.4327 0.3784\nvt 0.4231 0.3913\nvt 0.7311 0.3928\nvt 0.6974 0.3759\nvt 0.9940 0.8597\nvt 0.9938 0.9059\nvt 0.7837 0.8527\nvt 0.4798 0.8128\nvt 0.5196 0.8448\nvt 0.4960 0.8900\nvt 0.1166 0.8104\nvt 0.1338 0.8587\nvt 0.0998 0.8766\nvt 0.0660 0.3111\nvt 0.0349 0.2872\nvt 0.0008 0.7826\nvt 0.0156 0.7633\nvt 0.1772 0.7889\nvt 0.1607 0.8296\nvt 0.5206 0.7921\nvt 0.5738 0.7834\nvt 0.6961 0.8099\nvt 0.9033 0.3203\nvt 0.9383 0.3430\nvt 0.8989 0.2676\nvt 0.8581 0.3592\nvt 0.4718 0.0626\nvt 0.4579 0.0940\nvt 0.4384 0.0547\nvt 0.9838 0.0280\nvt 0.9938 0.0232\nvt 0.9938 0.0323\nvt 0.9215 0.5372\nvt 0.9460 0.5356\nvt 0.5121 0.5573\nvt 0.0987 0.5665\nvt 0.0534 0.5903\nvt 0.7157 0.6623\nvt 0.7810 0.6698\nvt 0.0015 0.6611\nvt 0.0097 0.7040\nvt 0.2206 0.6555\nvt 0.2426 0.6839\nvt 0.5997 0.6836\nvt 0.4389 0.4504\nvt 0.8932 0.6522\nvt 0.8357 0.7061\nvt 0.8142 0.6410\nvt 0.8145 0.6684\nvt 0.9309 0.1395\nvt 0.8712 0.1608\nvt 0.7541 0.1468\nvt 0.7478 0.1861\nvt 0.6075 0.1641\nvt 0.6216 0.2117\nvt 0.5729 0.1854\nvt 0.2594 0.1311\nvt 0.2664 0.1706\nvt 0.0321 0.1235\nvt 0.0008 0.1703\nvt 0.0008 0.1350\nvt 0.2982 0.4617\nvt 0.5150 0.9393\nvt 0.5468 0.3961\nvt 0.7833 0.4130\nvt 0.9938 0.9224\nvt 0.9938 0.9373\nvt 0.1477 0.9261\nvt 0.1605 0.8763\nvt 0.0165 0.8942\nvt 0.0003 0.9198\nvt 0.6305 0.8531\nvt 0.6591 0.9260\nvt 0.7935 0.3699\nvt 0.8198 0.3867\nvt 0.6536 0.3484\nvt 0.6763 0.4196\nvt 0.6198 0.3522\nvt 0.6389 0.3819\nvt 0.4043 0.3954\nvt 0.0008 0.3829\nvt 0.2839 0.0661\nvt 0.3305 0.1692\nvt 0.4786 0.0996\nvt 0.8701 0.1035\nvt 0.9939 0.1665\nvt 0.8807 0.5506\nvt 0.6090 0.6168\nvt 0.6279 0.6239\nvt 0.2781 0.6067\nvt 0.4221 0.4989\nvt 0.5613 0.7553\nvt 0.5064 0.4905\nvt 0.6650 0.5127\nvt 0.7120 0.5486\nvt 0.9108 0.4816\nvt 0.9370 0.5009\nvt 0.9626 0.5001\nvt 0.3109 0.2417\nvt 0.7427 0.7854\nvt 0.1772 0.7310\nvt 0.1386 0.7621\nvt 0.1353 0.7188\nvt 0.1033 0.7572\nvt 0.4895 0.0813\nvt 0.5007 0.0455\nvt 0.0790 0.7817\nvt 0.4418 0.8538\nvt 0.6308 0.8331\nvt 0.6781 0.8420\nvt 0.9939 0.3232\nvt 0.9940 0.3378\nvt 0.2607 0.0652\nvt 0.1148 0.9596\nvt 0.6480 0.0404\nvt 0.8151 0.0684\nvt 0.8375 0.1107\nvt 0.9461 0.0432\nvt 0.9077 0.0588\nvt 0.9693 0.0583\nvt 1.0000 0.5944\nvt 0.9737 0.6472\nvt 0.9700 0.5709\nvt 0.6806 0.5705\nvt 0.5951 0.5600\nvt 0.9386 0.6740\nvt 0.6643 0.1839\nvt 0.0008 0.4519\nvt 0.4010 0.4463\nvt 0.8393 0.4119\nvt 0.4900 1.0000\nvt 0.2559 0.9517\nvt 0.2904 1.0000\nvt 0.2834 1.0000\nvt 0.2346 1.0000\nvt 0.1390 1.0000\nvt 0.1211 1.0000\nvt 0.1526 0.5022\nvt 0.2975 0.5847\nvt 0.9087 0.0918\nvt 0.3301 0.0938\nvt 0.3164 0.0555\nvt 0.5457 0.0526\nvt 0.5785 0.0001\nvt 0.5816 0.0508\nvt 0.7191 0.4306\nvt 0.3230 0.9227\nvt 0.6687 0.5463\nvt 0.7955 0.5414\nvt 0.9946 0.3689\nvt 0.9950 0.3847\nvt 0.5766 0.0895\nvt 0.6223 0.0982\nvt 0.6273 0.1300\nvt 0.0152 0.6058\nvt 0.4996 0.4804\nvt 0.4929 0.4960\nvt 0.6842 1.0000\nvt 0.6513 1.0000\nvt 0.9464 0.8106\nvt 0.9949 0.8117\nvt 0.9944 0.8328\nvt 0.9242 0.0001\nvt 0.8997 0.0291\nvt 0.9109 0.3983\nvt 0.7924 0.7256\nvt 0.9938 0.9495\nvt 0.9938 0.9834\nvt 0.0944 0.2059\nvt 0.9991 0.6778\nvt 0.9986 0.7040\nvt 0.8625 0.0474\nvt 0.5205 0.0566\nvt 0.5420 0.0802\nvt 0.7742 0.7622\nvt 0.9676 0.0001\nvt 0.9878 0.0001\nvt 0.4864 0.5515\nvt 0.5676 0.1298\nvt 0.2278 1.0000\nvt 0.2815 0.9126\nvt 0.9995 0.6503\nvt 0.8304 0.6469\nvt 0.2484 0.0001\nvt 0.7863 0.7841\nvt 0.7581 0.8995\nvt 0.9958 0.4045\nvt 0.7735 0.3062\nvt 0.5940 1.0000\nvt 0.5809 1.0000\nvt 0.2969 1.0000\nvt 0.0179 0.9591\nvt 0.0211 1.0000\nvt 0.0075 1.0000\nvt 0.0355 1.0000\nvt 0.6933 0.4898\nvt 0.6813 0.4891\nvt 0.6348 0.4844\nvt 0.9938 0.1061\nvt 0.9938 0.1180\nvt 0.9938 0.0887\nvt 0.7029 0.8733\nvt 0.6881 0.0001\nvt 0.6835 0.5395\nvt 0.9173 0.7371\nvt 0.1329 0.8996\nvt 0.0008 0.3728\nvt 0.6884 0.5233\nvt 0.9999 0.5375\nvt 0.7881 0.0001\nvt 0.6284 0.0000\nvt 0.5017 0.0008\nvt 0.5101 0.0554\nvt 0.2690 0.0001\nvt 0.5798 0.3944\nvt 0.9939 0.2725\nvt 0.6145 0.7465\nvt 0.9943 0.3552\nvt 0.1136 0.0001\nvt 0.6002 0.2251\nvt 1.0000 0.5659\nvt 0.9938 0.0580\nvt 0.7096 0.1247\nvt 0.9939 0.2340\nvt 0.9878 1.0000\nvt 0.2750 0.0001\nvt 0.6369 0.2556\nvt 0.7151 0.7244\nvt 0.4875 0.0408\nvt 0.9938 0.0382\nvt 0.4986 0.0008\nvt 0.4923 0.0008\nvt 0.1934 0.0001\nvt 0.0008 0.6114\nvt 0.0008 0.5996\nvt 0.2123 0.0001\nvt 0.2394 0.0001\nvt 0.8390 0.0001\nvt 0.8821 0.0001\nvt 0.0710 0.0001\nvt 0.0594 0.0001\nvt 0.0008 0.9895\nvt 0.0008 0.3395\nvt 0.0008 0.3446\nvt 0.3024 0.0001\nvt 0.3465 0.0001\nvt 0.0000 0.0008\nvt 0.8991 0.0001\nvt 0.1724 1.0000\nvt 0.0008 0.7147\nvt 0.0008 0.7068\nvt 0.3533 0.0001\nvt 0.4027 0.0005\nvt 0.0008 0.8442\nvt 0.0008 0.8677\nvt 0.0008 0.6336\nvt 0.0008 0.6235\nvt 0.0008 0.7679\nvt 0.0008 0.5314\nvt 0.0008 0.4770\nvt 0.0008 0.6448\nvt 0.2933 0.0001\nvt 0.0008 0.3916\nvt 0.2405 1.0000\nvt 0.0008 0.2546\nvt 0.0008 0.7923\nvt 0.0008 0.7980\nvt 0.4753 0.0009\nvt 0.0008 0.9414\nvt 0.0008 0.8736\nvt 0.0008 0.8100\nvt 0.8056 0.0001\nvt 0.9938 0.1332\nvt 0.5131 1.0000\nvt 0.0008 0.5487\nvt 0.0008 0.5557\nvt 0.1680 1.0000\nvt 0.1433 1.0000\nvt 0.0008 0.3019\nvt 0.1270 0.0001\nvt 0.9498 0.0001\nvt 0.4664 0.0009\nvt 0.1201 0.0001\nvt 0.3677 0.0002\nvt 0.3817 0.0003\nvt 0.9939 0.1505\nvt 0.9938 0.9945\nvt 0.9938 1.0000\nvt 0.4524 0.0009\nvt 0.4205 0.0006\nvt 0.0008 0.8958\nvt 0.9939 0.1927\nvt 0.9998 0.6226\nvt 0.2054 0.0001\nvt 0.9938 0.0729\nvt 0.0008 0.9500\nvt 0.0008 0.3331\nvt 0.5317 0.0005\nvt 0.1323 0.0001\nvt 0.7277 0.0001\nvt 0.7672 0.0001\nvt 0.5497 0.3354\nvt 0.1386 0.8200\nvt 0.1551 0.7793\nvt 0.1286 0.7521\nvt 0.1066 0.8005\nvt 0.6156 0.2690\nvt 0.9995 0.5090\nvt 0.9938 0.0001\nvt 0.0907 1.0000\nvt 0.0008 1.0000\nvn 0.3755 0.8802 0.2903\nvn -0.0452 0.3242 -0.9449\nvn 0.4176 0.5198 0.7452\nvn 0.5841 0.6870 0.4323\nvn 0.1711 0.7590 0.6282\nvn 0.4927 0.4804 -0.7256\nvn 0.7361 0.4257 -0.5262\nvn 0.2025 0.6988 -0.6861\nvn 0.1839 0.3894 -0.9025\nvn 0.0378 0.3743 0.9265\nvn 0.4164 0.5799 0.7002\nvn 0.2250 0.4608 0.8585\nvn 0.7390 0.6737 0.0000\nvn 0.3489 0.5923 0.7263\nvn 0.4083 0.6110 0.6782\nvn 0.1638 0.4961 0.8527\nvn -0.4055 0.6028 0.6871\nvn 0.4110 0.8445 0.3432\nvn 0.2839 0.6351 0.7184\nvn 0.3576 0.3726 -0.8563\nvn 0.3248 0.4061 -0.8542\nvn 0.3151 0.3673 -0.8751\nvn 0.2840 0.6602 -0.6954\nvn 0.6077 0.4306 0.6673\nvn 0.3234 0.5902 0.7396\nvn 0.5302 0.5290 -0.6627\nvn 0.1645 0.6885 -0.7064\nvn 0.3651 0.6352 0.6807\nvn -0.1630 0.7995 -0.5781\nvn 0.3687 0.3677 -0.8537\nvn 0.7732 0.6039 0.1939\nvn 0.2192 0.7253 0.6526\nvn 0.6211 0.6036 0.5000\nvn 0.7983 0.5447 -0.2567\nvn 0.6128 0.4448 -0.6532\nvn 0.2053 0.3229 -0.9239\nvn 0.2132 0.4391 -0.8728\nvn 0.2755 0.6462 0.7117\nvn 0.3244 0.5811 0.7464\nvn -0.0707 0.3487 -0.9345\nvn 0.0084 0.6505 -0.7595\nvn 0.3176 0.4038 -0.8580\nvn 0.5583 0.5726 0.6004\nvn -0.2933 0.6390 0.7111\nvn 0.5663 0.6758 -0.4718\nvn 0.6532 0.5999 -0.4621\nvn 0.2544 0.4316 -0.8655\nvn 0.2617 0.7322 0.6288\nvn -0.2475 0.4791 0.8421\nvn 0.3242 0.9460 -0.0045\nvn 0.4285 0.8249 -0.3686\nvn 0.4135 0.9105 0.0022\nvn 0.2694 0.9504 0.1554\nvn 0.1317 0.9764 0.1713\nvn -0.2709 0.9392 -0.2107\nvn 0.4591 0.8684 -0.1871\nvn 0.3384 0.8329 -0.4379\nvn 0.3835 0.9214 0.0634\nvn 0.2952 0.9414 -0.1630\nvn -0.3647 0.9201 -0.1429\nvn 0.3608 0.9025 0.2352\nvn 0.3669 0.9285 0.0577\nvn 0.1602 0.9863 0.0400\nvn 0.1824 0.9766 -0.1137\nvn 0.1504 0.9633 -0.2224\nvn 0.4862 0.8670 0.1088\nvn 0.1476 0.9788 -0.1418\nvn 0.1049 0.9890 -0.1042\nvn 0.3462 0.9340 -0.0881\nvn 0.5687 0.8010 -0.1872\nvn 0.4667 0.8564 -0.2207\nvn 0.3965 0.8575 -0.3279\nvn 0.2913 0.9482 0.1265\nvn 0.3332 0.9212 0.2011\nvn 0.2551 0.9430 -0.2138\nvn 0.1280 0.9747 0.1832\nvn 0.4062 0.9131 0.0350\nvn 0.1271 0.9914 0.0298\nvn 0.2751 0.9605 -0.0428\nvn 0.4903 0.8716 0.0027\nvn 0.1355 0.9893 0.0532\nvn 0.3427 0.9390 -0.0295\nvn -0.1299 0.9595 -0.2499\nvn -0.0171 0.9969 0.0767\nvn 0.2891 0.9465 0.1435\nvn 0.5120 0.8248 0.2399\nvn 0.4186 0.9023 0.1030\nvn 0.1719 0.9397 0.2956\nvn -0.2203 0.7893 0.5731\nvn 0.5981 0.7993 0.0582\nvn 0.2578 0.9637 0.0691\nvn 0.5071 0.8465 -0.1621\nvn 0.0701 0.9897 0.1246\nvn 0.1626 0.9849 -0.0589\nvn 0.2135 0.9301 0.2990\nvn -0.4095 0.6215 0.6679\nvn 0.3119 0.9365 -0.1601\nvn 0.1796 0.9739 0.1389\nvn 0.6262 0.6365 0.4503\nvn 0.3817 0.9206 0.0825\nvn 0.2824 0.9492 0.1391\nvn 0.0860 0.9664 0.2422\nvn 0.5257 0.8468 0.0813\nvn 0.0792 0.9955 -0.0516\nvn -0.0510 0.9966 0.0648\nvn -0.1536 0.9103 -0.3844\nvn 0.0749 0.9878 0.1368\nvn 0.6752 0.7143 -0.1842\nvn 0.4602 0.8746 -0.1527\nvn 0.5013 0.7505 -0.4306\nvn 0.1039 0.9872 -0.1207\nvn 0.0107 0.9992 0.0396\nvn 0.6030 0.7822 -0.1569\nvn 0.1017 0.9567 -0.2726\nvn -0.0081 0.9494 -0.3139\nvn 0.3914 0.9179 0.0650\nvn 0.4495 0.8895 0.0822\nvn 0.2524 0.9659 -0.0569\nvn 0.3224 0.9353 -0.1459\nvn 0.2641 0.9382 0.2237\nvn 0.6297 0.7768 -0.0047\nvn 0.4182 0.8315 0.3657\nvn 0.2260 0.9562 0.1861\nvn 0.5286 0.7797 0.3357\nvn -0.2483 0.9132 0.3233\nvn 0.3339 0.9209 0.2009\nvn 0.4028 0.7982 0.4479\nvn 0.5135 0.8094 0.2849\nvn -0.0554 0.9975 -0.0430\nvn 0.2238 0.9062 0.3588\nvn 0.2656 0.9610 0.0771\nvn -0.0078 0.9786 0.2055\nvn -0.0148 0.9974 -0.0701\nvn -0.0125 0.9942 -0.1065\nvn 0.4314 0.8993 -0.0712\nvn 0.1424 0.9891 0.0367\nvn 0.0275 0.9324 0.3604\nvn -0.3011 0.9465 -0.1164\nvn 0.4451 0.8719 -0.2043\nvn 0.1305 0.9914 0.0088\nvn 0.2886 0.9528 0.0940\nvn 0.5274 0.8480 0.0526\nvn 0.4512 0.7975 -0.4006\nvn 0.1467 0.9477 -0.2836\nvn -0.2443 0.4301 -0.8691\nvn 0.3175 0.6885 -0.6520\nvn -0.5091 0.8435 -0.1711\nvn 0.1857 0.9826 -0.0022\nvn 0.1036 0.9799 -0.1704\nvn 0.0645 0.9934 -0.0950\nvn 0.5634 0.6623 -0.4939\nvn 0.4341 0.7264 -0.5328\nvn 0.4556 0.8899 -0.0201\nvn -0.0919 0.9868 -0.1330\nvn -0.1049 0.9850 -0.1371\nvn 0.0685 0.9796 -0.1889\nvn -0.1141 0.9519 -0.2843\nvn -0.1233 0.9736 -0.1923\nvn 0.1937 0.7286 0.6569\nvn 0.0452 0.9984 0.0341\nvn -0.5159 0.8286 0.2174\nvn -0.0702 0.7073 -0.7034\nvn -0.1072 0.6429 -0.7584\nvn 0.2672 0.8062 -0.5278\nvn 0.3266 0.9429 -0.0651\nvn 0.3306 0.7925 -0.5125\nvn 0.3527 0.7838 -0.5112\nvn 0.5421 0.8325 -0.1146\nvn 0.6667 0.7431 -0.0582\nvn 0.4770 0.8783 -0.0320\nvn 0.1843 0.9723 0.1440\nvn 0.0207 0.9313 0.3636\nvn 0.0364 0.9339 0.3557\nvn 0.2130 0.8714 0.4419\nvn 0.2272 0.8741 0.4293\nvn 0.2687 0.9155 0.2993\nvn 0.2349 0.9720 0.0049\nvn 0.6136 0.7595 -0.2160\nvn -0.0704 0.9974 -0.0131\nvn -0.0395 0.9973 -0.0618\nvn -0.2443 0.9538 -0.1749\nvn -0.3177 0.9319 -0.1750\nvn -0.3587 0.9241 -0.1320\nvn -0.3052 0.9444 -0.1220\nvn -0.1117 0.9936 -0.0181\nvn 0.1814 0.9252 0.3333\nvn -0.0161 0.9903 0.1377\nvn 0.2589 0.9216 0.2893\nvn 0.4798 0.8728 -0.0894\nvn 0.2763 0.9608 0.0236\nvn 0.4825 0.8631 0.1493\nvn 0.4649 0.8674 -0.1776\nvn 0.4083 0.8706 -0.2746\nvn 0.1051 0.9944 -0.0074\nvn 0.3415 0.9130 -0.2234\nvn -0.0493 0.9986 0.0174\nvn 0.1329 0.9861 0.1001\nvn -0.0409 0.9988 0.0274\nvn 0.2153 0.9762 0.0250\nvn 0.1544 0.9871 0.0431\nvn 0.1831 0.9807 0.0691\nvn 0.1603 0.9582 -0.2368\nvn 0.4104 0.9074 -0.0904\nvn 0.2307 0.9416 -0.2452\nvn 0.2223 0.8867 -0.4054\nvn 0.1959 0.9636 -0.1818\nvn 0.4164 0.8855 0.2061\nvn 0.3109 0.9493 0.0459\nvn 0.5557 0.7600 0.3371\nvn 0.6357 0.7607 0.1312\nvn 0.1430 0.9588 -0.2455\nvn 0.3045 0.8912 0.3363\nvn 0.0657 0.9971 0.0388\nvn -0.0066 0.9993 0.0359\nvn 0.0561 0.9961 0.0688\nvn 0.3157 0.9296 0.1901\nvn 0.5093 0.8545 0.1024\nvn 0.3606 0.9296 0.0755\nvn 0.7769 0.6284 -0.0384\nvn 0.6647 0.7460 0.0404\nvn 0.1392 0.9830 0.1196\nvn 0.0040 0.8798 0.4753\nvn 0.5231 0.8372 -0.1599\nvn 0.3011 0.9490 -0.0931\nvn 0.2045 0.9760 0.0753\nvn -0.0096 0.9523 0.3049\nvn -0.1754 0.9782 -0.1110\nvn -0.2306 0.9693 -0.0857\nvn -0.2898 0.9443 -0.1561\nvn -0.2893 0.9444 -0.1562\nvn 0.3482 0.9017 0.2565\nvn 0.4569 0.7866 0.4154\nvn 0.4140 0.8230 0.3889\nvn 0.1399 0.9884 0.0587\nvn 0.2633 0.9645 0.0187\nvn 0.3703 0.9130 0.1711\nvn -0.0489 0.9919 -0.1173\nvn 0.2804 0.8968 0.3423\nvn 0.4082 0.8676 0.2839\nvn 0.4427 0.7544 0.4847\nvn 0.4024 0.9027 0.1527\nvn 0.3096 0.9344 0.1760\nvn 0.1352 0.9903 -0.0335\nvn 0.1990 0.9778 0.0652\nvn 0.5914 0.8056 0.0348\nvn 0.4794 0.8776 0.0061\nvn 0.4309 0.9020 0.0262\nvn 0.5800 0.7948 -0.1787\nvn 0.0178 0.9998 0.0064\nvn -0.0764 0.9899 0.1192\nvn -0.0547 0.9912 0.1205\nvn 0.7756 0.6247 0.0907\nvn 0.1178 0.9863 -0.1155\nvn 0.2977 0.9421 -0.1544\nvn 0.1264 0.9906 -0.0533\nvn 0.0179 0.9872 0.1588\nvn 0.0224 0.9934 0.1129\nvn -0.0690 0.9971 -0.0310\nvn -0.3129 0.8245 -0.4714\nvn 0.5689 0.8206 -0.0539\nvn 0.3823 0.9149 -0.1297\nvn 0.2282 0.9554 -0.1874\nvn 0.1062 0.9831 0.1489\nvn 0.0023 0.9825 0.1862\nvn 0.2904 0.9486 0.1256\nvn 0.0886 0.9621 -0.2580\nvn 0.5097 0.8489 -0.1398\nvn 0.1654 0.9820 0.0917\nvn 0.6954 0.7168 0.0516\nvn 0.2487 0.9649 -0.0839\nvn -0.1008 0.9948 -0.0116\nvn 0.1360 0.9852 -0.1042\nvn 0.0625 0.9978 0.0225\nvn 0.3969 0.8917 -0.2176\nvn 0.1617 0.9540 -0.2523\nvn 0.0785 0.9369 0.3407\nvn -0.0046 0.9877 0.1566\nvn -0.3412 0.9303 -0.1348\nvn -0.0525 0.9653 0.2557\nvn -0.0920 0.9211 0.3783\nvn 0.7581 0.5751 0.3076\nvn 0.4863 0.8737 0.0136\nvn 0.4036 0.9148 0.0126\nvn 0.1184 0.8967 -0.4266\nvn 0.1287 0.9779 0.1648\nvn 0.3923 0.9129 -0.1126\nvn 0.3307 0.9396 -0.0884\nvn 0.4443 0.8903 -0.1002\nvn -0.0451 0.9942 -0.0975\nvn 0.3773 0.9147 -0.1447\nvn 0.0479 0.9978 0.0460\nvn 0.1468 0.9886 0.0349\nvn 0.2455 0.9674 -0.0620\nvn 0.3792 0.9180 -0.1162\nvn 0.1246 0.9918 0.0273\nvn 0.1431 0.9889 0.0389\nvn 0.3731 0.9276 0.0164\nvn 0.6274 0.7780 0.0326\nvn 0.2862 0.9501 0.1241\nvn 0.3539 0.7764 -0.5215\nvn 0.3428 0.7860 -0.5145\nvn 0.1925 0.9795 0.0587\nvn 0.5586 0.8270 0.0638\nvn 0.5198 0.8005 -0.2984\nvn 0.2101 0.7717 0.6003\nvn 0.0157 0.9997 -0.0194\nvn 0.0461 0.9973 0.0565\nvn -0.5024 0.8563 0.1198\nvn 0.4366 0.6437 0.6285\nvn -0.2131 0.9457 -0.2453\nvn 0.0476 0.9726 -0.2273\nvn -0.1512 0.9649 -0.2149\nvn 0.3614 0.7779 0.5141\nvn 0.4128 0.7392 0.5322\nvn 0.2796 0.8960 0.3449\nvn 0.4459 0.8951 0.0053\nvn -0.1904 0.9786 -0.0781\nvn -0.1264 0.9407 0.3148\nvn 0.3532 0.9355 0.0062\nvn 0.3138 0.9482 -0.0487\nvn 0.6315 0.7642 -0.1311\nvn 0.6176 0.7717 -0.1518\nvn 0.5404 0.8152 -0.2083\nvn 0.3350 0.9422 -0.0109\nvn 0.5080 0.8561 0.0947\nvn 0.4364 0.8960 0.0814\nvn 0.2857 0.9467 0.1488\nvn 0.1048 0.9508 0.2917\nvn -0.0163 0.8956 0.4446\nvn -0.0360 0.9317 0.3614\nvn -0.0803 0.9682 0.2371\nvn -0.1022 0.9905 -0.0924\nvn 0.5865 0.6711 0.4534\nvn 0.2323 0.9726 0.0072\nvn 0.2597 0.9598 -0.1068\nvn 0.2550 0.9668 0.0143\nvn 0.7111 0.5631 -0.4210\nvn -0.0365 0.9446 -0.3261\nvn -0.1115 0.9830 -0.1458\nvn -0.0551 0.9917 -0.1163\nvn 0.1570 0.9642 0.2137\nvn 0.2231 0.9486 0.2245\nvn 0.0293 0.9994 0.0161\nvn 0.0167 0.9870 -0.1596\nvn 0.1449 0.9886 0.0405\nvn 0.0228 0.9945 0.1018\nvn -0.0435 0.9990 0.0076\nvn 0.1836 0.9762 -0.1156\nvn 0.2076 0.9732 -0.0990\nvn 0.3044 0.9524 -0.0149\nvn 0.6216 0.7699 0.1446\nvn 0.4779 0.8774 0.0435\nvn 0.4394 0.8954 0.0718\nvn 0.2045 0.9769 0.0618\nvn 0.1405 0.9887 -0.0531\nvn -0.0307 0.9912 0.1286\nvn -0.0234 0.9898 0.1402\nvn -0.1906 0.9743 -0.1198\nvn -0.1677 0.9533 -0.2511\nvn 0.1101 0.9764 0.1860\nvn 0.6652 0.7226 -0.1879\nvn 0.1141 0.9903 -0.0788\nvn 0.2056 0.8117 -0.5467\nvn -0.1741 0.9556 -0.2376\nvn 0.1037 0.9853 -0.1357\nvn 0.0143 0.9995 0.0267\nvn 0.3853 0.9206 0.0627\nvn 0.2328 0.9722 -0.0237\nvn 0.0839 0.9964 -0.0141\nvn 0.7226 0.6834 -0.1038\nvn 0.3417 0.9074 -0.2448\nvn 0.2613 0.9588 0.1115\nvn 0.1383 0.9845 0.1083\nvn 0.4736 0.8733 0.1143\nvn 0.3693 0.9137 0.1697\nvn -0.3295 0.9221 -0.2032\nvn 0.3996 0.9162 0.0306\nvn 0.3977 0.9004 0.1762\nvn 0.4205 0.8650 -0.2738\nvn 0.0345 0.9964 -0.0771\nvn -0.0942 0.9952 0.0274\nvn 0.0832 0.9934 0.0784\nvn 0.3302 0.9438 -0.0140\nvn 0.3178 0.9481 0.0081\nvn 0.4078 0.9099 -0.0764\nvn -0.1571 0.9484 -0.2756\nvn 0.4605 0.8838 0.0833\nvn 0.2524 0.9643 -0.0801\nvn 0.3356 0.9402 0.0580\nvn 0.3937 0.7393 0.5463\nvn 0.0292 0.9659 0.2571\nvn -0.0437 0.9809 -0.1897\nvn 0.1446 0.9859 0.0846\nvn 0.4917 0.8466 -0.2037\nvn 0.0541 0.9467 0.3174\nvn 0.4792 0.8777 -0.0035\nvn 0.0007 0.9895 0.1444\nvn 0.0023 0.9949 0.1012\nvn -0.1532 0.9682 -0.1976\nvn 0.1906 0.9785 0.0795\nvn 0.5224 0.8512 0.0508\nvn -0.1173 0.9931 0.0084\nvn 0.6032 0.7811 -0.1613\nvn 0.3736 0.8785 -0.2978\nvn 0.0420 0.9862 0.1602\nvn 0.2926 0.9509 -0.1004\nvn 0.2060 0.8831 0.4217\nvn -0.1489 0.9876 -0.0486\nvn 0.4870 0.8661 -0.1122\nvn -0.3142 0.9345 -0.1672\nvn 0.3328 0.9231 0.1928\nvn 0.0701 0.9306 0.3592\nvn -0.1870 0.9394 -0.2873\nvn -0.2462 0.9650 -0.0903\nvn 0.5715 0.8072 0.1473\nvn 0.1792 0.9747 -0.1337\nvn 0.2987 0.9170 -0.2643\nvn 0.2624 0.9515 -0.1608\nvn 0.5474 0.8107 -0.2076\nvn 0.3697 0.9221 -0.1139\nvn 0.3533 0.9343 -0.0474\nvn 0.3359 0.9403 -0.0542\nvn 0.0228 0.9969 0.0754\nvn 0.1347 0.9908 0.0160\nvn 0.2380 0.9711 0.0200\nvn -0.2194 0.9693 -0.1109\nvn 0.3423 0.8774 0.3362\nvn 0.4603 0.8594 -0.2226\nvn 0.5614 0.8257 -0.0551\nvn 0.0841 0.9958 -0.0357\nvn 0.3871 0.8636 0.3230\nvn 0.3501 0.7781 0.5215\nvn 0.1271 0.9907 0.0490\nvn 0.4675 0.8840 -0.0096\nvn -0.1077 0.9862 0.1259\nvn -0.0630 0.9286 0.3658\nvn 0.1987 0.9483 0.2474\nvn 0.0407 0.9731 0.2268\nvn -0.0876 0.9942 -0.0621\nvn -0.0308 0.9623 -0.2702\nvn 0.0702 0.9411 -0.3307\nvn 0.2734 0.9561 -0.1051\nvn 0.3893 0.8002 0.4563\nvn -0.0424 0.9911 -0.1265\nvn 0.1535 0.9564 0.2484\nvn -0.1861 0.9405 -0.2845\nvn 0.4324 0.9017 0.0017\nvn 0.4185 0.9082 -0.0086\nvn -0.1781 0.9683 0.1752\nvn 0.0175 0.9759 0.2174\nvn 0.3306 0.9353 -0.1258\nvn 0.2417 0.9699 -0.0294\nvn 0.3583 0.9315 -0.0625\nvn 0.1743 0.9717 -0.1592\nvn 0.3401 0.9080 -0.2448\nvn 0.1415 0.9814 -0.1301\nvn -0.2677 0.8696 -0.4148\nvn 0.1621 0.9479 -0.2744\nvn 0.6202 0.7768 -0.1092\nvn 0.1847 0.9309 0.3150\nvn -0.0007 0.9843 0.1766\nvn 0.4859 0.8701 -0.0827\nvn 0.5326 0.8335 0.1472\nvn 0.3406 0.9367 -0.0807\nvn 0.4545 0.8683 -0.1988\nvn 0.2083 0.9730 -0.0991\nvn 0.0627 0.9950 0.0778\nvn -0.0370 0.9826 -0.1819\nvn 0.3892 0.9102 -0.1416\nvn 0.2403 0.9673 -0.0812\nvn 0.0752 0.9956 0.0563\nvn 0.2918 0.9552 -0.0485\nvn -0.2523 0.7612 0.5974\nvn 0.3211 0.9432 0.0850\nvn -0.2343 0.9102 0.3416\nvn 0.1517 0.9602 0.2346\nvn -0.2163 0.9591 -0.1826\nvn 0.4903 0.8715 0.0027\nvn 0.0898 0.9945 -0.0534\nvn -0.1513 0.9687 -0.1969\nvn 0.4142 0.8521 -0.3199\nvn 0.1840 0.9685 -0.1680\nvn 0.2015 0.9795 0.0058\nvn 0.0297 0.9985 0.0467\nvn 0.6523 0.6623 -0.3685\nvn 0.0414 0.9990 -0.0174\nvn 0.3915 0.9199 0.0216\nvn 0.0767 0.9969 0.0184\nvn 0.0965 0.9565 -0.2755\nvn -0.0021 0.9960 0.0895\nvn -0.0973 0.9801 0.1729\nvn 0.3926 0.9194 -0.0225\nvn 0.4710 0.8550 0.2171\nvn 0.3918 0.8139 0.4290\nvn 0.3929 0.8960 0.2071\nvn 0.0930 0.9842 -0.1505\nvn 0.0242 0.9897 -0.1408\nvn 0.2437 0.9698 0.0064\nvn -0.3419 0.7657 0.5448\nvn -0.1133 0.9317 0.3450\nvn 0.3907 0.8860 0.2495\nvn 0.3571 0.9319 0.0631\nvn 0.0090 0.9993 0.0367\nvn -0.2580 0.8926 -0.3698\nvn -0.2722 0.9522 -0.1384\nvn 0.6655 0.7116 0.2252\nvn 0.6669 0.5901 0.4550\nvn 0.2316 0.9151 -0.3302\nvn 0.0056 0.9970 -0.0766\nvn 0.3322 0.9102 -0.2473\nvn -0.0961 0.9913 0.0896\nvn 0.5446 0.8319 -0.1066\nvn 0.5273 0.8487 -0.0409\nvn 0.4067 0.9125 -0.0436\nvn 0.0999 0.9889 0.1097\nvn -0.4929 0.7712 0.4028\nvn 0.4802 0.8594 0.1757\nvn 0.6001 0.7987 -0.0442\nvn 0.4142 0.9034 0.1114\nvn 0.4679 0.8734 0.1349\nvn 0.2576 0.8566 -0.4471\nvn 0.0812 0.9720 -0.2207\nvn 0.0937 0.9949 -0.0382\nvn 0.0692 0.9976 -0.0035\nvn 0.4618 0.8862 -0.0362\nvn 0.1548 0.8144 -0.5593\nvn 0.3021 0.7914 -0.5314\nvn 0.2633 0.7930 -0.5494\nvn 0.4954 0.7052 -0.5072\nvn -0.0230 0.9980 -0.0582\nvn -0.0167 0.9930 -0.1172\nvn 0.0995 0.9811 -0.1657\nvn 0.0776 0.9726 -0.2193\nvn -0.2836 0.5667 -0.7736\nvn 0.3220 0.8370 0.4424\nvn -0.0189 0.0299 -0.9994\nvn -0.5559 0.6425 -0.5274\nvn -0.0550 0.7117 -0.7003\nvn 0.5053 0.5723 0.6458\nvn 0.6109 0.6883 0.3913\nvn 0.5060 0.8470 0.1632\nvn 0.1694 0.9846 0.0440\nvn 0.1091 0.8954 0.4317\nvn 0.3117 0.9442 -0.1063\nvn 0.2024 0.9789 0.0292\nvn 0.3910 0.9197 -0.0348\nvn 0.2964 0.9452 -0.1367\nvn 0.4580 0.8669 -0.1968\nvn 0.6034 0.7713 -0.2025\nvn -0.1799 0.9647 -0.1922\nvn -0.2567 0.9143 0.3133\nvn 0.3441 0.9389 0.0075\nvn 0.4235 0.9059 0.0001\nvn 0.4254 0.9049 -0.0085\nvn 0.2694 0.9483 0.1677\nvn 0.6261 0.7718 0.1113\nvn 0.1927 0.9779 -0.0806\nvn 0.1932 0.9778 -0.0808\nvn -0.0977 0.9910 0.0912\nvn 0.2256 0.9514 0.2094\nvn 0.2736 0.9456 0.1759\nvn 0.5423 0.8339 -0.1027\nvn 0.3123 0.9462 -0.0845\nvn 0.2388 0.9633 -0.1226\nvn 0.3486 0.9313 -0.1056\nvn 0.0795 0.9951 0.0580\nvn 0.1913 0.9638 -0.1859\nvn -0.0423 0.9978 0.0502\nvn -0.2478 0.9367 0.2474\nvn -0.2861 0.8416 0.4582\nvn 0.1289 0.9551 0.2669\nvn 0.7106 0.7036 -0.0023\nvn 0.0346 0.8770 0.4793\nvn 0.0284 0.9355 0.3523\nvn -0.1936 0.9754 -0.1051\nvn -0.2975 0.9476 -0.1161\nvn 0.3213 0.9161 -0.2399\nvn 0.5630 0.6915 0.4526\nvn 0.3297 0.9194 0.2146\nvn -0.0163 0.9905 -0.1365\nvn 0.0975 0.9706 0.2200\nvn 0.1489 0.9613 0.2320\nvn 0.2087 0.9571 0.2012\nvn -0.1011 0.9893 -0.1048\nvn -0.1021 0.9554 0.2772\nvn 0.3414 0.9378 0.0635\nvn 0.1863 0.9236 0.3350\nvn 0.4497 0.8930 0.0189\nvn 0.5128 0.7845 0.3487\nvn 0.2270 0.9513 0.2083\nvn 0.0517 0.9985 -0.0178\nvn 0.2809 0.9447 0.1690\nvn 0.4718 0.8817 0.0019\nvn 0.0694 0.9970 -0.0331\nvn -0.0030 0.9744 0.2250\nvn 0.0384 0.9837 0.1756\nvn 0.5819 0.7936 -0.1778\nvn 0.6096 0.7744 -0.1695\nvn 0.2518 0.9635 -0.0910\nvn 0.2240 0.9689 -0.1049\nvn 0.1307 0.9824 -0.1332\nvn 0.3194 0.9385 0.1314\nvn 0.3314 0.8818 -0.3356\nvn 0.6993 0.7148 0.0083\nvn 0.4793 0.8771 0.0309\nvn 0.3696 0.9242 -0.0958\nvn 0.2554 0.9611 0.1054\nvn 0.2672 0.9622 0.0527\nvn -0.0127 0.9999 0.0104\nvn 0.3292 0.9406 0.0827\nvn 0.1899 0.9818 0.0057\nvn 0.4363 0.8083 -0.3953\nvn 0.2504 0.9571 -0.1457\nvn 0.1641 0.9355 -0.3128\nvn 0.7933 0.5845 -0.1703\nvn 0.7868 0.5880 -0.1875\nvn 0.2380 0.9650 -0.1106\nvn 0.3062 0.9406 0.1468\nvn -0.0005 0.9992 0.0406\nvn -0.0176 0.9998 0.0123\nvn 0.6896 0.7098 0.1435\nvn 0.1692 0.9691 -0.1797\nvn 0.1583 0.9874 -0.0089\nvn 0.0355 0.9977 -0.0579\nvn 0.0672 0.9825 -0.1740\nvn 0.1380 0.9686 -0.2066\nvn 0.3869 0.9148 -0.1156\nvn 0.5473 0.8317 -0.0935\nvn -0.0282 0.9643 -0.2632\nvn -0.1122 0.9847 -0.1330\nvn -0.0593 0.9934 -0.0977\nvn 0.0066 0.9948 0.1012\nvn -0.0679 0.9977 0.0084\nvn -0.0145 0.9935 0.1126\nvn 0.1472 0.9883 0.0403\nvn 0.1495 0.9888 -0.0034\nvn 0.4157 0.9094 0.0119\nvn 0.3783 0.9222 0.0806\nvn 0.2339 0.9700 -0.0660\nvn 0.0674 0.9977 0.0000\nvn 0.4917 0.8099 0.3198\nvn 0.4671 0.8317 0.3002\nvn 0.3202 0.8285 -0.4595\nvn -0.2400 0.7643 0.5985\nvn -0.3555 0.6687 0.6530\nvn 0.4788 0.8748 -0.0746\nvn 0.0195 0.9865 -0.1625\nvn 0.3600 0.9129 0.1923\nvn -0.0043 0.9986 -0.0533\nvn -0.0109 0.9898 -0.1417\nvn 0.5388 0.8326 0.1279\nvn 0.2879 0.9575 0.0154\nvn 0.2195 0.9377 0.2693\nvn 0.4015 0.9007 0.1659\nvn 0.2951 0.9452 -0.1395\nvn 0.4587 0.8803 -0.1213\nvn 0.2063 0.9056 0.3707\nvn -0.0388 0.9992 0.0049\nvn 0.1600 0.9870 0.0140\nvn 0.4053 0.9142 0.0082\nvn 0.4825 0.8759 -0.0017\nvn 0.5439 0.8346 0.0875\nvn 0.2889 0.9553 -0.0626\nvn 0.4855 0.8723 0.0580\nvn 0.0198 0.9333 0.3586\nvn -0.2204 0.8223 0.5246\nvn 0.1287 0.9548 0.2680\nvn -0.0882 0.9587 0.2705\nvn -0.2352 0.9495 -0.2078\nvn -0.1812 0.9537 -0.2401\nvn -0.2252 0.9427 -0.2461\nvn -0.2577 0.9343 -0.2463\nvn -0.2147 0.9455 -0.2447\nvn 0.1544 0.9857 0.0680\nvn 0.2146 0.9764 0.0245\nvn 0.3879 0.9207 -0.0428\nvn 0.3543 0.9214 -0.1595\nvn 0.3507 0.9228 -0.1592\nvn 0.0144 0.9998 -0.0116\nvn -0.0354 0.9909 -0.1297\nvn 0.5597 0.8287 0.0024\nvn 0.4198 0.9067 -0.0407\nvn 0.5794 0.8015 0.1479\nvn 0.3578 0.9303 0.0804\nvn 0.1544 0.9628 0.2216\nvn 0.2351 0.9700 0.0624\nvn 0.4533 0.8910 0.0262\nvn 0.0323 0.9891 0.1436\nvn 0.1317 0.9191 0.3713\nvn 0.0295 0.9835 0.1786\nvn -0.1852 0.9795 -0.0795\nvn -0.2586 0.9506 -0.1719\nvn -0.0515 0.9693 -0.2403\nvn 0.4983 0.8405 -0.2129\nvn 0.6310 0.7568 -0.1708\nvn 0.6040 0.7870 -0.1260\nvn 0.1657 0.9833 -0.0749\nvn 0.3493 0.9269 0.1372\nvn 0.5273 0.8478 0.0574\nvn 0.4117 0.9083 0.0747\nvn 0.1732 0.9782 0.1141\nvn 0.2174 0.9756 -0.0313\nvn 0.2990 0.9503 -0.0862\nvn 0.4447 0.8784 -0.1752\nvn 0.2694 0.9561 -0.1153\nvn -0.0942 0.9228 -0.3737\nvn 0.2629 0.7939 -0.5483\nvn -0.2983 0.8764 -0.3781\nvn 0.4884 0.8637 -0.1240\nvn 0.5401 0.8372 0.0859\nvn 0.2886 0.9528 0.0942\nvn 0.0292 0.9967 -0.0763\nvn -0.0711 0.9974 0.0111\nvn -0.0392 0.9966 -0.0718\nvn 0.0758 0.9891 0.1263\nvn 0.0030 0.9999 0.0154\nvn 0.0307 0.9993 0.0191\nvn 0.2776 0.9585 0.0648\nvn 0.5752 0.6871 0.4438\nvn 0.1200 0.9381 0.3249\nvn 0.1233 0.9909 0.0539\nvn 0.4271 0.9008 -0.0788\nvn 0.5191 0.8428 -0.1422\nvn -0.0316 0.9926 -0.1173\nvn 0.0227 0.9897 -0.1413\nvn 0.0676 0.9890 -0.1316\nvn 0.2645 0.9550 -0.1343\nvn 0.1437 0.9888 0.0406\nvn 0.3883 0.7995 -0.4583\nvn 0.1555 0.9792 -0.1300\nvn 0.0757 0.9970 0.0175\nvn 0.4825 0.8692 0.1083\nvn 0.6900 0.7021 -0.1758\nvn 0.4280 0.8943 -0.1304\nvn 0.0534 0.9925 0.1096\nvn -0.2471 0.9567 -0.1537\nvn 0.1380 0.9778 0.1578\nvn 0.2185 0.9689 0.1162\nvn -0.2852 0.9289 -0.2362\nvn -0.1594 0.9788 -0.1282\nvn 0.0249 0.9997 -0.0082\nvn -0.0210 0.9870 0.1592\nvn 0.4246 0.8920 0.1549\nvn 0.3695 0.9224 0.1123\nvn 0.2519 0.9178 -0.3070\nvn 0.2972 0.9543 0.0314\nvn 0.3327 0.9285 0.1647\nvn 0.1793 0.9465 0.2682\nvn -0.0255 0.9474 0.3191\nvn 0.7580 0.5840 0.2906\nvn 0.3654 0.9279 0.0739\nvn 0.3007 0.9496 -0.0880\nvn -0.5551 0.7552 -0.3486\nvn -0.1284 0.9617 -0.2421\nvn 0.0092 0.9999 -0.0054\nvn -0.0055 0.9999 -0.0123\nvn -0.0783 0.9968 0.0133\nvn 0.1588 0.9872 0.0149\nvn -0.0405 0.9991 0.0090\nvn 0.3303 0.9141 0.2351\nvn 0.3279 0.9159 0.2316\nvn -0.8965 0.4323 0.0967\nvn 0.0274 0.9671 -0.2529\nvn 0.1726 0.9739 -0.1475\nvn 0.1906 0.9786 -0.0775\nvn 0.2428 0.9534 0.1789\nvn 0.5615 0.8160 -0.1371\nvn 0.0604 0.8772 -0.4764\nvn 0.2001 0.9768 0.0758\nvn -0.0684 0.9969 0.0392\nvn 0.1193 0.9915 0.0518\nvn 0.2743 0.9418 0.1942\nvn 0.4889 0.8718 -0.0295\nvn -0.3517 0.7920 0.4991\nvn 0.3544 0.9351 0.0056\nvn 0.5588 0.7786 0.2856\nvn 0.4551 0.8794 0.1399\nvn 0.1908 0.9692 -0.1558\nvn -0.1000 0.4388 0.8930\nvn 0.3775 0.8214 0.4275\nvn -0.2179 0.8197 0.5297\nvn -0.2159 0.9714 -0.0985\nvn 0.0486 0.9986 -0.0198\nvn 0.5465 0.8348 0.0661\nvn 0.1366 0.9723 -0.1899\nvn -0.3597 0.9111 -0.2016\nvn 0.7278 0.5647 -0.3890\nvn 0.0366 0.9832 -0.1788\nvn -0.5519 0.8124 -0.1882\nvn -0.1866 0.7308 -0.6566\nvn 0.0142 0.9973 -0.0722\nvn 0.3823 0.9178 -0.1070\nvn 0.5291 0.8023 -0.2764\nvn 0.2895 0.9452 -0.1507\nvn 0.4601 0.8794 -0.1221\nvn 0.0200 0.9967 -0.0782\nvn 0.0383 0.9445 0.3262\nvn 0.0070 0.9309 0.3652\nvn 0.2928 0.9181 0.2672\nvn -0.2966 0.8301 0.4723\nvn 0.3107 0.9467 0.0845\nvn 0.0250 0.9996 0.0088\nvn 0.1014 0.9938 -0.0458\nvn 0.1789 0.9618 -0.2073\nvn 0.3593 0.8828 -0.3025\nvn 0.0351 0.9798 0.1971\nvn 0.1541 0.9880 0.0097\nvn 0.1836 0.9830 0.0064\nvn -0.0158 0.8348 0.5504\nvn 0.1860 0.8145 0.5496\nvn -0.5739 0.8181 0.0359\nvn 0.3111 0.8844 0.3479\nvn 0.2594 0.9538 0.1516\nvn 0.2252 0.9623 0.1525\nvn 0.5850 0.7976 0.1470\nvn 0.3437 0.9389 0.0177\nvn 0.4417 0.8971 0.0057\nvn 0.4803 0.8771 -0.0037\nvn 0.3456 0.9321 -0.1087\nvn 0.4367 0.8786 -0.1931\nvn -0.2022 0.9762 -0.0788\nvn 0.5498 0.7787 -0.3021\nvn 0.4291 0.8623 -0.2690\nvn 0.3099 0.9506 -0.0183\nvn 0.1498 0.9678 -0.2025\nvn 0.4090 0.8700 0.2754\nvn -0.1922 0.9778 -0.0830\nvn 0.0996 0.9554 0.2779\nvn -0.1681 0.9453 -0.2796\nvn -0.1306 0.9620 -0.2396\nvn 0.3383 0.9380 0.0755\nvn -0.0979 0.9020 0.4206\nvn -0.2338 0.9661 -0.1097\nvn 0.4804 0.7615 -0.4351\nvn -0.0438 0.9912 -0.1249\nvn 0.1151 0.9704 0.2125\nvn -0.0147 0.9998 0.0130\nvn 0.0136 0.9722 0.2338\nvn 0.0686 0.9967 0.0438\nvn 0.1919 0.9754 0.1088\nvn 0.0957 0.9923 0.0790\nvn 0.0267 0.8397 -0.5424\nvn 0.0281 0.9970 -0.0717\nvn 0.4223 0.9064 0.0122\nvn -0.0435 0.9924 0.1155\nvn 0.0418 0.9543 0.2958\nvn 0.2465 0.9544 0.1684\nvn -0.0755 0.9939 -0.0799\nvn 0.1401 0.9827 -0.1214\nvn 0.4937 0.8688 -0.0370\nvn 0.0159 0.9989 -0.0435\nvn 0.2107 0.9661 0.1491\nvn -0.0317 0.9916 0.1255\nvn 0.1909 0.9805 0.0465\nvn 0.0926 0.9784 -0.1846\nvn -0.1707 0.8041 0.5694\nvn 0.0496 0.9841 0.1708\nvn -0.0608 0.9120 0.4056\nvn 0.3590 0.9333 0.0063\nvn 0.1227 0.9805 0.1532\nvn 0.1912 0.9803 -0.0489\nvn 0.0400 0.9677 0.2491\nvn 0.0025 0.9501 0.3119\nvn 0.1810 0.9624 0.2026\nvn 0.0711 0.8917 -0.4471\nvn 0.1042 0.9872 -0.1210\nvn 0.1809 0.9833 0.0171\nvn -0.0396 0.9641 0.2625\nvn 0.0729 0.9971 -0.0225\nvn 0.2327 0.9570 0.1732\nvn 0.2120 0.9736 0.0848\nvn 0.0851 0.9964 -0.0031\nvn -0.0180 0.9481 0.3175\nvn 0.0423 0.9920 0.1187\nvn 0.0513 0.9523 0.3007\nvn 0.0316 0.9915 -0.1264\nvn 0.2815 0.9595 0.0024\nvn -0.0943 0.9892 0.1122\nvn -0.0185 0.9991 0.0387\nvn 0.1865 0.9498 0.2513\nvn 0.1372 0.9745 0.1777\nvn -0.2419 0.9697 0.0352\nvn -0.0314 0.9692 0.2443\nvn 0.4681 0.8759 0.1165\nvn 0.2208 0.9633 0.1526\nvn 0.2241 0.9529 -0.2042\nvn 0.0554 0.9980 0.0288\nvn 0.1438 0.9810 0.1299\nvn 0.2727 0.9414 0.1987\nvn 0.2599 0.9441 0.2028\nvn 0.1330 0.9882 -0.0757\nvn 0.0782 0.9762 -0.2025\nvn -0.0006 0.9999 0.0148\nvn 0.3860 0.9225 -0.0056\nvn -0.0056 0.9981 0.0613\nvn -0.0560 0.9983 0.0162\nvn 0.0078 0.9947 0.1026\nvn 0.0660 0.9952 -0.0727\nvn 0.1387 0.9869 0.0823\nvn 0.3550 0.8916 0.2812\nvn 0.3876 0.9218 0.0015\nvn 0.3677 0.9241 0.1038\nvn 0.0879 0.8537 -0.5133\nvn 0.3127 0.9497 0.0169\nvn 0.0724 0.9941 0.0805\nvn 0.0231 0.9912 0.1307\nvn -0.0494 0.9988 0.0054\nvn -0.0190 0.9493 0.3137\nvn 0.1536 0.9868 0.0513\nvn -0.0463 0.9984 0.0320\nvn 0.0508 0.9947 -0.0890\nvn 0.0991 0.9919 0.0798\nvn 0.0568 0.8307 -0.5538\nvn 0.0886 0.9951 0.0446\nvn 0.3733 0.9038 0.2095\nvn 0.2055 0.9057 0.3708\nvn 0.1164 0.9930 0.0189\nvn 0.2119 0.9206 0.3282\nvn -0.0149 0.9067 0.4214\nvn 0.0269 0.9969 0.0746\nvn 0.5808 0.7569 -0.2995\nvn 0.3247 0.9457 0.0119\nvn 0.3561 0.8962 0.2647\nvn -0.0480 0.6990 0.7135\nvn -0.2371 0.7698 0.5926\nvn 0.0849 0.8369 0.5407\nvn -0.4690 0.6568 0.5904\nvn -0.3597 0.6881 0.6302\nvn -0.4530 0.6035 0.6562\nvn 0.0515 0.2188 -0.9744\nvn 0.1727 0.1859 -0.9673\nvn 0.1635 0.5437 -0.8232\nvn 0.4667 0.8742 -0.1345\nvn 0.5731 0.7297 -0.3730\nvn 0.6445 0.7334 -0.2162\nvn 0.5651 0.8162 -0.1201\nvn 0.4709 0.8797 -0.0670\nvn 0.5318 0.8430 -0.0806\nvn 0.3703 0.6665 0.6470\nvn 0.1938 0.4973 0.8457\nvn 0.4728 0.4661 0.7478\nvn 0.3235 0.8979 0.2984\nvn 0.1115 0.9798 -0.1657\nvn 0.2053 0.9778 0.0430\nvn -0.4497 0.5599 0.6959\nvn 0.3036 0.9412 -0.1485\nvn -0.1882 0.9816 0.0326\nvn -0.0767 0.9947 -0.0684\nvn -0.7574 0.4791 -0.4436\nvn 0.5956 0.5152 -0.6163\nvn 0.3522 0.9176 0.1844\nvn 0.0000 0.0000 1.0000\nvn 0.1826 0.9829 0.0222\nvn 0.1433 0.9889 0.0387\nvn 0.8164 0.5761 0.0403\nvn 0.1599 0.9831 0.0895\nvn 0.8033 0.5782 0.1424\nvn 0.0594 0.9981 0.0177\nvn 0.3848 0.8998 -0.2058\nvn -0.1735 0.9825 0.0678\nvn 0.0860 0.9943 0.0625\nvn 0.2109 0.9768 0.0374\nvn -0.6327 0.7740 0.0246\nvn 0.2634 0.9646 0.0137\nvn 0.7692 0.5324 -0.3534\nvn 0.0434 0.9990 0.0089\nvn 0.2324 0.9630 0.1368\nvn 0.6487 0.7137 -0.2643\nvn 0.1841 0.9823 -0.0358\nvn 0.2843 0.9587 -0.0086\nvn 0.1656 0.9529 0.2540\nvn 0.0542 0.9892 0.1360\nvn -0.2470 0.8972 -0.3661\nvn 0.0623 0.9980 -0.0052\nvn 0.2633 0.7929 -0.5494\nvn 0.4954 0.7053 -0.5072\nvn 0.1815 0.9640 -0.1941\nvn 0.2288 0.9516 0.2053\nvn 0.0128 0.9946 -0.1033\nvn -0.0570 0.9700 -0.2362\nvn 0.3666 0.9100 0.1937\nvn 0.0290 0.9963 -0.0803\nvn 0.2989 0.9421 0.1518\nvn -0.1364 0.9646 0.2257\nvn -0.1076 0.9799 -0.1679\nvn -0.0037 0.9997 0.0248\nvn 0.3716 0.9215 0.1131\nvn -0.0146 0.9998 -0.0097\nvn 0.3386 0.9078 0.2476\nvn 0.3050 0.9402 0.1518\nvn 0.4926 0.8695 -0.0360\nvn 0.3173 0.9226 0.2193\nvn 0.0504 0.9984 -0.0257\nvn 0.3995 0.9120 0.0935\nvn 0.1894 0.9482 0.2549\nvn 0.1933 0.9593 0.2059\nvn 0.0553 0.9981 0.0288\nvn 0.2089 0.9632 0.1691\nvn 0.2954 0.9373 0.1852\nvn 0.3889 0.9213 0.0021\nvn 0.4085 0.9083 0.0896\nvn 0.4060 0.9134 0.0303\nvn -0.5168 0.5736 0.6355\nvn -0.4382 0.6391 0.6321\nvn 0.0431 0.9925 0.1140\nvn 0.3708 0.9273 0.0509\nusemtl SNOW\ns off\nf 2848/4160/1522 2849/4161/1522 2850/4162/1522\nf 2851/4163/1523 2852/4164/1523 2853/4165/1523\nf 2854/4166/1524 2855/4167/1524 2848/4160/1524\nf 2856/4168/1525 2857/4169/1525 2858/4170/1525\nf 2850/4162/1526 2859/4171/1526 2860/4172/1526\nf 2861/4173/1527 2862/4174/1527 2863/4175/1527\nf 2864/4176/1528 2865/4177/1528 2861/4173/1528\nf 2866/4178/1529 2861/4173/1529 2863/4175/1529\nf 2867/4179/1530 2868/4180/1530 2869/4181/1530\nf 2870/4182/1531 2850/4162/1531 2860/4172/1531\nf 2871/4183/1532 2857/4169/1532 2872/4184/1532\nf 2874/4185/1533 2860/4172/1533 2873/4186/1533\nf 2876/4187/1534 2856/4168/1534 2877/4188/1534\nf 2878/4189/1535 2879/4190/1535 2880/4191/1535\nf 2881/4192/1536 2882/4193/1536 2883/4194/1536\nf 2875/4195/1537 2870/4182/1537 2860/4172/1537\nf 2884/4196/1538 2854/4166/1538 2848/4160/1538\nf 2885/4197/1539 2886/4198/1539 2887/4199/1539\nf 2888/4200/1540 2887/4199/1540 2886/4198/1540\nf 2889/4201/1541 2865/4177/1541 2864/4176/1541\nf 2889/4201/1542 2890/4202/1542 2865/4177/1542\nf 2891/4203/1543 2892/4204/1543 2851/4163/1543\nf 2852/4164/1544 2893/4205/1544 2894/4206/1544\nf 2883/4194/1545 2874/4185/1545 2873/4186/1545\nf 2872/4184/1546 2880/4191/1546 2871/4183/1546\nf 2895/4207/1547 2896/4208/1547 2897/4209/1547\nf 2898/4210/1548 2866/4178/1548 2863/4175/1548\nf 2871/4183/1549 2880/4191/1549 2879/4190/1549\nf 2851/4163/1550 2892/4204/1550 2852/4164/1550\nf 2890/4202/1551 2891/4203/1551 2851/4163/1551\nf 2883/4194/1552 2882/4193/1552 2874/4185/1552\nf 2878/4189/1553 2881/4192/1553 2879/4190/1553\nf 2877/4188/1554 2856/4168/1554 2858/4170/1554\nf 2861/4173/1555 2865/4177/1555 2862/4174/1555\nf 2868/4180/1556 2866/4178/1556 2898/4210/1556\nf 2869/4181/1557 2868/4180/1557 2898/4210/1557\nf 2895/4207/1558 2867/4179/1558 2896/4208/1558\nf 2850/4162/1559 2849/4161/1559 2859/4171/1559\nf 2872/4184/1560 2878/4189/1560 2880/4191/1560\nf 2853/4165/1561 2852/4164/1561 2894/4206/1561\nf 2894/4206/1562 2893/4205/1562 2899/4211/1562\nf 2889/4201/1563 2891/4203/1563 2890/4202/1563\nf 2848/4160/1564 3480/4212/1564 2849/4161/1564\nf 2870/4182/1565 2848/4160/1565 2850/4162/1565\nf 2876/4187/1566 2897/4209/1566 2856/4168/1566\nf 2897/4209/1567 2896/4208/1567 2856/4168/1567\nf 2896/4208/1568 2867/4179/1568 2869/4181/1568\nf 2879/4190/1569 2881/4192/1569 2883/4194/1569\nf 2884/4196/1570 2848/4160/1570 2870/4182/1570\nf 2900/4213/1571 2901/4214/1571 2902/4215/1571\nf 2903/4216/1572 2896/4208/1572 2869/4181/1572\nf 2904/4217/1573 2905/4218/1573 2906/4219/1573\nf 2907/4220/1574 2908/4221/1574 2909/4222/1574\nf 2910/4223/1575 2911/4224/1575 2912/4225/1575\nf 2913/4226/1576 2914/4227/1576 2915/4228/1576\nf 2916/4229/1577 2917/4230/1577 2918/4231/1577\nf 2919/4232/1578 2920/4233/1578 2921/4234/1578\nf 2922/4235/1579 2923/4236/1579 2900/4213/1579\nf 2924/4237/1580 2925/4238/1580 2926/4239/1580\nf 2927/4240/1581 2928/4241/1581 2929/4242/1581\nf 2931/4243/1582 2933/4244/1582 2930/4245/1582\nf 2934/4246/1583 2935/4247/1583 2936/4248/1583\nf 2937/4249/1584 2938/4250/1584 2939/4251/1584\nf 2940/4252/1585 2941/4253/1585 2942/4254/1585\nf 2943/4255/1586 2944/4256/1586 2945/4257/1586\nf 2946/4258/1587 2947/4259/1587 2908/4221/1587\nf 2949/4260/1588 2951/4261/1588 2948/4262/1588\nf 2952/4263/1589 2953/4264/1589 2954/4265/1589\nf 2955/4266/1590 2895/4207/1590 2897/4209/1590\nf 2956/4267/1591 2864/4176/1591 2861/4173/1591\nf 2961/4268/1592 2889/4201/1592 2864/4176/1592\nf 2962/4269/1593 2868/4180/1593 2963/4270/1593\nf 2964/4271/1594 2965/4272/1594 2966/4273/1594\nf 2933/4244/1595 2967/4274/1595 2930/4245/1595\nf 2950/4275/1596 2968/4276/1596 2951/4261/1596\nf 2969/4277/1597 2970/4278/1597 2971/4279/1597\nf 2972/4280/1598 2973/4281/1598 2974/4282/1598\nf 2975/4283/1599 2977/4284/1599 2978/4285/1599\nf 2979/4286/1600 2980/4287/1600 2981/4288/1600\nf 2982/4289/1601 2983/4290/1601 2984/4291/1601\nf 2985/4292/1602 2986/4293/1602 2987/4294/1602\nf 2986/4293/1603 2985/4292/1603 2943/4255/1603\nf 2988/4295/1604 2989/4296/1604 2990/4297/1604\nf 2992/4298/1605 2994/4299/1605 2995/4300/1605\nf 2996/4301/1606 2997/4302/1606 2998/4303/1606\nf 2999/4304/1607 3000/4305/1607 3001/4306/1607\nf 3002/4307/1608 3003/4308/1608 3004/4309/1608\nf 3005/4310/1609 3006/4311/1609 3007/4312/1609\nf 3008/4313/1610 3009/4314/1610 3010/4315/1610\nf 2935/4247/1611 3011/4316/1611 3012/4317/1611\nf 3013/4318/1612 3015/4319/1612 3016/4320/1612\nf 3018/4321/1613 3019/4322/1613 3020/4323/1613\nf 3021/4324/1614 3509/4325/1614 3022/4326/1614 2911/4224/1614\nf 3025/4327/1615 3026/4328/1615 3027/4329/1615\nf 3028/4330/1616 3029/4331/1616 3030/4332/1616\nf 3484/4333/1617 3485/4334/1617 3486/4335/1617\nf 3033/4336/1618 3035/4337/1618 3032/4338/1618\nf 3036/4339/1619 2884/4196/1619 3037/4340/1619\nf 2858/4170/1620 3038/4341/1620 2877/4188/1620\nf 3039/4342/1621 3040/4343/1621 3041/4344/1621\nf 2965/4272/1622 3042/4345/1622 2966/4273/1622\nf 3043/4346/1623 2907/4220/1623 2909/4222/1623\nf 2947/4259/1624 3044/4347/1624 2972/4280/1624\nf 3045/4348/1625 3046/4349/1625 2970/4278/1625\nf 2987/4294/1626 3047/4350/1626 3048/4351/1626\nf 3049/4352/1627 3050/4353/1627 3051/4354/1627\nf 3052/4355/1628 3053/4356/1628 3054/4357/1628\nf 3012/4317/1629 3055/4358/1629 3056/4359/1629\nf 2935/4247/1630 3056/4359/1630 2919/4232/1630\nf 3056/4359/1631 3057/4360/1631 2920/4233/1631\nf 3058/4361/1632 3059/4362/1632 3060/4363/1632\nf 3061/4364/1633 3006/4311/1633 3062/4365/1633\nf 3065/4366/1634 3066/4367/1634 2962/4269/1634\nf 3067/4368/1635 2926/4239/1635 2955/4266/1635\nf 3068/4369/1636 3067/4368/1636 3069/4370/1636\nf 3035/4337/1637 3034/4371/1637 3039/4342/1637\nf 3070/4372/1638 3032/4338/1638 2965/4272/1638\nf 3071/4373/1639 2952/4263/1639 2933/4244/1639\nf 3072/4374/1640 2918/4231/1640 3073/4375/1640\nf 2970/4278/1641 2969/4277/1641 3074/4376/1641\nf 3040/4343/1642 3075/4377/1642 3076/4378/1642\nf 2871/4183/1643 3077/4379/1643 3038/4341/1643\nf 2966/4273/1644 2976/4380/1644 2975/4283/1644\nf 2879/4190/1645 3078/4381/1645 2982/4289/1645\nf 3079/4382/1646 2944/4256/1646 2985/4292/1646\nf 3080/4383/1647 2996/4301/1647 3081/4384/1647\nf 3082/4385/1648 3083/4386/1648 3084/4387/1648\nf 3084/4387/1649 3000/4305/1649 2999/4304/1649\nf 3086/4388/1650 3088/4389/1650 3085/4390/1650\nf 3089/4391/1651 3017/4392/1651 3090/4393/1651\nf 3091/4394/1652 2934/4246/1652 2936/4248/1652\nf 3006/4311/1653 3095/4395/1653 3096/4396/1653\nf 3097/4397/1654 3098/4398/1654 3099/4399/1654\nf 3098/4398/1655 3100/4400/1655 3101/4401/1655\nf 3102/4402/1656 3103/4403/1656 3104/4404/1656\nf 3106/4405/1657 3108/4406/1657 3105/4407/1657\nf 3109/4408/1658 3110/4409/1658 3111/4410/1658\nf 2914/4227/1659 3112/4411/1659 3113/4412/1659\nf 2918/4231/1660 3114/4413/1660 3115/4414/1660\nf 2954/4265/1661 3116/4415/1661 2952/4263/1661\nf 2952/4263/1662 3116/4415/1662 2967/4274/1662\nf 2896/4208/1663 2903/4216/1663 2857/4169/1663\nf 2869/4181/1664 2898/4210/1664 2903/4216/1664\nf 3117/4416/1665 3118/4417/1665 3119/4418/1665\nf 3121/4419/1666 3122/4420/1666 3120/4421/1666\nf 3123/4422/1667 3489/4423/1667 3121/4419/1667\nf 3124/4424/1668 3125/4425/1668 3079/4382/1668\nf 3126/4426/1669 3128/4427/1669 3129/4428/1669\nf 3130/4429/1670 3131/4430/1670 3132/4431/1670\nf 3133/4432/1671 3134/4433/1671 3135/4434/1671\nf 3057/4360/1672 3136/4435/1672 3137/4436/1672\nf 2920/4233/1673 3138/4437/1673 3139/4438/1673\nf 2900/4213/1674 2902/4215/1674 3142/4439/1674\nf 2957/4440/1675 3143/4441/1675 2958/4442/1675\nf 2957/4440/1676 3144/4443/1676 3143/4441/1676\nf 3145/4444/1677 3146/4445/1677 3147/4446/1677\nf 3148/4447/1678 3063/4448/1678 3149/4449/1678\nf 3150/4450/1679 3148/4447/1679 3151/4451/1679\nf 3117/4416/1680 2853/4165/1680 3118/4417/1680\nf 3125/4425/1681 3106/4405/1681 3105/4407/1681\nf 3120/4421/1682 3122/4420/1682 2887/4199/1682\nf 2894/4206/1683 2899/4211/1683 3120/4421/1683\nf 2853/4165/1684 2894/4206/1684 3152/4452/1684\nf 3118/4417/1685 3036/4339/1685 3119/4418/1685\nf 3117/4416/1686 3119/4418/1686 3153/4453/1686\nf 2890/4202/1687 3117/4416/1687 3154/4454/1687\nf 2865/4177/1688 2890/4202/1688 3154/4454/1688\nf 2863/4175/1689 2882/4193/1689 2881/4192/1689\nf 2896/4208/1690 2857/4169/1690 2856/4168/1690\nf 3069/4370/1691 2897/4209/1691 2876/4187/1691\nf 2964/4271/1692 2966/4273/1692 3155/4455/1692\nf 3156/4456/1693 3157/4457/1693 3158/4458/1693\nf 3156/4456/1694 3159/4459/1694 3157/4457/1694\nf 2931/4243/1695 3028/4330/1695 3160/4460/1695\nf 3028/4330/1696 2931/4243/1696 3029/4331/1696\nf 3116/4415/1697 3161/4461/1697 3162/4462/1697\nf 3163/4463/1698 3164/4464/1698 3161/4461/1698\nf 2917/4230/1699 3165/4465/1699 3114/4413/1699\nf 3025/4327/1700 3166/4466/1700 3167/4467/1700\nf 3168/4468/1701 3166/4466/1701 3025/4327/1701\nf 3169/4469/1702 3170/4470/1702 3166/4466/1702\nf 3171/4471/1703 3113/4412/1703 2927/4240/1703\nf 3113/4412/1704 2928/4241/1704 2927/4240/1704\nf 3113/4412/1705 3112/4411/1705 2928/4241/1705\nf 3172/4472/1706 3085/4390/1706 3173/4473/1706\nf 3175/4474/1707 3174/4475/1707 3176/4476/1707\nf 3177/4477/1708 3178/4478/1708 3022/4326/1708 3500/4479/1708\nf 3074/4376/1709 2969/4277/1709 2948/4262/1709\nf 3075/4377/1710 3019/4322/1710 3018/4321/1710\nf 2974/4282/1711 3179/4480/1711 3180/4481/1711\nf 2908/4221/1712 2947/4259/1712 2972/4280/1712\nf 2983/4290/1713 2904/4217/1713 2984/4291/1713\nf 2984/4291/1714 2904/4217/1714 3181/4482/1714\nf 3182/4483/1715 3183/4484/1715 3184/4485/1715\nf 2944/4256/1716 3184/4485/1716 2945/4257/1716\nf 3183/4484/1717 3185/4486/1717 3186/4487/1717 3502/4488/1717\nf 3187/4489/1718 3188/4490/1718 3189/4491/1718\nf 3190/4492/1719 3191/4493/1719 3192/4494/1719\nf 3194/4495/1720 3195/4496/1720 3196/4497/1720\nf 3197/4498/1721 3198/4499/1721 3199/4500/1721\nf 3200/4501/1722 3201/4502/1722 3202/4503/1722\nf 3202/4503/1723 3203/4504/1723 3200/4501/1723\nf 3200/4501/1724 3032/4338/1724 3070/4372/1724\nf 3203/4504/1725 3204/4505/1725 3200/4501/1725\nf 3200/4501/1726 3205/4506/1726 3033/4336/1726\nf 3204/4505/1727 3206/4507/1727 3067/4368/1727\nf 3207/4508/1728 3208/4509/1728 2997/4302/1728\nf 2997/4302/1729 2924/4237/1729 3206/4507/1729\nf 3207/4508/1730 3209/4510/1730 3208/4509/1730\nf 3210/4511/1731 3211/4512/1731 3212/4513/1731\nf 3115/4414/1732 2956/4267/1732 3211/4512/1732\nf 3025/4327/1733 3213/4514/1733 3214/4515/1733\nf 3096/4396/1734 3215/4516/1734 3216/4517/1734\nf 3006/4311/1735 3061/4364/1735 3007/4312/1735\nf 3007/4312/1736 3145/4444/1736 3217/4518/1736\nf 3219/4519/1737 3220/4520/1737 3221/4521/1737\nf 3004/4309/1738 2922/4235/1738 3002/4307/1738\nf 2938/4250/1739 3003/4308/1739 3002/4307/1739\nf 3222/4522/1740 3094/4523/1740 3223/4524/1740\nf 3011/4316/1741 3222/4522/1741 3012/4317/1741\nf 3081/4384/1742 3225/4525/1742 3224/4526/1742\nf 3089/4391/1743 3228/4527/1743 3226/4528/1743\nf 3492/4529/1744 3020/4323/1744 3092/4530/1744\nf 3019/4322/1745 2937/4249/1745 3020/4323/1745\nf 2910/4223/1746 2912/4225/1746 3229/4531/1746 3508/4532/1746\nf 2911/4224/1747 3022/4326/1747 3230/4533/1747\nf 3232/4534/1748 3085/4390/1748 3233/4535/1748\nf 3112/4411/1749 3234/4536/1749 3232/4534/1749\nf 3235/4537/1750 3112/4411/1750 3232/4534/1750\nf 2928/4241/1751 3112/4411/1751 3235/4537/1751\nf 2996/4301/1752 3082/4385/1752 2997/4302/1752\nf 3082/4385/1753 3084/4387/1753 3207/4508/1753\nf 3080/4383/1754 3083/4386/1754 2996/4301/1754\nf 3030/4332/1755 3081/4384/1755 3224/4526/1755\nf 3236/4538/1756 3237/4539/1756 3238/4540/1756\nf 3241/4541/1757 3242/4542/1757 3243/4543/1757\nf 3244/4544/1758 3245/4545/1758 3191/4493/1758\nf 2873/4186/1759 2860/4172/1759 3246/4546/1759\nf 2879/4190/1760 2883/4194/1760 3078/4381/1760\nf 2871/4183/1761 2879/4190/1761 3077/4379/1761\nf 3247/4547/1762 3042/4345/1762 2946/4258/1762\nf 3042/4345/1763 3247/4547/1763 3248/4548/1763\nf 3249/4549/1764 3250/4550/1764 3177/4477/1764\nf 3251/4551/1765 2909/4222/1765 3252/4552/1765\nf 2947/4259/1766 3040/4343/1766 3076/4378/1766\nf 3040/4343/1767 3253/4553/1767 3075/4377/1767\nf 3253/4553/1768 3254/4554/1768 3075/4377/1768\nf 3045/4348/1769 2970/4278/1769 3074/4376/1769\nf 3046/4349/1770 3255/4555/1770 2971/4279/1770\nf 3048/4351/1771 2949/4260/1771 3255/4555/1771\nf 3047/4350/1772 2949/4260/1772 3048/4351/1772\nf 3066/4367/1773 3212/4513/1773 3256/4556/1773\nf 3047/4350/1774 2950/4275/1774 2949/4260/1774\nf 2950/4275/1775 3249/4549/1775 2968/4276/1775\nf 3249/4549/1776 3021/4324/1776 2968/4276/1776\nf 3186/4487/1777 3258/4557/1777 3259/4558/1777\nf 3183/4484/1778 3503/4559/1778 3260/4560/1778 3250/4550/1778\nf 3263/4561/1779 3172/4472/1779 3264/4562/1779\nf 3262/4563/1780 2915/4228/1780 3261/4564/1780\nf 3265/4565/1781 3266/4566/1781 3267/4567/1781\nf 3072/4374/1782 2916/4229/1782 2918/4231/1782\nf 3268/4568/1783 3269/4569/1783 2953/4264/1783\nf 2993/4570/1784 3160/4460/1784 3156/4456/1784\nf 2993/4570/1785 3270/4571/1785 3271/4572/1785\nf 3201/4502/1786 2965/4272/1786 2964/4271/1786\nf 2955/4266/1787 2926/4239/1787 3272/4573/1787\nf 2925/4238/1788 3065/4366/1788 2962/4269/1788\nf 3221/4521/1789 3127/4574/1789 3126/4426/1789\nf 3212/4513/1790 3211/4512/1790 3256/4556/1790\nf 3114/4413/1791 3274/4575/1791 2961/4268/1791\nf 3167/4467/1792 3107/4576/1792 3106/4405/1792\nf 3062/4365/1793 3275/4577/1793 3276/4578/1793\nf 3096/4396/1794 3275/4577/1794 3062/4365/1794\nf 3058/4361/1795 3277/4579/1795 3093/4580/1795\nf 3279/4581/1796 2919/4232/1796 3280/4582/1796\nf 3281/4583/1797 3052/4355/1797 3054/4357/1797\nf 3010/4315/1798 3282/4584/1798 3052/4355/1798\nf 3283/4585/1799 3284/4586/1799 3150/4450/1799\nf 3286/4587/1800 3214/4515/1800 3285/4588/1800\nf 2892/4204/1801 3287/4589/1801 3288/4590/1801\nf 3209/4510/1802 3212/4513/1802 3257/4591/1802\nf 3208/4509/1803 3065/4366/1803 2925/4238/1803\nf 3208/4509/1804 2925/4238/1804 2924/4237/1804\nf 3205/4506/1805 3067/4368/1805 3033/4336/1805\nf 2964/4271/1806 3290/4592/1806 3201/4502/1806\nf 3291/4593/1807 3292/4594/1807 3163/4463/1807\nf 3103/4403/1808 3072/4374/1808 3293/4595/1808\nf 3102/4402/1809 2916/4229/1809 3103/4403/1809\nf 3294/4596/1810 3263/4561/1810 3264/4562/1810\nf 3103/4403/1811 2916/4229/1811 3072/4374/1811\nf 3188/4490/1812 3296/4597/1812 3263/4561/1812\nf 3297/4598/1813 3190/4492/1813 3258/4557/1813\nf 2943/4255/1814 2945/4257/1814 3249/4549/1814\nf 2986/4293/1815 2943/4255/1815 3249/4549/1815\nf 2987/4294/1816 2986/4293/1816 3047/4350/1816\nf 3298/4599/1817 3299/4600/1817 3045/4348/1817\nf 3300/4601/1818 3254/4554/1818 2981/4288/1818\nf 2947/4259/1819 3076/4378/1819 3044/4347/1819\nf 2908/4221/1820 2974/4282/1820 2909/4222/1820\nf 2878/4189/1821 2903/4216/1821 3301/4602/1821\nf 3301/4602/1822 2881/4192/1822 2878/4189/1822\nf 2948/4262/1823 3510/4603/1823 3229/4531/1823 3074/4376/1823\nf 2882/4193/1824 3037/4340/1824 2875/4195/1824\nf 3302/4604/1825 3037/4340/1825 2882/4193/1825\nf 3037/4340/1826 2870/4182/1826 2875/4195/1826\nf 3036/4339/1827 2854/4166/1827 2884/4196/1827\nf 2854/4166/1828 3120/4421/1828 2855/4167/1828\nf 3120/4421/1829 3483/4605/1829 2855/4167/1829\nf 2886/4198/1830 3303/4606/1830 2888/4200/1830\nf 3063/4448/1831 3297/4598/1831 3149/4449/1831\nf 2959/4607/1832 2960/4608/1832 3244/4544/1832\nf 2960/4608/1833 3304/4609/1833 3245/4545/1833\nf 3029/4331/1834 2930/4245/1834 3080/4383/1834\nf 2930/4245/1835 3162/4462/1835 3080/4383/1835\nf 3162/4462/1836 3161/4461/1836 3083/4386/1836\nf 3305/4610/1837 3000/4305/1837 3084/4387/1837\nf 3234/4536/1838 3173/4473/1838 3085/4390/1838\nf 3178/4478/1839 3307/4611/1839 3022/4326/1839\nf 3219/4519/1840 3246/4546/1840 3229/4531/1840\nf 3254/4554/1841 3003/4308/1841 2937/4249/1841\nf 3075/4377/1842 3497/4612/1842 3076/4378/1842\nf 3076/4378/1843 3497/4612/1843 3496/4613/1843\nf 2973/4281/1844 3498/4614/1844 3491/4615/1844\nf 3309/4616/1845 3311/4617/1845 3104/4404/1845\nf 2934/4246/1846 3308/4618/1846 2935/4247/1846\nf 2906/4219/1847 3219/4519/1847 3312/4619/1847\nf 3219/4519/1848 3229/4531/1848 3220/4520/1848\nf 2911/4224/1849 3313/4620/1849 2912/4225/1849\nf 3230/4533/1850 3314/4621/1850 3313/4620/1850\nf 3313/4620/1851 3314/4621/1851 3281/4583/1851\nf 3095/4395/1852 3006/4311/1852 3005/4310/1852\nf 3088/4389/1853 3087/4622/1853 3315/4623/1853\nf 2999/4304/1854 3001/4306/1854 3209/4510/1854\nf 2998/4303/1855 3206/4507/1855 3204/4505/1855\nf 3316/4624/1856 3268/4568/1856 3101/4401/1856\nf 3238/4540/1857 3237/4539/1857 3194/4495/1857\nf 3055/4358/1858 3140/4625/1858 3057/4360/1858\nf 3240/4626/1859 2988/4295/1859 2990/4297/1859\nf 3318/4627/1860 3319/4628/1860 2989/4296/1860\nf 3318/4627/1861 3294/4596/1861 3319/4628/1861\nf 3320/4629/1862 3187/4489/1862 3321/4630/1862\nf 3320/4629/1863 3322/4631/1863 3187/4489/1863\nf 3324/4632/1864 3326/4633/1864 3323/4634/1864\nf 2985/4292/1865 2944/4256/1865 2943/4255/1865\nf 3303/4606/1866 2985/4292/1866 2987/4294/1866\nf 3303/4606/1867 2987/4294/1867 3327/4635/1867\nf 2941/4253/1868 3327/4635/1868 2942/4254/1868\nf 3328/4636/1869 2941/4253/1869 2940/4252/1869\nf 3328/4636/1870 2940/4252/1870 3045/4348/1870\nf 3246/4546/1871 3045/4348/1871 3074/4376/1871\nf 2982/4289/1872 3078/4381/1872 2905/4218/1872\nf 3077/4379/1873 2982/4289/1873 2984/4291/1873\nf 2980/4287/1874 3077/4379/1874 2984/4291/1874\nf 2909/4222/1875 3180/4481/1875 3252/4552/1875\nf 2968/4276/1876 3021/4324/1876 2951/4261/1876\nf 3250/4550/1877 3178/4478/1877 3177/4477/1877\nf 3329/4637/1878 3326/4633/1878 3109/4408/1878\nf 3264/4562/1879 3173/4473/1879 2914/4227/1879\nf 3330/4638/1880 3169/4469/1880 3168/4468/1880\nf 3155/4455/1881 3332/4639/1881 2964/4271/1881\nf 3066/4367/1882 3256/4556/1882 3333/4640/1882\nf 3274/4575/1883 2892/4204/1883 2891/4203/1883\nf 2893/4205/1884 3285/4588/1884 2899/4211/1884\nf 3150/4450/1885 3335/4641/1885 3148/4447/1885\nf 3145/4444/1886 3062/4365/1886 3130/4429/1886\nf 3061/4364/1887 3062/4365/1887 3145/4444/1887\nf 2900/4213/1888 3336/4642/1888 2901/4214/1888\nf 3337/4643/1889 3339/4644/1889 3340/4645/1889\nf 3337/4643/1890 3342/4646/1890 2939/4251/1890\nf 3333/4640/1891 2866/4178/1891 2868/4180/1891\nf 3277/4579/1892 3344/4647/1892 3343/4648/1892\nf 3272/4573/1893 2963/4270/1893 2867/4179/1893\nf 3068/4369/1894 2876/4187/1894 3039/4342/1894\nf 3042/4345/1895 3035/4337/1895 3346/4649/1895\nf 2965/4272/1896 3032/4338/1896 3042/4345/1896\nf 3171/4471/1897 2915/4228/1897 3113/4412/1897\nf 2974/4282/1898 2973/4281/1898 3179/4480/1898\nf 3247/4547/1899 2946/4258/1899 2908/4221/1899\nf 3347/4650/1900 2984/4291/1900 3181/4482/1900\nf 3297/4598/1901 3244/4544/1901 3190/4492/1901\nf 3191/4493/1902 3323/4634/1902 3192/4494/1902\nf 3321/4630/1903 3187/4489/1903 3348/4651/1903\nf 3236/4538/1904 3293/4595/1904 3237/4539/1904\nf 3196/4497/1905 3195/4496/1905 3349/4652/1905\nf 3350/4653/1906 3349/4652/1906 3291/4593/1906\nf 3233/4535/1907 3088/4389/1907 3049/4352/1907\nf 2922/4235/1908 2906/4219/1908 3312/4619/1908\nf 3351/4654/1909 3353/4655/1909 3239/4656/1909\nf 3164/4464/1910 3305/4610/1910 3084/4387/1910\nf 3162/4462/1911 3083/4386/1911 3080/4383/1911\nf 3028/4330/1912 3030/4332/1912 3224/4526/1912\nf 3244/4544/1913 2960/4608/1913 3245/4545/1913\nf 3105/4407/1914 3108/4406/1914 2944/4256/1914\nf 2882/4193/1915 2875/4195/1915 2874/4185/1915\nf 2966/4273/1916 2975/4283/1916 3155/4455/1916\nf 2904/4217/1917 2906/4219/1917 3181/4482/1917\nf 3299/4600/1918 3048/4351/1918 3046/4349/1918\nf 3258/4557/1919 3192/4494/1919 3329/4637/1919\nf 2989/4296/1920 2913/4226/1920 3262/4563/1920\nf 3214/4515/1921 3213/4514/1921 3354/4657/1921\nf 3002/4307/1922 2922/4235/1922 3356/4658/1922\nf 2893/4205/1923 3288/4590/1923 3285/4588/1923\nf 3066/4367/1924 3333/4640/1924 2962/4269/1924\nf 2925/4238/1925 2962/4269/1925 2963/4270/1925\nf 3156/4456/1926 3270/4571/1926 2993/4570/1926\nf 3072/4374/1927 3073/4375/1927 3194/4495/1927\nf 2860/4172/1928 3328/4636/1928 3246/4546/1928\nf 2859/4171/1929 3031/4659/1929 2941/4253/1929\nf 2944/4256/1930 3357/4660/1930 3184/4485/1930\nf 2929/4242/1931 2928/4241/1931 3235/4537/1931\nf 3312/4619/1932 3219/4519/1932 3221/4521/1932\nf 3313/4620/1933 3281/4583/1933 3054/4357/1933\nf 3050/4353/1934 3360/4661/1934 3361/4662/1934\nf 3167/4467/1935 3283/4585/1935 3107/4576/1935\nf 3209/4510/1936 3065/4366/1936 3208/4509/1936\nf 3206/4507/1937 2924/4237/1937 3067/4368/1937\nf 3200/4501/1938 3033/4336/1938 3032/4338/1938\nf 3200/4501/1939 3070/4372/1939 3201/4502/1939\nf 3317/4663/1940 2991/4664/1940 3362/4665/1940\nf 3291/4593/1941 3163/4463/1941 3268/4568/1941\nf 3309/4616/1942 3103/4403/1942 3293/4595/1942\nf 3309/4616/1943 3104/4404/1943 3103/4403/1943\nf 3190/4492/1944 3192/4494/1944 3258/4557/1944\nf 2942/4254/1945 3299/4600/1945 3298/4599/1945\nf 3248/4548/1946 2907/4220/1946 3363/4666/1946\nf 2914/4227/1947 3234/4536/1947 3112/4411/1947\nf 2898/4210/1948 2863/4175/1948 3301/4602/1948\nf 2862/4174/1949 3364/4667/1949 3365/4668/1949\nf 2863/4175/1950 2862/4174/1950 2882/4193/1950\nf 3282/4584/1951 3345/4669/1951 3366/4670/1951\nf 2903/4216/1952 2898/4210/1952 3301/4602/1952\nf 3029/4331/1953 2931/4243/1953 2930/4245/1953\nf 3116/4415/1954 2954/4265/1954 3161/4461/1954\nf 2979/4286/1955 3253/4553/1955 3040/4343/1955\nf 3299/4600/1956 2987/4294/1956 3048/4351/1956\nf 3024/4671/1957 3358/4672/1957 3367/4673/1957\nf 2976/4380/1958 3042/4345/1958 3248/4548/1958\nf 2969/4277/1959 2971/4279/1959 3255/4555/1959\nf 3264/4562/1960 3172/4472/1960 3173/4473/1960\nf 3265/4565/1961 3330/4638/1961 3266/4566/1961\nf 3033/4336/1962 3067/4368/1962 3068/4369/1962\nf 3047/4350/1963 3249/4549/1963 2950/4275/1963\nf 2858/4170/1964 2871/4183/1964 3038/4341/1964\nf 3185/4486/1965 3149/4449/1965 3297/4598/1965\nf 3369/4674/1966 3320/4629/1966 3368/4675/1966\nf 3064/4676/1967 3233/4535/1967 3049/4352/1967\nf 2979/4286/1968 2981/4288/1968 3253/4553/1968\nf 3254/4554/1969 3300/4601/1969 3003/4308/1969\nf 3250/4550/1970 3371/4677/1970 3178/4478/1970\nf 3250/4550/1971 3260/4560/1971 3371/4677/1971\nf 3073/4375/1972 2918/4231/1972 3115/4414/1972\nf 3292/4594/1973 3073/4375/1973 3305/4610/1973\nf 3163/4463/1974 3292/4594/1974 3305/4610/1974\nf 3130/4429/1975 3372/4678/1975 3373/4679/1975\nf 3060/4363/1976 3344/4647/1976 3277/4579/1976\nf 3062/4365/1977 3372/4678/1977 3130/4429/1977\nf 3124/4424/1978 3354/4657/1978 3125/4425/1978\nf 2961/4268/1979 2891/4203/1979 2889/4201/1979\nf 2962/4269/1980 3333/4640/1980 2868/4180/1980\nf 3160/4460/1981 2932/4680/1981 2931/4243/1981\nf 3109/4408/1982 3375/4681/1982 3376/4682/1982\nf 3075/4377/1983 3254/4554/1983 3019/4322/1983\nf 2946/4258/1984 3346/4649/1984 2947/4259/1984\nf 3300/4601/1985 2981/4288/1985 3347/4650/1985\nf 3300/4601/1986 3347/4650/1986 3181/4482/1986\nf 3246/4546/1987 3328/4636/1987 3045/4348/1987\nf 3377/4683/1988 3321/4630/1988 3348/4651/1988\nf 2988/4295/1989 3318/4627/1989 2989/4296/1989\nf 3014/4684/1990 3013/4318/1990 3378/4685/1990\nf 3100/4400/1991 3316/4624/1991 3101/4401/1991\nf 2992/4298/1992 3199/4500/1992 3198/4499/1992\nf 3203/4504/1993 2998/4303/1993 3204/4505/1993\nf 3314/4621/1994 3008/4313/1994 3010/4315/1994\nf 2937/4249/1995 3003/4308/1995 2938/4250/1995\nf 3178/4478/1996 3379/4686/1996 3307/4611/1996\nf 3241/4541/1997 3380/4687/1997 3381/4688/1997\nf 3245/4545/1998 3304/4609/1998 3323/4634/1998\nf 2905/4218/1999 3382/4689/1999 3219/4519/1999\nf 3189/4491/2000 3188/4490/2000 3263/4561/2000\nf 2989/4296/2001 3264/4562/2001 2913/4226/2001\nf 3383/4690/2002 3317/4663/2002 3362/4665/2002\nf 2953/4264/2003 3101/4401/2003 3268/4568/2003\nf 3198/4499/2004 3197/4498/2004 2933/4244/2004\nf 3217/4518/2005 3145/4444/2005 3133/4432/2005\nf 3056/4359/2006 3055/4358/2006 3057/4360/2006\nf 3059/4362/2007 3342/4646/2007 3384/4691/2007\nf 3002/4307/2008 3356/4658/2008 3338/4692/2008\nf 3125/4425/2009 3213/4514/2009 3106/4405/2009\nf 3069/4370/2010 3067/4368/2010 2955/4266/2010\nf 3326/4633/2011 3385/4693/2011 3375/4681/2011\nf 3260/4560/2012 3505/4694/2012 3186/4487/2012 3259/4558/2012\nf 2877/4188/2013 3038/4341/2013 2979/4286/2013\nf 3078/4381/2014 2883/4194/2014 3382/4689/2014\nf 3382/4689/2015 2873/4186/2015 3246/4546/2015\nf 3303/4606/2016 3079/4382/2016 2985/4292/2016\nf 3357/4660/2017 3151/4451/2017 3182/4483/2017\nf 3182/4483/2018 3151/4451/2018 3185/4486/2018\nf 3100/4400/2019 3387/4695/2019 3316/4624/2019\nf 3307/4611/2020 3231/4696/2020 3008/4313/2020\nf 3022/4326/2021 3307/4611/2021 3230/4533/2021\nf 2934/4246/2022 3090/4393/2022 3308/4618/2022\nf 2938/4250/2023 3002/4307/2023 3338/4692/2023\nf 3359/4697/2024 3217/4518/2024 3133/4432/2024\nf 3050/4353/2025 3355/4698/2025 3051/4354/2025\nf 3167/4467/2026 3306/4699/2026 3283/4585/2026\nf 3210/4511/2027 3000/4305/2027 3211/4512/2027\nf 3209/4510/2028 3001/4306/2028 3210/4511/2028\nf 3200/4501/2029 3204/4505/2029 3205/4506/2029\nf 3099/4399/2030 3098/4398/2030 3101/4401/2030\nf 3383/4690/2031 3378/4685/2031 3317/4663/2031\nf 3299/4600/2032 3327/4635/2032 2987/4294/2032\nf 2983/4290/2033 2905/4218/2033 2904/4217/2033\nf 3044/4347/2034 3498/4614/2034 2973/4281/2034\nf 3019/4322/2035 3254/4554/2035 2937/4249/2035\nf 2910/4223/2036 3021/4324/2036 2911/4224/2036\nf 3379/4686/2037 3371/4677/2037 3231/4696/2037\nf 2946/4258/2038 3042/4345/2038 3346/4649/2038\nf 2882/4193/2039 2862/4174/2039 3365/4668/2039\nf 2865/4177/2040 3364/4667/2040 2862/4174/2040\nf 3302/4604/2041 3154/4454/2041 3153/4453/2041\nf 3037/4340/2042 3153/4453/2042 3119/4418/2042\nf 3297/4598/2043 2959/4607/2043 3244/4544/2043\nf 3282/4584/2044 3366/4670/2044 3388/4700/2044\nf 3053/4356/2045 3388/4700/2045 3389/4701/2045\nf 3356/4658/2046 3142/4439/2046 3390/4702/2046\nf 3391/4703/2047 3392/4704/2047 3393/4705/2047\nf 3391/4703/2048 3394/4706/2048 3392/4704/2048\nf 3391/4703/2049 3139/4438/2049 3394/4706/2049\nf 3057/4360/2050 3138/4437/2050 2920/4233/2050\nf 3133/4432/2051 3144/4443/2051 2957/4440/2051\nf 3145/4444/2052 3134/4433/2052 3133/4432/2052\nf 3130/4429/2053 3146/4445/2053 3145/4444/2053\nf 3297/4598/2054 3063/4448/2054 2959/4607/2054\nf 2885/4197/2055 3123/4422/2055 3124/4424/2055\nf 2887/4199/2056 3488/4707/2056 2885/4197/2056\nf 3122/4420/2057 3487/4708/2057 3488/4707/2057\nf 3120/4421/2058 2899/4211/2058 3121/4419/2058\nf 3395/4709/2059 2894/4206/2059 3120/4421/2059\nf 3118/4417/2060 2853/4165/2060 3152/4452/2060\nf 2890/4202/2061 2851/4163/2061 3117/4416/2061\nf 3364/4667/2062 2865/4177/2062 3154/4454/2062\nf 3272/4573/2063 2867/4179/2063 2895/4207/2063\nf 3156/4456/2064 3160/4460/2064 3028/4330/2064\nf 3269/4569/2065 3163/4463/2065 2954/4265/2065\nf 2954/4265/2066 3163/4463/2066 3161/4461/2066\nf 3163/4463/2067 3305/4610/2067 3164/4464/2067\nf 3073/4375/2068 3115/4414/2068 3305/4610/2068\nf 2918/4231/2069 2917/4230/2069 3114/4413/2069\nf 3165/4465/2070 3027/4329/2070 3114/4413/2070\nf 3168/4468/2071 3169/4469/2071 3166/4466/2071\nf 3178/4478/2072 3371/4677/2072 3379/4686/2072\nf 3382/4689/2073 3246/4546/2073 3219/4519/2073\nf 2905/4218/2074 3219/4519/2074 2906/4219/2074\nf 3300/4601/2075 3004/4309/2075 3003/4308/2075\nf 2907/4220/2076 3247/4547/2076 2908/4221/2076\nf 2947/4259/2077 3041/4344/2077 3040/4343/2077\nf 3045/4348/2078 2940/4252/2078 3298/4599/2078\nf 2940/4252/2079 2942/4254/2079 3298/4599/2079\nf 2942/4254/2080 3327/4635/2080 3299/4600/2080\nf 3188/4490/2081 3396/4710/2081 3397/4711/2081\nf 3398/4712/2082 3188/4490/2082 3187/4489/2082\nf 3102/4402/2083 3378/4685/2083 3383/4690/2083\nf 3237/4539/2084 3293/4595/2084 3072/4374/2084\nf 3349/4652/2085 3195/4496/2085 3292/4594/2085\nf 3316/4624/2086 3291/4593/2086 3268/4568/2086\nf 2992/4298/2087 3198/4499/2087 2993/4570/2087\nf 3205/4506/2088 3204/4505/2088 3067/4368/2088\nf 3025/4327/2089 3167/4467/2089 3213/4514/2089\nf 3010/4315/2090 3218/4713/2090 3282/4584/2090\nf 3314/4621/2091 3010/4315/2091 3052/4355/2091\nf 3220/4520/2092 3313/4620/2092 3054/4357/2092\nf 3012/4317/2093 3222/4522/2093 3223/4524/2093\nf 3226/4528/2094 3017/4392/2094 3089/4391/2094\nf 3005/4310/2095 3024/4671/2095 3095/4395/2095\nf 3233/4535/2096 3085/4390/2096 3088/4389/2096\nf 3170/4470/2097 3306/4699/2097 3167/4467/2097\nf 3000/4305/2098 3115/4414/2098 3211/4512/2098\nf 3084/4387/2099 2999/4304/2099 3207/4508/2099\nf 3029/4331/2100 3080/4383/2100 3081/4384/2100\nf 3399/4714/2101 2988/4295/2101 3240/4626/2101\nf 3368/4675/2102 3321/4630/2102 3377/4683/2102\nf 3321/4630/2103 3368/4675/2103 3320/4629/2103\nf 3320/4629/2104 3241/4541/2104 3322/4631/2104\nf 3191/4493/2105 3245/4545/2105 3323/4634/2105\nf 2888/4200/2106 3303/4606/2106 3327/4635/2106\nf 3482/4715/2107 3327/4635/2107 3031/4659/2107\nf 2860/4172/2108 2859/4171/2108 3328/4636/2108\nf 2905/4218/2109 3078/4381/2109 3382/4689/2109\nf 3077/4379/2110 2879/4190/2110 2982/4289/2110\nf 2979/4286/2111 3038/4341/2111 2980/4287/2111\nf 3039/4342/2112 2877/4188/2112 2979/4286/2112\nf 2966/4273/2113 3042/4345/2113 2976/4380/2113\nf 3300/4601/2114 3181/4482/2114 3004/4309/2114\nf 2970/4278/2115 3046/4349/2115 2971/4279/2115\nf 3260/4560/2116 3259/4558/2116 3371/4677/2116\nf 3023/4716/2117 3258/4557/2117 3329/4637/2117\nf 2916/4229/2118 3383/4690/2118 3267/4567/2118\nf 3267/4567/2119 3383/4690/2119 3265/4565/2119\nf 3195/4496/2120 3194/4495/2120 3073/4375/2120\nf 3292/4594/2121 3195/4496/2121 3073/4375/2121\nf 2952/4263/2122 3099/4399/2122 2953/4264/2122\nf 3201/4502/2123 3070/4372/2123 2965/4272/2123\nf 3272/4573/2124 2926/4239/2124 2963/4270/2124\nf 3065/4366/2125 3257/4591/2125 3066/4367/2125\nf 3256/4556/2126 3211/4512/2126 2956/4267/2126\nf 3114/4413/2127 2961/4268/2127 2956/4267/2127\nf 3214/4515/2128 3354/4657/2128 3285/4588/2128\nf 3354/4657/2129 3213/4514/2129 3125/4425/2129\nf 2957/4440/2130 3359/4697/2130 3133/4432/2130\nf 2923/4236/2131 3221/4521/2131 3126/4426/2131\nf 2938/4250/2132 3338/4692/2132 3337/4643/2132\nf 2919/4232/2133 3056/4359/2133 2920/4233/2133\nf 3279/4581/2134 2936/4248/2134 2919/4232/2134\nf 3280/4582/2135 2919/4232/2135 2921/4234/2135\nf 3223/4524/2136 3094/4523/2136 3278/4717/2136\nf 3223/4524/2137 3278/4717/2137 3055/4358/2137\nf 3058/4361/2138 2939/4251/2138 3059/4362/2138\nf 2923/4236/2139 3312/4619/2139 3221/4521/2139\nf 3007/4312/2140 3061/4364/2140 3145/4444/2140\nf 3006/4311/2141 3096/4396/2141 3062/4365/2141\nf 3065/4366/2142 3209/4510/2142 3257/4591/2142\nf 3067/4368/2143 2924/4237/2143 2926/4239/2143\nf 3202/4503/2144 3290/4592/2144 3401/4718/2144\nf 3071/4373/2145 3197/4498/2145 3099/4399/2145\nf 3099/4399/2146 3101/4401/2146 2953/4264/2146\nf 3268/4568/2147 3163/4463/2147 3269/4569/2147\nf 3291/4593/2148 3349/4652/2148 3292/4594/2148\nf 2916/4229/2149 3102/4402/2149 3383/4690/2149\nf 3265/4565/2150 3362/4665/2150 3330/4638/2150\nf 2989/4296/2151 3319/4628/2151 3264/4562/2151\nf 3319/4628/2152 3294/4596/2152 3264/4562/2152\nf 3329/4637/2153 3192/4494/2153 3326/4633/2153\nf 3186/4487/2154 3297/4598/2154 3258/4557/2154\nf 3183/4484/2155 3502/4488/2155 3503/4559/2155\nf 3250/4550/2156 2945/4257/2156 3184/4485/2156\nf 3045/4348/2157 3299/4600/2157 3046/4349/2157\nf 3253/4553/2158 2981/4288/2158 3254/4554/2158\nf 2908/4221/2159 2972/4280/2159 2974/4282/2159\nf 3363/4666/2160 2907/4220/2160 3043/4346/2160\nf 3039/4342/2161 2876/4187/2161 2877/4188/2161\nf 2857/4169/2162 2903/4216/2162 2872/4184/2162\nf 2872/4184/2163 2903/4216/2163 2878/4189/2163\nf 3119/4418/2164 3036/4339/2164 3037/4340/2164\nf 2887/4199/2165 3481/4719/2165 3484/4333/2165\nf 2886/4198/2166 3079/4382/2166 3303/4606/2166\nf 2944/4256/2167 3108/4406/2167 3357/4660/2167\nf 3304/4609/2168 3403/4720/2168 3323/4634/2168\nf 3381/4688/2169 3242/4542/2169 3241/4541/2169\nf 2988/4295/2170 3406/4721/2170 3318/4627/2170\nf 3240/4626/2171 3407/4722/2171 3399/4714/2171\nf 3311/4617/2172 3409/4723/2172 3410/4724/2172\nf 3316/4624/2173 3387/4695/2173 3411/4725/2173\nf 3030/4332/2174 3029/4331/2174 3081/4384/2174\nf 3083/4386/2175 3164/4464/2175 3084/4387/2175\nf 3305/4610/2176 3115/4414/2176 3000/4305/2176\nf 3115/4414/2177 3114/4413/2177 2956/4267/2177\nf 3274/4575/2178 3026/4328/2178 3334/4726/2178\nf 3085/4390/2179 3412/4727/2179 3086/4388/2179\nf 2948/4262/2180 2951/4261/2180 2910/4223/2180 3507/4728/2180\nf 3229/4531/2181 3246/4546/2181 3074/4376/2181\nf 3004/4309/2182 3181/4482/2182 2906/4219/2182\nf 2935/4247/2183 3308/4618/2183 3011/4316/2183\nf 3020/4323/2184 2937/4249/2184 3058/4361/2184\nf 2922/4235/2185 3004/4309/2185 2906/4219/2185\nf 2911/4224/2186 3230/4533/2186 3313/4620/2186\nf 3230/4533/2187 3008/4313/2187 3314/4621/2187\nf 3095/4395/2188 3024/4671/2188 3096/4396/2188\nf 3024/4671/2189 3215/4516/2189 3096/4396/2189\nf 3050/4353/2190 3413/4729/2190 3360/4661/2190\nf 3088/4389/2191 3413/4729/2191 3050/4353/2191\nf 3049/4352/2192 3088/4389/2192 3050/4353/2192\nf 3064/4676/2193 3232/4534/2193 3233/4535/2193\nf 3235/4537/2194 3232/4534/2194 3064/4676/2194\nf 3414/4730/2195 3197/4498/2195 3199/4500/2195\nf 3196/4497/2196 3238/4540/2196 3194/4495/2196\nf 3102/4402/2197 3410/4724/2197 3014/4684/2197\nf 3378/4685/2198 3013/4318/2198 3351/4654/2198\nf 3378/4685/2199 3351/4654/2199 3317/4663/2199\nf 3182/4483/2200 3185/4486/2200 3183/4484/2200\nf 3031/4659/2201 3327/4635/2201 2941/4253/2201\nf 2982/4289/2202 2905/4218/2202 2983/4290/2202\nf 3347/4650/2203 2980/4287/2203 2984/4291/2203\nf 2947/4259/2204 3346/4649/2204 3041/4344/2204\nf 3248/4548/2205 3247/4547/2205 2907/4220/2205\nf 2976/4380/2206 3248/4548/2206 3363/4666/2206\nf 2909/4222/2207 2974/4282/2207 3180/4481/2207\nf 2972/4280/2208 3044/4347/2208 2973/4281/2208\nf 3259/4558/2209 3258/4557/2209 3175/4474/2209\nf 3259/4558/2210 3175/4474/2210 3176/4476/2210\nf 3023/4716/2211 3329/4637/2211 3109/4408/2211\nf 3173/4473/2212 3234/4536/2212 2914/4227/2212\nf 2915/4228/2213 2914/4227/2213 3113/4412/2213\nf 3266/4566/2214 3330/4638/2214 3168/4468/2214\nf 3267/4567/2215 3266/4566/2215 3506/4731/2215 3165/4465/2215\nf 2917/4230/2216 3267/4567/2216 3165/4465/2216\nf 2917/4230/2217 2916/4229/2217 3267/4567/2217\nf 2953/4264/2218 3269/4569/2218 2954/4265/2218\nf 2932/4680/2219 3198/4499/2219 2933/4244/2219\nf 3032/4338/2220 3035/4337/2220 3042/4345/2220\nf 3035/4337/2221 3039/4342/2221 3041/4344/2221\nf 3068/4369/2222 3069/4370/2222 2876/4187/2222\nf 3069/4370/2223 2955/4266/2223 2897/4209/2223\nf 2955/4266/2224 3272/4573/2224 2895/4207/2224\nf 2866/4178/2225 3256/4556/2225 2861/4173/2225\nf 2961/4268/2226 3274/4575/2226 2891/4203/2226\nf 3121/4419/2227 3285/4588/2227 3123/4422/2227\nf 2921/4234/2228 2920/4233/2228 3391/4703/2228\nf 2899/4211/2229 3285/4588/2229 3121/4419/2229\nf 3256/4556/2230 2956/4267/2230 2861/4173/2230\nf 3346/4649/2231 3035/4337/2231 3041/4344/2231\nf 2933/4244/2232 2952/4263/2232 2967/4274/2232\nf 3190/4492/2233 3244/4544/2233 3191/4493/2233\nf 3192/4494/2234 3323/4634/2234 3326/4633/2234\nf 3323/4634/2235 3416/4732/2235 3324/4632/2235\nf 3348/4651/2236 3187/4489/2236 3189/4491/2236\nf 3377/4683/2237 3348/4651/2237 3294/4596/2237\nf 3318/4627/2238 3377/4683/2238 3294/4596/2238\nf 2998/4303/2239 2997/4302/2239 3206/4507/2239\nf 3207/4508/2240 2999/4304/2240 3209/4510/2240\nf 2912/4225/2241 3313/4620/2241 3220/4520/2241\nf 3058/4361/2242 2937/4249/2242 2939/4251/2242\nf 3020/4323/2243 3058/4361/2243 3093/4580/2243\nf 3092/4530/2244 3020/4323/2244 3093/4580/2244\nf 3323/4634/2245 3403/4720/2245 3416/4732/2245\nf 3151/4451/2246 3149/4449/2246 3185/4486/2246\nf 3357/4660/2247 3108/4406/2247 3151/4451/2247\nf 2986/4293/2248 3249/4549/2248 3047/4350/2248\nf 3184/4485/2249 3183/4484/2249 3250/4550/2249\nf 3383/4690/2250 3362/4665/2250 3265/4565/2250\nf 3099/4399/2251 2952/4263/2251 3071/4373/2251\nf 3213/4514/2252 3167/4467/2252 3106/4405/2252\nf 3356/4658/2253 2922/4235/2253 2900/4213/2253\nf 3012/4317/2254 3223/4524/2254 3055/4358/2254\nf 2936/4248/2255 2935/4247/2255 2919/4232/2255\nf 3054/4357/2256 3053/4356/2256 3127/4574/2256\nf 3150/4450/2257 3284/4586/2257 3335/4641/2257\nf 2993/4570/2258 3198/4499/2258 3160/4460/2258\nf 3160/4460/2259 3198/4499/2259 2932/4680/2259\nf 3261/4564/2260 2915/4228/2260 3171/4471/2260\nf 2913/4226/2261 3264/4562/2261 2914/4227/2261\nf 3296/4597/2262 3172/4472/2262 3263/4561/2262\nf 3175/4474/2263 3258/4557/2263 3023/4716/2263\nf 2980/4287/2264 3038/4341/2264 3077/4379/2264\nf 3241/4541/2265 3419/4733/2265 3322/4631/2265\nf 3351/4654/2266 3239/4656/2266 3317/4663/2266\nf 3081/4384/2267 2998/4303/2267 3203/4504/2267\nf 3081/4384/2268 2996/4301/2268 2998/4303/2268\nf 3221/4521/2269 3220/4520/2269 3054/4357/2269\nf 3281/4583/2270 3314/4621/2270 3052/4355/2270\nf 3209/4510/2271 3210/4511/2271 3212/4513/2271\nf 2997/4302/2272 3208/4509/2272 2924/4237/2272\nf 3237/4539/2273 3072/4374/2273 3194/4495/2273\nf 2990/4297/2274 3262/4563/2274 3193/4734/2274\nf 2990/4297/2275 2989/4296/2275 3262/4563/2275\nf 3294/4596/2276 3348/4651/2276 3263/4561/2276\nf 3348/4651/2277 3189/4491/2277 3263/4561/2277\nf 3186/4487/2278 3185/4486/2278 3297/4598/2278\nf 2951/4261/2279 3021/4324/2279 2910/4223/2279\nf 3085/4390/2280 3420/4735/2280 3412/4727/2280\nf 2967/4274/2281 3116/4415/2281 3162/4462/2281\nf 2930/4245/2282 2967/4274/2282 3162/4462/2282\nf 2885/4197/2283 3124/4424/2283 2886/4198/2283\nf 3151/4451/2284 3148/4447/2284 3149/4449/2284\nf 3373/4679/2285 3422/4736/2285 3130/4429/2285\nf 3182/4483/2286 3184/4485/2286 3357/4660/2286\nf 2941/4253/2287 3328/4636/2287 2859/4171/2287\nf 2935/4247/2288 3012/4317/2288 3056/4359/2288\nf 2892/4204/2289 2893/4205/2289 2852/4164/2289\nf 3034/4371/2290 3068/4369/2290 3039/4342/2290\nf 2948/4262/2291 3255/4555/2291 2949/4260/2291\nf 2948/4262/2292 2969/4277/2292 3255/4555/2292\nf 3322/4631/2293 3398/4712/2293 3187/4489/2293\nf 3014/4684/2294 3378/4685/2294 3102/4402/2294\nf 3307/4611/2295 3379/4686/2295 3231/4696/2295\nf 3316/4624/2296 3424/4737/2296 3291/4593/2296\nf 3382/4689/2297 2883/4194/2297 2873/4186/2297\nf 2923/4236/2298 2922/4235/2298 3312/4619/2298\nf 3123/4422/2299 3285/4588/2299 3354/4657/2299\nf 2859/4171/2300 3485/4334/2300 3031/4659/2300\nf 2996/4301/2301 3083/4386/2301 3082/4385/2301\nf 3230/4533/2302 3307/4611/2302 3008/4313/2302\nf 3150/4450/2303 3107/4576/2303 3283/4585/2303\nf 3099/4399/2304 3197/4498/2304 3097/4397/2304\nf 3364/4667/2305 3154/4454/2305 3302/4604/2305\nf 2854/4166/2306 3395/4709/2306 3120/4421/2306\nf 3105/4407/2307 3079/4382/2307 3125/4425/2307\nf 3140/4625/2308 3136/4435/2308 3057/4360/2308\nf 3108/4406/2309 3150/4450/2309 3151/4451/2309\nf 2886/4198/2310 3124/4424/2310 3079/4382/2310\nf 3152/4452/2311 2894/4206/2311 3395/4709/2311\nf 3036/4339/2312 3152/4452/2312 2854/4166/2312\nf 3154/4454/2313 3117/4416/2313 3153/4453/2313\nf 3037/4340/2314 3302/4604/2314 3153/4453/2314\nf 3302/4604/2315 3365/4668/2315 3364/4667/2315\nf 3301/4602/2316 2863/4175/2316 2881/4192/2316\nf 3266/4566/2317 3168/4468/2317 3025/4327/2317 3504/4738/2317\nf 3174/4475/2318 3175/4474/2318 3023/4716/2318\nf 3231/4696/2319 3259/4558/2319 3176/4476/2319\nf 2934/4246/2320 3089/4391/2320 3090/4393/2320\nf 3008/4313/2321 3231/4696/2321 3009/4314/2321\nf 3039/4342/2322 2979/4286/2322 3040/4343/2322\nf 3046/4349/2323 3048/4351/2323 3255/4555/2323\nf 3021/4324/2324 3249/4549/2324 3177/4477/2324 3501/4739/2324\nf 3068/4369/2325 3034/4371/2325 3033/4336/2325\nf 2963/4270/2326 2926/4239/2326 2925/4238/2326\nf 3053/4356/2327 3052/4355/2327 3282/4584/2327\nf 2939/4251/2328 2938/4250/2328 3337/4643/2328\nf 2933/4244/2329 3197/4498/2329 3071/4373/2329\nf 3365/4668/2330 3302/4604/2330 2882/4193/2330\nf 3037/4340/2331 2884/4196/2331 2870/4182/2331\nf 3079/4382/2332 3105/4407/2332 2944/4256/2332\nf 3161/4461/2333 3164/4464/2333 3083/4386/2333\nf 3091/4394/2334 3089/4391/2334 2934/4246/2334\nf 3220/4520/2335 3229/4531/2335 2912/4225/2335\nf 3210/4511/2336 3001/4306/2336 3000/4305/2336\nf 3236/4538/2337 3310/4740/2337 3309/4616/2337\nf 3311/4617/2338 3410/4724/2338 3104/4404/2338\nf 3104/4404/2339 3410/4724/2339 3102/4402/2339\nf 2981/4288/2340 2980/4287/2340 3347/4650/2340\nf 2956/4267/2341 2961/4268/2341 2864/4176/2341\nf 3108/4406/2342 3107/4576/2342 3150/4450/2342\nf 3124/4424/2343 3123/4422/2343 3354/4657/2343\nf 2868/4180/2344 2867/4179/2344 2963/4270/2344\nf 3293/4595/2345 3236/4538/2345 3309/4616/2345\nf 3202/4503/2346 3225/4525/2346 3203/4504/2346\nf 3082/4385/2347 3207/4508/2347 2997/4302/2347\nf 3085/4390/2348 3232/4534/2348 3234/4536/2348\nf 3251/4551/2349 3043/4346/2349 2909/4222/2349\nf 3262/4563/2350 2913/4226/2350 2915/4228/2350\nf 3063/4448/2351 3148/4447/2351 3335/4641/2351\nf 3241/4541/2352 3243/4543/2352 3418/4741/2352\nf 3371/4677/2353 3259/4558/2353 3231/4696/2353\nf 3167/4467/2354 3166/4466/2354 3170/4470/2354\nf 3118/4417/2355 3152/4452/2355 3036/4339/2355\nf 2854/4166/2356 3152/4452/2356 3395/4709/2356\nf 3408/4742/2357 3310/4740/2357 3425/4743/2357\nf 3426/4744/2358 3098/4398/2358 3097/4397/2358\nf 3428/4745/2359 3429/4746/2359 3363/4666/2359\nf 3430/4747/2360 3386/4748/2360 3100/4400/2360\nf 3431/4749/2361 3432/4750/2361 3377/4683/2361\nf 3434/4751/2362 2992/4298/2362 3433/4752/2362\nf 3393/4705/2363 3436/4753/2363 3391/4703/2363\nf 3438/4754/2364 3202/4503/2364 3437/4755/2364\nf 3439/4756/2365 3440/4757/2365 3350/4653/2365\nf 3441/4758/2366 3433/4752/2366 2992/4298/2366\nf 2977/4284/2367 3363/4666/2367 3429/4746/2367\nf 3442/4759/2368 3369/4674/2368 3368/4675/2368\nf 3384/4691/2369 3443/4760/2369 3059/4362/2369\nf 3444/4761/2370 3445/4762/2370 3252/4552/2370\nf 3446/4763/2371 3350/4653/2371 3440/4757/2371\nf 3438/4754/2372 3224/4526/2372 3225/4525/2372\nf 3448/4764/2373 3238/4540/2373 3196/4497/2373\nf 2995/4300/2374 3441/4758/2374 2992/4298/2374\nf 3451/4765/2375 2936/4248/2375 3450/4766/2375\nf 3452/4767/2376 3453/4768/2376 3043/4346/2376\nf 3228/4527/2377 3454/4769/2377 3226/4528/2377\nf 3455/4770/2378 3331/4771/2378 3155/4455/2378\nf 3456/4772/2379 3452/4767/2379 3043/4346/2379\nf 3424/4737/2380 3457/4773/2380 3291/4593/2380\nf 3332/4639/2381 3289/4774/2381 2964/4271/2381\nf 3340/4645/2382 3341/4775/2382 3337/4643/2382\nf 3159/4459/2383 3224/4526/2383 3458/4776/2383\nf 3227/4777/2384 3091/4394/2384 3459/4778/2384\nf 3460/4779/2385 3425/4743/2385 3310/4740/2385\nf 3461/4780/2386 3280/4582/2386 2921/4234/2386\nf 3443/4760/2387 3060/4363/2387 3059/4362/2387\nf 3450/4766/2388 3279/4581/2388 3463/4781/2388\nf 3464/4782/2389 3459/4778/2389 3091/4394/2389\nf 3465/4783/2390 3318/4627/2390 3406/4721/2390\nf 3397/4711/2391 3466/4784/2391 3188/4490/2391\nf 3015/4319/2392 3410/4724/2392 3409/4723/2392\nf 3389/4701/2393 3467/4785/2393 3053/4356/2393\nf 3455/4770/2394 2975/4283/2394 3468/4786/2394\nf 2978/4285/2395 3469/4787/2395 2975/4283/2395\nf 3251/4551/2396 3456/4772/2396 3043/4346/2396\nf 3462/4788/2397 3374/4789/2397 3060/4363/2397\nf 3336/4642/2398 3126/4426/2398 3129/4428/2398\nf 3470/4790/2399 3458/4776/2399 3224/4526/2399\nf 3471/4791/2400 3097/4397/2400 3197/4498/2400\nf 3370/4792/2401 3241/4541/2401 3320/4629/2401\nf 3473/4793/2402 3310/4740/2402 3236/4538/2402\nf 3415/4794/2403 3471/4791/2403 3197/4498/2403\nf 3376/4682/2404 3110/4409/2404 3109/4408/2404\nf 3474/4795/2405 3475/4796/2405 3196/4497/2405\nf 3466/4784/2406 3295/4797/2406 3188/4490/2406\nf 3421/4798/2407 3476/4799/2407 3422/4736/2407\nf 3467/4785/2408 3127/4574/2408 3053/4356/2408\nf 3432/4750/2409 3368/4675/2409 3377/4683/2409\nf 3473/4793/2410 3238/4540/2410 3477/4800/2410\nf 3449/4801/2411 3477/4800/2411 3238/4540/2411\nf 3453/4768/2412 3363/4666/2412 3043/4346/2412\nf 3280/4582/2413 3478/4802/2413 3279/4581/2413\nf 3417/4803/2414 3420/4735/2414 3172/4472/2414\nf 3339/4644/2415 3356/4658/2415 3390/4702/2415\nf 3325/4804/2416 3385/4693/2416 3326/4633/2416\nf 3427/4805/2417 3100/4400/2417 3098/4398/2417\nf 3451/4765/2418 3464/4782/2418 3091/4394/2418\nf 3478/4802/2419 3463/4781/2419 3279/4581/2419\nf 3465/4783/2420 3431/4749/2420 3377/4683/2420\nf 3419/4733/2421 3423/4806/2421 3322/4631/2421\nf 3457/4773/2422 3350/4653/2422 3291/4593/2422\nf 3475/4796/2423 3448/4764/2423 3196/4497/2423\nf 3461/4780/2424 3391/4703/2424 3479/4807/2424\nf 3446/4763/2425 3196/4497/2425 3349/4652/2425\nf 3401/4718/2426 3437/4755/2426 3202/4503/2426\nf 3271/4572/2427 2994/4299/2427 2993/4570/2427\nf 3447/4808/2428 3470/4790/2428 3224/4526/2428\nf 3469/4787/2429 3468/4786/2429 2975/4283/2429\nf 3352/4809/2430 3013/4318/2430 3016/4320/2430\nf 3472/4810/2431 3426/4744/2431 3097/4397/2431\nf 3400/4811/2432 3405/4812/2432 2988/4295/2432\nf 3434/4751/2433 3414/4730/2433 3199/4500/2433\nf 3436/4753/2434 3479/4807/2434 3391/4703/2434\nf 3445/4762/2435 3251/4551/2435 3252/4552/2435\nf 3334/4726/2436 3287/4589/2436 2892/4204/2436\nf 3334/4726/2437 3026/4328/2437 3287/4589/2437\nf 3026/4328/2438 3025/4327/2438 3287/4589/2438\nf 3288/4590/2439 3286/4587/2439 3285/4588/2439\nf 3288/4590/2440 3287/4589/2440 3286/4587/2440\nf 3287/4589/2441 3025/4327/2441 3286/4587/2441\nf 3027/4329/2442 3273/4813/2442 3114/4413/2442\nf 3027/4329/2443 3026/4328/2443 3273/4813/2443\nf 3026/4328/2444 3274/4575/2444 3273/4813/2444\nf 3484/4333/2445 3482/4715/2445 3031/4659/2445\nf 3484/4333/2446 3481/4719/2446 3482/4715/2446\nf 3481/4719/2447 2888/4200/2447 3482/4715/2447\nf 3486/4335/2448 2849/4161/2448 3480/4212/2448\nf 3483/4605/2449 3480/4212/2449 2855/4167/2449\nf 2887/4199/2450 3486/4335/2450 3483/4605/2450\nf 3488/4707/2451 3489/4423/2451 2885/4197/2451\nf 3488/4707/2452 3487/4708/2452 3489/4423/2452\nf 3487/4708/2453 3121/4419/2453 3489/4423/2453\nf 3493/4814/2454 3492/4529/2454 3092/4530/2454\nf 3493/4814/2455 3495/4815/2455 3492/4529/2455\nf 3495/4815/2456 3018/4321/2456 3492/4529/2456\nf 3494/4816/2457 3076/4378/2457 3496/4613/2457\nf 3491/4615/2458 3498/4614/2458 3494/4816/2458\nf 3498/4614/2459 3076/4378/2459 3494/4816/2459\nf 3496/4613/1843 3497/4612/1843 3495/4815/1843\nf 3497/4612/1843 3018/4321/1843 3495/4815/1843\nf 2871/4183/2460 2858/4170/2460 2857/4169/2460\nf 2874/4185/2461 2875/4195/2461 2860/4172/2461\nf 2888/4200/2462 3481/4719/2462 2887/4199/2462\nf 2848/4160/1564 2855/4167/1564 3480/4212/1564\nf 2931/4243/2463 2932/4680/2463 2933/4244/2463\nf 2949/4260/2464 2950/4275/2464 2951/4261/2464\nf 2975/4283/1599 2976/4380/1599 2977/4284/1599\nf 2992/4298/1605 2993/4570/1605 2994/4299/1605\nf 3013/4318/2465 3014/4684/2465 3015/4319/2465\nf 3484/4333/2466 3031/4659/2466 3485/4334/2466\nf 3033/4336/2467 3034/4371/2467 3035/4337/2467\nf 3086/4388/2468 3087/4622/2468 3088/4389/2468\nf 3106/4405/2469 3107/4576/2469 3108/4406/2469\nf 3121/4419/2470 3487/4708/2470 3122/4420/2470\nf 3123/4422/2471 2885/4197/2471 3489/4423/2471\nf 3126/4426/1669 3127/4574/1669 3128/4427/1669\nf 3117/4416/2472 2851/4163/2472 2853/4165/2472\nf 3156/4456/1694 3028/4330/1694 3159/4459/1694\nf 3011/4316/2473 3490/4817/2473 3222/4522/2473\nf 3081/4384/2474 3203/4504/2474 3225/4525/2474\nf 3089/4391/1743 3227/4777/1743 3228/4527/1743\nf 3492/4529/1744 3018/4321/1744 3020/4323/1744\nf 3249/4549/2475 2945/4257/2475 3250/4550/2475\nf 3066/4367/2476 3257/4591/2476 3212/4513/2476\nf 3221/4521/2477 3054/4357/2477 3127/4574/2477\nf 3114/4413/2478 3273/4813/2478 3274/4575/2478\nf 3096/4396/2479 3216/4517/2479 3275/4577/2479\nf 3058/4361/2480 3060/4363/2480 3277/4579/2480\nf 3286/4587/2481 3025/4327/2481 3214/4515/2481\nf 2964/4271/1806 3289/4774/1806 3290/4592/1806\nf 3188/4490/2482 3295/4797/2482 3296/4597/2482\nf 2948/4262/2483 3507/4728/2483 3510/4603/2483\nf 3120/4421/2484 2887/4199/2484 3483/4605/2484\nf 3075/4377/1842 3018/4321/1842 3497/4612/1842\nf 3309/4616/2485 3310/4740/2485 3311/4617/2485\nf 3055/4358/2486 3278/4717/2486 3140/4625/2486\nf 3324/4632/2487 3325/4804/2487 3326/4633/2487\nf 3155/4455/1881 3331/4771/1881 3332/4639/1881\nf 3274/4575/2488 3334/4726/2488 2892/4204/2488\nf 2900/4213/1888 2923/4236/1888 3336/4642/1888\nf 3337/4643/1889 3338/4692/1889 3339/4644/1889\nf 3337/4643/1890 3341/4775/1890 3342/4646/1890\nf 3333/4640/2489 3256/4556/2489 2866/4178/2489\nf 3351/4654/2490 3352/4809/2490 3353/4655/2490\nf 2893/4205/2491 2892/4204/2491 3288/4590/2491\nf 3156/4456/1926 3158/4458/1926 3270/4571/1926\nf 3369/4674/2492 3370/4792/2492 3320/4629/2492\nf 3060/4363/1976 3374/4789/1976 3344/4647/1976\nf 3062/4365/1977 3276/4578/1977 3372/4678/1977\nf 3109/4408/2493 3326/4633/2493 3375/4681/2493\nf 3059/4362/2007 2939/4251/2007 3342/4646/2007\nf 3100/4400/2019 3386/4748/2019 3387/4695/2019\nf 3050/4353/2494 3361/4662/2494 3355/4698/2494\nf 3044/4347/2034 3076/4378/2034 3498/4614/2034\nf 3053/4356/2495 3282/4584/2495 3388/4700/2495\nf 3356/4658/2046 2900/4213/2046 3142/4439/2046\nf 3391/4703/2496 2920/4233/2496 3139/4438/2496\nf 3057/4360/2497 3137/4436/2497 3138/4437/2497\nf 3133/4432/2051 3135/4434/2051 3144/4443/2051\nf 3145/4444/2052 3147/4446/2052 3134/4433/2052\nf 3130/4429/2053 3132/4431/2053 3146/4445/2053\nf 2887/4199/2056 3122/4420/2056 3488/4707/2056\nf 3165/4465/2498 3499/4818/2498 3025/4327/2498 3027/4329/2498\nf 3398/4712/2499 3396/4710/2499 3188/4490/2499\nf 3399/4714/2500 3400/4811/2500 2988/4295/2500\nf 3482/4715/2107 2888/4200/2107 3327/4635/2107\nf 3202/4503/2144 3201/4502/2144 3290/4592/2144\nf 3304/4609/2501 3402/4819/2501 3403/4720/2501\nf 3381/4688/2502 3404/4820/2502 3242/4542/2502\nf 2988/4295/2503 3405/4812/2503 3406/4721/2503\nf 3311/4617/2504 3408/4742/2504 3409/4723/2504\nf 3024/4671/2505 3367/4673/2505 3215/4516/2505\nf 3088/4389/2506 3315/4623/2506 3413/4729/2506\nf 3414/4730/2195 3415/4794/2195 3197/4498/2195\nf 3296/4597/2507 3417/4803/2507 3172/4472/2507\nf 3241/4541/2508 3418/4741/2508 3419/4733/2508\nf 3085/4390/2509 3172/4472/2509 3420/4735/2509\nf 3131/4430/2285 3130/4429/2285 3422/4736/2285\nf 3373/4679/2285 3421/4798/2285 3422/4736/2285\nf 3322/4631/2510 3423/4806/2510 3398/4712/2510\nf 3316/4624/2296 3411/4725/2296 3424/4737/2296\nf 2859/4171/2300 2849/4161/2300 3485/4334/2300\nf 3140/4625/2308 3141/4821/2308 3136/4435/2308\nf 3408/4742/2511 3311/4617/2511 3310/4740/2511\nf 3426/4744/2358 3427/4805/2358 3098/4398/2358\nf 3434/4751/2362 3199/4500/2362 2992/4298/2362\nf 3393/4705/2363 3435/4822/2363 3436/4753/2363\nf 3438/4754/2364 3225/4525/2364 3202/4503/2364\nf 2977/4284/2367 2976/4380/2367 3363/4666/2367\nf 3446/4763/2512 3349/4652/2512 3350/4653/2512\nf 3438/4754/2372 3447/4808/2372 3224/4526/2372\nf 3448/4764/2513 3449/4801/2513 3238/4540/2513\nf 3451/4765/2375 3091/4394/2375 2936/4248/2375\nf 3159/4459/2383 3028/4330/2383 3224/4526/2383\nf 3227/4777/2384 3089/4391/2384 3091/4394/2384\nf 3443/4760/2387 3462/4788/2387 3060/4363/2387\nf 3450/4766/2388 2936/4248/2388 3279/4581/2388\nf 3465/4783/2514 3377/4683/2514 3318/4627/2514\nf 3015/4319/2515 3014/4684/2515 3410/4724/2515\nf 3455/4770/2394 3155/4455/2394 2975/4283/2394\nf 3336/4642/2398 2923/4236/2398 3126/4426/2398\nf 3471/4791/2400 3472/4810/2400 3097/4397/2400\nf 3370/4792/2516 3380/4687/2516 3241/4541/2516\nf 3473/4793/2517 3460/4779/2517 3310/4740/2517\nf 3467/4785/2518 3128/4427/2518 3127/4574/2518\nf 3432/4750/2519 3442/4759/2519 3368/4675/2519\nf 3473/4793/2520 3236/4538/2520 3238/4540/2520\nf 3453/4768/2412 3428/4745/2412 3363/4666/2412\nf 3339/4644/2415 3338/4692/2415 3356/4658/2415\nf 3427/4805/2417 3430/4747/2417 3100/4400/2417\nf 3457/4773/2521 3439/4756/2521 3350/4653/2521\nf 3461/4780/2424 2921/4234/2424 3391/4703/2424\nf 3446/4763/2522 3474/4795/2522 3196/4497/2522\nf 3352/4809/2523 3351/4654/2523 3013/4318/2523\nf 3486/4335/2524 3485/4334/2524 2849/4161/2524\nf 3483/4605/1617 3486/4335/1617 3480/4212/1617\nf 2887/4199/2525 3484/4333/2525 3486/4335/2525\nf 3510/4603/2483 3508/4532/2483 3229/4531/2483\nf 3510/4603/2483 3507/4728/2483 3508/4532/2483\nf 3509/4325/2526 3500/4479/2526 3022/4326/2526\nf 3501/4739/2526 3177/4477/2526 3500/4479/2526\nf 3503/4559/2155 3505/4694/2155 3260/4560/2155\nf 3499/4818/2527 3504/4738/2527 3025/4327/2527\nf 3506/4731/2527 3266/4566/2527 3504/4738/2527\n";

},{}],4:[function(require,module,exports){
module.exports = "# WaveFront *.obj file (generated by CINEMA 4D)\n\ng pCube1\nusemtl surfaceShader1\nv -0.018138 -0.002958 0.027271\nv 0.018692 -0.002958 0.027271\nv 0.018692 -0.004076 0.027271\nv -0.018138 -0.004076 0.027271\nv -0.018138 0.004076 -0.029347\nv 0.018692 0.004076 -0.029347\nv 0.018692 0.004076 0.027271\nv -0.018138 0.004076 0.027271\nv -0.018138 -0.004076 -0.029347\nv 0.018692 -0.004076 -0.029347\nv 0.018692 -0.002958 -0.029347\nv -0.018138 -0.002958 -0.029347\nv -0.019082 -0.002958 -0.029347\nv -0.019082 -0.002958 0.027271\nv -0.019082 -0.004076 0.027271\nv -0.019082 -0.004076 -0.029347\nv 0.018692 0.00306 0.027271\nv -0.018138 0.00306 0.027271\nv -0.019082 0.004076 -0.029347\nv -0.019082 0.004076 0.027271\nv -0.019082 0.00306 0.027271\nv -0.019082 0.00306 -0.029347\nv -0.018138 0.00306 -0.029347\nv 0.018692 0.00306 -0.029347\nv -0.018138 0.00306 0.026712\nv 0.018133 0.00306 0.026712\nv 0.018133 -0.002958 0.026712\nv -0.018138 -0.002958 0.026712\nv -0.018138 -0.002958 -0.028789\nv 0.018133 -0.002958 -0.028789\nv 0.018133 0.00306 -0.028789\nv -0.018138 0.00306 -0.028789\n\nvt 0.860645 0.851743 0\nvt 0.253255 0.820408 0\nvt 0.252281 0.813606 0\nvt 0.862512 0.817513 0\nvt 0.763158 0.084976 0\nvt 0.274165 0.083536 0\nvt 0.271397 0.827219 0\nvt 0.758806 0.827124 0\nvt 0.862989 0.079599 0\nvt 0.251712 0.066929 0\nvt 0.252501 0.060238 0\nvt 0.862618 0.063694 0\nvt 0.860972 0.080477 0\nvt 0.859215 0.837238 0\nvt 0.861006 0.83633 0\nvt 0.862067 0.080254 0\nvt 0.2628 0.831762 0\nvt 0.757637 0.842402 0\nvt 0.774061 0.08485 0\nvt 0.771554 0.827916 0\nvt 0.785285 0.829245 0\nvt 0.785843 0.084223 0\nvt 0.766481 0.070863 0\nvt 0.26618 0.078056 0\nvt 0.754373 0.850688 0\nvt 0.494267 0.984851 0\nvt 0.261089 0.830217 0\nvt 0.002993 0.985662 0\nvt 0.732691 0.984851 0\nvt 0.253401 0.820192 0\nvt 0.002993 0.879141 0\nvt 0.732691 0.87833 0\nvt 0.860678 0.861765 0\nvt 0.494267 0.87833 0\nvt 0.862613 0.054884 0\nvt 0.747763 0.984989 0\nvt 0.252672 0.061632 0\nvt 0.487125 0.879141 0\nvt 0.986187 0.984989 0\nvt 0.264309 0.079402 0\nvt 0.487125 0.985662 0\nvt 0.986187 0.878468 0\nvt 0.766205 0.062611 0\nvt 0.747763 0.878468 0\n\nf 4/4 3/3 2/2 1/1 \nf 8/8 7/7 6/6 5/5 \nf 12/12 11/11 10/10 9/9 \nf 9/9 10/10 3/3 4/4 \nf 3/3 10/10 11/11 2/2 \nf 16/16 15/15 14/14 13/13 \nf 18/18 17/17 7/7 8/8 \nf 22/22 21/21 20/20 19/19 \nf 5/5 6/6 24/24 23/23 \nf 17/17 24/24 6/6 7/7 \nf 28/34 27/32 26/29 25/26 \nf 13/13 14/14 21/21 22/22 \nf 32/44 31/42 30/39 29/36 \nf 27/31 30/38 31/41 26/28 \nf 9/9 4/4 15/15 16/16 \nf 4/4 1/1 14/14 15/15 \nf 12/12 9/9 16/16 13/13 \nf 18/18 8/8 20/20 21/21 \nf 8/8 5/5 19/19 20/20 \nf 5/5 23/23 22/22 19/19 \nf 1/1 18/18 21/21 14/14 \nf 23/23 12/12 13/13 22/22 \nf 1/1 2/2 27/30 28/33 \nf 17/17 18/18 25/25 26/27 \nf 18/18 1/1 28/33 25/25 \nf 23/23 24/24 31/40 32/43 \nf 11/11 12/12 29/35 30/37 \nf 12/12 23/23 32/43 29/35 \nf 2/2 11/11 30/37 27/30 \nf 24/24 17/17 26/27 31/40 \n\n";

},{}],5:[function(require,module,exports){
module.exports = "# WaveFront *.obj file (generated by CINEMA 4D)\n\ng box5 bottom_Mesh\nusemtl box01\nv 0.076659 0 0.069663\nv -0.076659 0 -0.083655\nv -0.076659 0 0.069663\nv 0.076659 0 -0.083655\nv -0.076659 0.005825 0.069663\nv -0.076659 0.005825 -0.083655\nv 0.076659 0.005825 0.069663\nv 0.076659 0.005825 -0.083655\nv 0.076659 0.120129 0.071744\nv 0.076659 0.001918 0.071744\nv -0.076659 0.120129 0.071744\nv -0.076659 0.001918 0.071744\nv 0.07874 0.120129 0.069663\nv 0.07874 0.120129 -0.083655\nv 0.07874 0.001918 0.069663\nv 0.07874 0.001918 -0.083655\nv -0.076659 0.120129 -0.085736\nv -0.076659 0.001918 -0.085736\nv 0.076659 0.001918 -0.085736\nv 0.076659 0.120129 -0.085736\nv -0.07874 0.001918 -0.083655\nv -0.07874 0.120129 -0.083655\nv -0.07874 0.001918 0.069663\nv -0.07874 0.120129 0.069663\nv -0.077953 0.000504 0.071712\nv -0.078055 0.000515 0.071712\nv -0.077953 0.000787 0.071744\nv 0.077953 0.000032 0.07124\nv 0.078055 0.000032 0.071229\nv 0.077953 0 0.070957\nv -0.078709 0.000504 -0.084949\nv -0.078709 0.000515 -0.085051\nv -0.07874 0.000787 -0.084949\nv 0.078236 0.000032 -0.084949\nv 0.078225 0.000032 -0.085051\nv 0.077953 0 -0.084949\nv -0.078236 0.12126 0.071712\nv -0.078225 0.121362 0.071712\nv -0.077953 0.12126 0.071744\nv 0.078709 0.12126 0.07124\nv 0.078709 0.121362 0.071229\nv 0.07874 0.12126 0.070957\nv -0.078709 0.12126 -0.085232\nv -0.078709 0.121362 -0.085221\nv -0.07874 0.12126 -0.084949\nv 0.078236 0.12126 -0.085705\nv 0.078225 0.121362 -0.085705\nv 0.077953 0.12126 -0.085736\nv -0.077953 0 0.069663\nv -0.077953 0 -0.083655\nv -0.078236 0.000032 0.069663\nv -0.078236 0.000031 -0.083655\nv 0.076659 0.000031 -0.085232\nv -0.076659 0.000032 -0.085232\nv 0.076659 0 -0.084949\nv -0.076659 0 -0.084949\nv 0.078236 0.000031 0.069662\nv 0.077953 0 -0.083655\nv 0.077953 0 0.069663\nv 0.078236 0.000032 -0.083655\nv -0.076659 0.000031 0.07124\nv 0.076659 0.000031 0.07124\nv -0.076659 0 0.070957\nv 0.076659 0 0.070957\nv 0.076659 0.122016 0.07124\nv -0.076659 0.122016 0.07124\nv 0.076659 0.122047 0.070957\nv -0.076659 0.122047 0.070957\nv 0.077953 0.122047 0.069663\nv 0.077953 0.122047 -0.083655\nv 0.078236 0.122016 0.069663\nv 0.078236 0.122016 -0.083655\nv -0.076659 0.122047 -0.084949\nv -0.076659 0.122016 -0.085232\nv 0.076659 0.122047 -0.084949\nv 0.076659 0.122016 -0.085232\nv -0.078236 0.122016 0.069662\nv -0.077953 0.122047 -0.083655\nv -0.077953 0.122047 0.069663\nv -0.078236 0.122016 -0.083655\nv 0.078236 0.120129 0.071712\nv 0.077953 0.001918 0.071744\nv 0.077953 0.120129 0.071744\nv 0.078236 0.001918 0.071712\nv -0.077953 0.120129 0.071744\nv -0.078236 0.001918 0.071712\nv -0.078236 0.120129 0.071712\nv -0.077953 0.001918 0.071744\nv 0.078709 0.120129 -0.085232\nv 0.078709 0.001918 -0.085232\nv 0.07874 0.120129 -0.084949\nv 0.07874 0.001918 -0.084949\nv -0.077953 0.001918 -0.085736\nv -0.078236 0.120129 -0.085705\nv -0.078236 0.001918 -0.085705\nv -0.077953 0.120129 -0.085736\nv -0.078225 0.000685 0.071712\nv -0.078236 0.000787 0.071712\nv -0.078457 0.000787 0.071618\nv -0.078437 0.000606 0.071618\nv -0.078614 0.000787 0.07146\nv -0.078588 0.000549 0.07146\nv -0.078678 0.000515 0.07124\nv -0.078709 0.000787 0.07124\nv -0.078709 0.000504 0.070957\nv -0.07874 0.000787 0.070957\nv -0.078191 0.000606 0.071712\nv -0.078376 0.000465 0.071618\nv -0.078508 0.000364 0.07146\nv -0.078588 0.000304 0.07124\nv -0.078614 0.000283 0.070957\nv -0.078134 0.000549 0.071712\nv -0.078275 0.000364 0.071618\nv -0.078376 0.000232 0.07146\nv -0.078437 0.000152 0.07124\nv -0.078457 0.000126 0.070957\nv -0.078134 0.000304 0.071618\nv -0.078191 0.000152 0.07146\nv -0.078225 0.000062 0.07124\nv -0.078236 0.000031 0.070957\nv -0.077953 0.000283 0.071618\nv -0.077953 0.000126 0.07146\nv -0.077953 0.000031 0.07124\nv -0.077953 0 0.070957\nv 0.078225 0.000031 0.071059\nv 0.078236 0.000032 0.070957\nv 0.078437 0.000126 0.071138\nv 0.078457 0.000126 0.070957\nv 0.078588 0.000283 0.071195\nv 0.078614 0.000283 0.070957\nv 0.078678 0.000504 0.071229\nv 0.078709 0.000504 0.070957\nv 0.078709 0.000787 0.07124\nv 0.07874 0.000787 0.070957\nv 0.078191 0.000032 0.071138\nv 0.078376 0.000126 0.071279\nv 0.078508 0.000283 0.07138\nv 0.078588 0.000504 0.07144\nv 0.078614 0.000787 0.07146\nv 0.078134 0.000031 0.071195\nv 0.078275 0.000126 0.07138\nv 0.078376 0.000283 0.071512\nv 0.078437 0.000504 0.071592\nv 0.078457 0.000787 0.071618\nv 0.078134 0.000126 0.07144\nv 0.078191 0.000283 0.071591\nv 0.078225 0.000504 0.071682\nv 0.078236 0.000787 0.071712\nv 0.077953 0.000126 0.07146\nv 0.077953 0.000283 0.071618\nv 0.077953 0.000504 0.071712\nv 0.077953 0.000787 0.071744\nv -0.078709 0.000685 -0.085221\nv -0.078709 0.000787 -0.085232\nv -0.078614 0.000787 -0.085453\nv -0.078614 0.000606 -0.085433\nv -0.078457 0.000549 -0.085584\nv -0.078457 0.000787 -0.08561\nv -0.078236 0.000515 -0.085675\nv -0.078236 0.000787 -0.085705\nv -0.077953 0.000504 -0.085705\nv -0.077953 0.000787 -0.085736\nv -0.078709 0.000606 -0.085187\nv -0.078614 0.000465 -0.085372\nv -0.078457 0.000364 -0.085505\nv -0.078236 0.000304 -0.085584\nv -0.077953 0.000283 -0.08561\nv -0.078709 0.000549 -0.08513\nv -0.078614 0.000364 -0.085272\nv -0.078457 0.000232 -0.085372\nv -0.078236 0.000152 -0.085433\nv -0.077953 0.000126 -0.085453\nv -0.078614 0.000304 -0.08513\nv -0.078457 0.000152 -0.085187\nv -0.078236 0.000062 -0.085221\nv -0.077953 0.000031 -0.085232\nv -0.078614 0.000283 -0.084949\nv -0.078457 0.000126 -0.084949\nv -0.078236 0.000032 -0.084949\nv -0.077953 0 -0.084949\nv 0.078055 0.000032 -0.085221\nv 0.077953 0.000031 -0.085232\nv 0.077953 0.000126 -0.085453\nv 0.078134 0.000126 -0.085433\nv 0.077953 0.000283 -0.08561\nv 0.078191 0.000283 -0.085584\nv 0.078225 0.000504 -0.085675\nv 0.077953 0.000504 -0.085705\nv 0.078236 0.000787 -0.085705\nv 0.077953 0.000787 -0.085736\nv 0.078134 0.000031 -0.085187\nv 0.078275 0.000126 -0.085372\nv 0.078376 0.000283 -0.085505\nv 0.078437 0.000504 -0.085584\nv 0.078457 0.000787 -0.08561\nv 0.078191 0.000032 -0.08513\nv 0.078376 0.000126 -0.085271\nv 0.078508 0.000283 -0.085372\nv 0.078588 0.000504 -0.085433\nv 0.078614 0.000787 -0.085453\nv 0.078437 0.000126 -0.08513\nv 0.078588 0.000283 -0.085187\nv 0.078678 0.000504 -0.085221\nv 0.078709 0.000787 -0.085232\nv 0.078457 0.000126 -0.084949\nv 0.078614 0.000283 -0.084949\nv 0.078709 0.000504 -0.084949\nv 0.07874 0.000787 -0.084949\nv -0.078055 0.121532 0.071712\nv -0.077953 0.121543 0.071712\nv -0.077953 0.121764 0.071618\nv -0.078134 0.121744 0.071618\nv -0.078191 0.121895 0.07146\nv -0.077953 0.121921 0.07146\nv -0.078225 0.121986 0.07124\nv -0.077953 0.122016 0.07124\nv -0.078236 0.122016 0.070957\nv -0.077953 0.122047 0.070957\nv -0.078134 0.121498 0.071712\nv -0.078275 0.121683 0.071618\nv -0.078376 0.121815 0.07146\nv -0.078437 0.121895 0.07124\nv -0.078457 0.121921 0.070957\nv -0.078191 0.121441 0.071712\nv -0.078376 0.121582 0.071618\nv -0.078508 0.121683 0.07146\nv -0.078588 0.121744 0.07124\nv -0.078614 0.121764 0.070957\nv -0.078437 0.121441 0.071618\nv -0.078588 0.121498 0.07146\nv -0.078678 0.121532 0.07124\nv -0.078709 0.121543 0.070957\nv -0.078457 0.12126 0.071618\nv -0.078614 0.12126 0.07146\nv -0.078709 0.12126 0.07124\nv -0.07874 0.12126 0.070957\nv 0.078709 0.121532 0.071059\nv 0.078709 0.121543 0.070957\nv 0.078614 0.121744 0.071138\nv 0.078614 0.121764 0.070957\nv 0.078457 0.121895 0.071195\nv 0.078457 0.121921 0.070957\nv 0.078236 0.121986 0.071229\nv 0.078236 0.122016 0.070957\nv 0.077953 0.122016 0.07124\nv 0.077953 0.122047 0.070957\nv 0.078709 0.121498 0.071138\nv 0.078614 0.121683 0.071279\nv 0.078457 0.121815 0.07138\nv 0.078236 0.121895 0.07144\nv 0.077953 0.121921 0.07146\nv 0.078709 0.121441 0.071195\nv 0.078614 0.121582 0.07138\nv 0.078457 0.121683 0.071512\nv 0.078236 0.121744 0.071591\nv 0.077953 0.121764 0.071618\nv 0.078614 0.121441 0.07144\nv 0.078457 0.121498 0.071591\nv 0.078236 0.121532 0.071682\nv 0.077953 0.121543 0.071712\nv 0.078614 0.12126 0.07146\nv 0.078457 0.12126 0.071618\nv 0.078236 0.12126 0.071712\nv 0.077953 0.12126 0.071744\nv -0.078709 0.121532 -0.085051\nv -0.078709 0.121543 -0.084949\nv -0.078614 0.121764 -0.084949\nv -0.078614 0.121744 -0.08513\nv -0.078457 0.121921 -0.084949\nv -0.078457 0.121895 -0.085187\nv -0.078236 0.122016 -0.084949\nv -0.078236 0.121986 -0.085221\nv -0.077953 0.122047 -0.084949\nv -0.077953 0.122016 -0.085232\nv -0.078709 0.121498 -0.08513\nv -0.078614 0.121683 -0.085271\nv -0.078457 0.121815 -0.085372\nv -0.078236 0.121895 -0.085433\nv -0.077953 0.121921 -0.085453\nv -0.078709 0.121441 -0.085187\nv -0.078614 0.121582 -0.085372\nv -0.078457 0.121683 -0.085505\nv -0.078236 0.121744 -0.085584\nv -0.077953 0.121764 -0.08561\nv -0.078614 0.121441 -0.085433\nv -0.078457 0.121498 -0.085584\nv -0.078236 0.121532 -0.085675\nv -0.077953 0.121543 -0.085705\nv -0.078614 0.12126 -0.085453\nv -0.078457 0.12126 -0.08561\nv -0.078236 0.12126 -0.085705\nv -0.077953 0.12126 -0.085736\nv 0.078055 0.121532 -0.085705\nv 0.077953 0.121543 -0.085705\nv 0.077953 0.121764 -0.08561\nv 0.078134 0.121744 -0.08561\nv 0.077953 0.121921 -0.085453\nv 0.078191 0.121895 -0.085453\nv 0.077953 0.122016 -0.085232\nv 0.078225 0.121986 -0.085232\nv 0.077953 0.122047 -0.084949\nv 0.078236 0.122016 -0.084949\nv 0.078134 0.121498 -0.085705\nv 0.078275 0.121683 -0.08561\nv 0.078376 0.121815 -0.085453\nv 0.078437 0.121895 -0.085232\nv 0.078457 0.121921 -0.084949\nv 0.078191 0.121441 -0.085705\nv 0.078376 0.121582 -0.08561\nv 0.078508 0.121683 -0.085453\nv 0.078588 0.121744 -0.085232\nv 0.078614 0.121764 -0.084949\nv 0.078437 0.121441 -0.08561\nv 0.078588 0.121498 -0.085453\nv 0.078678 0.121532 -0.085232\nv 0.078709 0.121543 -0.084949\nv 0.078457 0.12126 -0.08561\nv 0.078614 0.12126 -0.085453\nv 0.078709 0.12126 -0.085232\nv 0.07874 0.12126 -0.084949\nv -0.078457 0.000126 -0.083655\nv -0.078457 0.000126 0.069663\nv -0.078614 0.000283 -0.083655\nv -0.078614 0.000283 0.069663\nv -0.078709 0.000504 -0.083655\nv -0.078709 0.000504 0.069663\nv -0.07874 0.000787 -0.083655\nv -0.07874 0.000787 0.069663\nv 0.076659 0.000126 -0.085453\nv -0.076659 0.000126 -0.085453\nv 0.076659 0.000283 -0.08561\nv -0.076659 0.000283 -0.08561\nv 0.076659 0.000504 -0.085705\nv -0.076659 0.000504 -0.085705\nv 0.076659 0.000787 -0.085736\nv -0.076659 0.000787 -0.085736\nv 0.078457 0.000126 0.069663\nv 0.078457 0.000126 -0.083655\nv 0.078614 0.000283 0.069663\nv 0.078614 0.000283 -0.083655\nv 0.078709 0.000504 0.069662\nv 0.078709 0.000504 -0.083655\nv 0.07874 0.000787 0.069663\nv 0.07874 0.000787 -0.083655\nv -0.076659 0.000126 0.07146\nv 0.076659 0.000126 0.07146\nv -0.076659 0.000283 0.071618\nv 0.076659 0.000283 0.071618\nv -0.076659 0.000504 0.071712\nv 0.076659 0.000504 0.071712\nv -0.076659 0.000787 0.071744\nv 0.076659 0.000787 0.071744\nv 0.076659 0.121921 0.07146\nv -0.076659 0.121921 0.07146\nv 0.076659 0.121764 0.071618\nv -0.076659 0.121764 0.071618\nv 0.076659 0.121543 0.071712\nv -0.076659 0.121543 0.071712\nv 0.076659 0.12126 0.071744\nv -0.076659 0.12126 0.071744\nv 0.078457 0.121921 -0.083655\nv 0.078457 0.121921 0.069663\nv 0.078614 0.121764 0.069663\nv 0.078614 0.121764 -0.083655\nv 0.078709 0.121543 -0.083655\nv 0.078709 0.121543 0.069663\nv 0.07874 0.12126 0.069663\nv 0.07874 0.12126 -0.083655\nv -0.076659 0.121921 -0.085453\nv 0.076659 0.121921 -0.085453\nv -0.076659 0.121764 -0.08561\nv 0.076659 0.121764 -0.08561\nv -0.076659 0.121543 -0.085705\nv 0.076659 0.121543 -0.085705\nv -0.076659 0.12126 -0.085736\nv 0.076659 0.12126 -0.085736\nv -0.078457 0.121921 0.069663\nv -0.078457 0.121921 -0.083655\nv -0.078614 0.121764 0.069663\nv -0.078614 0.121764 -0.083655\nv -0.078709 0.121543 0.069663\nv -0.078709 0.121543 -0.083655\nv -0.07874 0.12126 0.069663\nv -0.07874 0.12126 -0.083655\nv 0.078457 0.120129 0.071618\nv 0.078457 0.001918 0.071618\nv 0.078614 0.120129 0.07146\nv 0.078614 0.001918 0.07146\nv 0.078709 0.120129 0.07124\nv 0.078709 0.001918 0.07124\nv 0.07874 0.120129 0.070957\nv 0.07874 0.001918 0.070957\nv -0.078457 0.001918 0.071618\nv -0.078457 0.120129 0.071618\nv -0.078614 0.120129 0.07146\nv -0.078614 0.001918 0.07146\nv -0.078709 0.001918 0.07124\nv -0.078709 0.120129 0.07124\nv -0.07874 0.001918 0.070957\nv -0.07874 0.120129 0.070957\nv 0.078614 0.120129 -0.085453\nv 0.078614 0.001918 -0.085453\nv 0.078457 0.001918 -0.08561\nv 0.078457 0.120129 -0.08561\nv 0.078236 0.001918 -0.085705\nv 0.078236 0.120129 -0.085705\nv 0.077953 0.001918 -0.085736\nv 0.077953 0.120129 -0.085736\nv -0.078457 0.001918 -0.08561\nv -0.078457 0.120129 -0.08561\nv -0.078614 0.120129 -0.085453\nv -0.078614 0.001918 -0.085453\nv -0.078709 0.120129 -0.085232\nv -0.078709 0.001918 -0.085232\nv -0.07874 0.120129 -0.084949\nv -0.07874 0.001918 -0.084949\nv 0.077953 0.005825 -0.083655\nv 0.077953 0.005825 0.069663\nv -0.077953 0.005825 0.069663\nv -0.077953 0.005825 -0.083655\nv 0.076659 0.005825 -0.084949\nv -0.076659 0.005825 -0.084949\nv 0.076659 0.005825 0.070957\nv -0.076659 0.005825 0.070957\nv 0.077953 0.005825 -0.084949\nv 0.077953 0.005825 0.070957\nv -0.077953 0.005825 0.070957\nv -0.077953 0.005825 -0.084949\n\nvt 0.681628 0.145083 0\nvt 0.507216 0.319711 0\nvt 0.681713 0.319632 0\nvt 0.507013 0.145162 0\nvt 0.312419 0.359874 0\nvt 0.312384 0.185388 0\nvt 0.137927 0.359928 0\nvt 0.137885 0.185419 0\nvt 0.685951 0.006341 0\nvt 0.685873 0.140901 0\nvt 0.860401 0.006391 0\nvt 0.860333 0.140901 0\nvt 0.681934 0.006357 0\nvt 0.507512 0.00635 0\nvt 0.681892 0.140901 0\nvt 0.507474 0.140901 0\nvt 0.329121 0.006377 0\nvt 0.329113 0.140901 0\nvt 0.503613 0.140901 0\nvt 0.503614 0.006396 0\nvt 0.319871 0.141453 0\nvt 0.319818 0.006877 0\nvt 0.145373 0.141453 0\nvt 0.145323 0.006902 0\nvt 0.861671 0.142468 0\nvt 0.861778 0.142462 0\nvt 0.861701 0.142156 0\nvt 0.683882 0.143379 0\nvt 0.683755 0.14333 0\nvt 0.683474 0.143621 0\nvt 0.321364 0.143094 0\nvt 0.326378 0.142719 0\nvt 0.326473 0.142658 0\nvt 0.321357 0.14275 0\nvt 0.326264 0.142345 0\nvt 0.505521 0.1433 0\nvt 0.505402 0.143247 0\nvt 0.505057 0.143525 0\nvt 0.86214 0.005132 0\nvt 0.862123 0.00503 0\nvt 0.86183 0.005148 0\nvt 0.683614 0.005097 0\nvt 0.683602 0.004988 0\nvt 0.68334 0.005108 0\nvt 0.326603 0.005067 0\nvt 0.326612 0.004939 0\nvt 0.321287 0.005572 0\nvt 0.326296 0.004986 0\nvt 0.505281 0.005094 0\nvt 0.505253 0.004979 0\nvt 0.505057 0.005141 0\nvt 0.681729 0.321158 0\nvt 0.145436 0.144414 0\nvt 0.507233 0.321217 0\nvt 0.319932 0.144355 0\nvt 0.145425 0.14404 0\nvt 0.319922 0.144001 0\nvt 0.503614 0.143259 0\nvt 0.329074 0.143342 0\nvt 0.505467 0.145166 0\nvt 0.503614 0.143585 0\nvt 0.505747 0.319714 0\nvt 0.329055 0.143665 0\nvt 0.681712 0.143274 0\nvt 0.506993 0.143679 0\nvt 0.681702 0.143594 0\nvt 0.507085 0.143402 0\nvt 0.860039 0.143237 0\nvt 0.685436 0.143538 0\nvt 0.68319 0.319635 0\nvt 0.860018 0.14356 0\nvt 0.683144 0.145135 0\nvt 0.685355 0.143863 0\nvt 0.685727 0.003873 0\nvt 0.860308 0.00395 0\nvt 0.004157 0.362866 0\nvt 0.685672 0.003551 0\nvt 0.004157 0.53736 0\nvt 0.860308 0.003622 0\nvt 0.004157 0.359924 0\nvt 0.682075 0.003512 0\nvt 0.004157 0.18543 0\nvt 0.507355 0.003558 0\nvt 0.682036 0.003842 0\nvt 0.507401 0.003878 0\nvt 0.004157 0.00799 0\nvt 0.32908 0.003618 0\nvt 0.329097 0.003947 0\nvt 0.004157 0.18249 0\nvt 0.503614 0.003675 0\nvt 0.503614 0.004003 0\nvt 0.145307 0.004414 0\nvt 0.145307 0.004112 0\nvt 0.446149 0.185386 0\nvt 0.319805 0.004082 0\nvt 0.319805 0.00378 0\nvt 0.446149 0.359873 0\nvt 0.145308 0.004094 0\nvt 0.145308 0.003792 0\nvt 0.319804 0.004414 0\nvt 0.319804 0.004112 0\nvt 0.684271 0.00637 0\nvt 0.684457 0.140901 0\nvt 0.68454 0.006362 0\nvt 0.684199 0.140901 0\nvt 0.861859 0.006396 0\nvt 0.862139 0.140901 0\nvt 0.862173 0.0064 0\nvt 0.861801 0.140901 0\nvt 0.505868 0.006366 0\nvt 0.505864 0.140901 0\nvt 0.506117 0.006361 0\nvt 0.506094 0.140901 0\nvt 0.327632 0.140901 0\nvt 0.327325 0.006388 0\nvt 0.327291 0.140901 0\nvt 0.327652 0.006385 0\nvt 0.861981 0.142294 0\nvt 0.862009 0.142187 0\nvt 0.862266 0.142217 0\nvt 0.862211 0.142415 0\nvt 0.862502 0.142256 0\nvt 0.862416 0.142527 0\nvt 0.862636 0.14265 0\nvt 0.862756 0.142315 0\nvt 0.143922 0.143142 0\nvt 0.862911 0.142801 0\nvt 0.143914 0.14278 0\nvt 0.863063 0.142396 0\nvt 0.861933 0.142375 0\nvt 0.86212 0.142561 0\nvt 0.862285 0.142726 0\nvt 0.862462 0.142901 0\nvt 0.143932 0.143454 0\nvt 0.862686 0.143117 0\nvt 0.861866 0.14243 0\nvt 0.861993 0.142662 0\nvt 0.862111 0.142864 0\nvt 0.862237 0.143079 0\nvt 0.143942 0.143747 0\nvt 0.862395 0.143346 0\nvt 0.86183 0.142719 0\nvt 0.861883 0.142947 0\nvt 0.861949 0.14319 0\nvt 0.143952 0.144061 0\nvt 0.862034 0.143492 0\nvt 0.861626 0.142729 0\nvt 0.861594 0.142972 0\nvt 0.861586 0.143237 0\nvt 0.683203 0.321145 0\nvt 0.143962 0.144427 0\nvt 0.861603 0.143556 0\nvt 0.683418 0.14328 0\nvt 0.68327 0.1433 0\nvt 0.683429 0.143003 0\nvt 0.683222 0.143024 0\nvt 0.683451 0.142754 0\nvt 0.683213 0.142767 0\nvt 0.683477 0.14249 0\nvt 0.683224 0.142496 0\nvt 0.683502 0.142177 0\nvt 0.683246 0.142179 0\nvt 0.683541 0.143276 0\nvt 0.683597 0.142998 0\nvt 0.683641 0.142749 0\nvt 0.68368 0.142487 0\nvt 0.68371 0.142176 0\nvt 0.68365 0.143294 0\nvt 0.683746 0.143016 0\nvt 0.683811 0.142764 0\nvt 0.683862 0.142499 0\nvt 0.683901 0.142182 0\nvt 0.683898 0.14306 0\nvt 0.683991 0.142804 0\nvt 0.684062 0.142527 0\nvt 0.684113 0.142197 0\nvt 0.684077 0.143129 0\nvt 0.684213 0.142871 0\nvt 0.684312 0.142576 0\nvt 0.684379 0.142219 0\nvt 0.326583 0.142384 0\nvt 0.32657 0.142254 0\nvt 0.326832 0.142213 0\nvt 0.326848 0.142418 0\nvt 0.327089 0.142444 0\nvt 0.327076 0.142188 0\nvt 0.327346 0.142465 0\nvt 0.327339 0.142174 0\nvt 0.327656 0.142482 0\nvt 0.327653 0.142174 0\nvt 0.326571 0.142493 0\nvt 0.326833 0.142588 0\nvt 0.327075 0.142654 0\nvt 0.327333 0.142703 0\nvt 0.327644 0.14274 0\nvt 0.326535 0.142583 0\nvt 0.326786 0.142736 0\nvt 0.327027 0.142841 0\nvt 0.327293 0.14292 0\nvt 0.327616 0.142978 0\nvt 0.326696 0.142874 0\nvt 0.326938 0.143032 0\nvt 0.327221 0.143151 0\nvt 0.32757 0.143234 0\nvt 0.321374 0.143391 0\nvt 0.326551 0.143012 0\nvt 0.321384 0.143673 0\nvt 0.326791 0.14325 0\nvt 0.321394 0.143978 0\nvt 0.32711 0.143432 0\nvt 0.505761 0.321231 0\nvt 0.321404 0.144341 0\nvt 0.327512 0.143546 0\nvt 0.505149 0.143142 0\nvt 0.505057 0.1431 0\nvt 0.505057 0.142787 0\nvt 0.505196 0.142854 0\nvt 0.505057 0.142527 0\nvt 0.505235 0.142613 0\nvt 0.505266 0.14238 0\nvt 0.505057 0.14229 0\nvt 0.505301 0.142107 0\nvt 0.505057 0.142046 0\nvt 0.505232 0.143169 0\nvt 0.505322 0.142895 0\nvt 0.505389 0.142658 0\nvt 0.505442 0.142422 0\nvt 0.505489 0.142133 0\nvt 0.505313 0.143202 0\nvt 0.505438 0.14294 0\nvt 0.505524 0.142702 0\nvt 0.505596 0.142457 0\nvt 0.505649 0.142158 0\nvt 0.505563 0.142999 0\nvt 0.505672 0.142761 0\nvt 0.505755 0.1425 0\nvt 0.505815 0.142183 0\nvt 0.50572 0.143079 0\nvt 0.505862 0.142841 0\nvt 0.505967 0.142559 0\nvt 0.506034 0.14221 0\nvt 0.861942 0.004854 0\nvt 0.861836 0.004838 0\nvt 0.861824 0.004577 0\nvt 0.862023 0.004606 0\nvt 0.862101 0.004383 0\nvt 0.861821 0.004332 0\nvt 0.862191 0.004147 0\nvt 0.861839 0.004069 0\nvt 0.143835 0.004414 0\nvt 0.862305 0.003854 0\nvt 0.446149 0.361342 0\nvt 0.004157 0.538834 0\nvt 0.143835 0.004089 0\nvt 0.861884 0.003753 0\nvt 0.862024 0.004892 0\nvt 0.862178 0.004675 0\nvt 0.862315 0.004484 0\nvt 0.862463 0.004283 0\nvt 0.143837 0.004699 0\nvt 0.862646 0.004031 0\nvt 0.862084 0.00495 0\nvt 0.862291 0.004782 0\nvt 0.862473 0.004634 0\nvt 0.862667 0.004477 0\nvt 0.143839 0.004965 0\nvt 0.862912 0.004285 0\nvt 0.862365 0.004931 0\nvt 0.862581 0.00484 0\nvt 0.862812 0.00474 0\nvt 0.143841 0.005253 0\nvt 0.863101 0.004618 0\nvt 0.8624 0.005127 0\nvt 0.862638 0.005112 0\nvt 0.862894 0.005081 0\nvt 0.143844 0.005595 0\nvt 0.863207 0.005033 0\nvt 0.683472 0.004806 0\nvt 0.683391 0.004782 0\nvt 0.683588 0.004557 0\nvt 0.683422 0.004503 0\nvt 0.68372 0.004348 0\nvt 0.683481 0.004245 0\nvt 0.683897 0.00415 0\nvt 0.683605 0.003978 0\nvt 0.684182 0.003966 0\nvt 0.004157 0.361393 0\nvt 0.683886 0.003685 0\nvt 0.683532 0.004846 0\nvt 0.683704 0.004643 0\nvt 0.683873 0.004484 0\nvt 0.684069 0.004344 0\nvt 0.684337 0.004217 0\nvt 0.683574 0.004906 0\nvt 0.683781 0.004757 0\nvt 0.683969 0.004647 0\nvt 0.684173 0.004551 0\nvt 0.684434 0.004465 0\nvt 0.683827 0.004907 0\nvt 0.684024 0.004847 0\nvt 0.684234 0.004793 0\nvt 0.684493 0.004742 0\nvt 0.68384 0.0051 0\nvt 0.684043 0.005101 0\nvt 0.684259 0.005092 0\nvt 0.684522 0.005072 0\nvt 0.326499 0.004669 0\nvt 0.321285 0.005232 0\nvt 0.326402 0.00461 0\nvt 0.321282 0.004948 0\nvt 0.32657 0.004312 0\nvt 0.326717 0.004448 0\nvt 0.32128 0.004688 0\nvt 0.326806 0.004069 0\nvt 0.326956 0.004284 0\nvt 0.321279 0.004414 0\nvt 0.327124 0.003882 0\nvt 0.327238 0.00416 0\nvt 0.446149 0.183928 0\nvt 0.004157 0.006513 0\nvt 0.321279 0.004087 0\nvt 0.327526 0.003762 0\nvt 0.327588 0.004073 0\nvt 0.326562 0.004743 0\nvt 0.326808 0.004583 0\nvt 0.327047 0.004472 0\nvt 0.327311 0.004388 0\nvt 0.327632 0.004328 0\nvt 0.326599 0.004832 0\nvt 0.326858 0.004728 0\nvt 0.327096 0.004656 0\nvt 0.327351 0.004602 0\nvt 0.327659 0.004563 0\nvt 0.326874 0.004896 0\nvt 0.327113 0.004864 0\nvt 0.327366 0.004838 0\nvt 0.327669 0.004817 0\nvt 0.326863 0.0051 0\nvt 0.327103 0.005118 0\nvt 0.327361 0.005125 0\nvt 0.327668 0.005121 0\nvt 0.505116 0.004819 0\nvt 0.505043 0.004808 0\nvt 0.505056 0.004525 0\nvt 0.50522 0.004566 0\nvt 0.505105 0.004267 0\nvt 0.505344 0.004355 0\nvt 0.505223 0.004001 0\nvt 0.505523 0.004155 0\nvt 0.004157 0.183963 0\nvt 0.50551 0.003703 0\nvt 0.505823 0.003972 0\nvt 0.505171 0.004848 0\nvt 0.505335 0.004641 0\nvt 0.505498 0.004481 0\nvt 0.505696 0.004342 0\nvt 0.505973 0.004221 0\nvt 0.505215 0.004898 0\nvt 0.505413 0.004749 0\nvt 0.505594 0.004638 0\nvt 0.505794 0.004546 0\nvt 0.506055 0.004468 0\nvt 0.505463 0.004897 0\nvt 0.505648 0.004837 0\nvt 0.505848 0.004786 0\nvt 0.506098 0.004743 0\nvt 0.505483 0.005092 0\nvt 0.505666 0.005093 0\nvt 0.505866 0.005087 0\nvt 0.506114 0.005072 0\nvt 0.319911 0.1437 0\nvt 0.145415 0.14372 0\nvt 0.319901 0.143418 0\nvt 0.145405 0.143426 0\nvt 0.319892 0.143117 0\nvt 0.145395 0.143119 0\nvt 0.319883 0.142764 0\nvt 0.145385 0.142765 0\nvt 0.503614 0.142988 0\nvt 0.329095 0.143068 0\nvt 0.503614 0.142743 0\nvt 0.329111 0.142808 0\nvt 0.503614 0.14248 0\nvt 0.329117 0.142525 0\nvt 0.503614 0.142168 0\nvt 0.329117 0.142192 0\nvt 0.68173 0.142993 0\nvt 0.507201 0.143161 0\nvt 0.681766 0.142737 0\nvt 0.507293 0.142912 0\nvt 0.681806 0.142472 0\nvt 0.507365 0.142615 0\nvt 0.681845 0.14216 0\nvt 0.507421 0.142251 0\nvt 0.860092 0.142965 0\nvt 0.68556 0.143255 0\nvt 0.860155 0.142716 0\nvt 0.685662 0.142975 0\nvt 0.860214 0.142454 0\nvt 0.685743 0.142657 0\nvt 0.860269 0.142147 0\nvt 0.685808 0.142275 0\nvt 0.685811 0.004144 0\nvt 0.860331 0.004234 0\nvt 0.685875 0.004403 0\nvt 0.860359 0.004499 0\nvt 0.685917 0.00469 0\nvt 0.860383 0.004779 0\nvt 0.68594 0.005034 0\nvt 0.860397 0.005109 0\nvt 0.50746 0.004151 0\nvt 0.681995 0.004129 0\nvt 0.681974 0.004401 0\nvt 0.507494 0.004415 0\nvt 0.507511 0.004704 0\nvt 0.68196 0.004696 0\nvt 0.681947 0.005048 0\nvt 0.507515 0.005048 0\nvt 0.329111 0.00423 0\nvt 0.503614 0.004286 0\nvt 0.32912 0.004492 0\nvt 0.503614 0.004545 0\nvt 0.329125 0.004772 0\nvt 0.503614 0.004817 0\nvt 0.329124 0.005096 0\nvt 0.503614 0.005133 0\nvt 0.14531 0.004699 0\nvt 0.319807 0.004687 0\nvt 0.145312 0.004966 0\nvt 0.319809 0.004946 0\nvt 0.145314 0.005254 0\nvt 0.319812 0.005229 0\nvt 0.145318 0.005596 0\nvt 0.319814 0.00557 0\nvt 0.684051 0.006373 0\nvt 0.683989 0.140901 0\nvt 0.683849 0.006374 0\nvt 0.683794 0.140901 0\nvt 0.683626 0.006374 0\nvt 0.683577 0.140901 0\nvt 0.68335 0.006371 0\nvt 0.683305 0.140901 0\nvt 0.862425 0.140942 0\nvt 0.862433 0.006405 0\nvt 0.862675 0.00641 0\nvt 0.862687 0.140967 0\nvt 0.862963 0.140997 0\nvt 0.862939 0.00641 0\nvt 0.143902 0.141453 0\nvt 0.863286 0.141027 0\nvt 0.143846 0.006899 0\nvt 0.86326 0.006404 0\nvt 0.50567 0.006367 0\nvt 0.50568 0.140901 0\nvt 0.505508 0.140901 0\nvt 0.505494 0.006368 0\nvt 0.505308 0.140901 0\nvt 0.505298 0.006373 0\nvt 0.505057 0.140901 0\nvt 0.505057 0.006384 0\nvt 0.327003 0.140916 0\nvt 0.327051 0.006389 0\nvt 0.326799 0.006386 0\nvt 0.326736 0.140929 0\nvt 0.326529 0.006375 0\nvt 0.326453 0.140948 0\nvt 0.321286 0.00688 0\nvt 0.326206 0.006361 0\nvt 0.321348 0.141453 0\nvt 0.326125 0.14097 0\nvt 0.136421 0.185415 0\nvt 0.136446 0.359917 0\nvt 0.313884 0.359885 0\nvt 0.313864 0.185392 0\nvt 0.136428 0.182467 0\nvt 0.137891 0.183928 0\nvt 0.136429 0.00798 0\nvt 0.312386 0.183928 0\nvt 0.136434 0.362865 0\nvt 0.137917 0.361407 0\nvt 0.136433 0.537363 0\nvt 0.312412 0.361342 0\nvt 0.136428 0.183928 0\nvt 0.136438 0.361393 0\nvt 0.31388 0.361358 0\nvt 0.136433 0.538834 0\nvt 0.313864 0.183928 0\nvt 0.136429 0.006513 0\n\nf 3/3 2/2 1/1 \nf 1/1 2/2 4/4 \nf 7/7 6/6 5/5 \nf 6/6 7/7 8/8 \nf 11/11 10/10 9/9 \nf 10/10 11/11 12/12 \nf 15/15 14/14 13/13 \nf 14/14 15/15 16/16 \nf 19/19 18/18 17/17 \nf 19/19 17/17 20/20 \nf 23/23 22/22 21/21 \nf 22/22 23/23 24/24 \nf 27/27 26/26 25/25 \nf 30/30 29/29 28/28 \nf 33/35 32/33 31/32 \nf 36/38 35/37 34/36 \nf 39/41 38/40 37/39 \nf 42/44 41/43 40/42 \nf 45/48 44/46 43/45 \nf 48/51 47/50 46/49 \nf 51/56 50/55 49/53 \nf 50/55 51/56 52/57 \nf 55/61 54/59 53/58 \nf 54/59 55/61 56/63 \nf 59/66 58/65 57/64 \nf 57/64 58/65 60/67 \nf 63/71 62/69 61/68 \nf 62/69 63/71 64/73 \nf 67/77 66/75 65/74 \nf 66/75 67/77 68/79 \nf 71/84 70/83 69/81 \nf 70/83 71/84 72/85 \nf 75/90 74/88 73/87 \nf 74/88 75/90 76/91 \nf 79/99 78/96 77/93 \nf 77/93 78/96 80/101 \nf 83/104 82/103 81/102 \nf 81/102 82/103 84/105 \nf 87/108 86/107 85/106 \nf 85/106 86/107 88/109 \nf 91/112 90/111 89/110 \nf 90/111 91/112 92/113 \nf 95/116 94/115 93/114 \nf 93/114 94/115 96/117 \nf 27/27 98/119 97/118 \nf 99/120 97/118 98/119 \nf 97/118 99/120 100/121 \nf 101/122 100/121 99/120 \nf 100/121 101/122 102/123 \nf 102/123 104/125 103/124 \nf 104/125 102/123 101/122 \nf 103/124 106/129 105/127 \nf 106/129 103/124 104/125 \nf 27/27 97/118 107/130 \nf 100/121 107/130 97/118 \nf 107/130 100/121 108/131 \nf 102/123 108/131 100/121 \nf 108/131 102/123 109/132 \nf 103/124 109/132 102/123 \nf 109/132 103/124 110/133 \nf 110/133 105/127 111/135 \nf 105/127 110/133 103/124 \nf 27/27 107/130 112/136 \nf 112/136 108/131 113/137 \nf 108/131 112/136 107/130 \nf 113/137 109/132 114/138 \nf 109/132 113/137 108/131 \nf 109/132 115/139 114/138 \nf 115/139 109/132 110/133 \nf 115/139 111/135 116/141 \nf 111/135 115/139 110/133 \nf 27/27 112/136 26/26 \nf 112/136 117/142 26/26 \nf 117/142 112/136 113/137 \nf 113/137 118/143 117/142 \nf 118/143 113/137 114/138 \nf 114/138 119/144 118/143 \nf 119/144 114/138 115/139 \nf 115/139 120/146 119/144 \nf 120/146 115/139 116/141 \nf 26/26 121/147 25/25 \nf 121/147 26/26 117/142 \nf 117/142 122/148 121/147 \nf 122/148 117/142 118/143 \nf 118/143 123/149 122/148 \nf 123/149 118/143 119/144 \nf 119/144 124/152 123/149 \nf 124/152 119/144 120/146 \nf 30/30 126/154 125/153 \nf 125/153 128/156 127/155 \nf 128/156 125/153 126/154 \nf 127/155 130/158 129/157 \nf 130/158 127/155 128/156 \nf 129/157 132/160 131/159 \nf 132/160 129/157 130/158 \nf 131/159 134/162 133/161 \nf 134/162 131/159 132/160 \nf 30/30 125/153 135/163 \nf 127/155 135/163 125/153 \nf 135/163 127/155 136/164 \nf 129/157 136/164 127/155 \nf 136/164 129/157 137/165 \nf 137/165 131/159 138/166 \nf 131/159 137/165 129/157 \nf 138/166 133/161 139/167 \nf 133/161 138/166 131/159 \nf 30/30 135/163 140/168 \nf 141/169 135/163 136/164 \nf 135/163 141/169 140/168 \nf 137/165 141/169 136/164 \nf 141/169 137/165 142/170 \nf 137/165 138/166 143/171 \nf 143/171 142/170 137/165 \nf 143/171 139/167 144/172 \nf 139/167 143/171 138/166 \nf 30/30 140/168 29/29 \nf 140/168 141/169 145/173 \nf 140/168 145/173 29/29 \nf 141/169 142/170 146/174 \nf 141/169 146/174 145/173 \nf 143/171 147/175 142/170 \nf 147/175 146/174 142/170 \nf 144/172 148/176 143/171 \nf 148/176 147/175 143/171 \nf 29/29 145/173 149/177 \nf 149/177 28/28 29/29 \nf 146/174 150/178 145/173 \nf 150/178 149/177 145/173 \nf 147/175 151/179 146/174 \nf 151/179 150/178 146/174 \nf 148/176 152/180 147/175 \nf 152/180 151/179 147/175 \nf 33/35 154/182 153/181 \nf 155/183 153/181 154/182 \nf 153/181 155/183 156/184 \nf 156/184 158/186 157/185 \nf 158/186 156/184 155/183 \nf 157/185 160/188 159/187 \nf 160/188 157/185 158/186 \nf 159/187 162/190 161/189 \nf 162/190 159/187 160/188 \nf 33/35 153/181 163/191 \nf 156/184 163/191 153/181 \nf 163/191 156/184 164/192 \nf 157/185 164/192 156/184 \nf 164/192 157/185 165/193 \nf 165/193 159/187 166/194 \nf 159/187 165/193 157/185 \nf 166/194 161/189 167/195 \nf 161/189 166/194 159/187 \nf 33/35 163/191 168/196 \nf 163/191 164/192 169/197 \nf 169/197 168/196 163/191 \nf 165/193 169/197 164/192 \nf 169/197 165/193 170/198 \nf 171/199 170/198 165/193 \nf 171/199 165/193 166/194 \nf 171/199 167/195 172/200 \nf 167/195 171/199 166/194 \nf 33/35 168/196 32/33 \nf 168/196 169/197 173/201 \nf 173/201 32/33 168/196 \nf 170/198 174/202 169/197 \nf 174/202 173/201 169/197 \nf 174/202 170/198 175/203 \nf 175/203 170/198 171/199 \nf 175/203 171/199 176/204 \nf 176/204 171/199 172/200 \nf 32/33 177/206 31/32 \nf 177/206 32/33 173/201 \nf 177/206 173/201 178/208 \nf 178/208 173/201 174/202 \nf 178/208 174/202 179/210 \nf 179/210 174/202 175/203 \nf 175/203 180/213 179/210 \nf 180/213 175/203 176/204 \nf 36/38 182/215 181/214 \nf 183/216 181/214 182/215 \nf 181/214 183/216 184/217 \nf 185/218 184/217 183/216 \nf 184/217 185/218 186/219 \nf 186/219 188/221 187/220 \nf 188/221 186/219 185/218 \nf 187/220 190/223 189/222 \nf 190/223 187/220 188/221 \nf 36/38 181/214 191/224 \nf 184/217 191/224 181/214 \nf 191/224 184/217 192/225 \nf 186/219 192/225 184/217 \nf 192/225 186/219 193/226 \nf 187/220 193/226 186/219 \nf 193/226 187/220 194/227 \nf 194/227 189/222 195/228 \nf 189/222 194/227 187/220 \nf 36/38 191/224 196/229 \nf 191/224 192/225 197/230 \nf 197/230 196/229 191/224 \nf 193/226 198/231 192/225 \nf 198/231 197/230 192/225 \nf 199/232 198/231 193/226 \nf 199/232 193/226 194/227 \nf 199/232 195/228 200/233 \nf 195/228 199/232 194/227 \nf 36/38 196/229 35/37 \nf 197/230 201/234 196/229 \nf 201/234 35/37 196/229 \nf 198/231 202/235 197/230 \nf 202/235 201/234 197/230 \nf 202/235 198/231 203/236 \nf 203/236 198/231 199/232 \nf 203/236 199/232 204/237 \nf 204/237 199/232 200/233 \nf 35/37 205/238 34/36 \nf 205/238 35/37 201/234 \nf 201/234 206/239 205/238 \nf 206/239 201/234 202/235 \nf 202/235 207/240 206/239 \nf 207/240 202/235 203/236 \nf 207/240 203/236 208/241 \nf 208/241 203/236 204/237 \nf 39/41 210/243 209/242 \nf 211/244 209/242 210/243 \nf 209/242 211/244 212/245 \nf 212/245 214/247 213/246 \nf 214/247 212/245 211/244 \nf 213/246 216/249 215/248 \nf 216/249 213/246 214/247 \nf 215/248 218/255 217/251 \nf 218/255 215/248 216/249 \nf 39/41 209/242 219/256 \nf 219/256 212/245 220/257 \nf 212/245 219/256 209/242 \nf 220/257 213/246 221/258 \nf 213/246 220/257 212/245 \nf 215/248 221/258 213/246 \nf 221/258 215/248 222/259 \nf 222/259 217/251 223/261 \nf 217/251 222/259 215/248 \nf 39/41 219/256 224/262 \nf 224/262 220/257 225/263 \nf 220/257 224/262 219/256 \nf 225/263 221/258 226/264 \nf 221/258 225/263 220/257 \nf 222/259 226/264 221/258 \nf 226/264 222/259 227/265 \nf 227/265 223/261 228/267 \nf 223/261 227/265 222/259 \nf 39/41 224/262 38/40 \nf 229/268 224/262 225/263 \nf 224/262 229/268 38/40 \nf 230/269 225/263 226/264 \nf 225/263 230/269 229/268 \nf 226/264 231/270 230/269 \nf 231/270 226/264 227/265 \nf 227/265 232/272 231/270 \nf 232/272 227/265 228/267 \nf 38/40 229/268 233/273 \nf 38/40 233/273 37/39 \nf 229/268 234/274 233/273 \nf 234/274 229/268 230/269 \nf 230/269 235/275 234/274 \nf 235/275 230/269 231/270 \nf 231/270 236/277 235/275 \nf 236/277 231/270 232/272 \nf 42/44 238/279 237/278 \nf 237/278 240/281 239/280 \nf 240/281 237/278 238/279 \nf 239/280 242/283 241/282 \nf 242/283 239/280 240/281 \nf 241/282 244/285 243/284 \nf 244/285 241/282 242/283 \nf 243/284 246/288 245/286 \nf 246/288 243/284 244/285 \nf 42/44 237/278 247/289 \nf 239/280 247/289 237/278 \nf 247/289 239/280 248/290 \nf 241/282 248/290 239/280 \nf 248/290 241/282 249/291 \nf 249/291 243/284 250/292 \nf 243/284 249/291 241/282 \nf 250/292 245/286 251/293 \nf 245/286 250/292 243/284 \nf 42/44 247/289 252/294 \nf 253/295 247/289 248/290 \nf 247/289 253/295 252/294 \nf 254/296 248/290 249/291 \nf 248/290 254/296 253/295 \nf 249/291 250/292 255/297 \nf 249/291 255/297 254/296 \nf 250/292 251/293 256/298 \nf 250/292 256/298 255/297 \nf 42/44 252/294 41/43 \nf 252/294 253/295 257/299 \nf 252/294 257/299 41/43 \nf 253/295 254/296 258/300 \nf 253/295 258/300 257/299 \nf 254/296 255/297 259/301 \nf 254/296 259/301 258/300 \nf 255/297 256/298 260/302 \nf 255/297 260/302 259/301 \nf 41/43 257/299 261/303 \nf 261/303 40/42 41/43 \nf 257/299 258/300 262/304 \nf 257/299 262/304 261/303 \nf 258/300 259/301 263/305 \nf 258/300 263/305 262/304 \nf 259/301 260/302 264/306 \nf 259/301 264/306 263/305 \nf 45/48 266/309 265/307 \nf 267/311 265/307 266/309 \nf 265/307 267/311 268/312 \nf 269/314 268/312 267/311 \nf 268/312 269/314 270/315 \nf 271/317 270/315 269/314 \nf 270/315 271/317 272/318 \nf 273/322 272/318 271/317 \nf 272/318 273/322 274/323 \nf 45/48 265/307 275/324 \nf 268/312 275/324 265/307 \nf 275/324 268/312 276/325 \nf 270/315 276/325 268/312 \nf 276/325 270/315 277/326 \nf 272/318 277/326 270/315 \nf 277/326 272/318 278/327 \nf 274/323 278/327 272/318 \nf 278/327 274/323 279/328 \nf 45/48 275/324 280/329 \nf 281/330 280/329 275/324 \nf 281/330 275/324 276/325 \nf 281/330 277/326 282/331 \nf 277/326 281/330 276/325 \nf 278/327 282/331 277/326 \nf 282/331 278/327 283/332 \nf 279/328 283/332 278/327 \nf 283/332 279/328 284/333 \nf 45/48 280/329 44/46 \nf 280/329 285/334 44/46 \nf 285/334 280/329 281/330 \nf 281/330 286/335 285/334 \nf 286/335 281/330 282/331 \nf 286/335 282/331 287/336 \nf 287/336 282/331 283/332 \nf 287/336 283/332 288/337 \nf 288/337 283/332 284/333 \nf 44/46 289/338 43/45 \nf 289/338 44/46 285/334 \nf 285/334 290/339 289/338 \nf 290/339 285/334 286/335 \nf 286/335 291/340 290/339 \nf 291/340 286/335 287/336 \nf 291/340 287/336 292/341 \nf 292/341 287/336 288/337 \nf 48/51 294/343 293/342 \nf 295/344 293/342 294/343 \nf 293/342 295/344 296/345 \nf 297/346 296/345 295/344 \nf 296/345 297/346 298/347 \nf 299/348 298/347 297/346 \nf 298/347 299/348 300/349 \nf 301/351 300/349 299/348 \nf 300/349 301/351 302/352 \nf 48/51 293/342 303/353 \nf 296/345 303/353 293/342 \nf 303/353 296/345 304/354 \nf 298/347 304/354 296/345 \nf 304/354 298/347 305/355 \nf 300/349 305/355 298/347 \nf 305/355 300/349 306/356 \nf 302/352 306/356 300/349 \nf 306/356 302/352 307/357 \nf 48/51 303/353 308/358 \nf 303/353 304/354 309/359 \nf 309/359 308/358 303/353 \nf 305/355 309/359 304/354 \nf 309/359 305/355 310/360 \nf 310/360 306/356 311/361 \nf 306/356 310/360 305/355 \nf 306/356 307/357 312/362 \nf 312/362 311/361 306/356 \nf 48/51 308/358 47/50 \nf 308/358 309/359 313/363 \nf 313/363 47/50 308/358 \nf 310/360 314/364 309/359 \nf 314/364 313/363 309/359 \nf 311/361 315/365 310/360 \nf 315/365 314/364 310/360 \nf 312/362 316/366 311/361 \nf 316/366 315/365 311/361 \nf 47/50 317/367 46/49 \nf 317/367 47/50 313/363 \nf 313/363 318/368 317/367 \nf 318/368 313/363 314/364 \nf 315/365 319/369 314/364 \nf 319/369 318/368 314/364 \nf 316/366 320/370 315/365 \nf 320/370 319/369 315/365 \nf 322/372 321/371 51/56 \nf 51/56 321/371 52/57 \nf 324/374 323/373 322/372 \nf 322/372 323/373 321/371 \nf 326/376 325/375 324/374 \nf 324/374 325/375 323/373 \nf 328/378 327/377 326/376 \nf 326/376 327/377 325/375 \nf 54/59 329/379 53/58 \nf 329/379 54/59 330/380 \nf 329/379 332/382 331/381 \nf 332/382 329/379 330/380 \nf 331/381 334/384 333/383 \nf 334/384 331/381 332/382 \nf 334/384 335/385 333/383 \nf 335/385 334/384 336/386 \nf 57/64 338/388 337/387 \nf 338/388 57/64 60/67 \nf 337/387 338/388 339/389 \nf 339/389 338/388 340/390 \nf 339/389 340/390 341/391 \nf 341/391 340/390 342/392 \nf 341/391 344/394 343/393 \nf 344/394 341/391 342/392 \nf 61/68 346/396 345/395 \nf 346/396 61/68 62/69 \nf 345/395 346/396 347/397 \nf 348/398 347/397 346/396 \nf 347/397 350/400 349/399 \nf 350/400 347/397 348/398 \nf 349/399 350/400 351/401 \nf 352/402 351/401 350/400 \nf 65/74 66/75 353/403 \nf 354/404 353/403 66/75 \nf 353/403 356/406 355/405 \nf 356/406 353/403 354/404 \nf 356/406 357/407 355/405 \nf 357/407 356/406 358/408 \nf 358/408 359/409 357/407 \nf 359/409 358/408 360/410 \nf 362/412 361/411 71/84 \nf 71/84 361/411 72/85 \nf 363/413 361/411 362/412 \nf 361/411 363/413 364/414 \nf 366/416 365/415 363/413 \nf 363/413 365/415 364/414 \nf 367/417 365/415 366/416 \nf 365/415 367/417 368/418 \nf 76/91 369/419 74/88 \nf 369/419 76/91 370/420 \nf 369/419 372/422 371/421 \nf 372/422 369/419 370/420 \nf 371/421 372/422 373/423 \nf 374/424 373/423 372/422 \nf 373/423 376/426 375/425 \nf 376/426 373/423 374/424 \nf 77/92 378/428 377/427 \nf 378/428 77/92 80/100 \nf 377/427 378/428 379/429 \nf 379/429 378/428 380/430 \nf 379/429 380/430 381/431 \nf 381/431 380/430 382/432 \nf 382/432 383/433 381/431 \nf 383/433 382/432 384/434 \nf 81/102 386/436 385/435 \nf 386/436 81/102 84/105 \nf 385/435 386/436 387/437 \nf 387/437 386/436 388/438 \nf 387/437 390/440 389/439 \nf 390/440 387/437 388/438 \nf 390/440 391/441 389/439 \nf 391/441 390/440 392/442 \nf 394/444 393/443 87/108 \nf 87/108 393/443 86/107 \nf 395/445 393/443 394/444 \nf 393/443 395/445 396/446 \nf 396/446 398/448 397/447 \nf 398/448 396/446 395/445 \nf 398/448 399/450 397/447 \nf 399/450 398/448 400/452 \nf 90/111 401/453 89/110 \nf 401/453 90/111 402/454 \nf 403/455 401/453 402/454 \nf 401/453 403/455 404/456 \nf 405/457 404/456 403/455 \nf 404/456 405/457 406/458 \nf 407/459 406/458 405/457 \nf 406/458 407/459 408/460 \nf 409/461 94/115 95/116 \nf 94/115 409/461 410/462 \nf 412/464 411/463 409/461 \nf 409/461 411/463 410/462 \nf 411/463 412/464 413/465 \nf 414/466 413/465 412/464 \nf 413/465 416/470 415/468 \nf 416/470 413/465 414/466 \nf 1/1 58/65 59/66 \nf 58/65 1/1 4/4 \nf 49/52 50/54 3/3 \nf 3/3 50/54 2/2 \nf 418/472 417/471 7/7 \nf 7/7 417/471 8/8 \nf 5/5 420/474 419/473 \nf 420/474 5/5 6/6 \nf 9/9 10/10 83/104 \nf 83/104 10/10 82/103 \nf 85/106 12/12 11/11 \nf 12/12 85/106 88/109 \nf 93/114 17/17 18/18 \nf 17/17 93/114 96/117 \nf 19/19 20/20 407/459 \nf 407/459 20/20 408/460 \nf 36/38 53/58 182/215 \nf 53/58 36/38 55/61 \nf 176/204 56/63 180/213 \nf 56/63 176/204 54/59 \nf 124/152 63/71 123/149 \nf 61/68 123/149 63/71 \nf 62/69 30/30 28/28 \nf 30/30 62/69 64/73 \nf 246/288 65/74 245/286 \nf 65/74 246/288 67/77 \nf 66/75 218/255 216/249 \nf 218/255 66/75 68/79 \nf 273/322 74/88 274/323 \nf 74/88 273/322 73/87 \nf 299/348 75/90 301/351 \nf 75/90 299/348 76/91 \nf 53/58 183/216 182/215 \nf 183/216 53/58 329/379 \nf 172/200 54/59 176/204 \nf 54/59 172/200 330/380 \nf 329/379 185/218 183/216 \nf 185/218 329/379 331/381 \nf 167/195 332/382 172/200 \nf 330/380 172/200 332/382 \nf 185/218 333/383 188/221 \nf 333/383 185/218 331/381 \nf 161/189 334/384 167/195 \nf 332/382 167/195 334/384 \nf 333/383 190/223 188/221 \nf 190/223 333/383 335/385 \nf 162/190 336/386 161/189 \nf 334/384 161/189 336/386 \nf 123/149 345/395 122/148 \nf 345/395 123/149 61/68 \nf 149/177 62/69 28/28 \nf 62/69 149/177 346/396 \nf 122/148 345/395 121/147 \nf 347/397 121/147 345/395 \nf 348/398 149/177 150/178 \nf 149/177 348/398 346/396 \nf 121/147 347/397 25/25 \nf 349/399 25/25 347/397 \nf 151/179 348/398 150/178 \nf 348/398 151/179 350/400 \nf 25/25 351/401 27/27 \nf 351/401 25/25 349/399 \nf 352/402 151/179 152/180 \nf 151/179 352/402 350/400 \nf 245/286 353/403 251/293 \nf 353/403 245/286 65/74 \nf 214/247 66/75 216/249 \nf 66/75 214/247 354/404 \nf 353/403 256/298 251/293 \nf 256/298 353/403 355/405 \nf 211/244 356/406 214/247 \nf 354/404 214/247 356/406 \nf 256/298 357/407 260/302 \nf 357/407 256/298 355/405 \nf 210/243 358/408 211/244 \nf 356/406 211/244 358/408 \nf 357/407 264/306 260/302 \nf 264/306 357/407 359/409 \nf 39/41 360/410 210/243 \nf 358/408 210/243 360/410 \nf 74/88 279/328 274/323 \nf 279/328 74/88 369/419 \nf 297/346 370/420 299/348 \nf 76/91 299/348 370/420 \nf 279/328 371/421 284/333 \nf 371/421 279/328 369/419 \nf 295/344 370/420 297/346 \nf 370/420 295/344 372/422 \nf 284/333 371/421 288/337 \nf 373/423 288/337 371/421 \nf 294/343 372/422 295/344 \nf 372/422 294/343 374/424 \nf 288/337 373/423 292/341 \nf 375/425 292/341 373/423 \nf 376/426 294/343 48/51 \nf 294/343 376/426 374/424 \nf 63/70 1/1 64/72 \nf 1/1 63/70 3/3 \nf 4/4 2/2 56/62 \nf 4/4 56/62 55/60 \nf 6/6 8/8 421/476 \nf 6/6 421/476 422/478 \nf 424/482 423/480 7/7 \nf 424/482 7/7 5/5 \nf 16/16 91/112 14/14 \nf 91/112 16/16 92/113 \nf 15/15 391/441 392/442 \nf 391/441 15/15 13/13 \nf 24/24 23/23 400/451 \nf 399/449 400/451 23/23 \nf 22/22 416/469 21/21 \nf 416/469 22/22 415/467 \nf 52/57 179/209 50/55 \nf 50/55 179/209 180/212 \nf 120/145 49/53 124/151 \nf 49/53 120/145 51/56 \nf 30/30 59/66 126/154 \nf 126/154 59/66 57/64 \nf 58/65 36/38 60/67 \nf 60/67 36/38 34/36 \nf 72/85 301/351 70/83 \nf 301/351 72/85 302/352 \nf 244/285 71/84 246/288 \nf 246/288 71/84 69/81 \nf 218/254 79/98 217/250 \nf 217/250 79/98 77/92 \nf 78/95 271/316 80/100 \nf 271/316 78/95 273/321 \nf 321/371 179/209 52/57 \nf 179/209 321/371 178/207 \nf 116/140 322/372 120/145 \nf 120/145 322/372 51/56 \nf 323/373 178/207 321/371 \nf 178/207 323/373 177/205 \nf 111/134 322/372 116/140 \nf 322/372 111/134 324/374 \nf 325/375 31/31 323/373 \nf 323/373 31/31 177/205 \nf 105/126 324/374 111/134 \nf 324/374 105/126 326/376 \nf 327/377 31/31 325/375 \nf 31/31 327/377 33/34 \nf 106/128 328/378 105/126 \nf 105/126 328/378 326/376 \nf 126/154 337/387 128/156 \nf 337/387 126/154 57/64 \nf 60/67 34/36 338/388 \nf 338/388 34/36 205/238 \nf 128/156 337/387 130/158 \nf 130/158 337/387 339/389 \nf 338/388 205/238 340/390 \nf 340/390 205/238 206/239 \nf 130/158 339/389 132/160 \nf 132/160 339/389 341/391 \nf 340/390 206/239 342/392 \nf 342/392 206/239 207/240 \nf 132/160 343/393 134/162 \nf 343/393 132/160 341/391 \nf 342/392 207/240 344/394 \nf 344/394 207/240 208/241 \nf 361/411 307/357 72/85 \nf 72/85 307/357 302/352 \nf 362/412 244/285 242/283 \nf 244/285 362/412 71/84 \nf 364/414 312/362 361/411 \nf 361/411 312/362 307/357 \nf 240/281 362/412 242/283 \nf 362/412 240/281 363/413 \nf 365/415 316/366 364/414 \nf 364/414 316/366 312/362 \nf 366/416 240/281 238/279 \nf 240/281 366/416 363/413 \nf 368/418 320/370 365/415 \nf 365/415 320/370 316/366 \nf 42/44 367/417 238/279 \nf 238/279 367/417 366/416 \nf 217/250 377/427 223/260 \nf 377/427 217/250 77/92 \nf 80/100 269/313 378/428 \nf 269/313 80/100 271/316 \nf 223/260 377/427 228/266 \nf 228/266 377/427 379/429 \nf 378/428 269/313 380/430 \nf 380/430 269/313 267/310 \nf 228/266 381/431 232/271 \nf 381/431 228/266 379/429 \nf 380/430 267/310 382/432 \nf 382/432 267/310 266/308 \nf 232/271 383/433 236/276 \nf 383/433 232/271 381/431 \nf 382/432 266/308 384/434 \nf 384/434 266/308 45/47 \nf 64/72 59/66 30/30 \nf 59/66 64/72 1/1 \nf 58/65 4/4 55/60 \nf 58/65 55/60 36/38 \nf 2/2 50/54 180/211 \nf 2/2 180/211 56/62 \nf 124/150 3/3 63/70 \nf 3/3 124/150 49/52 \nf 417/471 421/476 8/8 \nf 421/476 417/471 425/483 \nf 426/484 7/7 423/480 \nf 7/7 426/484 418/472 \nf 424/482 5/5 427/485 \nf 427/485 5/5 419/473 \nf 420/474 6/6 422/478 \nf 420/474 422/478 428/487 \nf 359/409 360/410 11/11 \nf 359/409 11/11 9/9 \nf 10/10 12/12 351/401 \nf 10/10 351/401 352/402 \nf 367/417 14/14 368/418 \nf 14/14 367/417 13/13 \nf 15/15 344/394 16/16 \nf 344/394 15/15 343/393 \nf 17/17 376/426 20/20 \nf 376/426 17/17 375/425 \nf 335/385 336/386 18/18 \nf 335/385 18/18 19/19 \nf 22/22 24/24 383/433 \nf 383/433 384/434 22/22 \nf 328/378 21/21 327/377 \nf 21/21 328/378 23/23 \nf 264/306 81/102 263/305 \nf 81/102 264/306 83/104 \nf 82/103 148/176 84/105 \nf 148/176 82/103 152/180 \nf 86/107 98/119 88/109 \nf 88/109 98/119 27/27 \nf 37/39 85/106 39/41 \nf 85/106 37/39 87/108 \nf 320/370 89/110 319/369 \nf 89/110 320/370 91/112 \nf 204/237 90/111 208/241 \nf 92/113 208/241 90/111 \nf 94/115 291/340 96/117 \nf 96/117 291/340 292/341 \nf 95/116 162/190 160/188 \nf 162/190 95/116 93/114 \nf 263/305 81/102 262/304 \nf 262/304 81/102 385/435 \nf 84/105 144/172 386/436 \nf 144/172 84/105 148/176 \nf 262/304 387/437 261/303 \nf 387/437 262/304 385/435 \nf 386/436 144/172 388/438 \nf 388/438 144/172 139/167 \nf 261/303 389/439 40/42 \nf 389/439 261/303 387/437 \nf 133/161 390/440 139/167 \nf 388/438 139/167 390/440 \nf 389/439 42/44 40/42 \nf 42/44 389/439 391/441 \nf 134/162 392/442 133/161 \nf 390/440 133/161 392/442 \nf 393/443 99/120 86/107 \nf 86/107 99/120 98/119 \nf 233/273 394/444 37/39 \nf 37/39 394/444 87/108 \nf 99/120 396/446 101/122 \nf 396/446 99/120 393/443 \nf 234/274 395/445 233/273 \nf 394/444 233/273 395/445 \nf 101/122 397/447 104/125 \nf 397/447 101/122 396/446 \nf 235/275 395/445 234/274 \nf 395/445 235/275 398/448 \nf 397/447 106/129 104/125 \nf 106/129 397/447 399/450 \nf 236/277 400/452 235/275 \nf 398/448 235/275 400/452 \nf 89/110 318/368 319/369 \nf 318/368 89/110 401/453 \nf 200/233 402/454 204/237 \nf 90/111 204/237 402/454 \nf 404/456 318/368 401/453 \nf 318/368 404/456 317/367 \nf 195/228 403/455 200/233 \nf 200/233 403/455 402/454 \nf 406/458 46/49 404/456 \nf 404/456 46/49 317/367 \nf 189/222 403/455 195/228 \nf 403/455 189/222 405/457 \nf 408/460 46/49 406/458 \nf 46/49 408/460 48/51 \nf 190/223 407/459 189/222 \nf 189/222 407/459 405/457 \nf 410/462 291/340 94/115 \nf 291/340 410/462 290/339 \nf 158/186 409/461 160/188 \nf 160/188 409/461 95/116 \nf 411/463 290/339 410/462 \nf 290/339 411/463 289/338 \nf 155/183 409/461 158/186 \nf 409/461 155/183 412/464 \nf 289/338 411/463 43/45 \nf 413/465 43/45 411/463 \nf 414/466 155/183 154/182 \nf 155/183 414/466 412/464 \nf 43/45 415/468 45/48 \nf 415/468 43/45 413/465 \nf 33/35 414/466 154/182 \nf 414/466 33/35 416/470 \nf 359/409 9/9 264/306 \nf 264/306 9/9 83/104 \nf 82/103 10/10 352/402 \nf 82/103 352/402 152/180 \nf 88/109 351/401 12/12 \nf 351/401 88/109 27/27 \nf 39/41 11/11 360/410 \nf 11/11 39/41 85/106 \nf 96/117 375/425 17/17 \nf 375/425 96/117 292/341 \nf 162/190 18/18 336/386 \nf 18/18 162/190 93/114 \nf 19/19 190/223 335/385 \nf 190/223 19/19 407/459 \nf 20/20 48/51 408/460 \nf 48/51 20/20 376/426 \nf 368/418 91/112 320/370 \nf 91/112 368/418 14/14 \nf 16/16 344/394 92/113 \nf 344/394 208/241 92/113 \nf 392/442 343/393 15/15 \nf 343/393 392/442 134/162 \nf 42/44 13/13 367/417 \nf 13/13 42/44 391/441 \nf 400/451 236/276 24/24 \nf 236/276 383/433 24/24 \nf 399/449 328/378 106/128 \nf 328/378 399/449 23/23 \nf 21/21 33/34 327/377 \nf 33/34 21/21 416/469 \nf 22/22 384/434 415/467 \nf 384/434 45/47 415/467 \nf 418/472 70/82 417/471 \nf 70/82 418/472 69/80 \nf 419/473 78/94 79/97 \nf 78/94 419/473 420/474 \nf 73/86 421/475 75/89 \nf 421/475 73/86 422/477 \nf 423/479 424/481 68/78 \nf 423/479 68/78 67/76 \nf 75/89 421/475 301/350 \nf 301/350 421/475 425/483 \nf 301/350 425/483 70/82 \nf 417/471 70/82 425/483 \nf 423/479 246/287 426/484 \nf 246/287 423/479 67/76 \nf 69/80 418/472 246/287 \nf 426/484 246/287 418/472 \nf 427/486 218/253 424/481 \nf 424/481 218/253 68/78 \nf 218/252 419/473 79/97 \nf 419/473 218/252 427/485 \nf 273/320 428/488 73/86 \nf 73/86 428/488 422/477 \nf 78/94 428/487 273/319 \nf 428/487 78/94 420/474 \n\ng box5 bottom_Mesh polySurface133\nusemtl ribbon1\nv -0.079777 0.004642 0.005426\nv -0.07977 0.004642 -0.019925\nv -0.079102 0.117828 0.005426\nv -0.079094 0.117828 -0.019925\nv 0.080007 0.004642 0.005463\nv 0.079297 0.117915 -0.019887\nv 0.080015 0.004642 -0.019887\nv 0.07929 0.117915 0.005464\nv 0.078264 -0.000312 0.005463\nv 0.078272 -0.000312 -0.019888\nv 0.077473 -0.000408 0.005463\nv 0.077481 -0.000408 -0.019888\nv -0.078035 -0.000312 0.005427\nv -0.077243 -0.000408 0.005427\nv -0.078027 -0.000312 -0.019924\nv -0.077235 -0.000408 -0.019924\nv -0.077359 0.122787 0.005426\nv -0.077351 0.122787 -0.019925\nv -0.076567 0.122882 0.005426\nv -0.07656 0.122882 -0.019924\nv 0.076755 0.122969 0.005463\nv 0.076763 0.122969 -0.019888\nv 0.077547 0.122873 0.005463\nv 0.077554 0.122873 -0.019887\nv 0.079009 0.000014 0.005463\nv 0.079017 0.000014 -0.019888\nv 0.079584 0.000589 0.005463\nv 0.079591 0.000589 -0.019888\nv 0.07991 0.001334 0.005463\nv 0.079917 0.001334 -0.019887\nv 0.080006 0.002125 0.005463\nv 0.080013 0.002125 -0.019887\nv -0.07878 0.000014 0.005426\nv -0.078772 0.000015 -0.019924\nv -0.079354 0.000589 0.005426\nv -0.079346 0.000589 -0.019925\nv -0.07968 0.001334 0.005426\nv -0.079672 0.001334 -0.019925\nv -0.079776 0.002125 0.005426\nv -0.079768 0.002125 -0.019925\nv -0.078104 0.12246 0.005426\nv -0.078096 0.12246 -0.019925\nv -0.078678 0.121886 0.005426\nv -0.078671 0.121886 -0.019925\nv -0.079004 0.121141 0.005426\nv -0.078997 0.121141 -0.019925\nv -0.0791 0.12035 0.005426\nv -0.079093 0.12035 -0.019925\nv 0.078292 0.122547 0.005464\nv 0.078299 0.122547 -0.019887\nv 0.078866 0.121973 0.005464\nv 0.078874 0.121973 -0.019887\nv 0.0792 0.121228 -0.019887\nv 0.079192 0.121228 0.005464\nv 0.079296 0.120436 -0.019887\nv 0.079288 0.120436 0.005464\nv -0.074359 -0.000409 -0.019923\nv -0.074367 -0.000409 0.005428\nv 0.074597 -0.000409 0.005462\nv 0.074604 -0.000409 -0.019889\nv -0.078909 0.004644 -0.019924\nv -0.078917 0.004644 0.005426\nv -0.078241 0.117831 0.005426\nv -0.078233 0.117831 -0.019925\nv 0.078437 0.117917 -0.019887\nv 0.078429 0.117917 0.005464\nv 0.079146 0.004644 0.005463\nv 0.079154 0.004644 -0.019888\nv 0.078045 0.000521 0.005463\nv 0.077425 0.000452 0.005463\nv 0.077433 0.000452 -0.019888\nv 0.078053 0.000521 -0.019888\nv -0.077815 0.000521 0.005427\nv -0.077807 0.000521 -0.019924\nv -0.077196 0.000452 0.005427\nv -0.077188 0.000452 -0.019924\nv -0.077139 0.121954 0.005426\nv -0.07652 0.122023 0.005426\nv -0.076512 0.122023 -0.019924\nv -0.077132 0.121954 -0.019925\nv 0.077327 0.122041 0.005463\nv 0.077335 0.122041 -0.019887\nv 0.076708 0.12211 0.005463\nv 0.076715 0.12211 -0.019888\nv 0.078535 0.000727 -0.019888\nv 0.078527 0.000727 0.005463\nv 0.078871 0.001071 0.005463\nv 0.078879 0.001071 -0.019888\nv 0.079085 0.001553 -0.019888\nv 0.079078 0.001553 0.005463\nv 0.079154 0.002173 -0.019888\nv 0.079146 0.002173 0.005463\nv -0.078289 0.000727 -0.019924\nv -0.078297 0.000727 0.005427\nv -0.078634 0.001071 -0.019924\nv -0.078641 0.001071 0.005426\nv -0.07884 0.001553 -0.019924\nv -0.078848 0.001553 0.005426\nv -0.078909 0.002173 -0.019924\nv -0.078917 0.002173 0.005426\nv -0.077614 0.121748 -0.019925\nv -0.077621 0.121748 0.005426\nv -0.077966 0.121404 0.005426\nv -0.077958 0.121404 -0.019925\nv -0.078172 0.120922 0.005426\nv -0.078164 0.120922 -0.019925\nv -0.078241 0.120302 0.005426\nv -0.078233 0.120302 -0.019925\nv 0.077817 0.121835 -0.019887\nv 0.077809 0.121835 0.005463\nv 0.078154 0.12149 0.005464\nv 0.078161 0.12149 -0.019887\nv 0.07836 0.121008 0.005464\nv 0.078368 0.121008 -0.019887\nv 0.078429 0.120389 0.005464\nv 0.078437 0.120389 -0.019887\nv -0.074367 0.000452 0.005428\nv -0.074359 0.000452 -0.019923\nv 0.074597 0.000452 0.005462\nv 0.074604 0.000452 -0.019889\n\nvt 0.665 0.335238 0\nvt 0.335 0.335238 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.335 0.335238 0\nvt 0.665 0.664762 0\nvt 0.665 0.335238 0\nvt 0.335 0.664762 0\nvt 0.333933 0.788733 0\nvt 0.664467 0.642938 0\nvt 0.335 0.995 0\nvt 0.665 0.995 0\nvt 0.646833 0.005143 0\nvt 0.335 0.005 0\nvt 0.790667 0.005143 0\nvt 0.665 0.005 0\nvt 0.664467 0.211229 0\nvt 0.333933 0.3571 0\nvt 0.665 0.005 0\nvt 0.335 0.005 0\nvt 0.665 0.995 0\nvt 0.335 0.995 0\nvt 0.353167 0.996 0\nvt 0.209333 0.995429 0\nvt 0.3334 0.665838 0\nvt 0.6642 0.457562 0\nvt 0.3334 0.542981 0\nvt 0.6642 0.334705 0\nvt 0.333933 0.357662 0\nvt 0.664467 0.211867 0\nvt 0.335 0.005714 0\nvt 0.665 0.005714 0\nvt 0.792 0.005286 0\nvt 0.833 0.005286 0\nvt 0.833 0.005429 0\nvt 0.792 0.005429 0\nvt 0.790667 0.005571 0\nvt 0.646833 0.005571 0\nvt 0.665 0.005714 0\nvt 0.335 0.005714 0\nvt 0.6642 0.334105 0\nvt 0.3334 0.542495 0\nvt 0.6642 0.456962 0\nvt 0.3334 0.665352 0\nvt 0.664467 0.6423 0\nvt 0.333933 0.788171 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.208 0.996428 0\nvt 0.167 0.995571 0\nvt 0.167 0.996286 0\nvt 0.208 0.995429 0\nvt 0.353167 0.995 0\nvt 0.209333 0.995571 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.665 0.335 0\nvt 0.335 0.335 0\nvt 0.335 0.665 0\nvt 0.665 0.665 0\nvt 0.335 0.335238 0\nvt 0.665 0.335238 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.335 0.335238 0\nvt 0.665 0.335238 0\nvt 0.333933 0.788733 0\nvt 0.335 0.995 0\nvt 0.665 0.995 0\nvt 0.664467 0.642938 0\nvt 0.646833 0.005143 0\nvt 0.790667 0.005143 0\nvt 0.335 0.005 0\nvt 0.665 0.005 0\nvt 0.664467 0.211229 0\nvt 0.665 0.005 0\nvt 0.335 0.005 0\nvt 0.333933 0.3571 0\nvt 0.353167 0.996 0\nvt 0.209333 0.995429 0\nvt 0.665 0.995 0\nvt 0.335 0.995 0\nvt 0.6642 0.457562 0\nvt 0.3334 0.665838 0\nvt 0.3334 0.542981 0\nvt 0.6642 0.334705 0\nvt 0.664467 0.211867 0\nvt 0.333933 0.357662 0\nvt 0.665 0.005714 0\nvt 0.335 0.005714 0\nvt 0.833 0.005286 0\nvt 0.792 0.005286 0\nvt 0.792 0.005429 0\nvt 0.833 0.005429 0\nvt 0.646833 0.005571 0\nvt 0.790667 0.005571 0\nvt 0.335 0.005714 0\nvt 0.665 0.005714 0\nvt 0.3334 0.542495 0\nvt 0.6642 0.334105 0\nvt 0.6642 0.456962 0\nvt 0.3334 0.665352 0\nvt 0.664467 0.6423 0\nvt 0.333933 0.788171 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.167 0.995571 0\nvt 0.208 0.996428 0\nvt 0.167 0.996286 0\nvt 0.208 0.995429 0\nvt 0.209333 0.995571 0\nvt 0.353167 0.995 0\nvt 0.335 0.994286 0\nvt 0.665 0.994286 0\nvt 0.335 0.335 0\nvt 0.665 0.335 0\nvt 0.335 0.665 0\nvt 0.665 0.665 0\n\nf 431/491 430/490 429/489 \nf 430/490 431/491 432/492 \nf 435/495 434/494 433/493 \nf 436/496 433/493 434/494 \nf 439/499 438/498 437/497 \nf 438/498 439/499 440/500 \nf 443/503 442/502 441/501 \nf 442/502 443/503 444/504 \nf 447/507 446/506 445/505 \nf 446/506 447/507 448/508 \nf 451/511 450/510 449/509 \nf 450/510 451/511 452/512 \nf 437/497 454/514 453/513 \nf 454/514 437/497 438/498 \nf 453/513 454/514 455/515 \nf 455/515 454/514 456/516 \nf 455/515 458/518 457/517 \nf 458/518 455/515 456/516 \nf 457/517 460/520 459/519 \nf 460/520 457/517 458/518 \nf 462/522 441/501 461/521 \nf 441/501 462/522 443/503 \nf 464/524 461/521 463/523 \nf 461/521 464/524 462/522 \nf 465/525 464/524 463/523 \nf 464/524 465/525 466/526 \nf 467/527 466/526 465/525 \nf 466/526 467/527 468/528 \nf 445/505 446/506 469/529 \nf 469/529 446/506 470/530 \nf 469/529 472/532 471/531 \nf 472/532 469/529 470/530 \nf 471/531 472/532 473/533 \nf 473/533 472/532 474/534 \nf 473/533 474/534 475/535 \nf 475/535 474/534 476/536 \nf 477/537 452/512 451/511 \nf 452/512 477/537 478/538 \nf 479/539 478/538 477/537 \nf 478/538 479/539 480/540 \nf 482/542 481/541 479/539 \nf 479/539 481/541 480/540 \nf 484/544 483/543 482/542 \nf 482/542 483/543 481/541 \nf 486/546 444/504 485/545 \nf 444/504 486/546 442/502 \nf 440/500 439/499 487/547 \nf 487/547 488/548 440/500 \nf 431/491 476/536 432/492 \nf 476/536 431/491 475/535 \nf 467/527 430/490 468/528 \nf 430/490 467/527 429/489 \nf 483/543 484/544 436/496 \nf 436/496 434/494 483/543 \nf 433/493 460/520 435/495 \nf 460/520 433/493 459/519 \nf 491/551 490/550 489/549 \nf 491/551 489/549 492/552 \nf 495/555 494/554 493/553 \nf 495/555 493/553 496/556 \nf 499/559 498/558 497/557 \nf 497/557 500/560 499/559 \nf 503/563 502/562 501/561 \nf 502/562 503/563 504/564 \nf 507/567 506/566 505/565 \nf 505/565 508/568 507/567 \nf 511/571 510/570 509/569 \nf 510/570 511/571 512/572 \nf 497/557 513/573 500/560 \nf 513/573 497/557 514/574 \nf 513/573 514/574 515/575 \nf 515/575 516/576 513/573 \nf 515/575 517/577 516/576 \nf 517/577 515/575 518/578 \nf 518/578 519/579 517/577 \nf 519/579 518/578 520/580 \nf 522/582 502/562 521/581 \nf 502/562 522/582 501/561 \nf 524/584 521/581 523/583 \nf 521/581 524/584 522/582 \nf 526/586 523/583 525/585 \nf 523/583 526/586 524/584 \nf 528/588 525/585 527/587 \nf 525/585 528/588 526/586 \nf 505/565 529/589 508/568 \nf 529/589 505/565 530/590 \nf 529/589 530/590 531/591 \nf 531/591 532/592 529/589 \nf 532/592 531/591 533/593 \nf 533/593 534/594 532/592 \nf 534/594 533/593 535/595 \nf 535/595 536/596 534/594 \nf 538/598 510/570 537/597 \nf 510/570 538/598 509/569 \nf 538/598 540/600 539/599 \nf 540/600 538/598 537/597 \nf 539/599 542/602 541/601 \nf 542/602 539/599 540/600 \nf 541/601 544/604 543/603 \nf 544/604 541/601 542/602 \nf 545/605 504/564 503/563 \nf 504/564 545/605 546/606 \nf 498/558 499/559 547/607 \nf 547/607 499/559 548/608 \nf 491/551 536/596 535/595 \nf 536/596 491/551 492/552 \nf 528/588 527/587 490/550 \nf 490/550 527/587 489/549 \nf 543/603 544/604 494/554 \nf 494/554 544/604 493/553 \nf 495/555 496/556 520/580 \nf 520/580 496/556 519/579 \nf 432/492 489/549 430/490 \nf 489/549 432/492 492/552 \nf 431/491 490/550 491/551 \nf 490/550 431/491 429/489 \nf 436/496 495/555 433/493 \nf 495/555 436/496 494/554 \nf 434/494 435/495 496/556 \nf 496/556 493/553 434/494 \nf 439/499 497/557 498/558 \nf 497/557 439/499 437/497 \nf 440/500 500/560 438/498 \nf 500/560 440/500 499/559 \nf 444/504 443/503 502/562 \nf 444/504 502/562 504/564 \nf 501/561 442/502 503/563 \nf 442/502 501/561 441/501 \nf 447/507 445/505 505/565 \nf 447/507 505/565 506/566 \nf 508/568 448/508 507/567 \nf 448/508 508/568 446/506 \nf 450/510 510/570 512/572 \nf 510/570 450/510 452/512 \nf 449/509 509/569 451/511 \nf 509/569 449/509 511/571 \nf 437/497 514/574 497/557 \nf 514/574 437/497 453/513 \nf 513/573 438/498 500/560 \nf 438/498 513/573 454/514 \nf 453/513 455/515 515/575 \nf 453/513 515/575 514/574 \nf 516/576 454/514 513/573 \nf 454/514 516/576 456/516 \nf 457/517 515/575 455/515 \nf 515/575 457/517 518/578 \nf 517/577 458/518 516/576 \nf 516/576 458/518 456/516 \nf 459/519 518/578 457/517 \nf 518/578 459/519 520/580 \nf 458/518 517/577 460/520 \nf 517/577 519/579 460/520 \nf 462/522 521/581 443/503 \nf 521/581 502/562 443/503 \nf 441/501 522/582 461/521 \nf 522/582 441/501 501/561 \nf 521/581 462/522 523/583 \nf 523/583 462/522 464/524 \nf 461/521 522/582 463/523 \nf 463/523 522/582 524/584 \nf 523/583 466/526 525/585 \nf 466/526 523/583 464/524 \nf 465/525 463/523 524/584 \nf 465/525 524/584 526/586 \nf 525/585 468/528 527/587 \nf 468/528 525/585 466/526 \nf 467/527 526/586 528/588 \nf 526/586 467/527 465/525 \nf 469/529 530/590 445/505 \nf 530/590 505/565 445/505 \nf 446/506 529/589 470/530 \nf 529/589 446/506 508/568 \nf 530/590 469/529 531/591 \nf 531/591 469/529 471/531 \nf 470/530 532/592 472/532 \nf 532/592 470/530 529/589 \nf 531/591 473/533 533/593 \nf 473/533 531/591 471/531 \nf 474/534 472/532 532/592 \nf 474/534 532/592 534/594 \nf 533/593 475/535 535/595 \nf 475/535 533/593 473/533 \nf 476/536 534/594 536/596 \nf 534/594 476/536 474/534 \nf 452/512 537/597 510/570 \nf 537/597 452/512 478/538 \nf 538/598 451/511 509/569 \nf 451/511 538/598 477/537 \nf 480/540 537/597 478/538 \nf 537/597 480/540 540/600 \nf 539/599 477/537 538/598 \nf 477/537 539/599 479/539 \nf 481/541 540/600 480/540 \nf 540/600 481/541 542/602 \nf 541/601 482/542 539/599 \nf 539/599 482/542 479/539 \nf 483/543 542/602 481/541 \nf 542/602 483/543 544/604 \nf 482/542 541/601 484/544 \nf 541/601 543/603 484/544 \nf 485/545 444/504 504/564 \nf 485/545 504/564 546/606 \nf 503/563 486/546 545/605 \nf 486/546 503/563 442/502 \nf 498/558 547/607 487/547 \nf 498/558 487/547 439/499 \nf 488/548 499/559 440/500 \nf 499/559 488/548 548/608 \nf 432/492 536/596 492/552 \nf 536/596 432/492 476/536 \nf 535/595 431/491 491/551 \nf 431/491 535/595 475/535 \nf 429/489 528/588 490/550 \nf 528/588 429/489 467/527 \nf 527/587 430/490 489/549 \nf 430/490 527/587 468/528 \nf 436/496 484/544 543/603 \nf 543/603 494/554 436/496 \nf 434/494 544/604 483/543 \nf 544/604 434/494 493/553 \nf 435/495 460/520 519/579 \nf 519/579 496/556 435/495 \nf 433/493 520/580 459/519 \nf 520/580 433/493 495/555 \n\ng box5 bottom_Mesh polySurface135\nusemtl ribbon1\nv -0.012899 0.004642 -0.086735\nv 0.012451 0.004642 -0.086727\nv -0.012899 0.117828 -0.086108\nv 0.012452 0.117828 -0.0861\nv -0.012937 0.004642 0.073019\nv 0.012413 0.117915 0.07244\nv 0.012414 0.004642 0.073026\nv -0.012937 0.117915 0.072432\nv -0.012936 -0.000312 0.071276\nv 0.012415 -0.000312 0.071284\nv -0.012936 -0.000408 0.070484\nv 0.012415 -0.000408 0.070492\nv -0.0129 -0.000312 -0.084992\nv -0.0129 -0.000408 -0.084201\nv 0.012451 -0.000312 -0.084985\nv 0.01245 -0.000408 -0.084193\nv -0.0129 0.122787 -0.084365\nv 0.012451 0.122787 -0.084357\nv -0.0129 0.122882 -0.083574\nv 0.012451 0.122882 -0.083566\nv -0.012937 0.122969 0.069898\nv 0.012414 0.122969 0.069906\nv -0.012937 0.122873 0.07069\nv 0.012414 0.122873 0.070697\nv -0.012936 0.000014 0.072021\nv 0.012414 0.000014 0.072029\nv -0.012937 0.000589 0.072595\nv 0.012414 0.000589 0.072603\nv -0.012937 0.001334 0.072921\nv 0.012414 0.001334 0.072929\nv -0.012937 0.002125 0.073017\nv 0.012414 0.002125 0.073025\nv -0.0129 0.000014 -0.085737\nv 0.012451 0.000015 -0.08573\nv -0.0129 0.000589 -0.086312\nv 0.012451 0.000589 -0.086304\nv -0.0129 0.001334 -0.086638\nv 0.012451 0.001334 -0.08663\nv -0.012899 0.002125 -0.086734\nv 0.012451 0.002125 -0.086726\nv -0.012899 0.12246 -0.08511\nv 0.012451 0.12246 -0.085102\nv -0.012899 0.121886 -0.085685\nv 0.012452 0.121886 -0.085677\nv -0.012899 0.121141 -0.086011\nv 0.012452 0.121141 -0.086003\nv -0.012899 0.12035 -0.086107\nv 0.012452 0.12035 -0.086099\nv -0.012937 0.122547 0.071435\nv 0.012414 0.122547 0.071442\nv -0.012937 0.121973 0.072009\nv 0.012414 0.121973 0.072017\nv 0.012413 0.121228 0.072343\nv -0.012937 0.121228 0.072335\nv 0.012413 0.120436 0.072439\nv -0.012937 0.120436 0.072431\nv 0.01245 -0.000409 -0.081317\nv -0.012901 -0.000409 -0.081325\nv -0.012935 -0.000409 0.067608\nv 0.012416 -0.000409 0.067616\nv 0.012451 0.004644 -0.085867\nv -0.0129 0.004644 -0.085875\nv -0.012899 0.117831 -0.085247\nv 0.012452 0.117831 -0.08524\nv 0.012414 0.117917 0.071579\nv -0.012937 0.117917 0.071572\nv -0.012937 0.004644 0.072158\nv 0.012414 0.004644 0.072166\nv -0.012936 0.000521 0.071056\nv -0.012936 0.000452 0.070437\nv 0.012415 0.000452 0.070445\nv 0.012415 0.000521 0.071064\nv -0.0129 0.000521 -0.084773\nv 0.012451 0.000521 -0.084765\nv -0.0129 0.000452 -0.084153\nv 0.01245 0.000452 -0.084146\nv -0.0129 0.121954 -0.084146\nv -0.0129 0.122023 -0.083526\nv 0.012451 0.122023 -0.083518\nv 0.012451 0.121954 -0.084138\nv -0.012937 0.122041 0.07047\nv 0.012414 0.122041 0.070478\nv -0.012937 0.12211 0.069851\nv 0.012414 0.12211 0.069858\nv 0.012414 0.000727 0.071546\nv -0.012936 0.000727 0.071538\nv -0.012936 0.001071 0.071883\nv 0.012414 0.001071 0.07189\nv 0.012414 0.001553 0.072097\nv -0.012936 0.001553 0.072089\nv 0.012414 0.002173 0.072166\nv -0.012937 0.002173 0.072158\nv 0.012451 0.000727 -0.085247\nv -0.0129 0.000727 -0.085255\nv 0.012451 0.001071 -0.085592\nv -0.0129 0.001071 -0.085599\nv 0.012451 0.001553 -0.085798\nv -0.0129 0.001553 -0.085806\nv 0.012451 0.002173 -0.085867\nv -0.0129 0.002173 -0.085875\nv 0.012451 0.121748 -0.08462\nv -0.012899 0.121748 -0.084628\nv -0.012899 0.121404 -0.084972\nv 0.012451 0.121404 -0.084964\nv -0.012899 0.120922 -0.085178\nv 0.012451 0.120922 -0.085171\nv -0.012899 0.120302 -0.085247\nv 0.012451 0.120302 -0.08524\nv 0.012414 0.121835 0.07096\nv -0.012937 0.121835 0.070952\nv -0.012937 0.12149 0.071296\nv 0.012414 0.12149 0.071304\nv -0.012937 0.121008 0.071503\nv 0.012414 0.121008 0.071511\nv -0.012937 0.120389 0.071572\nv 0.012414 0.120389 0.071579\nv -0.012901 0.000452 -0.081325\nv 0.01245 0.000452 -0.081317\nv -0.012935 0.000452 0.067608\nv 0.012416 0.000452 0.067616\n\nvt 0.665 0.335238 0\nvt 0.335 0.335238 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.335 0.335238 0\nvt 0.665 0.664762 0\nvt 0.665 0.335238 0\nvt 0.335 0.664762 0\nvt 0.333933 0.788733 0\nvt 0.664467 0.642938 0\nvt 0.335 0.995 0\nvt 0.665 0.995 0\nvt 0.646833 0.005143 0\nvt 0.335 0.005 0\nvt 0.790667 0.005143 0\nvt 0.665 0.005 0\nvt 0.664467 0.211229 0\nvt 0.333933 0.3571 0\nvt 0.665 0.005 0\nvt 0.335 0.005 0\nvt 0.665 0.995 0\nvt 0.335 0.995 0\nvt 0.353167 0.996 0\nvt 0.209333 0.995429 0\nvt 0.3334 0.665838 0\nvt 0.6642 0.457562 0\nvt 0.3334 0.542981 0\nvt 0.6642 0.334705 0\nvt 0.333933 0.357662 0\nvt 0.664467 0.211867 0\nvt 0.335 0.005714 0\nvt 0.665 0.005714 0\nvt 0.792 0.005286 0\nvt 0.833 0.005286 0\nvt 0.833 0.005429 0\nvt 0.792 0.005429 0\nvt 0.790667 0.005571 0\nvt 0.646833 0.005571 0\nvt 0.665 0.005714 0\nvt 0.335 0.005714 0\nvt 0.6642 0.334105 0\nvt 0.3334 0.542495 0\nvt 0.6642 0.456962 0\nvt 0.3334 0.665352 0\nvt 0.664467 0.6423 0\nvt 0.333933 0.788171 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.208 0.996428 0\nvt 0.167 0.995571 0\nvt 0.167 0.996286 0\nvt 0.208 0.995429 0\nvt 0.353167 0.995 0\nvt 0.209333 0.995571 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.665 0.335 0\nvt 0.335 0.335 0\nvt 0.335 0.665 0\nvt 0.665 0.665 0\nvt 0.335 0.335238 0\nvt 0.665 0.335238 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.665 0.664762 0\nvt 0.335 0.664762 0\nvt 0.335 0.335238 0\nvt 0.665 0.335238 0\nvt 0.333933 0.788733 0\nvt 0.335 0.995 0\nvt 0.665 0.995 0\nvt 0.664467 0.642938 0\nvt 0.646833 0.005143 0\nvt 0.790667 0.005143 0\nvt 0.335 0.005 0\nvt 0.665 0.005 0\nvt 0.664467 0.211229 0\nvt 0.665 0.005 0\nvt 0.335 0.005 0\nvt 0.333933 0.3571 0\nvt 0.353167 0.996 0\nvt 0.209333 0.995429 0\nvt 0.665 0.995 0\nvt 0.335 0.995 0\nvt 0.6642 0.457562 0\nvt 0.3334 0.665838 0\nvt 0.3334 0.542981 0\nvt 0.6642 0.334705 0\nvt 0.664467 0.211867 0\nvt 0.333933 0.357662 0\nvt 0.665 0.005714 0\nvt 0.335 0.005714 0\nvt 0.833 0.005286 0\nvt 0.792 0.005286 0\nvt 0.792 0.005429 0\nvt 0.833 0.005429 0\nvt 0.646833 0.005571 0\nvt 0.790667 0.005571 0\nvt 0.335 0.005714 0\nvt 0.665 0.005714 0\nvt 0.3334 0.542495 0\nvt 0.6642 0.334105 0\nvt 0.6642 0.456962 0\nvt 0.3334 0.665352 0\nvt 0.664467 0.6423 0\nvt 0.333933 0.788171 0\nvt 0.665 0.994286 0\nvt 0.335 0.994286 0\nvt 0.167 0.995571 0\nvt 0.208 0.996428 0\nvt 0.167 0.996286 0\nvt 0.208 0.995429 0\nvt 0.209333 0.995571 0\nvt 0.353167 0.995 0\nvt 0.335 0.994286 0\nvt 0.665 0.994286 0\nvt 0.335 0.335 0\nvt 0.665 0.335 0\nvt 0.335 0.665 0\nvt 0.665 0.665 0\n\nf 551/611 550/610 549/609 \nf 550/610 551/611 552/612 \nf 555/615 554/614 553/613 \nf 556/616 553/613 554/614 \nf 559/619 558/618 557/617 \nf 558/618 559/619 560/620 \nf 563/623 562/622 561/621 \nf 562/622 563/623 564/624 \nf 567/627 566/626 565/625 \nf 566/626 567/627 568/628 \nf 571/631 570/630 569/629 \nf 570/630 571/631 572/632 \nf 557/617 574/634 573/633 \nf 574/634 557/617 558/618 \nf 573/633 574/634 575/635 \nf 575/635 574/634 576/636 \nf 575/635 578/638 577/637 \nf 578/638 575/635 576/636 \nf 577/637 580/640 579/639 \nf 580/640 577/637 578/638 \nf 582/642 561/621 581/641 \nf 561/621 582/642 563/623 \nf 584/644 581/641 583/643 \nf 581/641 584/644 582/642 \nf 585/645 584/644 583/643 \nf 584/644 585/645 586/646 \nf 587/647 586/646 585/645 \nf 586/646 587/647 588/648 \nf 565/625 566/626 589/649 \nf 589/649 566/626 590/650 \nf 589/649 592/652 591/651 \nf 592/652 589/649 590/650 \nf 591/651 592/652 593/653 \nf 593/653 592/652 594/654 \nf 593/653 594/654 595/655 \nf 595/655 594/654 596/656 \nf 597/657 572/632 571/631 \nf 572/632 597/657 598/658 \nf 599/659 598/658 597/657 \nf 598/658 599/659 600/660 \nf 602/662 601/661 599/659 \nf 599/659 601/661 600/660 \nf 604/664 603/663 602/662 \nf 602/662 603/663 601/661 \nf 606/666 564/624 605/665 \nf 564/624 606/666 562/622 \nf 560/620 559/619 607/667 \nf 607/667 608/668 560/620 \nf 551/611 596/656 552/612 \nf 596/656 551/611 595/655 \nf 587/647 550/610 588/648 \nf 550/610 587/647 549/609 \nf 603/663 604/664 556/616 \nf 556/616 554/614 603/663 \nf 553/613 580/640 555/615 \nf 580/640 553/613 579/639 \nf 611/671 610/670 609/669 \nf 611/671 609/669 612/672 \nf 615/675 614/674 613/673 \nf 615/675 613/673 616/676 \nf 619/679 618/678 617/677 \nf 617/677 620/680 619/679 \nf 623/683 622/682 621/681 \nf 622/682 623/683 624/684 \nf 627/687 626/686 625/685 \nf 625/685 628/688 627/687 \nf 631/691 630/690 629/689 \nf 630/690 631/691 632/692 \nf 617/677 633/693 620/680 \nf 633/693 617/677 634/694 \nf 633/693 634/694 635/695 \nf 635/695 636/696 633/693 \nf 635/695 637/697 636/696 \nf 637/697 635/695 638/698 \nf 638/698 639/699 637/697 \nf 639/699 638/698 640/700 \nf 642/702 622/682 641/701 \nf 622/682 642/702 621/681 \nf 644/704 641/701 643/703 \nf 641/701 644/704 642/702 \nf 646/706 643/703 645/705 \nf 643/703 646/706 644/704 \nf 648/708 645/705 647/707 \nf 645/705 648/708 646/706 \nf 625/685 649/709 628/688 \nf 649/709 625/685 650/710 \nf 649/709 650/710 651/711 \nf 651/711 652/712 649/709 \nf 652/712 651/711 653/713 \nf 653/713 654/714 652/712 \nf 654/714 653/713 655/715 \nf 655/715 656/716 654/714 \nf 658/718 630/690 657/717 \nf 630/690 658/718 629/689 \nf 658/718 660/720 659/719 \nf 660/720 658/718 657/717 \nf 659/719 662/722 661/721 \nf 662/722 659/719 660/720 \nf 661/721 664/724 663/723 \nf 664/724 661/721 662/722 \nf 665/725 624/684 623/683 \nf 624/684 665/725 666/726 \nf 618/678 619/679 667/727 \nf 667/727 619/679 668/728 \nf 611/671 656/716 655/715 \nf 656/716 611/671 612/672 \nf 648/708 647/707 610/670 \nf 610/670 647/707 609/669 \nf 663/723 664/724 614/674 \nf 614/674 664/724 613/673 \nf 615/675 616/676 640/700 \nf 640/700 616/676 639/699 \nf 552/612 609/669 550/610 \nf 609/669 552/612 612/672 \nf 551/611 610/670 611/671 \nf 610/670 551/611 549/609 \nf 556/616 615/675 553/613 \nf 615/675 556/616 614/674 \nf 554/614 555/615 616/676 \nf 616/676 613/673 554/614 \nf 559/619 617/677 618/678 \nf 617/677 559/619 557/617 \nf 560/620 620/680 558/618 \nf 620/680 560/620 619/679 \nf 564/624 563/623 622/682 \nf 564/624 622/682 624/684 \nf 621/681 562/622 623/683 \nf 562/622 621/681 561/621 \nf 567/627 565/625 625/685 \nf 567/627 625/685 626/686 \nf 628/688 568/628 627/687 \nf 568/628 628/688 566/626 \nf 570/630 630/690 632/692 \nf 630/690 570/630 572/632 \nf 569/629 629/689 571/631 \nf 629/689 569/629 631/691 \nf 557/617 634/694 617/677 \nf 634/694 557/617 573/633 \nf 633/693 558/618 620/680 \nf 558/618 633/693 574/634 \nf 573/633 575/635 635/695 \nf 573/633 635/695 634/694 \nf 636/696 574/634 633/693 \nf 574/634 636/696 576/636 \nf 577/637 635/695 575/635 \nf 635/695 577/637 638/698 \nf 637/697 578/638 636/696 \nf 636/696 578/638 576/636 \nf 579/639 638/698 577/637 \nf 638/698 579/639 640/700 \nf 578/638 637/697 580/640 \nf 637/697 639/699 580/640 \nf 582/642 641/701 563/623 \nf 641/701 622/682 563/623 \nf 561/621 642/702 581/641 \nf 642/702 561/621 621/681 \nf 641/701 582/642 643/703 \nf 643/703 582/642 584/644 \nf 581/641 642/702 583/643 \nf 583/643 642/702 644/704 \nf 643/703 586/646 645/705 \nf 586/646 643/703 584/644 \nf 585/645 583/643 644/704 \nf 585/645 644/704 646/706 \nf 645/705 588/648 647/707 \nf 588/648 645/705 586/646 \nf 587/647 646/706 648/708 \nf 646/706 587/647 585/645 \nf 589/649 650/710 565/625 \nf 650/710 625/685 565/625 \nf 566/626 649/709 590/650 \nf 649/709 566/626 628/688 \nf 650/710 589/649 651/711 \nf 651/711 589/649 591/651 \nf 590/650 652/712 592/652 \nf 652/712 590/650 649/709 \nf 651/711 593/653 653/713 \nf 593/653 651/711 591/651 \nf 594/654 592/652 652/712 \nf 594/654 652/712 654/714 \nf 653/713 595/655 655/715 \nf 595/655 653/713 593/653 \nf 596/656 654/714 656/716 \nf 654/714 596/656 594/654 \nf 572/632 657/717 630/690 \nf 657/717 572/632 598/658 \nf 658/718 571/631 629/689 \nf 571/631 658/718 597/657 \nf 600/660 657/717 598/658 \nf 657/717 600/660 660/720 \nf 659/719 597/657 658/718 \nf 597/657 659/719 599/659 \nf 601/661 660/720 600/660 \nf 660/720 601/661 662/722 \nf 661/721 602/662 659/719 \nf 659/719 602/662 599/659 \nf 603/663 662/722 601/661 \nf 662/722 603/663 664/724 \nf 602/662 661/721 604/664 \nf 661/721 663/723 604/664 \nf 605/665 564/624 624/684 \nf 605/665 624/684 666/726 \nf 623/683 606/666 665/725 \nf 606/666 623/683 562/622 \nf 618/678 667/727 607/667 \nf 618/678 607/667 559/619 \nf 608/668 619/679 560/620 \nf 619/679 608/668 668/728 \nf 552/612 656/716 612/672 \nf 656/716 552/612 596/656 \nf 655/715 551/611 611/671 \nf 551/611 655/715 595/655 \nf 549/609 648/708 610/670 \nf 648/708 549/609 587/647 \nf 647/707 550/610 609/669 \nf 550/610 647/707 588/648 \nf 556/616 604/664 663/723 \nf 663/723 614/674 556/616 \nf 554/614 664/724 603/663 \nf 664/724 554/614 613/673 \nf 555/615 580/640 639/699 \nf 639/699 616/676 555/615 \nf 553/613 640/700 579/639 \nf 640/700 553/613 615/675 \n\ng box5 top\nusemtl top01\nv 0.077446 0.133094 -0.084216\nv 0.077446 0.132219 0.070674\nv -0.077446 0.132219 0.070674\nv -0.077446 0.133094 -0.084216\nv 0.077446 0.115375 0.07266\nv 0.077446 0.114834 0.072657\nv -0.077446 0.115375 0.07266\nv -0.077446 0.114834 0.072657\nv 0.079528 0.115387 0.070579\nv 0.079528 0.116262 -0.084311\nv 0.079528 0.114846 0.070576\nv 0.079528 0.115721 -0.084314\nv -0.077446 0.116274 -0.086392\nv -0.077446 0.115733 -0.086396\nv 0.077446 0.115733 -0.086396\nv 0.077446 0.116274 -0.086392\nv -0.079528 0.115721 -0.084314\nv -0.079528 0.116262 -0.084311\nv -0.079528 0.114846 0.070576\nv -0.079528 0.115387 0.070579\nv -0.079024 0.13142 0.072719\nv -0.079012 0.131522 0.07272\nv -0.07874 0.13142 0.072751\nv 0.079496 0.131423 0.072247\nv 0.079496 0.131525 0.072236\nv 0.079528 0.131424 0.071963\nv -0.079496 0.132315 -0.085798\nv -0.079496 0.132417 -0.085786\nv -0.079528 0.132314 -0.085514\nv 0.079024 0.132318 -0.08627\nv 0.079012 0.13242 -0.08627\nv 0.07874 0.132318 -0.086302\nv 0.077446 0.132179 0.072251\nv -0.077446 0.132179 0.072251\nv 0.077446 0.132212 0.071968\nv -0.077446 0.132212 0.071968\nv 0.07874 0.132219 0.070674\nv 0.079024 0.133062 -0.084216\nv 0.079024 0.132187 0.070674\nv 0.07874 0.133094 -0.084216\nv -0.077446 0.133071 -0.085794\nv 0.077446 0.133071 -0.085794\nv -0.077446 0.133101 -0.08551\nv 0.077446 0.133101 -0.08551\nv -0.079024 0.132187 0.070674\nv -0.079024 0.133062 -0.084216\nv -0.07874 0.132219 0.070674\nv -0.07874 0.133094 -0.084216\nv 0.079024 0.115375 0.072629\nv 0.07874 0.114834 0.072657\nv 0.07874 0.115375 0.07266\nv 0.079024 0.114834 0.072626\nv -0.07874 0.130289 0.072744\nv -0.079024 0.115375 0.072629\nv -0.079024 0.130289 0.072713\nv -0.07874 0.115375 0.07266\nv 0.079528 0.116269 -0.085605\nv 0.079496 0.116271 -0.085889\nv 0.079528 0.115728 -0.085608\nv 0.079496 0.11573 -0.085892\nv -0.07874 0.115733 -0.086396\nv -0.079024 0.116273 -0.086361\nv -0.079024 0.115732 -0.086364\nv -0.07874 0.116274 -0.086392\nv -0.078842 0.131692 0.072721\nv -0.07874 0.131703 0.072721\nv -0.07874 0.131924 0.072628\nv -0.078922 0.131904 0.072627\nv -0.078978 0.132056 0.072471\nv -0.07874 0.132083 0.072471\nv -0.079012 0.132148 0.072251\nv -0.07874 0.132179 0.072251\nv -0.079024 0.13218 0.071968\nv -0.07874 0.132212 0.071968\nv -0.078922 0.131658 0.072721\nv -0.079063 0.131844 0.072627\nv -0.079163 0.131977 0.07247\nv -0.079224 0.132058 0.07225\nv -0.079244 0.132086 0.071967\nv -0.078978 0.131601 0.07272\nv -0.079163 0.131743 0.072627\nv -0.079296 0.131845 0.07247\nv -0.079375 0.131906 0.07225\nv -0.079402 0.131928 0.071966\nv -0.079224 0.131602 0.072626\nv -0.079375 0.131659 0.072469\nv -0.079466 0.131695 0.072248\nv -0.079496 0.131708 0.071965\nv -0.079244 0.13142 0.072625\nv -0.079402 0.131421 0.072467\nv -0.079496 0.131423 0.072247\nv -0.079528 0.131424 0.071963\nv 0.079496 0.131696 0.072067\nv 0.079496 0.131708 0.071965\nv 0.079402 0.131907 0.072148\nv 0.079402 0.131928 0.071966\nv 0.079244 0.132058 0.072205\nv 0.079244 0.132086 0.071967\nv 0.079024 0.132148 0.07224\nv 0.079024 0.13218 0.071968\nv 0.07874 0.132179 0.072251\nv 0.07874 0.132212 0.071968\nv 0.079496 0.131661 0.072146\nv 0.079402 0.131846 0.072288\nv 0.079244 0.131977 0.07239\nv 0.079024 0.132056 0.072451\nv 0.07874 0.132083 0.072471\nv 0.079496 0.131604 0.072202\nv 0.079402 0.131744 0.072388\nv 0.079244 0.131844 0.072521\nv 0.079024 0.131904 0.072601\nv 0.07874 0.131924 0.072628\nv 0.079402 0.131603 0.072448\nv 0.079244 0.131659 0.0726\nv 0.079024 0.131692 0.072691\nv 0.07874 0.131703 0.072721\nv 0.079402 0.131421 0.072467\nv 0.079244 0.13142 0.072625\nv 0.079024 0.13142 0.072719\nv 0.07874 0.13142 0.072751\nv -0.079496 0.132587 -0.085615\nv -0.079496 0.132597 -0.085513\nv -0.079402 0.132818 -0.085512\nv -0.079402 0.132799 -0.085693\nv -0.079244 0.132975 -0.085511\nv -0.079244 0.13295 -0.085749\nv -0.079024 0.13307 -0.08551\nv -0.079024 0.133041 -0.085782\nv -0.07874 0.133101 -0.08551\nv -0.07874 0.133071 -0.085794\nv -0.079496 0.132553 -0.085695\nv -0.079402 0.132739 -0.085835\nv -0.079244 0.132872 -0.085935\nv -0.079024 0.132952 -0.085995\nv -0.07874 0.132978 -0.086015\nv -0.079496 0.132497 -0.085752\nv -0.079402 0.132639 -0.085936\nv -0.079244 0.13274 -0.086068\nv -0.079024 0.132801 -0.086147\nv -0.07874 0.132822 -0.086173\nv -0.079402 0.132498 -0.085997\nv -0.079244 0.132556 -0.086148\nv -0.079024 0.13259 -0.086239\nv -0.07874 0.132602 -0.086269\nv -0.079402 0.132317 -0.086018\nv -0.079244 0.132318 -0.086176\nv -0.079024 0.132318 -0.08627\nv -0.07874 0.132318 -0.086302\nv 0.078842 0.13259 -0.086269\nv 0.07874 0.132602 -0.086269\nv 0.07874 0.132822 -0.086173\nv 0.078922 0.132801 -0.086173\nv 0.07874 0.132978 -0.086015\nv 0.078978 0.132952 -0.086015\nv 0.07874 0.133071 -0.085794\nv 0.079012 0.133041 -0.085794\nv 0.07874 0.133101 -0.08551\nv 0.079024 0.13307 -0.08551\nv 0.078922 0.132556 -0.086269\nv 0.079063 0.132741 -0.086173\nv 0.079163 0.132872 -0.086015\nv 0.079224 0.13295 -0.085794\nv 0.079244 0.132975 -0.085511\nv 0.078978 0.1325 -0.086269\nv 0.079163 0.13264 -0.086174\nv 0.079296 0.13274 -0.086016\nv 0.079375 0.132799 -0.085795\nv 0.079402 0.132818 -0.085512\nv 0.079224 0.132499 -0.086175\nv 0.079375 0.132555 -0.086017\nv 0.079466 0.132588 -0.085796\nv 0.079496 0.132597 -0.085513\nv 0.079244 0.132318 -0.086176\nv 0.079402 0.132317 -0.086018\nv 0.079496 0.132315 -0.085798\nv 0.079528 0.132314 -0.085514\nv 0.077446 0.132083 0.072471\nv -0.077446 0.132083 0.072471\nv 0.077446 0.131924 0.072628\nv -0.077446 0.131924 0.072628\nv 0.077446 0.131703 0.072721\nv -0.077446 0.131703 0.072721\nv 0.077446 0.13142 0.072751\nv -0.077446 0.13142 0.072751\nv 0.079244 0.132968 -0.084217\nv 0.079244 0.132093 0.070673\nv 0.079402 0.131935 0.070672\nv 0.079402 0.13281 -0.084218\nv 0.079496 0.13259 -0.084219\nv 0.079496 0.131715 0.070671\nv 0.079528 0.132307 -0.08422\nv 0.079528 0.131432 0.070669\nv -0.077446 0.132978 -0.086015\nv 0.077446 0.132978 -0.086015\nv -0.077446 0.132822 -0.086173\nv 0.077446 0.132822 -0.086173\nv -0.077446 0.132602 -0.086269\nv 0.077446 0.132602 -0.086269\nv -0.077446 0.132318 -0.086302\nv 0.077446 0.132318 -0.086302\nv -0.079244 0.132093 0.070673\nv -0.079244 0.132968 -0.084217\nv -0.079402 0.131935 0.070672\nv -0.079402 0.13281 -0.084218\nv -0.079496 0.131715 0.070671\nv -0.079496 0.13259 -0.084219\nv -0.079528 0.131432 0.070669\nv -0.079528 0.132307 -0.08422\nv 0.079244 0.115376 0.072534\nv 0.079244 0.114835 0.072531\nv 0.079402 0.115377 0.072377\nv 0.079402 0.114836 0.072374\nv 0.079496 0.115378 0.072156\nv 0.079496 0.114837 0.072153\nv 0.079528 0.11538 0.071873\nv 0.079528 0.114839 0.07187\nv -0.079244 0.115376 0.072534\nv -0.079244 0.13029 0.072618\nv -0.079402 0.115377 0.072377\nv -0.079402 0.130291 0.072461\nv -0.079496 0.115378 0.072156\nv -0.079496 0.130292 0.07224\nv -0.079528 0.11538 0.071873\nv -0.079528 0.130294 0.071957\nv 0.079402 0.116272 -0.086109\nv 0.079402 0.115731 -0.086112\nv 0.079244 0.115732 -0.08627\nv 0.079244 0.116273 -0.086266\nv 0.079024 0.115732 -0.086364\nv 0.079024 0.116273 -0.086361\nv 0.07874 0.116274 -0.086392\nv 0.07874 0.115733 -0.086396\nv -0.079244 0.116273 -0.086266\nv -0.079244 0.115732 -0.08627\nv -0.079402 0.115731 -0.086112\nv -0.079402 0.116272 -0.086109\nv -0.079496 0.116271 -0.085889\nv -0.079496 0.11573 -0.085892\nv -0.079528 0.116269 -0.085605\nv -0.079528 0.115728 -0.085608\nv -0.077446 0.130289 0.072744\nv 0.077446 0.131188 -0.086308\nv 0.07874 0.131188 -0.086308\nv 0.079528 0.130301 0.070663\nv 0.079528 0.130294 0.071957\nv -0.079528 0.114839 0.07187\nv -0.079528 0.131176 -0.084227\nv -0.079528 0.131183 -0.085521\nv 0.077446 0.130289 0.072744\nv 0.079528 0.131176 -0.084227\nv -0.077446 0.131188 -0.086308\nv -0.079528 0.130301 0.070663\nv 0.079024 0.130289 0.072713\nv 0.07874 0.130289 0.072744\nv 0.079528 0.131183 -0.085521\nv 0.079496 0.131185 -0.085804\nv -0.07874 0.131188 -0.086308\nv -0.079024 0.131187 -0.086277\nv 0.079244 0.13029 0.072618\nv 0.079402 0.130291 0.072461\nv 0.079496 0.130292 0.07224\nv 0.079402 0.131186 -0.086025\nv 0.079244 0.131187 -0.086182\nv 0.079024 0.131187 -0.086277\nv -0.079244 0.131187 -0.086182\nv -0.079402 0.131186 -0.086025\nv -0.079496 0.131185 -0.085804\nv 0.077078 0.114443 0.072261\nv 0.071227 0.114478 0.066009\nv -0.077078 0.114443 0.072261\nv -0.071227 0.114478 0.066009\nv -0.072402 0.114478 0.066009\nv -0.078382 0.114443 0.07228\nv -0.072607 0.114478 0.065986\nv -0.078707 0.114442 0.072295\nv -0.078957 0.114443 0.072239\nv -0.072723 0.114478 0.065936\nv -0.072793 0.114479 0.065866\nv -0.079111 0.114444 0.072085\nv -0.072843 0.114479 0.06575\nv -0.079168 0.114445 0.071835\nv -0.072866 0.114481 0.065545\nv -0.079152 0.114447 0.071511\nv -0.072866 0.114487 0.06437\nv -0.079134 0.114454 0.070207\nv -0.072866 0.115292 -0.078113\nv -0.079134 0.115325 -0.08395\nv -0.072866 0.115299 -0.079288\nv -0.079152 0.115332 -0.085254\nv -0.072843 0.1153 -0.079493\nv -0.079168 0.115334 -0.085578\nv -0.072793 0.115301 -0.079609\nv -0.079111 0.115336 -0.085828\nv -0.078957 0.115337 -0.085982\nv -0.072723 0.115301 -0.079679\nv -0.072607 0.115301 -0.079729\nv -0.078707 0.115337 -0.086038\nv -0.072402 0.115301 -0.079752\nv -0.078382 0.115337 -0.086023\nv -0.071227 0.115301 -0.079752\nv -0.077078 0.115337 -0.086004\nv 0.071227 0.115301 -0.079752\nv 0.077078 0.115337 -0.086004\nv 0.072402 0.115301 -0.079752\nv 0.078382 0.115337 -0.086023\nv 0.072607 0.115301 -0.079729\nv 0.078707 0.115337 -0.086038\nv 0.072723 0.115301 -0.079679\nv 0.078957 0.115337 -0.085982\nv 0.072793 0.115301 -0.079609\nv 0.079111 0.115336 -0.085828\nv 0.079168 0.115334 -0.085578\nv 0.072843 0.1153 -0.079493\nv 0.079152 0.115332 -0.085254\nv 0.072866 0.115299 -0.079288\nv 0.079134 0.115325 -0.08395\nv 0.072866 0.115292 -0.078113\nv 0.072866 0.114487 0.06437\nv 0.079134 0.114454 0.070207\nv 0.072866 0.114481 0.065545\nv 0.079152 0.114447 0.071511\nv 0.072843 0.114479 0.06575\nv 0.079168 0.114445 0.071835\nv 0.072793 0.114479 0.065866\nv 0.079111 0.114444 0.072085\nv 0.078957 0.114443 0.072239\nv 0.072723 0.114478 0.065936\nv 0.078707 0.114442 0.072295\nv 0.072607 0.114478 0.065986\nv 0.078382 0.114443 0.07228\nv 0.072402 0.114478 0.066009\nv -0.07721 0.114458 0.072403\nv 0.07721 0.114458 0.072403\nv 0.079276 0.114469 0.070339\nv 0.079276 0.115342 -0.084082\nv -0.07721 0.115353 -0.086146\nv 0.07721 0.115353 -0.086146\nv -0.079276 0.115342 -0.084082\nv -0.079276 0.114469 0.070339\nv 0.078511 0.114458 0.072415\nv 0.078821 0.114458 0.072414\nv -0.078821 0.114458 0.072414\nv -0.078511 0.114458 0.072415\nv 0.079287 0.115349 -0.085382\nv 0.079286 0.115351 -0.085692\nv -0.078511 0.115353 -0.086158\nv -0.078821 0.115353 -0.086156\nv 0.079061 0.114458 0.072343\nv 0.079216 0.114459 0.072188\nv 0.079286 0.11446 0.071949\nv 0.079287 0.114462 0.07164\nv -0.079061 0.114458 0.072343\nv -0.079216 0.114459 0.072188\nv -0.079286 0.11446 0.071949\nv -0.079287 0.114462 0.07164\nv 0.079216 0.115352 -0.085931\nv 0.079061 0.115353 -0.086086\nv 0.078821 0.115353 -0.086156\nv 0.078511 0.115353 -0.086158\nv -0.079061 0.115353 -0.086086\nv -0.079216 0.115352 -0.085931\nv -0.079286 0.115351 -0.085692\nv -0.079287 0.115349 -0.085382\nv -0.077314 0.114504 0.072513\nv 0.077314 0.114504 0.072513\nv -0.077387 0.114583 0.072593\nv 0.077387 0.114583 0.072593\nv -0.077431 0.114692 0.07264\nv 0.077431 0.114692 0.072641\nv 0.079386 0.114516 0.070442\nv 0.079386 0.115389 -0.084184\nv 0.079465 0.114594 0.070516\nv 0.079465 0.115469 -0.084257\nv 0.079512 0.114704 0.07056\nv 0.079512 0.115579 -0.0843\nv -0.077314 0.115401 -0.086256\nv 0.077314 0.115401 -0.086256\nv -0.077387 0.11548 -0.086334\nv 0.077387 0.11548 -0.086334\nv -0.077431 0.115591 -0.086381\nv 0.077431 0.115591 -0.086381\nv -0.079386 0.115389 -0.084184\nv -0.079386 0.114516 0.070442\nv -0.079465 0.114594 0.070516\nv -0.079465 0.115469 -0.084257\nv -0.079512 0.115579 -0.0843\nv -0.079512 0.114704 0.07056\nv 0.078611 0.114504 0.07252\nv 0.078909 0.114504 0.072506\nv 0.078683 0.114583 0.072596\nv 0.078973 0.114583 0.072572\nv 0.078726 0.114692 0.072641\nv 0.079011 0.114693 0.072612\nv -0.078909 0.114504 0.072506\nv -0.078611 0.114504 0.07252\nv -0.078973 0.114583 0.072572\nv -0.078683 0.114583 0.072596\nv -0.079011 0.114693 0.072612\nv -0.078726 0.114692 0.072641\nv -0.079024 0.114834 0.072626\nv -0.07874 0.114834 0.072657\nv 0.079393 0.115397 -0.085482\nv 0.079378 0.115398 -0.08578\nv 0.079468 0.115476 -0.085553\nv 0.079444 0.115478 -0.085842\nv 0.079513 0.115586 -0.085595\nv 0.079483 0.115588 -0.08588\nv -0.078611 0.115401 -0.086262\nv -0.078909 0.115401 -0.086248\nv -0.078683 0.11548 -0.086337\nv -0.078973 0.11548 -0.086313\nv -0.078726 0.115591 -0.086381\nv -0.079011 0.115591 -0.086352\nv 0.079141 0.114505 0.072425\nv 0.079198 0.114583 0.072483\nv 0.079233 0.114693 0.072519\nv 0.079297 0.114506 0.072269\nv 0.079355 0.114584 0.072326\nv 0.07939 0.114694 0.072361\nv 0.079378 0.114507 0.072038\nv 0.079444 0.114585 0.072101\nv 0.079483 0.114695 0.07214\nv 0.079393 0.114509 0.07174\nv 0.079468 0.114587 0.071811\nv 0.079513 0.114697 0.071855\nv -0.079141 0.114505 0.072425\nv -0.079198 0.114583 0.072483\nv -0.079233 0.114693 0.072519\nv -0.079244 0.114835 0.072531\nv -0.079297 0.114506 0.072269\nv -0.079355 0.114584 0.072326\nv -0.07939 0.114694 0.072361\nv -0.079402 0.114836 0.072374\nv -0.079378 0.114507 0.072038\nv -0.079444 0.114585 0.072101\nv -0.079483 0.114695 0.07214\nv -0.079496 0.114837 0.072153\nv -0.079392 0.114509 0.07174\nv -0.079468 0.114587 0.071811\nv -0.079513 0.114697 0.071855\nv 0.079297 0.1154 -0.086011\nv 0.079355 0.115479 -0.086068\nv 0.07939 0.115589 -0.086101\nv 0.079141 0.115401 -0.086167\nv 0.079198 0.11548 -0.086225\nv 0.079233 0.11559 -0.086259\nv 0.078909 0.115401 -0.086248\nv 0.078973 0.11548 -0.086313\nv 0.079011 0.115591 -0.086352\nv 0.078611 0.115401 -0.086262\nv 0.078683 0.11548 -0.086337\nv 0.078726 0.115591 -0.086381\nv -0.079141 0.115401 -0.086167\nv -0.079198 0.11548 -0.086225\nv -0.079233 0.11559 -0.086259\nv -0.079297 0.1154 -0.086011\nv -0.079355 0.115479 -0.086068\nv -0.07939 0.115589 -0.086101\nv -0.079378 0.115398 -0.08578\nv -0.079444 0.115478 -0.085842\nv -0.079483 0.115588 -0.08588\nv -0.079392 0.115397 -0.085482\nv -0.079468 0.115476 -0.085553\nv -0.079513 0.115586 -0.085595\n\nvt 0.355452 0.355832 0\nvt 0.355314 0.010914 0\nvt 0.010612 0.010928 0\nvt 0.010739 0.35567 0\nvt 0.844588 0.328846 0\nvt 0.845697 0.32884 0\nvt 0.842998 0.01112 0\nvt 0.844108 0.011115 0\nvt 0.727209 0.328472 0\nvt 0.726897 0.01003 0\nvt 0.726142 0.328473 0\nvt 0.72583 0.01003 0\nvt 0.854928 0.009196 0\nvt 0.853811 0.009196 0\nvt 0.853737 0.328941 0\nvt 0.854853 0.328941 0\nvt 0.801529 0.011811 0\nvt 0.800443 0.011812 0\nvt 0.801549 0.330034 0\nvt 0.800463 0.330033 0\nvt 0.809899 0.008251 0\nvt 0.809698 0.008303 0\nvt 0.809957 0.008812 0\nvt 0.758886 0.331188 0\nvt 0.759049 0.33113 0\nvt 0.758811 0.330704 0\nvt 0.768226 0.008327 0\nvt 0.767994 0.008321 0\nvt 0.768178 0.008966 0\nvt 0.888197 0.332518 0\nvt 0.888455 0.332502 0\nvt 0.888198 0.331834 0\nvt 0.355312 0.0074 0\nvt 0.010613 0.007412 0\nvt 0.355312 0.008035 0\nvt 0.010613 0.008047 0\nvt 0.358194 0.010912 0\nvt 0.358963 0.35584 0\nvt 0.358829 0.010911 0\nvt 0.358328 0.35584 0\nvt 0.010738 0.359181 0\nvt 0.355449 0.359346 0\nvt 0.010738 0.358547 0\nvt 0.35545 0.358711 0\nvt 0.007096 0.010929 0\nvt 0.007227 0.355673 0\nvt 0.007731 0.010928 0\nvt 0.007862 0.355672 0\nvt 0.727239 0.333025 0\nvt 0.844594 0.33209 0\nvt 0.845703 0.331501 0\nvt 0.844591 0.331505 0\nvt 0.726246 0.333146 0\nvt 0.845707 0.332088 0\nvt 0.81232 0.00866 0\nvt 0.843006 0.007829 0\nvt 0.812309 0.008073 0\nvt 0.843008 0.008424 0\nvt 0.726907 0.007451 0\nvt 0.854767 0.33362 0\nvt 0.726907 0.006888 0\nvt 0.725831 0.007454 0\nvt 0.853358 0.333531 0\nvt 0.725829 0.006886 0\nvt 0.853818 0.006529 0\nvt 0.800489 0.007299 0\nvt 0.854933 0.005942 0\nvt 0.801798 0.007706 0\nvt 0.853817 0.005941 0\nvt 0.854933 0.006531 0\nvt 0.809399 0.008662 0\nvt 0.809395 0.008851 0\nvt 0.808938 0.008875 0\nvt 0.808947 0.008547 0\nvt 0.007144 0.006706 0\nvt 0.808525 0.008457 0\nvt 0.808517 0.008885 0\nvt 0.007735 0.006772 0\nvt 0.007082 0.007292 0\nvt 0.007721 0.007321 0\nvt 0.007055 0.007961 0\nvt 0.007711 0.007974 0\nvt 0.809449 0.008509 0\nvt 0.809028 0.008273 0\nvt 0.006614 0.006653 0\nvt 0.808611 0.008067 0\nvt 0.006531 0.00726 0\nvt 0.006498 0.007953 0\nvt 0.809547 0.008389 0\nvt 0.809195 0.008047 0\nvt 0.808825 0.007713 0\nvt 0.006127 0.006579 0\nvt 0.767179 0.333239 0\nvt 0.808449 0.007214 0\nvt 0.005997 0.007206 0\nvt 0.767161 0.332621 0\nvt 0.005974 0.007951 0\nvt 0.809464 0.007875 0\nvt 0.809235 0.007451 0\nvt 0.76768 0.333218 0\nvt 0.808987 0.006911 0\nvt 0.767654 0.33262 0\nvt 0.809839 0.007762 0\nvt 0.809776 0.007284 0\nvt 0.768243 0.333191 0\nvt 0.809712 0.006736 0\nvt 0.768236 0.332616 0\nvt 0.759273 0.330827 0\nvt 0.759281 0.330677 0\nvt 0.759618 0.330907 0\nvt 0.759659 0.330683 0\nvt 0.759885 0.33096 0\nvt 0.760006 0.330725 0\nvt 0.359277 0.007974 0\nvt 0.3587 0.007379 0\nvt 0.760078 0.330989 0\nvt 0.35874 0.007991 0\nvt 0.760152 0.330799 0\nvt 0.358093 0.007394 0\nvt 0.358114 0.008014 0\nvt 0.759236 0.330949 0\nvt 0.759562 0.331096 0\nvt 0.759836 0.331172 0\nvt 0.76009 0.331148 0\nvt 0.35868 0.006883 0\nvt 0.810151 0.331684 0\nvt 0.358085 0.00688 0\nvt 0.760539 0.330724 0\nvt 0.759163 0.33105 0\nvt 0.759464 0.331277 0\nvt 0.759777 0.331436 0\nvt 0.81065 0.332261 0\nvt 0.760246 0.331534 0\nvt 0.81061 0.331681 0\nvt 0.760838 0.33113 0\nvt 0.759279 0.331454 0\nvt 0.759545 0.331749 0\nvt 0.811119 0.332253 0\nvt 0.759942 0.332118 0\nvt 0.811101 0.331675 0\nvt 0.758981 0.331608 0\nvt 0.759095 0.332027 0\nvt 0.759237 0.332536 0\nvt 0.81169 0.332257 0\nvt 0.811687 0.331672 0\nvt 0.767567 0.008697 0\nvt 0.76754 0.00895 0\nvt 0.766995 0.008964 0\nvt 0.006395 0.358586 0\nvt 0.006475 0.359005 0\nvt 0.766983 0.008463 0\nvt 0.006876 0.358534 0\nvt 0.006932 0.359012 0\nvt 0.007374 0.358496 0\nvt 0.007398 0.359034 0\nvt 0.007962 0.358476 0\nvt 0.007955 0.359061 0\nvt 0.767656 0.008503 0\nvt 0.006493 0.359316 0\nvt 0.767165 0.00805 0\nvt 0.006923 0.359394 0\nvt 0.007373 0.359475 0\nvt 0.007931 0.359555 0\nvt 0.767801 0.008377 0\nvt 0.767487 0.007794 0\nvt 0.006429 0.359575 0\nvt 0.767368 0.007188 0\nvt 0.006836 0.359736 0\nvt 0.889073 0.005871 0\nvt 0.767368 0.00658 0\nvt 0.00729 0.359888 0\nvt 0.88912 0.006486 0\nvt 0.007888 0.360024 0\nvt 0.767873 0.007745 0\nvt 0.767858 0.007216 0\nvt 0.888586 0.005901 0\nvt 0.767921 0.006673 0\nvt 0.888619 0.006497 0\nvt 0.768285 0.0078 0\nvt 0.76836 0.007334 0\nvt 0.768449 0.006863 0\nvt 0.888025 0.005918 0\nvt 0.88803 0.006506 0\nvt 0.888875 0.33207 0\nvt 0.888871 0.331806 0\nvt 0.889426 0.331749 0\nvt 0.358317 0.360364 0\nvt 0.889559 0.33225 0\nvt 0.358729 0.360389 0\nvt 0.358314 0.359871 0\nvt 0.35885 0.35989 0\nvt 0.890381 0.332645 0\nvt 0.35831 0.359342 0\nvt 0.358909 0.359352 0\nvt 0.358311 0.358714 0\nvt 0.358942 0.358722 0\nvt 0.888802 0.332279 0\nvt 0.889373 0.33272 0\nvt 0.889959 0.333332 0\nvt 0.35931 0.359937 0\nvt 0.75996 0.006994 0\nvt 0.890331 0.334227 0\nvt 0.359426 0.359392 0\nvt 0.759985 0.007527 0\nvt 0.359478 0.358733 0\nvt 0.888658 0.332423 0\nvt 0.889049 0.332986 0\nvt 0.889356 0.33363 0\nvt 0.759558 0.006995 0\nvt 0.889533 0.334448 0\nvt 0.759561 0.00753 0\nvt 0.888643 0.333102 0\nvt 0.888746 0.333709 0\nvt 0.759115 0.006976 0\nvt 0.888735 0.33441 0\nvt 0.759102 0.007524 0\nvt 0.888169 0.333095 0\nvt 0.888116 0.333625 0\nvt 0.888026 0.334174 0\nvt 0.758568 0.006949 0\nvt 0.758551 0.00751 0\nvt 0.810136 0.329027 0\nvt 0.355312 0.006867 0\nvt 0.80852 0.011333 0\nvt 0.010613 0.006878 0\nvt 0.810593 0.329025 0\nvt 0.808977 0.011331 0\nvt 0.811085 0.329022 0\nvt 0.809469 0.011328 0\nvt 0.811671 0.329019 0\nvt 0.810053 0.011325 0\nvt 0.760014 0.010019 0\nvt 0.359497 0.35584 0\nvt 0.760322 0.3284 0\nvt 0.359364 0.010911 0\nvt 0.759883 0.328399 0\nvt 0.759575 0.010019 0\nvt 0.759102 0.010019 0\nvt 0.759411 0.328399 0\nvt 0.75854 0.01002 0\nvt 0.758849 0.3284 0\nvt 0.010737 0.359715 0\nvt 0.355449 0.35988 0\nvt 0.889134 0.009193 0\nvt 0.010736 0.36021 0\nvt 0.889104 0.329 0\nvt 0.355449 0.360375 0\nvt 0.888639 0.009193 0\nvt 0.888609 0.329 0\nvt 0.88805 0.009193 0\nvt 0.88802 0.329001 0\nvt 0.006562 0.010929 0\nvt 0.006694 0.355673 0\nvt 0.767176 0.330016 0\nvt 0.006066 0.010929 0\nvt 0.767155 0.011763 0\nvt 0.006198 0.355674 0\nvt 0.767658 0.330016 0\nvt 0.767638 0.011763 0\nvt 0.768231 0.330016 0\nvt 0.768211 0.011763 0\nvt 0.727235 0.332551 0\nvt 0.726185 0.332678 0\nvt 0.72723 0.33211 0\nvt 0.726144 0.332217 0\nvt 0.727226 0.331632 0\nvt 0.726117 0.33171 0\nvt 0.727221 0.331063 0\nvt 0.726109 0.331102 0\nvt 0.843002 0.007329 0\nvt 0.812301 0.007577 0\nvt 0.842996 0.006866 0\nvt 0.812294 0.007117 0\nvt 0.80047 0.333185 0\nvt 0.842989 0.006371 0\nvt 0.770505 0.333185 0\nvt 0.812288 0.006619 0\nvt 0.80047 0.332612 0\nvt 0.770505 0.332613 0\nvt 0.854774 0.33312 0\nvt 0.853471 0.332939 0\nvt 0.853576 0.332463 0\nvt 0.854782 0.332658 0\nvt 0.853664 0.332003 0\nvt 0.854792 0.332162 0\nvt 0.854805 0.331576 0\nvt 0.853721 0.33148 0\nvt 0.800479 0.007781 0\nvt 0.801563 0.008145 0\nvt 0.801455 0.008485 0\nvt 0.80047 0.008225 0\nvt 0.800461 0.008701 0\nvt 0.801418 0.008847 0\nvt 0.800453 0.009264 0\nvt 0.801432 0.009305 0\nvt 0.812372 0.011311 0\nvt 0.885682 0.329001 0\nvt 0.885678 0.33173 0\nvt 0.756623 0.328402 0\nvt 0.756666 0.330924 0\nvt 0.801551 0.332614 0\nvt 0.770485 0.011764 0\nvt 0.770514 0.009138 0\nvt 0.81399 0.329007 0\nvt 0.756311 0.010021 0\nvt 0.885715 0.009193 0\nvt 0.770503 0.330017 0\nvt 0.756705 0.332877 0\nvt 0.814005 0.332247 0\nvt 0.814002 0.331662 0\nvt 0.756317 0.007473 0\nvt 0.885651 0.333794 0\nvt 0.756318 0.00691 0\nvt 0.88571 0.00652 0\nvt 0.770544 0.007155 0\nvt 0.88571 0.005932 0\nvt 0.756696 0.3324 0\nvt 0.756688 0.331958 0\nvt 0.756678 0.331485 0\nvt 0.885658 0.333296 0\nvt 0.885665 0.332831 0\nvt 0.885671 0.332329 0\nvt 0.770537 0.007634 0\nvt 0.77053 0.008081 0\nvt 0.770523 0.008563 0\nvt 0.719508 0.011413 0\nvt 0.705635 0.02443 0\nvt 0.720188 0.35387 0\nvt 0.706269 0.340896 0\nvt 0.70627 0.343497 0\nvt 0.72024 0.356777 0\nvt 0.70622 0.34395 0\nvt 0.720278 0.357498 0\nvt 0.720155 0.358057 0\nvt 0.706109 0.344207 0\nvt 0.705955 0.344361 0\nvt 0.719817 0.358402 0\nvt 0.705696 0.344471 0\nvt 0.71926 0.358532 0\nvt 0.705242 0.344519 0\nvt 0.718539 0.358502 0\nvt 0.702639 0.344501 0\nvt 0.715621 0.358477 0\nvt 0.385312 0.343974 0\nvt 0.372294 0.357912 0\nvt 0.382683 0.34397 0\nvt 0.369402 0.357947 0\nvt 0.382225 0.343918 0\nvt 0.368685 0.35798 0\nvt 0.381964 0.343807 0\nvt 0.368131 0.357854 0\nvt 0.367792 0.357513 0\nvt 0.381808 0.343652 0\nvt 0.381696 0.343393 0\nvt 0.367669 0.356957 0\nvt 0.381643 0.342937 0\nvt 0.367705 0.356237 0\nvt 0.381624 0.340319 0\nvt 0.367755 0.353344 0\nvt 0.380968 0.023834 0\nvt 0.367049 0.010857 0\nvt 0.380967 0.021243 0\nvt 0.367002 0.007939 0\nvt 0.381018 0.020791 0\nvt 0.366967 0.007215 0\nvt 0.381129 0.020534 0\nvt 0.367094 0.006657 0\nvt 0.381283 0.02038 0\nvt 0.367437 0.006316 0\nvt 0.367994 0.00619 0\nvt 0.381542 0.020271 0\nvt 0.368714 0.006225 0\nvt 0.381996 0.020223 0\nvt 0.371625 0.006264 0\nvt 0.384604 0.020241 0\nvt 0.701933 0.020759 0\nvt 0.71495 0.006822 0\nvt 0.704566 0.020761 0\nvt 0.717845 0.00679 0\nvt 0.705025 0.020812 0\nvt 0.718562 0.006757 0\nvt 0.705285 0.020924 0\nvt 0.719115 0.006885 0\nvt 0.719453 0.007228 0\nvt 0.705443 0.02108 0\nvt 0.719575 0.007787 0\nvt 0.705556 0.021341 0\nvt 0.719539 0.008512 0\nvt 0.70561 0.0218 0\nvt 0.720505 0.354164 0\nvt 0.719824 0.011117 0\nvt 0.715245 0.006504 0\nvt 0.371331 0.005946 0\nvt 0.367439 0.353639 0\nvt 0.366732 0.010563 0\nvt 0.372 0.358229 0\nvt 0.715915 0.358795 0\nvt 0.719841 0.00821 0\nvt 0.71983 0.007511 0\nvt 0.72054 0.357743 0\nvt 0.720541 0.357063 0\nvt 0.368426 0.005925 0\nvt 0.367742 0.00593 0\nvt 0.367404 0.356523 0\nvt 0.367408 0.357209 0\nvt 0.719673 0.006986 0\nvt 0.719341 0.00665 0\nvt 0.718817 0.006497 0\nvt 0.718133 0.006489 0\nvt 0.720394 0.358281 0\nvt 0.720054 0.358626 0\nvt 0.719524 0.358789 0\nvt 0.718832 0.358805 0\nvt 0.367218 0.006081 0\nvt 0.36687 0.006415 0\nvt 0.366704 0.006951 0\nvt 0.366694 0.007648 0\nvt 0.367564 0.357736 0\nvt 0.718372 0.007092 0\nvt 0.3679 0.358077 0\nvt 0.36844 0.358233 0\nvt 0.718317 0.007633 0\nvt 0.368431 0.358241 0\nvt 0.369117 0.358247 0\nvt 0.720772 0.354393 0\nvt 0.72009 0.010888 0\nvt 0.844647 0.011234 0\nvt 0.72102 0.354556 0\nvt 0.846235 0.328717 0\nvt 0.720337 0.010723 0\nvt 0.844401 0.011144 0\nvt 0.84599 0.328809 0\nvt 0.715474 0.006238 0\nvt 0.371103 0.005678 0\nvt 0.725624 0.328357 0\nvt 0.715638 0.00599 0\nvt 0.725313 0.010146 0\nvt 0.37094 0.00543 0\nvt 0.72586 0.328444 0\nvt 0.725549 0.010059 0\nvt 0.853039 0.009469 0\nvt 0.367173 0.353869 0\nvt 0.852966 0.328667 0\nvt 0.366465 0.010334 0\nvt 0.853269 0.009317 0\nvt 0.853196 0.328819 0\nvt 0.853517 0.009226 0\nvt 0.853443 0.32891 0\nvt 0.80228 0.012076 0\nvt 0.371771 0.358495 0\nvt 0.8023 0.329769 0\nvt 0.716143 0.359063 0\nvt 0.802077 0.329916 0\nvt 0.802056 0.011929 0\nvt 0.801815 0.01184 0\nvt 0.801836 0.330004 0\nvt 0.720097 0.007974 0\nvt 0.720041 0.00729 0\nvt 0.846243 0.331383 0\nvt 0.720341 0.007804 0\nvt 0.720242 0.007104 0\nvt 0.846249 0.331985 0\nvt 0.845997 0.33147 0\nvt 0.725974 0.333218 0\nvt 0.720422 0.006931 0\nvt 0.846003 0.332061 0\nvt 0.720762 0.357929 0\nvt 0.720794 0.357284 0\nvt 0.844887 0.007937 0\nvt 0.720966 0.358074 0\nvt 0.844746 0.008588 0\nvt 0.721036 0.357443 0\nvt 0.84459 0.007831 0\nvt 0.844501 0.008483 0\nvt 0.844243 0.007793 0\nvt 0.844197 0.008438 0\nvt 0.368204 0.005671 0\nvt 0.367552 0.005706 0\nvt 0.72531 0.007567 0\nvt 0.368044 0.00543 0\nvt 0.852563 0.333348 0\nvt 0.367403 0.005488 0\nvt 0.725305 0.006981 0\nvt 0.725548 0.007483 0\nvt 0.852917 0.333437 0\nvt 0.725542 0.006911 0\nvt 0.853053 0.006792 0\nvt 0.367149 0.356745 0\nvt 0.802785 0.00965 0\nvt 0.802208 0.00868 0\nvt 0.367186 0.357411 0\nvt 0.853279 0.006644 0\nvt 0.803005 0.009191 0\nvt 0.802295 0.008343 0\nvt 0.853275 0.006038 0\nvt 0.853526 0.006557 0\nvt 0.802121 0.008018 0\nvt 0.853521 0.005966 0\nvt 0.719853 0.006792 0\nvt 0.725608 0.332773 0\nvt 0.720018 0.006626 0\nvt 0.725889 0.332735 0\nvt 0.720198 0.006473 0\nvt 0.719526 0.006452 0\nvt 0.72556 0.332246 0\nvt 0.719693 0.006262 0\nvt 0.725838 0.332243 0\nvt 0.719021 0.006273 0\nvt 0.725534 0.331652 0\nvt 0.719181 0.006051 0\nvt 0.725809 0.331708 0\nvt 0.718357 0.006234 0\nvt 0.725566 0.330985 0\nvt 0.718517 0.005992 0\nvt 0.725813 0.331075 0\nvt 0.84539 0.00721 0\nvt 0.720597 0.358469 0\nvt 0.720594 0.358405 0\nvt 0.844992 0.007235 0\nvt 0.720779 0.358543 0\nvt 0.844631 0.007205 0\nvt 0.844252 0.007215 0\nvt 0.802369 0.333477 0\nvt 0.720245 0.35882 0\nvt 0.845344 0.006473 0\nvt 0.802163 0.333582 0\nvt 0.844959 0.006515 0\nvt 0.84458 0.006584 0\nvt 0.801925 0.333665 0\nvt 0.84421 0.006671 0\nvt 0.802298 0.332972 0\nvt 0.719725 0.359004 0\nvt 0.719734 0.359006 0\nvt 0.802078 0.333089 0\nvt 0.801838 0.333164 0\nvt 0.844448 0.006011 0\nvt 0.801552 0.333185 0\nvt 0.84411 0.006125 0\nvt 0.802291 0.332362 0\nvt 0.71906 0.359061 0\nvt 0.802073 0.332503 0\nvt 0.801834 0.332586 0\nvt 0.367049 0.005881 0\nvt 0.852839 0.332737 0\nvt 0.366897 0.005689 0\nvt 0.853129 0.332835 0\nvt 0.852892 0.332123 0\nvt 0.366688 0.00621 0\nvt 0.853056 0.332255 0\nvt 0.366548 0.006021 0\nvt 0.853288 0.332366 0\nvt 0.853017 0.331727 0\nvt 0.366478 0.006742 0\nvt 0.853192 0.33184 0\nvt 0.853399 0.331932 0\nvt 0.853013 0.331214 0\nvt 0.366435 0.007422 0\nvt 0.853222 0.33135 0\nvt 0.853448 0.331437 0\nvt 0.801929 0.008509 0\nvt 0.367369 0.357924 0\nvt 0.801874 0.008417 0\nvt 0.801756 0.008297 0\nvt 0.801901 0.008647 0\nvt 0.718137 0.006943 0\nvt 0.367719 0.358266 0\nvt 0.801786 0.008615 0\nvt 0.801648 0.00856 0\nvt 0.802004 0.008961 0\nvt 0.368232 0.358455 0\nvt 0.718065 0.007485 0\nvt 0.80182 0.008916 0\nvt 0.801638 0.008879 0\nvt 0.802133 0.009506 0\nvt 0.368894 0.3585 0\nvt 0.801914 0.009387 0\nvt 0.80169 0.009323 0\n\nf 671/731 670/730 669/729 \nf 671/731 669/729 672/732 \nf 675/735 674/734 673/733 \nf 674/734 675/735 676/736 \nf 679/739 678/738 677/737 \nf 678/738 679/739 680/740 \nf 683/743 682/742 681/741 \nf 683/743 681/741 684/744 \nf 687/747 686/746 685/745 \nf 686/746 687/747 688/748 \nf 691/751 690/750 689/749 \nf 694/754 693/753 692/752 \nf 697/757 696/756 695/755 \nf 700/760 699/759 698/758 \nf 703/763 702/762 701/761 \nf 702/762 703/763 704/764 \nf 707/767 706/766 705/765 \nf 705/765 706/766 708/768 \nf 711/771 710/770 709/769 \nf 710/770 711/771 712/772 \nf 715/775 714/774 713/773 \nf 714/774 715/775 716/776 \nf 719/780 718/779 717/778 \nf 717/778 718/779 720/782 \nf 723/785 722/784 721/783 \nf 721/783 722/784 724/786 \nf 727/790 726/789 725/787 \nf 726/789 727/790 728/792 \nf 731/797 730/795 729/793 \nf 729/793 730/795 732/798 \nf 691/751 734/800 733/799 \nf 735/801 733/799 734/800 \nf 733/799 735/801 736/802 \nf 736/802 738/805 737/804 \nf 738/805 736/802 735/801 \nf 737/803 740/808 739/807 \nf 740/808 737/803 738/806 \nf 739/807 742/810 741/809 \nf 742/810 739/807 740/808 \nf 691/751 733/799 743/811 \nf 743/811 736/802 744/812 \nf 736/802 743/811 733/799 \nf 744/812 737/804 745/814 \nf 737/804 744/812 736/802 \nf 739/807 745/813 737/803 \nf 745/813 739/807 746/815 \nf 746/815 741/809 747/816 \nf 741/809 746/815 739/807 \nf 691/751 743/811 748/817 \nf 743/811 749/818 748/817 \nf 749/818 743/811 744/812 \nf 744/812 750/819 749/818 \nf 750/819 744/812 745/814 \nf 745/813 751/823 750/820 \nf 751/823 745/813 746/815 \nf 746/815 752/825 751/823 \nf 752/825 746/815 747/816 \nf 691/751 748/817 690/750 \nf 753/826 748/817 749/818 \nf 748/817 753/826 690/750 \nf 754/827 749/818 750/819 \nf 749/818 754/827 753/826 \nf 750/819 755/829 754/827 \nf 755/829 750/819 751/822 \nf 751/821 756/830 755/828 \nf 756/830 751/821 752/824 \nf 690/750 753/826 757/831 \nf 690/750 757/831 689/749 \nf 753/826 754/827 758/832 \nf 753/826 758/832 757/831 \nf 754/827 759/834 758/832 \nf 759/834 754/827 755/829 \nf 755/828 760/835 759/833 \nf 760/835 755/828 756/830 \nf 694/754 762/837 761/836 \nf 761/836 764/839 763/838 \nf 764/839 761/836 762/837 \nf 763/838 766/841 765/840 \nf 766/841 763/838 764/839 \nf 765/840 768/846 767/844 \nf 768/846 765/840 766/841 \nf 767/843 770/848 769/847 \nf 770/848 767/843 768/845 \nf 694/754 761/836 771/849 \nf 763/838 771/849 761/836 \nf 771/849 763/838 772/850 \nf 765/840 772/850 763/838 \nf 772/850 765/840 773/851 \nf 773/851 767/844 774/852 \nf 767/844 773/851 765/840 \nf 774/853 769/847 775/855 \nf 769/847 774/853 767/843 \nf 694/754 771/849 776/857 \nf 777/858 771/849 772/850 \nf 771/849 777/858 776/857 \nf 778/859 772/850 773/851 \nf 772/850 778/859 777/858 \nf 773/851 774/852 779/861 \nf 773/851 779/861 778/859 \nf 779/861 775/856 780/863 \nf 775/856 779/861 774/852 \nf 694/754 776/857 693/753 \nf 776/857 777/858 781/864 \nf 776/857 781/864 693/753 \nf 777/858 778/859 782/865 \nf 777/858 782/865 781/864 \nf 778/859 779/861 783/867 \nf 778/859 783/867 782/865 \nf 779/860 780/862 784/868 \nf 779/860 784/868 783/866 \nf 693/753 781/864 785/869 \nf 785/869 692/752 693/753 \nf 782/865 786/870 781/864 \nf 786/870 785/869 781/864 \nf 782/865 783/867 787/871 \nf 782/865 787/871 786/870 \nf 783/866 784/868 788/873 \nf 783/866 788/873 787/872 \nf 697/757 790/875 789/874 \nf 791/876 789/874 790/875 \nf 789/874 791/876 792/879 \nf 793/880 792/878 791/877 \nf 792/878 793/880 794/881 \nf 795/882 794/881 793/880 \nf 794/881 795/882 796/883 \nf 797/884 796/883 795/882 \nf 796/883 797/884 798/885 \nf 697/757 789/874 799/886 \nf 792/879 799/886 789/874 \nf 799/886 792/879 800/888 \nf 794/881 800/887 792/878 \nf 800/887 794/881 801/889 \nf 796/883 801/889 794/881 \nf 801/889 796/883 802/890 \nf 798/885 802/890 796/883 \nf 802/890 798/885 803/891 \nf 697/757 799/886 804/892 \nf 804/892 800/888 805/893 \nf 800/888 804/892 799/886 \nf 805/894 801/889 806/896 \nf 801/889 805/894 800/887 \nf 802/890 806/896 801/889 \nf 806/896 802/890 807/899 \nf 808/901 807/899 802/890 \nf 808/901 802/890 803/891 \nf 697/757 804/892 696/756 \nf 804/892 809/902 696/756 \nf 809/902 804/892 805/893 \nf 805/893 810/903 809/902 \nf 810/903 805/893 806/895 \nf 810/903 806/895 811/905 \nf 811/905 806/895 807/898 \nf 811/904 807/897 812/906 \nf 812/906 807/897 808/900 \nf 696/756 813/907 695/755 \nf 813/907 696/756 809/902 \nf 809/902 814/908 813/907 \nf 814/908 809/902 810/903 \nf 814/908 810/903 815/909 \nf 815/909 810/903 811/905 \nf 811/904 816/911 815/910 \nf 816/911 811/904 812/906 \nf 700/760 818/913 817/912 \nf 819/914 817/912 818/913 \nf 817/912 819/914 820/916 \nf 821/918 820/917 819/915 \nf 820/917 821/918 822/919 \nf 823/921 822/919 821/918 \nf 822/919 823/921 824/922 \nf 825/923 824/922 823/921 \nf 824/922 825/923 826/924 \nf 700/760 817/912 827/925 \nf 820/916 827/925 817/912 \nf 827/925 820/916 828/926 \nf 822/920 828/926 820/916 \nf 828/926 822/920 829/927 \nf 824/922 829/928 822/919 \nf 829/928 824/922 830/931 \nf 826/924 830/931 824/922 \nf 830/931 826/924 831/933 \nf 700/760 827/925 832/934 \nf 827/925 828/926 833/935 \nf 833/935 832/934 827/925 \nf 829/927 833/935 828/926 \nf 833/935 829/927 834/936 \nf 829/927 830/930 835/938 \nf 835/938 834/936 829/927 \nf 830/929 831/932 836/939 \nf 836/939 835/937 830/929 \nf 700/760 832/934 699/759 \nf 833/935 837/940 832/934 \nf 837/940 699/759 832/934 \nf 834/936 838/941 833/935 \nf 838/941 837/940 833/935 \nf 835/938 839/943 834/936 \nf 839/943 838/941 834/936 \nf 836/939 840/944 835/937 \nf 840/944 839/942 835/937 \nf 699/759 841/945 698/758 \nf 841/945 699/759 837/940 \nf 837/940 842/946 841/945 \nf 842/946 837/940 838/941 \nf 839/943 843/947 838/941 \nf 843/947 842/946 838/941 \nf 840/944 844/949 839/942 \nf 844/949 843/948 839/942 \nf 701/761 702/762 845/951 \nf 846/953 845/951 702/762 \nf 846/952 847/954 845/950 \nf 847/954 846/952 848/955 \nf 847/954 850/957 849/956 \nf 850/957 847/954 848/955 \nf 849/956 852/959 851/958 \nf 852/959 849/956 850/957 \nf 854/963 853/961 707/767 \nf 707/767 853/961 706/766 \nf 855/964 853/960 854/962 \nf 853/960 855/964 856/965 \nf 858/967 857/966 855/964 \nf 855/964 857/966 856/965 \nf 860/969 859/968 858/967 \nf 858/967 859/968 857/966 \nf 709/769 862/971 861/970 \nf 862/971 709/769 710/770 \nf 861/970 864/975 863/973 \nf 864/975 861/970 862/971 \nf 863/972 866/977 865/976 \nf 866/977 863/972 864/974 \nf 865/976 868/979 867/978 \nf 868/979 865/976 866/977 \nf 713/773 714/774 869/980 \nf 869/980 714/774 870/981 \nf 869/980 870/981 871/983 \nf 871/983 870/981 872/985 \nf 872/984 873/986 871/982 \nf 873/986 872/984 874/987 \nf 873/986 876/989 875/988 \nf 876/989 873/986 874/987 \nf 717/777 878/991 877/990 \nf 878/991 717/777 720/781 \nf 878/991 879/992 877/990 \nf 879/992 878/991 880/993 \nf 879/992 882/995 881/994 \nf 882/995 879/992 880/993 \nf 881/994 884/997 883/996 \nf 884/997 881/994 882/995 \nf 886/999 885/998 723/785 \nf 723/785 885/998 722/784 \nf 888/1001 887/1000 886/999 \nf 886/999 887/1000 885/998 \nf 887/1000 890/1005 889/1003 \nf 890/1005 887/1000 888/1001 \nf 890/1004 891/1006 889/1002 \nf 891/1006 890/1004 892/1007 \nf 728/791 893/1008 726/788 \nf 893/1008 728/791 894/1009 \nf 895/1010 893/1008 894/1009 \nf 893/1008 895/1010 896/1011 \nf 897/1012 896/1011 895/1010 \nf 896/1011 897/1012 898/1013 \nf 900/1015 899/1014 897/1012 \nf 897/1012 899/1014 898/1013 \nf 902/1017 901/1016 731/796 \nf 731/796 901/1016 730/794 \nf 903/1018 901/1016 902/1017 \nf 901/1016 903/1018 904/1019 \nf 904/1019 903/1018 905/1020 \nf 906/1021 905/1020 903/1018 \nf 905/1020 906/1021 907/1022 \nf 908/1023 907/1022 906/1021 \nf 705/765 669/729 670/730 \nf 669/729 705/765 708/768 \nf 671/731 672/732 715/775 \nf 715/775 672/732 716/776 \nf 673/733 718/779 719/780 \nf 718/779 673/733 674/734 \nf 721/783 675/735 909/1024 \nf 675/735 721/783 724/786 \nf 682/742 729/793 732/798 \nf 682/742 732/798 681/741 \nf 684/744 910/1025 899/1014 \nf 899/1014 910/1025 911/1026 \nf 770/848 701/761 769/847 \nf 701/761 770/848 703/763 \nf 740/808 704/764 742/810 \nf 704/764 740/808 702/762 \nf 797/884 709/769 798/885 \nf 709/769 797/884 711/771 \nf 823/921 712/772 825/923 \nf 712/772 823/921 710/770 \nf 769/847 701/761 775/855 \nf 845/951 775/855 701/761 \nf 738/806 702/762 740/808 \nf 702/762 738/806 846/953 \nf 775/854 845/950 780/862 \nf 847/954 780/862 845/950 \nf 735/801 848/955 738/805 \nf 846/952 738/805 848/955 \nf 780/862 849/956 784/868 \nf 849/956 780/862 847/954 \nf 734/800 850/957 735/801 \nf 848/955 735/801 850/957 \nf 784/868 851/958 788/873 \nf 851/958 784/868 849/956 \nf 691/751 850/957 734/800 \nf 850/957 691/751 852/959 \nf 798/885 861/970 803/891 \nf 861/970 798/885 709/769 \nf 821/918 862/971 823/921 \nf 710/770 823/921 862/971 \nf 803/891 863/973 808/901 \nf 863/973 803/891 861/970 \nf 819/915 862/971 821/918 \nf 862/971 819/915 864/975 \nf 808/900 865/976 812/906 \nf 865/976 808/900 863/972 \nf 866/977 819/914 818/913 \nf 819/914 866/977 864/974 \nf 812/906 865/976 816/911 \nf 867/978 816/911 865/976 \nf 700/760 866/977 818/913 \nf 866/977 700/760 868/979 \nf 669/729 711/771 672/732 \nf 711/771 669/729 712/772 \nf 703/763 671/731 704/764 \nf 671/731 703/763 670/730 \nf 680/740 725/787 678/738 \nf 725/787 680/740 727/790 \nf 677/737 912/1027 883/996 \nf 913/1028 883/996 912/1027 \nf 687/747 914/1029 891/1006 \nf 891/1006 688/748 687/747 \nf 915/1030 907/1022 686/746 \nf 907/1022 915/1030 916/1031 \nf 706/766 825/923 708/768 \nf 825/923 706/766 826/924 \nf 768/845 707/767 770/848 \nf 770/848 707/767 705/765 \nf 742/810 713/773 741/809 \nf 713/773 742/810 715/775 \nf 716/776 795/882 714/774 \nf 795/882 716/776 797/884 \nf 853/961 831/933 706/766 \nf 706/766 831/933 826/924 \nf 854/963 768/845 766/842 \nf 768/845 854/963 707/767 \nf 856/965 836/939 853/960 \nf 853/960 836/939 831/932 \nf 764/839 854/962 766/841 \nf 854/962 764/839 855/964 \nf 857/966 836/939 856/965 \nf 836/939 857/966 840/944 \nf 762/837 858/967 764/839 \nf 764/839 858/967 855/964 \nf 859/968 840/944 857/966 \nf 840/944 859/968 844/949 \nf 694/754 860/969 762/837 \nf 762/837 860/969 858/967 \nf 741/809 869/980 747/816 \nf 869/980 741/809 713/773 \nf 714/774 795/882 870/981 \nf 870/981 795/882 793/880 \nf 869/980 752/825 747/816 \nf 752/825 869/980 871/983 \nf 870/981 793/880 872/985 \nf 872/985 793/880 791/877 \nf 752/824 871/982 756/830 \nf 756/830 871/982 873/986 \nf 872/984 791/876 874/987 \nf 874/987 791/876 790/875 \nf 756/830 873/986 760/835 \nf 760/835 873/986 875/988 \nf 874/987 697/757 876/989 \nf 697/757 874/987 790/875 \nf 708/768 712/772 669/729 \nf 712/772 708/768 825/923 \nf 770/848 670/730 703/763 \nf 670/730 770/848 705/765 \nf 704/764 671/731 742/810 \nf 742/810 671/731 715/775 \nf 716/776 672/732 711/771 \nf 716/776 711/771 797/884 \nf 852/959 917/1032 851/958 \nf 917/1032 852/959 909/1024 \nf 860/969 918/1033 859/968 \nf 918/1033 860/969 912/1027 \nf 919/1034 868/979 910/1025 \nf 868/979 919/1034 867/978 \nf 915/1030 920/1035 875/988 \nf 875/988 876/989 915/1030 \nf 788/873 921/1037 787/872 \nf 921/1037 788/873 922/1038 \nf 689/749 721/783 691/751 \nf 721/783 689/749 723/785 \nf 923/1039 843/948 844/949 \nf 843/948 923/1039 924/1041 \nf 926/1044 816/911 925/1042 \nf 816/911 926/1044 815/910 \nf 787/871 921/1036 786/870 \nf 786/870 921/1036 927/1045 \nf 927/1045 785/869 786/870 \nf 785/869 927/1045 928/1046 \nf 928/1046 692/752 785/869 \nf 692/752 928/1046 929/1047 \nf 692/752 913/1028 694/754 \nf 913/1028 692/752 929/1047 \nf 757/831 723/785 689/749 \nf 723/785 757/831 886/999 \nf 758/832 888/1001 757/831 \nf 757/831 888/1001 886/999 \nf 759/834 890/1005 758/832 \nf 888/1001 758/832 890/1005 \nf 760/835 890/1004 759/833 \nf 890/1004 760/835 892/1007 \nf 843/947 930/1048 842/946 \nf 930/1048 843/947 924/1040 \nf 931/1049 842/946 930/1048 \nf 842/946 931/1049 841/945 \nf 932/1050 698/758 931/1049 \nf 931/1049 698/758 841/945 \nf 911/1026 698/758 932/1050 \nf 698/758 911/1026 700/760 \nf 933/1051 814/908 926/1043 \nf 926/1043 814/908 815/909 \nf 934/1052 814/908 933/1051 \nf 814/908 934/1052 813/907 \nf 813/907 935/1053 695/755 \nf 935/1053 813/907 934/1052 \nf 695/755 935/1053 697/757 \nf 916/1031 697/757 935/1053 \nf 851/958 922/1038 788/873 \nf 922/1038 851/958 917/1032 \nf 691/751 721/783 852/959 \nf 852/959 721/783 909/1024 \nf 925/1042 867/978 919/1034 \nf 867/978 925/1042 816/911 \nf 910/1025 700/760 911/1026 \nf 700/760 910/1025 868/979 \nf 859/968 923/1039 844/949 \nf 923/1039 859/968 918/1033 \nf 913/1028 860/969 694/754 \nf 860/969 913/1028 912/1027 \nf 892/1007 760/835 920/1035 \nf 760/835 875/988 920/1035 \nf 915/1030 876/989 916/1031 \nf 876/989 697/757 916/1031 \nf 938/1056 937/1055 936/1054 \nf 937/1055 938/1056 939/1057 \nf 939/1057 938/1056 940/1058 \nf 941/1059 940/1058 938/1056 \nf 940/1058 941/1059 942/1060 \nf 943/1061 942/1060 941/1059 \nf 945/1063 943/1061 944/1062 \nf 942/1060 943/1061 945/1063 \nf 945/1063 944/1062 946/1064 \nf 946/1064 944/1062 947/1065 \nf 946/1064 949/1067 948/1066 \nf 949/1067 946/1064 947/1065 \nf 948/1066 951/1069 950/1068 \nf 951/1069 948/1066 949/1067 \nf 950/1068 953/1071 952/1070 \nf 953/1071 950/1068 951/1069 \nf 953/1071 955/1073 954/1072 \nf 953/1071 954/1072 952/1070 \nf 957/1075 956/1074 955/1073 \nf 954/1072 955/1073 956/1074 \nf 959/1077 958/1076 957/1075 \nf 956/1074 957/1075 958/1076 \nf 961/1079 960/1078 959/1077 \nf 959/1077 960/1078 958/1076 \nf 962/1080 960/1078 961/1079 \nf 960/1078 962/1080 963/1081 \nf 963/1081 965/1083 964/1082 \nf 965/1083 963/1081 962/1080 \nf 964/1082 967/1085 966/1084 \nf 967/1085 964/1082 965/1083 \nf 966/1084 969/1087 968/1086 \nf 969/1087 966/1084 967/1085 \nf 969/1087 971/1089 970/1088 \nf 969/1087 970/1088 968/1086 \nf 973/1091 972/1090 971/1089 \nf 970/1088 971/1089 972/1090 \nf 975/1093 974/1092 973/1091 \nf 972/1090 973/1091 974/1092 \nf 977/1095 976/1094 975/1093 \nf 974/1092 975/1093 976/1094 \nf 979/1097 978/1096 977/1095 \nf 977/1095 978/1096 976/1094 \nf 980/1098 978/1096 979/1097 \nf 978/1096 980/1098 981/1099 \nf 982/1100 981/1099 980/1098 \nf 981/1099 982/1100 983/1101 \nf 984/1102 983/1101 982/1100 \nf 983/1101 984/1102 985/1103 \nf 984/1102 987/1105 986/1104 \nf 984/1102 986/1104 985/1103 \nf 989/1107 988/1106 987/1105 \nf 986/1104 987/1105 988/1106 \nf 991/1109 990/1108 989/1107 \nf 988/1106 989/1107 990/1108 \nf 993/1111 992/1110 991/1109 \nf 990/1108 991/1109 992/1110 \nf 994/1112 992/1110 993/1111 \nf 992/1110 994/1112 995/1113 \nf 996/1114 995/1113 994/1112 \nf 995/1113 996/1114 997/1115 \nf 998/1116 997/1115 996/1114 \nf 997/1115 998/1116 999/1117 \nf 936/1054 999/1117 998/1116 \nf 999/1117 936/1054 937/1055 \nf 938/1056 1001/1119 1000/1118 \nf 1001/1119 938/1056 936/1054 \nf 984/1102 1002/1120 987/1105 \nf 1003/1121 1002/1120 984/1102 \nf 1005/1123 969/1087 1004/1122 \nf 969/1087 1005/1123 971/1089 \nf 1007/1125 1006/1124 953/1071 \nf 953/1071 1006/1124 955/1073 \nf 1009/1127 1008/1126 996/1114 \nf 1008/1126 998/1116 996/1114 \nf 943/1061 1011/1129 1010/1128 \nf 1011/1129 943/1061 941/1059 \nf 982/1100 980/1098 1012/1130 \nf 1013/1131 1012/1130 980/1098 \nf 967/1085 965/1083 1014/1132 \nf 1014/1132 965/1083 1015/1133 \nf 1016/1134 1009/1127 994/1112 \nf 1009/1127 996/1114 994/1112 \nf 1016/1134 993/1111 1017/1135 \nf 993/1111 1016/1134 994/1112 \nf 1018/1136 993/1111 991/1109 \nf 993/1111 1018/1136 1017/1135 \nf 1019/1137 991/1109 989/1107 \nf 991/1109 1019/1137 1018/1136 \nf 944/1062 1010/1128 1020/1138 \nf 1010/1128 944/1062 943/1061 \nf 947/1065 1020/1138 1021/1139 \nf 1020/1138 947/1065 944/1062 \nf 947/1065 1022/1140 949/1067 \nf 1022/1140 947/1065 1021/1139 \nf 949/1067 1023/1141 951/1069 \nf 949/1067 1022/1140 1023/1141 \nf 980/1098 979/1097 1013/1131 \nf 1024/1142 1013/1131 979/1097 \nf 1025/1143 979/1097 977/1095 \nf 979/1097 1025/1143 1024/1142 \nf 1026/1144 977/1095 975/1093 \nf 977/1095 1026/1144 1025/1143 \nf 1027/1145 975/1093 973/1091 \nf 975/1093 1027/1145 1026/1144 \nf 965/1083 962/1080 1015/1133 \nf 1015/1133 962/1080 1028/1146 \nf 962/1080 961/1079 1028/1146 \nf 1028/1146 961/1079 1029/1148 \nf 961/1079 1030/1151 1029/1148 \nf 1030/1151 961/1079 959/1077 \nf 959/1077 1031/1152 1030/1151 \nf 1031/1152 959/1077 957/1075 \nf 936/1054 998/1116 1001/1119 \nf 1008/1126 1001/1119 998/1116 \nf 941/1059 1000/1118 1011/1129 \nf 1000/1118 941/1059 938/1056 \nf 969/1087 967/1085 1004/1122 \nf 1004/1122 967/1085 1014/1132 \nf 1005/1123 973/1091 971/1089 \nf 973/1091 1005/1123 1027/1145 \nf 984/1102 982/1100 1003/1121 \nf 1012/1130 1003/1121 982/1100 \nf 1002/1120 989/1107 987/1105 \nf 989/1107 1002/1120 1019/1137 \nf 1023/1141 1007/1125 951/1069 \nf 951/1069 1007/1125 953/1071 \nf 957/1075 1006/1124 1031/1152 \nf 1006/1124 957/1075 955/1073 \nf 1001/1119 1032/1153 1000/1118 \nf 1033/1154 1032/1153 1001/1119 \nf 1032/1153 1035/1158 1034/1156 \nf 1035/1158 1032/1153 1033/1154 \nf 1035/1157 1036/1159 1034/1155 \nf 1037/1160 1036/1159 1035/1157 \nf 1036/1159 674/734 676/736 \nf 674/734 1036/1159 1037/1160 \nf 1003/1121 1038/1161 1002/1120 \nf 1039/1162 1038/1161 1003/1121 \nf 1038/1161 1041/1166 1040/1164 \nf 1041/1166 1038/1161 1039/1162 \nf 1041/1165 1042/1167 1040/1163 \nf 1043/1168 1042/1167 1041/1165 \nf 1043/1168 679/739 1042/1167 \nf 679/739 1043/1168 680/740 \nf 1045/1172 1004/1122 1044/1170 \nf 1004/1122 1045/1172 1005/1123 \nf 1046/1173 1045/1171 1044/1169 \nf 1045/1171 1046/1173 1047/1174 \nf 1048/1175 1047/1174 1046/1173 \nf 1047/1174 1048/1175 1049/1176 \nf 1048/1175 683/743 1049/1176 \nf 683/743 1048/1175 682/742 \nf 1051/1180 1050/1178 1007/1125 \nf 1007/1125 1050/1178 1006/1124 \nf 1052/1181 1050/1177 1051/1179 \nf 1050/1177 1052/1181 1053/1182 \nf 1055/1184 1054/1183 1052/1181 \nf 1052/1181 1054/1183 1053/1182 \nf 687/747 1054/1183 1055/1184 \nf 1054/1183 687/747 685/745 \nf 1008/1126 1009/1127 1056/1185 \nf 1057/1186 1056/1185 1009/1127 \nf 1056/1185 1057/1186 1058/1188 \nf 1059/1189 1058/1188 1057/1186 \nf 1058/1187 1059/1190 1060/1191 \nf 1061/1194 1060/1191 1059/1190 \nf 1060/1191 1061/1194 718/779 \nf 720/782 718/779 1061/1194 \nf 1010/1128 1063/1196 1062/1195 \nf 1063/1196 1010/1128 1011/1129 \nf 1062/1195 1065/1200 1064/1198 \nf 1065/1200 1062/1195 1063/1196 \nf 1064/1197 1067/1202 1066/1201 \nf 1067/1202 1064/1197 1065/1199 \nf 1066/1201 1069/1204 1068/1203 \nf 1069/1204 1066/1201 1067/1202 \nf 1012/1130 1013/1131 1070/1205 \nf 1071/1206 1070/1205 1013/1131 \nf 1070/1205 1071/1206 1072/1208 \nf 1073/1210 1072/1208 1071/1206 \nf 1072/1207 1073/1211 1074/1212 \nf 1075/1214 1074/1212 1073/1211 \nf 1074/1212 1075/1214 727/790 \nf 727/790 1075/1214 728/792 \nf 1014/1132 1015/1133 1076/1216 \nf 1076/1216 1015/1133 1077/1219 \nf 1076/1217 1077/1218 1078/1221 \nf 1078/1221 1077/1218 1079/1222 \nf 1079/1223 1080/1224 1078/1220 \nf 1080/1224 1079/1223 1081/1226 \nf 1081/1226 729/793 1080/1224 \nf 729/793 1081/1226 731/797 \nf 1082/1227 1057/1186 1016/1134 \nf 1057/1186 1009/1127 1016/1134 \nf 1083/1229 1059/1189 1082/1227 \nf 1059/1189 1057/1186 1082/1227 \nf 1084/1231 1061/1193 1083/1229 \nf 1061/1193 1059/1189 1083/1229 \nf 878/991 720/781 1084/1230 \nf 720/781 1061/1192 1084/1230 \nf 1082/1227 1017/1135 1085/1232 \nf 1017/1135 1082/1227 1016/1134 \nf 1083/1229 1085/1232 1086/1234 \nf 1085/1232 1083/1229 1082/1227 \nf 1087/1235 1084/1230 1086/1233 \nf 1084/1230 1083/1228 1086/1233 \nf 880/993 878/991 1087/1235 \nf 878/991 1084/1230 1087/1235 \nf 1088/1236 1017/1135 1018/1136 \nf 1017/1135 1088/1236 1085/1232 \nf 1089/1238 1085/1232 1088/1236 \nf 1085/1232 1089/1238 1086/1234 \nf 1086/1233 1090/1239 1087/1235 \nf 1090/1239 1086/1233 1089/1237 \nf 1087/1235 882/995 880/993 \nf 882/995 1087/1235 1090/1239 \nf 1091/1240 1018/1136 1019/1137 \nf 1018/1136 1091/1240 1088/1236 \nf 1088/1236 1092/1242 1089/1238 \nf 1092/1242 1088/1236 1091/1240 \nf 1089/1237 1093/1243 1090/1239 \nf 1093/1243 1089/1237 1092/1241 \nf 1090/1239 884/997 882/995 \nf 884/997 1090/1239 1093/1243 \nf 1020/1138 1062/1195 1094/1245 \nf 1062/1195 1020/1138 1010/1128 \nf 1094/1246 1064/1198 1095/1248 \nf 1064/1198 1094/1246 1062/1195 \nf 1095/1247 1066/1201 1096/1249 \nf 1066/1201 1095/1247 1064/1197 \nf 1068/1203 1096/1249 1066/1201 \nf 1096/1249 1068/1203 1097/1250 \nf 1021/1139 1094/1245 1098/1252 \nf 1094/1245 1021/1139 1020/1138 \nf 1098/1253 1095/1247 1099/1255 \nf 1095/1247 1098/1253 1094/1244 \nf 1099/1255 1096/1249 1100/1256 \nf 1096/1249 1099/1255 1095/1247 \nf 1097/1250 1100/1256 1096/1249 \nf 1100/1256 1097/1250 1101/1258 \nf 1021/1139 1102/1261 1022/1140 \nf 1102/1261 1021/1139 1098/1252 \nf 1098/1251 1103/1262 1102/1259 \nf 1103/1262 1098/1251 1099/1254 \nf 1099/1254 1100/1257 1104/1263 \nf 1099/1254 1104/1263 1103/1262 \nf 1100/1256 1101/1258 1105/1266 \nf 1100/1256 1105/1266 1104/1264 \nf 1102/1260 1106/1268 1022/1140 \nf 1022/1140 1106/1268 1023/1141 \nf 1103/1262 1107/1269 1102/1259 \nf 1102/1259 1107/1269 1106/1267 \nf 1104/1263 1108/1270 1103/1262 \nf 1103/1262 1108/1270 1107/1269 \nf 1105/1265 914/1029 1104/1263 \nf 1104/1263 914/1029 1108/1270 \nf 1013/1131 1024/1142 1071/1206 \nf 1109/1271 1071/1206 1024/1142 \nf 1071/1206 1109/1271 1073/1210 \nf 1110/1273 1073/1210 1109/1271 \nf 1073/1209 1110/1272 1075/1213 \nf 1075/1213 1110/1272 1111/1274 \nf 1075/1213 1111/1274 728/791 \nf 728/791 1111/1274 894/1009 \nf 1112/1276 1024/1142 1025/1143 \nf 1024/1142 1112/1276 1109/1271 \nf 1113/1278 1109/1271 1112/1276 \nf 1109/1271 1113/1278 1110/1273 \nf 1114/1279 1110/1272 1113/1277 \nf 1110/1272 1114/1279 1111/1274 \nf 1111/1274 895/1010 894/1009 \nf 895/1010 1111/1274 1114/1279 \nf 1115/1281 1025/1143 1026/1144 \nf 1025/1143 1115/1281 1112/1276 \nf 1116/1282 1112/1275 1115/1280 \nf 1112/1275 1116/1282 1113/1277 \nf 1117/1283 1113/1277 1116/1282 \nf 1113/1277 1117/1283 1114/1279 \nf 1114/1279 897/1012 895/1010 \nf 897/1012 1114/1279 1117/1283 \nf 1118/1285 1026/1144 1027/1145 \nf 1026/1144 1118/1285 1115/1281 \nf 1119/1286 1115/1280 1118/1284 \nf 1115/1280 1119/1286 1116/1282 \nf 1120/1287 1116/1282 1119/1286 \nf 1116/1282 1120/1287 1117/1283 \nf 1117/1283 900/1015 897/1012 \nf 900/1015 1117/1283 1120/1287 \nf 1015/1133 1028/1146 1077/1219 \nf 1077/1219 1028/1146 1121/1289 \nf 1077/1218 1121/1288 1079/1222 \nf 1079/1222 1121/1288 1122/1290 \nf 1122/1290 1081/1225 1079/1222 \nf 1081/1225 1122/1290 1123/1291 \nf 1123/1291 731/796 1081/1225 \nf 731/796 1123/1291 902/1017 \nf 1028/1146 1029/1148 1121/1289 \nf 1121/1289 1029/1148 1124/1294 \nf 1121/1288 1124/1292 1122/1290 \nf 1122/1290 1124/1292 1125/1295 \nf 1125/1295 1123/1291 1122/1290 \nf 1123/1291 1125/1295 1126/1296 \nf 1126/1296 902/1017 1123/1291 \nf 902/1017 1126/1296 903/1018 \nf 1029/1147 1127/1299 1124/1293 \nf 1127/1299 1029/1147 1030/1150 \nf 1124/1292 1128/1300 1125/1295 \nf 1128/1300 1124/1292 1127/1297 \nf 1129/1301 1125/1295 1128/1300 \nf 1125/1295 1129/1301 1126/1296 \nf 906/1021 1126/1296 1129/1301 \nf 1126/1296 906/1021 903/1018 \nf 1030/1149 1130/1303 1127/1298 \nf 1130/1303 1030/1149 1031/1152 \nf 1127/1297 1131/1304 1128/1300 \nf 1131/1304 1127/1297 1130/1302 \nf 1132/1305 1128/1300 1131/1304 \nf 1128/1300 1132/1305 1129/1301 \nf 908/1023 1129/1301 1132/1305 \nf 1129/1301 908/1023 906/1021 \nf 1001/1119 1008/1126 1033/1154 \nf 1056/1185 1033/1154 1008/1126 \nf 1033/1154 1056/1185 1035/1158 \nf 1058/1188 1035/1158 1056/1185 \nf 1035/1157 1058/1187 1037/1160 \nf 1060/1191 1037/1160 1058/1187 \nf 1037/1160 1060/1191 674/734 \nf 718/779 674/734 1060/1191 \nf 1011/1129 1032/1153 1063/1196 \nf 1032/1153 1011/1129 1000/1118 \nf 1063/1196 1034/1156 1065/1200 \nf 1034/1156 1063/1196 1032/1153 \nf 1065/1199 1036/1159 1067/1202 \nf 1036/1159 1065/1199 1034/1155 \nf 1067/1202 676/736 1069/1204 \nf 676/736 1067/1202 1036/1159 \nf 1004/1122 1014/1132 1044/1170 \nf 1044/1170 1014/1132 1076/1216 \nf 1044/1169 1076/1215 1046/1173 \nf 1046/1173 1076/1215 1078/1220 \nf 1078/1220 1048/1175 1046/1173 \nf 1048/1175 1078/1220 1080/1224 \nf 1080/1224 682/742 1048/1175 \nf 682/742 1080/1224 729/793 \nf 1045/1172 1027/1145 1005/1123 \nf 1027/1145 1045/1172 1118/1285 \nf 1047/1174 1118/1284 1045/1171 \nf 1118/1284 1047/1174 1119/1286 \nf 1049/1176 1119/1286 1047/1174 \nf 1119/1286 1049/1176 1120/1287 \nf 1120/1287 683/743 900/1015 \nf 683/743 1120/1287 1049/1176 \nf 1003/1121 1012/1130 1039/1162 \nf 1070/1205 1039/1162 1012/1130 \nf 1039/1162 1070/1205 1041/1166 \nf 1072/1208 1041/1166 1070/1205 \nf 1041/1165 1072/1207 1043/1168 \nf 1074/1212 1043/1168 1072/1207 \nf 1043/1168 1074/1212 680/740 \nf 680/740 1074/1212 727/790 \nf 1038/1161 1019/1137 1002/1120 \nf 1019/1137 1038/1161 1091/1240 \nf 1040/1164 1091/1240 1038/1161 \nf 1091/1240 1040/1164 1092/1242 \nf 1092/1241 1042/1167 1093/1243 \nf 1042/1167 1092/1241 1040/1163 \nf 1093/1243 679/739 884/997 \nf 679/739 1093/1243 1042/1167 \nf 1106/1268 1051/1180 1023/1141 \nf 1023/1141 1051/1180 1007/1125 \nf 1107/1269 1052/1181 1106/1267 \nf 1106/1267 1052/1181 1051/1179 \nf 1108/1270 1055/1184 1107/1269 \nf 1107/1269 1055/1184 1052/1181 \nf 914/1029 687/747 1108/1270 \nf 1108/1270 687/747 1055/1184 \nf 1031/1152 1050/1178 1130/1303 \nf 1050/1178 1031/1152 1006/1124 \nf 1130/1302 1053/1182 1131/1304 \nf 1053/1182 1130/1302 1050/1177 \nf 1054/1183 1131/1304 1053/1182 \nf 1131/1304 1054/1183 1132/1305 \nf 685/745 1132/1305 1054/1183 \nf 1132/1305 685/745 908/1023 \nf 917/1032 909/1024 675/735 \nf 917/1032 675/735 673/733 \nf 677/737 918/1033 912/1027 \nf 918/1033 677/737 678/738 \nf 684/744 681/741 919/1034 \nf 684/744 919/1034 910/1025 \nf 686/746 688/748 920/1035 \nf 920/1035 915/1030 686/746 \nf 922/1038 717/778 921/1037 \nf 717/778 922/1038 719/780 \nf 722/784 1068/1203 724/786 \nf 724/786 1068/1203 1069/1204 \nf 923/1039 726/789 924/1041 \nf 726/789 923/1039 725/787 \nf 730/795 925/1042 732/798 \nf 925/1042 730/795 926/1044 \nf 921/1036 877/990 927/1045 \nf 877/990 921/1036 717/777 \nf 877/990 928/1046 927/1045 \nf 928/1046 877/990 879/992 \nf 928/1046 881/994 929/1047 \nf 881/994 928/1046 879/992 \nf 929/1047 883/996 913/1028 \nf 883/996 929/1047 881/994 \nf 885/998 1097/1250 722/784 \nf 722/784 1097/1250 1068/1203 \nf 887/1000 1101/1258 885/998 \nf 885/998 1101/1258 1097/1250 \nf 1101/1258 889/1003 1105/1266 \nf 889/1003 1101/1258 887/1000 \nf 1105/1265 891/1006 914/1029 \nf 891/1006 1105/1265 889/1002 \nf 726/788 930/1048 924/1040 \nf 930/1048 726/788 893/1008 \nf 896/1011 930/1048 893/1008 \nf 930/1048 896/1011 931/1049 \nf 898/1013 932/1050 896/1011 \nf 896/1011 932/1050 931/1049 \nf 899/1014 932/1050 898/1013 \nf 932/1050 899/1014 911/1026 \nf 901/1016 933/1051 730/794 \nf 730/794 933/1051 926/1043 \nf 904/1019 933/1051 901/1016 \nf 933/1051 904/1019 934/1052 \nf 934/1052 904/1019 935/1053 \nf 905/1020 935/1053 904/1019 \nf 935/1053 905/1020 916/1031 \nf 907/1022 916/1031 905/1020 \nf 917/1032 719/780 922/1038 \nf 719/780 917/1032 673/733 \nf 675/735 724/786 1069/1204 \nf 675/735 1069/1204 676/736 \nf 732/798 925/1042 681/741 \nf 681/741 925/1042 919/1034 \nf 684/744 900/1015 683/743 \nf 900/1015 684/744 899/1014 \nf 678/738 923/1039 918/1033 \nf 923/1039 678/738 725/787 \nf 677/737 883/996 884/997 \nf 884/997 679/739 677/737 \nf 920/1035 688/748 892/1007 \nf 891/1006 892/1007 688/748 \nf 685/745 907/1022 908/1023 \nf 907/1022 685/745 686/746 \n\ng box5 top ribbon group11 polySurface62\nusemtl ribbon1\nv 0.017112 0.136638 -0.000919\nv 0.017647 0.136411 -0.000305\nv 0.015376 0.136282 0.00191\nv 0.015978 0.136072 0.002765\nv 0.014659 0.136502 0.000973\nv 0.016401 0.136884 -0.001607\nv 0.017365 0.137315 -0.004202\nv 0.018095 0.136987 -0.003764\nv 0.018543 0.13671 -0.003375\nv -0.016488 0.144457 0.037219\nv -0.014615 0.144428 0.039113\nv -0.021558 0.148851 0.045489\nv -0.019615 0.148821 0.047426\nv -0.01836 0.144486 0.035326\nv -0.023501 0.148881 0.043552\nv -0.012802 0.141113 0.027893\nv -0.011088 0.141087 0.029742\nv -0.009375 0.14106 0.03159\nv 0.005291 0.135799 0.012879\nv 0.006099 0.13559 0.014517\nv 0.000643 0.136593 0.017757\nv 0.001636 0.13653 0.019597\nv 0.004419 0.136015 0.011182\nv -0.000366 0.136658 0.015902\nv 0.009186 0.135681 0.008655\nv 0.008356 0.136021 0.007195\nv 0.009907 0.135356 0.010015\nv -0.005094 0.13841 0.023316\nv -0.003736 0.138389 0.025185\nv -0.006452 0.13843 0.021445\nv -0.02658 0.154609 0.054304\nv -0.024547 0.154577 0.056218\nv -0.031586 0.161058 0.063399\nv -0.029453 0.161023 0.065258\nv -0.028614 0.154642 0.052389\nv -0.033719 0.161093 0.06154\nv 0.013305 0.13611 -0.000815\nv 0.012706 0.136312 -0.001638\nv 0.014594 0.136664 -0.003489\nv 0.01512 0.136449 -0.002914\nv 0.012061 0.136722 -0.002512\nv 0.013985 0.137113 -0.004114\nv 0.015167 0.137569 -0.005791\nv 0.015714 0.137005 -0.005391\nv 0.016126 0.136747 -0.005031\nv 0.015683 0.136653 -0.002307\nv 0.013933 0.136299 0.000033\nv 0.016611 0.136999 -0.004652\nv 0.019893 0.137853 -0.006408\nv 0.019904 0.138332 -0.010419\nv 0.02059 0.138061 -0.006218\nv 0.020589 0.138572 -0.01047\nv 0.021214 0.138055 -0.006036\nv 0.021191 0.138565 -0.010528\nv 0.020329 0.137555 -0.002125\nv 0.020966 0.137549 -0.001702\nv 0.019632 0.137392 -0.002563\nv 0.018978 0.137393 -0.010297\nv 0.0193 0.137699 -0.010368\nv 0.018903 0.137043 -0.006756\nv 0.019275 0.137314 -0.006596\nv 0.018992 0.136947 -0.002993\nv -0.023977 0.144573 0.029646\nv -0.022105 0.144544 0.031539\nv -0.02933 0.148972 0.037741\nv -0.027387 0.148942 0.039678\nv -0.02585 0.144603 0.027754\nv -0.031274 0.149003 0.035804\nv -0.019656 0.14122 0.020498\nv -0.017942 0.141193 0.022347\nv -0.016229 0.141167 0.024196\nv -0.020232 0.144515 0.033433\nv -0.025444 0.148912 0.041615\nv -0.014515 0.14114 0.026045\nv -0.005947 0.141006 0.035287\nv -0.004233 0.14098 0.037135\nv -0.010871 0.14437 0.042899\nv -0.008999 0.14434 0.044792\nv -0.002519 0.140953 0.038984\nv -0.007125 0.144311 0.046684\nv -0.013787 0.14873 0.053237\nv -0.011842 0.148698 0.055173\nv -0.01573 0.14876 0.0513\nv -0.007661 0.141033 0.033439\nv -0.012743 0.144399 0.041006\nv -0.017673 0.14879 0.049363\nv 0.001939 0.135838 0.006226\nv 0.002746 0.135631 0.007847\nv -0.003353 0.136646 0.01037\nv -0.002358 0.136582 0.012205\nv 0.001104 0.136252 0.004572\nv -0.004356 0.136761 0.008525\nv 0.00532 0.13636 0.001665\nv 0.006076 0.135714 0.003052\nv 0.006789 0.135396 0.004382\nv 0.003555 0.135822 0.009485\nv -0.001367 0.13662 0.014045\nv 0.007523 0.135702 0.005736\nv 0.015468 0.13643 0.009581\nv 0.014698 0.136291 0.0084\nv 0.01799 0.136659 0.005438\nv 0.017274 0.136558 0.004518\nv 0.016206 0.136421 0.01074\nv 0.018676 0.13665 0.00634\nv 0.012242 0.136293 0.01423\nv 0.013037 0.136283 0.01565\nv 0.011419 0.136135 0.012786\nv 0.013952 0.135875 0.007242\nv 0.013296 0.135618 0.006153\nv 0.016582 0.136255 0.003614\nv 0.010621 0.135657 0.011364\nv -0.010522 0.13849 0.015833\nv -0.009165 0.13847 0.017703\nv -0.01188 0.13851 0.013962\nv -0.007808 0.13845 0.019573\nv 0.00362 0.136632 0.023292\nv 0.004625 0.136644 0.025145\nv -0.001023 0.138349 0.028926\nv 0.000334 0.138329 0.030797\nv 0.005635 0.136629 0.02699\nv 0.001695 0.138308 0.032666\nv -0.00238 0.138369 0.027055\nv 0.002622 0.136569 0.021439\nv -0.034713 0.154739 0.046645\nv -0.03268 0.154707 0.04856\nv -0.040119 0.161196 0.055963\nv -0.037986 0.161162 0.057822\nv -0.036747 0.154772 0.044731\nv -0.042252 0.16123 0.054103\nv -0.030647 0.154674 0.050475\nv -0.035852 0.161127 0.059681\nv -0.020481 0.154512 0.060047\nv -0.018447 0.154479 0.061961\nv -0.016413 0.154446 0.063876\nv -0.023054 0.160919 0.070836\nv -0.020921 0.160885 0.072696\nv -0.025187 0.160954 0.068977\nv -0.022514 0.154544 0.058133\nv -0.02732 0.160989 0.067117\nv 0.018526 0.137354 -0.006926\nv 0.017783 0.137764 -0.007111\nv 0.01867 0.137732 -0.010238\nv 0.017947 0.138219 -0.010177\nv 0.016275 0.137361 -0.007614\nv 0.015765 0.138021 -0.007789\nv 0.016539 0.13773 -0.009986\nv 0.016049 0.138496 -0.009924\nv 0.016797 0.137432 -0.01006\nv 0.016605 0.137081 -0.007464\nv 0.017015 0.137373 -0.007315\nv 0.017159 0.137765 -0.010143\nv 0.019534 0.137061 0.001649\nv 0.020188 0.137053 0.002308\nv 0.018839 0.136943 0.000972\nv 0.018179 0.136604 0.000307\nv 0.012641 0.135902 0.005052\nv 0.011876 0.136199 0.003849\nv 0.009766 0.135932 0.000489\nv 0.009076 0.136491 -0.000637\nv 0.010416 0.135657 0.001556\nv 0.011098 0.13592 0.002647\nv 0.008604 0.136166 0.019523\nv 0.009455 0.136155 0.021195\nv 0.007743 0.136073 0.017834\nv 0.006896 0.135779 0.016154\nv 0.015347 0.135929 0.001844\nv 0.016011 0.135714 0.002741\nv 0.01768 0.136053 -0.000336\nv 0.017053 0.13629 -0.00099\nv 0.016427 0.136526 -0.001644\nv 0.014683 0.136143 0.000948\nv 0.017971 0.136655 -0.003827\nv 0.017375 0.136958 -0.004245\nv 0.018567 0.136352 -0.003409\nv -0.014718 0.144096 0.039208\nv -0.01659 0.144124 0.037315\nv -0.02168 0.148532 0.045606\nv -0.019737 0.148502 0.047544\nv -0.018461 0.144153 0.035421\nv -0.023622 0.148562 0.043668\nv -0.011176 0.140745 0.029818\nv -0.012888 0.140771 0.027968\nv -0.009464 0.140719 0.031668\nv 0.005236 0.135443 0.012861\nv 0.000579 0.136239 0.017778\nv 0.006071 0.13523 0.01453\nv 0.001576 0.136176 0.019627\nv 0.004401 0.135655 0.011192\nv -0.000418 0.136302 0.015929\nv 0.009133 0.135328 0.008602\nv 0.00836 0.135661 0.007192\nv 0.009907 0.134995 0.010012\nv -0.005172 0.138062 0.023368\nv -0.003818 0.138042 0.02524\nv -0.006527 0.138081 0.021496\nv -0.031717 0.160754 0.063542\nv -0.029584 0.16072 0.065402\nv -0.02468 0.154271 0.056354\nv -0.026712 0.154302 0.054439\nv -0.028745 0.154334 0.052523\nv -0.033849 0.160787 0.061682\nv 0.015157 0.136092 -0.00295\nv 0.014531 0.136328 -0.003605\nv 0.013341 0.135752 -0.000843\nv 0.012677 0.135967 -0.00174\nv 0.013908 0.136792 -0.00426\nv 0.012017 0.136387 -0.002637\nv 0.015565 0.136694 -0.005495\nv 0.014975 0.13729 -0.005914\nv 0.016161 0.136391 -0.005077\nv 0.015792 0.136309 -0.002297\nv 0.014012 0.135948 0.000052\nv 0.016768 0.136675 -0.004661\nv 0.020073 0.137542 -0.006438\nv 0.020648 0.137707 -0.006258\nv 0.020091 0.138025 -0.010455\nv 0.020638 0.138217 -0.010512\nv 0.02122 0.137697 -0.006078\nv 0.02118 0.138207 -0.010568\nv 0.020388 0.137201 -0.002161\nv 0.020989 0.137192 -0.001744\nv 0.019783 0.137065 -0.002578\nv 0.018987 0.137035 -0.010339\nv 0.018912 0.136685 -0.006796\nv 0.019537 0.137429 -0.010397\nv 0.019491 0.137026 -0.006617\nv 0.019174 0.136635 -0.002993\nv -0.022205 0.144211 0.031634\nv -0.024077 0.14424 0.02974\nv -0.029449 0.148652 0.037856\nv -0.027507 0.148622 0.039793\nv -0.025949 0.144268 0.027846\nv -0.031392 0.148682 0.035918\nv -0.018025 0.140849 0.022418\nv -0.019737 0.140875 0.020569\nv -0.016312 0.140823 0.024268\nv -0.020333 0.144182 0.033527\nv -0.025564 0.148592 0.041731\nv -0.0146 0.140797 0.026118\nv -0.004327 0.140641 0.037217\nv -0.006039 0.140667 0.035367\nv -0.010974 0.144038 0.042996\nv -0.009102 0.144009 0.044889\nv -0.002615 0.140615 0.039067\nv -0.00723 0.14398 0.046783\nv -0.01391 0.148412 0.053356\nv -0.011968 0.148382 0.055294\nv -0.015852 0.148442 0.051419\nv -0.007751 0.140693 0.033517\nv -0.012846 0.144067 0.041102\nv -0.017795 0.148472 0.049481\nv 0.00188 0.135485 0.006188\nv -0.003413 0.13629 0.010383\nv 0.002715 0.135272 0.007857\nv -0.002416 0.136227 0.012232\nv 0.001048 0.135899 0.004519\nv -0.004409 0.136404 0.008534\nv 0.006016 0.135369 0.002966\nv 0.005248 0.136024 0.001555\nv 0.006789 0.135036 0.004376\nv 0.003558 0.135464 0.009525\nv -0.001417 0.136265 0.014081\nv 0.007575 0.135348 0.005784\nv 0.018025 0.1363 0.005427\nv 0.017356 0.136207 0.004531\nv 0.014772 0.13594 0.008433\nv 0.015494 0.13607 0.009582\nv 0.018693 0.136291 0.006323\nv 0.016214 0.136061 0.010732\nv 0.012263 0.135933 0.014236\nv 0.013042 0.135923 0.015645\nv 0.01148 0.135782 0.012827\nv 0.016682 0.135909 0.003636\nv 0.01332 0.135259 0.006136\nv 0.014045 0.135529 0.007285\nv 0.010692 0.135308 0.01142\nv -0.010592 0.138139 0.01588\nv -0.009237 0.13812 0.017752\nv -0.011947 0.138158 0.014007\nv -0.007882 0.1381 0.019624\nv 0.004572 0.136289 0.025174\nv 0.003574 0.136276 0.023325\nv -0.001108 0.138004 0.028985\nv 0.000247 0.137984 0.030857\nv 0.00557 0.136276 0.027023\nv 0.001602 0.137965 0.032729\nv 0.002575 0.136213 0.021476\nv -0.002463 0.138023 0.027112\nv -0.03281 0.154398 0.048692\nv -0.034842 0.154429 0.046777\nv -0.040245 0.160889 0.056101\nv -0.038113 0.160855 0.057962\nv -0.036875 0.154461 0.044862\nv -0.042377 0.160922 0.054241\nv -0.030777 0.154366 0.050608\nv -0.035981 0.160821 0.059822\nv -0.020615 0.154207 0.060185\nv -0.018583 0.154176 0.0621\nv -0.01655 0.154144 0.064016\nv -0.023188 0.160619 0.070983\nv -0.021056 0.160585 0.072843\nv -0.02532 0.160653 0.069123\nv -0.022648 0.154239 0.05827\nv -0.027452 0.160686 0.067263\nv 0.017781 0.137406 -0.007159\nv 0.018347 0.137046 -0.006977\nv 0.017916 0.137864 -0.010229\nv 0.018451 0.13745 -0.010284\nv 0.016058 0.137086 -0.007699\nv 0.015499 0.137797 -0.007881\nv 0.015752 0.138309 -0.010005\nv 0.01628 0.13749 -0.010059\nv 0.016624 0.136725 -0.007517\nv 0.016815 0.137076 -0.010114\nv 0.017202 0.137066 -0.007338\nv 0.017365 0.13747 -0.010171\nv 0.019585 0.136705 0.001623\nv 0.020215 0.136695 0.002277\nv 0.018952 0.136601 0.00097\nv 0.018315 0.13627 0.000317\nv 0.011891 0.135839 0.003835\nv 0.012605 0.135549 0.004986\nv 0.009017 0.136159 -0.000764\nv 0.009727 0.135588 0.000387\nv 0.010441 0.135298 0.001537\nv 0.011166 0.135569 0.002686\nv 0.0086 0.135805 0.019533\nv 0.009439 0.135795 0.021201\nv 0.007759 0.135715 0.017865\nv 0.006914 0.135422 0.016198\n\nvt 0.5 0.8125 0\nvt 0.4 0.8125 0\nvt 0.5 0.757812 0\nvt 0.4 0.757812 0\nvt 0.6 0.757812 0\nvt 0.6 0.8125 0\nvt 0.6 0.875 0\nvt 0.5 0.875 0\nvt 0.4 0.875 0\nvt 0.5 0.375 0\nvt 0.4 0.375 0\nvt 0.5 0.25 0\nvt 0.4 0.25 0\nvt 0.6 0.375 0\nvt 0.6 0.25 0\nvt 0.6 0.484375 0\nvt 0.5 0.484375 0\nvt 0.4 0.484375 0\nvt 0.5 0.65625 0\nvt 0.4 0.65625 0\nvt 0.5 0.617188 0\nvt 0.4 0.617188 0\nvt 0.6 0.65625 0\nvt 0.6 0.617188 0\nvt 0.5 0.6875 0\nvt 0.6 0.6875 0\nvt 0.4 0.6875 0\nvt 0.5 0.5625 0\nvt 0.4 0.5625 0\nvt 0.6 0.5625 0\nvt 0.5 0.125 0\nvt 0.4 0.125 0\nvt 0.5 0 0\nvt 0.4 0 0\nvt 0.6 0.125 0\nvt 0.6 0 0\nvt 0.8 0.757812 0\nvt 0.9 0.757812 0\nvt 0.9 0.8125 0\nvt 0.8 0.8125 0\nvt 1 0.757812 0\nvt 1 0.8125 0\nvt 1 0.875 0\nvt 0.9 0.875 0\nvt 0.8 0.875 0\nvt 0.7 0.8125 0\nvt 0.7 0.757812 0\nvt 0.7 0.875 0\nvt 0.2 0.9375 0\nvt 0.2 1 0\nvt 0.1 0.9375 0\nvt 0.1 1 0\nvt 0 0.9375 0\nvt 0 1 0\nvt 0.1 0.875 0\nvt 0 0.875 0\nvt 0.2 0.875 0\nvt 0.4 1 0\nvt 0.3 1 0\nvt 0.4 0.9375 0\nvt 0.3 0.9375 0\nvt 0.3 0.875 0\nvt 0.9 0.375 0\nvt 0.8 0.375 0\nvt 0.9 0.25 0\nvt 0.8 0.25 0\nvt 1 0.375 0\nvt 1 0.25 0\nvt 1 0.484375 0\nvt 0.9 0.484375 0\nvt 0.8 0.484375 0\nvt 0.7 0.375 0\nvt 0.7 0.25 0\nvt 0.7 0.484375 0\nvt 0.2 0.484375 0\nvt 0.1 0.484375 0\nvt 0.2 0.375 0\nvt 0.1 0.375 0\nvt 0 0.484375 0\nvt 0 0.375 0\nvt 0.1 0.25 0\nvt 0 0.25 0\nvt 0.2 0.25 0\nvt 0.3 0.484375 0\nvt 0.3 0.375 0\nvt 0.3 0.25 0\nvt 0.9 0.65625 0\nvt 0.8 0.65625 0\nvt 0.9 0.617188 0\nvt 0.8 0.617188 0\nvt 1 0.65625 0\nvt 1 0.617188 0\nvt 1 0.6875 0\nvt 0.9 0.6875 0\nvt 0.8 0.6875 0\nvt 0.7 0.65625 0\nvt 0.7 0.617188 0\nvt 0.7 0.6875 0\nvt 0.1 0.71875 0\nvt 0.2 0.71875 0\nvt 0.1 0.757812 0\nvt 0.2 0.757812 0\nvt 0 0.71875 0\nvt 0 0.757812 0\nvt 0.1 0.6875 0\nvt 0 0.6875 0\nvt 0.2 0.6875 0\nvt 0.3 0.71875 0\nvt 0.4 0.71875 0\nvt 0.3 0.757812 0\nvt 0.3 0.6875 0\nvt 0.9 0.5625 0\nvt 0.8 0.5625 0\nvt 1 0.5625 0\nvt 0.7 0.5625 0\nvt 0.2 0.617188 0\nvt 0.1 0.617188 0\nvt 0.2 0.5625 0\nvt 0.1 0.5625 0\nvt 0 0.617188 0\nvt 0 0.5625 0\nvt 0.3 0.5625 0\nvt 0.3 0.617188 0\nvt 0.9 0.125 0\nvt 0.8 0.125 0\nvt 0.9 0 0\nvt 0.8 0 0\nvt 1 0.125 0\nvt 1 0 0\nvt 0.7 0.125 0\nvt 0.7 0 0\nvt 0.2 0.125 0\nvt 0.1 0.125 0\nvt 0 0.125 0\nvt 0.1 0 0\nvt 0 0 0\nvt 0.2 0 0\nvt 0.3 0.125 0\nvt 0.3 0 0\nvt 0.5 0.9375 0\nvt 0.6 0.9375 0\nvt 0.5 1 0\nvt 0.6 1 0\nvt 0.9 0.9375 0\nvt 1 0.9375 0\nvt 0.9 1 0\nvt 1 1 0\nvt 0.8 1 0\nvt 0.8 0.9375 0\nvt 0.7 0.9375 0\nvt 0.7 1 0\nvt 0.1 0.8125 0\nvt 0 0.8125 0\nvt 0.2 0.8125 0\nvt 0.3 0.8125 0\nvt 0.5 0.71875 0\nvt 0.6 0.71875 0\nvt 0.9 0.71875 0\nvt 1 0.71875 0\nvt 0.8 0.71875 0\nvt 0.7 0.71875 0\nvt 0.1 0.65625 0\nvt 0 0.65625 0\nvt 0.2 0.65625 0\nvt 0.3 0.65625 0\nvt 0.5 0.757812 0\nvt 0.4 0.757812 0\nvt 0.4 0.8125 0\nvt 0.5 0.8125 0\nvt 0.6 0.8125 0\nvt 0.6 0.757812 0\nvt 0.5 0.875 0\nvt 0.6 0.875 0\nvt 0.4 0.875 0\nvt 0.4 0.375 0\nvt 0.5 0.375 0\nvt 0.5 0.25 0\nvt 0.4 0.25 0\nvt 0.6 0.375 0\nvt 0.6 0.25 0\nvt 0.5 0.484375 0\nvt 0.6 0.484375 0\nvt 0.4 0.484375 0\nvt 0.5 0.65625 0\nvt 0.5 0.617188 0\nvt 0.4 0.65625 0\nvt 0.4 0.617188 0\nvt 0.6 0.65625 0\nvt 0.6 0.617188 0\nvt 0.5 0.6875 0\nvt 0.6 0.6875 0\nvt 0.4 0.6875 0\nvt 0.5 0.5625 0\nvt 0.4 0.5625 0\nvt 0.6 0.5625 0\nvt 0.5 0 0\nvt 0.4 0 0\nvt 0.4 0.125 0\nvt 0.5 0.125 0\nvt 0.6 0.125 0\nvt 0.6 0 0\nvt 0.8 0.8125 0\nvt 0.9 0.8125 0\nvt 0.8 0.757812 0\nvt 0.9 0.757812 0\nvt 1 0.8125 0\nvt 1 0.757812 0\nvt 0.9 0.875 0\nvt 1 0.875 0\nvt 0.8 0.875 0\nvt 0.7 0.8125 0\nvt 0.7 0.757812 0\nvt 0.7 0.875 0\nvt 0.2 0.9375 0\nvt 0.1 0.9375 0\nvt 0.2 1 0\nvt 0.1 1 0\nvt 0 0.9375 0\nvt 0 1 0\nvt 0.1 0.875 0\nvt 0 0.875 0\nvt 0.2 0.875 0\nvt 0.4 1 0\nvt 0.4 0.9375 0\nvt 0.3 1 0\nvt 0.3 0.9375 0\nvt 0.3 0.875 0\nvt 0.8 0.375 0\nvt 0.9 0.375 0\nvt 0.9 0.25 0\nvt 0.8 0.25 0\nvt 1 0.375 0\nvt 1 0.25 0\nvt 0.9 0.484375 0\nvt 1 0.484375 0\nvt 0.8 0.484375 0\nvt 0.7 0.375 0\nvt 0.7 0.25 0\nvt 0.7 0.484375 0\nvt 0.1 0.484375 0\nvt 0.2 0.484375 0\nvt 0.2 0.375 0\nvt 0.1 0.375 0\nvt 0 0.484375 0\nvt 0 0.375 0\nvt 0.1 0.25 0\nvt 0 0.25 0\nvt 0.2 0.25 0\nvt 0.3 0.484375 0\nvt 0.3 0.375 0\nvt 0.3 0.25 0\nvt 0.9 0.65625 0\nvt 0.9 0.617188 0\nvt 0.8 0.65625 0\nvt 0.8 0.617188 0\nvt 1 0.65625 0\nvt 1 0.617188 0\nvt 0.9 0.6875 0\nvt 1 0.6875 0\nvt 0.8 0.6875 0\nvt 0.7 0.65625 0\nvt 0.7 0.617188 0\nvt 0.7 0.6875 0\nvt 0.1 0.757812 0\nvt 0.2 0.757812 0\nvt 0.2 0.71875 0\nvt 0.1 0.71875 0\nvt 0 0.757812 0\nvt 0 0.71875 0\nvt 0.1 0.6875 0\nvt 0 0.6875 0\nvt 0.2 0.6875 0\nvt 0.3 0.757812 0\nvt 0.4 0.71875 0\nvt 0.3 0.71875 0\nvt 0.3 0.6875 0\nvt 0.9 0.5625 0\nvt 0.8 0.5625 0\nvt 1 0.5625 0\nvt 0.7 0.5625 0\nvt 0.1 0.617188 0\nvt 0.2 0.617188 0\nvt 0.2 0.5625 0\nvt 0.1 0.5625 0\nvt 0 0.617188 0\nvt 0 0.5625 0\nvt 0.3 0.617188 0\nvt 0.3 0.5625 0\nvt 0.8 0.125 0\nvt 0.9 0.125 0\nvt 0.9 0 0\nvt 0.8 0 0\nvt 1 0.125 0\nvt 1 0 0\nvt 0.7 0.125 0\nvt 0.7 0 0\nvt 0.2 0.125 0\nvt 0.1 0.125 0\nvt 0 0.125 0\nvt 0.1 0 0\nvt 0 0 0\nvt 0.2 0 0\nvt 0.3 0.125 0\nvt 0.3 0 0\nvt 0.6 0.9375 0\nvt 0.5 0.9375 0\nvt 0.6 1 0\nvt 0.5 1 0\nvt 0.9 0.9375 0\nvt 1 0.9375 0\nvt 1 1 0\nvt 0.9 1 0\nvt 0.8 0.9375 0\nvt 0.8 1 0\nvt 0.7 0.9375 0\nvt 0.7 1 0\nvt 0.1 0.8125 0\nvt 0 0.8125 0\nvt 0.2 0.8125 0\nvt 0.3 0.8125 0\nvt 0.6 0.71875 0\nvt 0.5 0.71875 0\nvt 1 0.71875 0\nvt 0.9 0.71875 0\nvt 0.8 0.71875 0\nvt 0.7 0.71875 0\nvt 0.1 0.65625 0\nvt 0 0.65625 0\nvt 0.2 0.65625 0\nvt 0.3 0.65625 0\n\nf 1135/1308 1134/1307 1133/1306 \nf 1134/1307 1135/1308 1136/1309 \nf 1138/1311 1137/1310 1135/1308 \nf 1138/1311 1135/1308 1133/1306 \nf 1138/1311 1140/1313 1139/1312 \nf 1140/1313 1138/1311 1133/1306 \nf 1133/1306 1141/1314 1140/1313 \nf 1141/1314 1133/1306 1134/1307 \nf 1144/1317 1143/1316 1142/1315 \nf 1143/1316 1144/1317 1145/1318 \nf 1147/1320 1142/1315 1146/1319 \nf 1142/1315 1147/1320 1144/1317 \nf 1146/1319 1149/1322 1148/1321 \nf 1149/1322 1146/1319 1142/1315 \nf 1142/1315 1150/1323 1149/1322 \nf 1150/1323 1142/1315 1143/1316 \nf 1153/1326 1152/1325 1151/1324 \nf 1152/1325 1153/1326 1154/1327 \nf 1156/1329 1151/1324 1155/1328 \nf 1151/1324 1156/1329 1153/1326 \nf 1157/1330 1155/1328 1151/1324 \nf 1155/1328 1157/1330 1158/1331 \nf 1159/1332 1151/1324 1152/1325 \nf 1151/1324 1159/1332 1157/1330 \nf 1149/1322 1161/1334 1160/1333 \nf 1161/1334 1149/1322 1150/1323 \nf 1148/1321 1160/1333 1162/1335 \nf 1160/1333 1148/1321 1149/1322 \nf 1153/1326 1162/1335 1160/1333 \nf 1162/1335 1153/1326 1156/1329 \nf 1154/1327 1160/1333 1161/1334 \nf 1160/1333 1154/1327 1153/1326 \nf 1165/1338 1164/1337 1163/1336 \nf 1164/1337 1165/1338 1166/1339 \nf 1168/1341 1163/1336 1167/1340 \nf 1163/1336 1168/1341 1165/1338 \nf 1167/1340 1144/1317 1147/1320 \nf 1144/1317 1167/1340 1163/1336 \nf 1163/1336 1145/1318 1144/1317 \nf 1145/1318 1163/1336 1164/1337 \nf 1171/1344 1170/1343 1169/1342 \nf 1171/1344 1169/1342 1172/1345 \nf 1170/1343 1174/1347 1173/1346 \nf 1174/1347 1170/1343 1171/1344 \nf 1174/1347 1176/1349 1175/1348 \nf 1176/1349 1174/1347 1171/1344 \nf 1171/1344 1177/1350 1176/1349 \nf 1177/1350 1171/1344 1172/1345 \nf 1179/1352 1138/1311 1178/1351 \nf 1138/1311 1179/1352 1137/1310 \nf 1169/1342 1178/1351 1172/1345 \nf 1178/1351 1169/1342 1179/1352 \nf 1172/1345 1180/1353 1177/1350 \nf 1180/1353 1172/1345 1178/1351 \nf 1178/1351 1139/1312 1180/1353 \nf 1139/1312 1178/1351 1138/1311 \nf 1183/1356 1182/1355 1181/1354 \nf 1182/1355 1183/1356 1184/1357 \nf 1185/1358 1184/1357 1183/1356 \nf 1184/1357 1185/1358 1186/1359 \nf 1187/1360 1185/1358 1183/1356 \nf 1185/1358 1187/1360 1188/1361 \nf 1189/1362 1183/1356 1181/1354 \nf 1183/1356 1189/1362 1187/1360 \nf 1192/1365 1191/1364 1190/1363 \nf 1191/1364 1192/1365 1193/1366 \nf 1193/1366 1182/1355 1191/1364 \nf 1182/1355 1193/1366 1181/1354 \nf 1194/1367 1181/1354 1193/1366 \nf 1181/1354 1194/1367 1189/1362 \nf 1141/1314 1193/1366 1192/1365 \nf 1193/1366 1141/1314 1194/1367 \nf 1197/1370 1196/1369 1195/1368 \nf 1196/1369 1197/1370 1198/1371 \nf 1200/1373 1195/1368 1199/1372 \nf 1195/1368 1200/1373 1197/1370 \nf 1199/1372 1202/1375 1201/1374 \nf 1202/1375 1199/1372 1195/1368 \nf 1195/1368 1203/1376 1202/1375 \nf 1203/1376 1195/1368 1196/1369 \nf 1205/1378 1146/1319 1204/1377 \nf 1146/1319 1205/1378 1147/1320 \nf 1198/1371 1204/1377 1196/1369 \nf 1204/1377 1198/1371 1205/1378 \nf 1196/1369 1206/1379 1203/1376 \nf 1206/1379 1196/1369 1204/1377 \nf 1204/1377 1148/1321 1206/1379 \nf 1148/1321 1204/1377 1146/1319 \nf 1209/1382 1208/1381 1207/1380 \nf 1208/1381 1209/1382 1210/1383 \nf 1210/1383 1211/1384 1208/1381 \nf 1211/1384 1210/1383 1212/1385 \nf 1213/1386 1212/1385 1210/1383 \nf 1212/1385 1213/1386 1214/1387 \nf 1215/1388 1210/1383 1209/1382 \nf 1210/1383 1215/1388 1213/1386 \nf 1143/1316 1216/1389 1150/1323 \nf 1216/1389 1143/1316 1217/1390 \nf 1217/1390 1207/1380 1216/1389 \nf 1207/1380 1217/1390 1209/1382 \nf 1218/1391 1209/1382 1217/1390 \nf 1209/1382 1218/1391 1215/1388 \nf 1145/1318 1217/1390 1143/1316 \nf 1217/1390 1145/1318 1218/1391 \nf 1221/1394 1220/1393 1219/1392 \nf 1220/1393 1221/1394 1222/1395 \nf 1224/1397 1219/1392 1223/1396 \nf 1219/1392 1224/1397 1221/1394 \nf 1219/1392 1226/1399 1225/1398 \nf 1225/1398 1223/1396 1219/1392 \nf 1227/1400 1219/1392 1220/1393 \nf 1219/1392 1227/1400 1226/1399 \nf 1229/1402 1155/1328 1228/1401 \nf 1155/1328 1229/1402 1156/1329 \nf 1222/1395 1228/1401 1220/1393 \nf 1228/1401 1222/1395 1229/1402 \nf 1230/1403 1220/1393 1228/1401 \nf 1220/1393 1230/1403 1227/1400 \nf 1158/1331 1228/1401 1155/1328 \nf 1228/1401 1158/1331 1230/1403 \nf 1233/1406 1232/1405 1231/1404 \nf 1232/1405 1233/1406 1234/1407 \nf 1236/1409 1231/1404 1235/1408 \nf 1231/1404 1236/1409 1233/1406 \nf 1237/1410 1235/1408 1231/1404 \nf 1235/1408 1237/1410 1238/1411 \nf 1239/1412 1231/1404 1232/1405 \nf 1231/1404 1239/1412 1237/1410 \nf 1242/1415 1241/1414 1240/1413 \nf 1241/1414 1242/1415 1136/1309 \nf 1234/1407 1240/1413 1232/1405 \nf 1240/1413 1234/1407 1242/1415 \nf 1243/1416 1232/1405 1240/1413 \nf 1232/1405 1243/1416 1239/1412 \nf 1159/1332 1240/1413 1241/1414 \nf 1240/1413 1159/1332 1243/1416 \nf 1202/1375 1245/1418 1244/1417 \nf 1245/1418 1202/1375 1203/1376 \nf 1201/1374 1244/1417 1246/1419 \nf 1244/1417 1201/1374 1202/1375 \nf 1221/1394 1246/1419 1244/1417 \nf 1246/1419 1221/1394 1224/1397 \nf 1222/1395 1244/1417 1245/1418 \nf 1244/1417 1222/1395 1221/1394 \nf 1206/1379 1162/1335 1247/1420 \nf 1162/1335 1206/1379 1148/1321 \nf 1203/1376 1247/1420 1245/1418 \nf 1247/1420 1203/1376 1206/1379 \nf 1229/1402 1245/1418 1247/1420 \nf 1245/1418 1229/1402 1222/1395 \nf 1156/1329 1247/1420 1162/1335 \nf 1247/1420 1156/1329 1229/1402 \nf 1250/1423 1249/1422 1248/1421 \nf 1249/1422 1250/1423 1251/1424 \nf 1251/1424 1252/1425 1249/1422 \nf 1252/1425 1251/1424 1253/1426 \nf 1208/1381 1253/1426 1251/1424 \nf 1253/1426 1208/1381 1211/1384 \nf 1207/1380 1251/1424 1250/1423 \nf 1251/1424 1207/1380 1208/1381 \nf 1255/1428 1161/1334 1254/1427 \nf 1161/1334 1255/1428 1154/1327 \nf 1248/1421 1254/1427 1250/1423 \nf 1254/1427 1248/1421 1255/1428 \nf 1216/1389 1250/1423 1254/1427 \nf 1250/1423 1216/1389 1207/1380 \nf 1150/1323 1254/1427 1161/1334 \nf 1254/1427 1150/1323 1216/1389 \nf 1258/1431 1257/1430 1256/1429 \nf 1257/1430 1258/1431 1259/1432 \nf 1261/1434 1256/1429 1260/1433 \nf 1256/1429 1261/1434 1258/1431 \nf 1260/1433 1197/1370 1200/1373 \nf 1197/1370 1260/1433 1256/1429 \nf 1256/1429 1198/1371 1197/1370 \nf 1198/1371 1256/1429 1257/1430 \nf 1263/1436 1167/1340 1262/1435 \nf 1167/1340 1263/1436 1168/1341 \nf 1259/1432 1262/1435 1257/1430 \nf 1262/1435 1259/1432 1263/1436 \nf 1257/1430 1205/1378 1198/1371 \nf 1205/1378 1257/1430 1262/1435 \nf 1262/1435 1147/1320 1205/1378 \nf 1147/1320 1262/1435 1167/1340 \nf 1264/1437 1213/1386 1215/1388 \nf 1213/1386 1264/1437 1265/1438 \nf 1265/1438 1214/1387 1213/1386 \nf 1214/1387 1265/1438 1266/1439 \nf 1267/1440 1266/1439 1265/1438 \nf 1266/1439 1267/1440 1268/1441 \nf 1269/1442 1265/1438 1264/1437 \nf 1265/1438 1269/1442 1267/1440 \nf 1164/1337 1218/1391 1145/1318 \nf 1218/1391 1164/1337 1270/1443 \nf 1270/1443 1215/1388 1218/1391 \nf 1215/1388 1270/1443 1264/1437 \nf 1271/1444 1264/1437 1270/1443 \nf 1264/1437 1271/1444 1269/1442 \nf 1166/1339 1270/1443 1164/1337 \nf 1270/1443 1166/1339 1271/1444 \nf 1140/1313 1272/1445 1139/1312 \nf 1273/1446 1139/1312 1272/1445 \nf 1272/1445 1274/1447 1273/1446 \nf 1273/1446 1274/1447 1275/1448 \nf 1274/1447 1272/1445 1190/1363 \nf 1192/1365 1190/1363 1272/1445 \nf 1272/1445 1140/1313 1192/1365 \nf 1141/1314 1192/1365 1140/1313 \nf 1176/1349 1276/1449 1175/1348 \nf 1175/1348 1276/1449 1277/1450 \nf 1278/1451 1277/1450 1276/1449 \nf 1277/1450 1278/1451 1279/1452 \nf 1278/1451 1276/1449 1280/1453 \nf 1281/1454 1280/1453 1276/1449 \nf 1176/1349 1281/1454 1276/1449 \nf 1281/1454 1176/1349 1177/1350 \nf 1180/1353 1282/1455 1177/1350 \nf 1281/1454 1177/1350 1282/1455 \nf 1282/1455 1283/1456 1281/1454 \nf 1281/1454 1283/1456 1280/1453 \nf 1273/1446 1283/1456 1282/1455 \nf 1283/1456 1273/1446 1275/1448 \nf 1180/1353 1273/1446 1282/1455 \nf 1273/1446 1180/1353 1139/1312 \nf 1284/1457 1188/1361 1187/1360 \nf 1188/1361 1284/1457 1285/1458 \nf 1233/1406 1285/1458 1284/1457 \nf 1285/1458 1233/1406 1236/1409 \nf 1233/1406 1284/1457 1234/1407 \nf 1286/1459 1234/1407 1284/1457 \nf 1284/1457 1187/1360 1286/1459 \nf 1189/1362 1286/1459 1187/1360 \nf 1287/1460 1189/1362 1194/1367 \nf 1189/1362 1287/1460 1286/1459 \nf 1242/1415 1286/1459 1287/1460 \nf 1286/1459 1242/1415 1234/1407 \nf 1242/1415 1287/1460 1136/1309 \nf 1134/1307 1136/1309 1287/1460 \nf 1287/1460 1194/1367 1134/1307 \nf 1141/1314 1134/1307 1194/1367 \nf 1289/1462 1157/1330 1288/1461 \nf 1157/1330 1289/1462 1158/1331 \nf 1137/1310 1288/1461 1135/1308 \nf 1288/1461 1137/1310 1289/1462 \nf 1135/1308 1241/1414 1136/1309 \nf 1241/1414 1135/1308 1288/1461 \nf 1288/1461 1159/1332 1241/1414 \nf 1159/1332 1288/1461 1157/1330 \nf 1291/1464 1226/1399 1290/1463 \nf 1226/1399 1291/1464 1225/1398 \nf 1173/1346 1290/1463 1170/1343 \nf 1290/1463 1173/1346 1291/1464 \nf 1170/1343 1292/1465 1169/1342 \nf 1292/1465 1170/1343 1290/1463 \nf 1290/1463 1227/1400 1292/1465 \nf 1227/1400 1290/1463 1226/1399 \nf 1292/1465 1227/1400 1293/1466 \nf 1293/1466 1227/1400 1230/1403 \nf 1169/1342 1292/1465 1179/1352 \nf 1179/1352 1292/1465 1293/1466 \nf 1179/1352 1293/1466 1137/1310 \nf 1137/1310 1293/1466 1289/1462 \nf 1293/1466 1230/1403 1289/1462 \nf 1289/1462 1230/1403 1158/1331 \nf 1237/1410 1294/1467 1238/1411 \nf 1238/1411 1294/1467 1295/1468 \nf 1294/1467 1249/1422 1295/1468 \nf 1295/1468 1249/1422 1252/1425 \nf 1249/1422 1294/1467 1248/1421 \nf 1296/1469 1248/1421 1294/1467 \nf 1239/1412 1296/1469 1237/1410 \nf 1296/1469 1294/1467 1237/1410 \nf 1243/1416 1297/1470 1239/1412 \nf 1239/1412 1297/1470 1296/1469 \nf 1297/1470 1255/1428 1296/1469 \nf 1296/1469 1255/1428 1248/1421 \nf 1255/1428 1297/1470 1154/1327 \nf 1152/1325 1154/1327 1297/1470 \nf 1159/1332 1152/1325 1243/1416 \nf 1152/1325 1297/1470 1243/1416 \nf 1300/1473 1299/1472 1298/1471 \nf 1300/1473 1298/1471 1301/1474 \nf 1298/1471 1302/1475 1301/1474 \nf 1302/1475 1298/1471 1303/1476 \nf 1304/1477 1301/1474 1302/1475 \nf 1304/1477 1302/1475 1305/1478 \nf 1306/1479 1300/1473 1301/1474 \nf 1306/1479 1301/1474 1304/1477 \nf 1309/1482 1308/1481 1307/1480 \nf 1309/1482 1307/1480 1310/1483 \nf 1312/1485 1311/1484 1308/1481 \nf 1312/1485 1308/1481 1309/1482 \nf 1311/1484 1314/1487 1313/1486 \nf 1313/1486 1308/1481 1311/1484 \nf 1308/1481 1313/1486 1315/1488 \nf 1315/1488 1307/1480 1308/1481 \nf 1318/1491 1317/1490 1316/1489 \nf 1317/1490 1318/1491 1319/1492 \nf 1316/1489 1321/1494 1320/1493 \nf 1321/1494 1316/1489 1317/1490 \nf 1320/1493 1323/1496 1322/1495 \nf 1322/1495 1316/1489 1320/1493 \nf 1316/1489 1322/1495 1324/1497 \nf 1324/1497 1318/1491 1316/1489 \nf 1326/1499 1313/1486 1325/1498 \nf 1313/1486 1326/1499 1315/1488 \nf 1325/1498 1314/1487 1327/1500 \nf 1314/1487 1325/1498 1313/1486 \nf 1327/1500 1321/1494 1317/1490 \nf 1317/1490 1325/1498 1327/1500 \nf 1325/1498 1317/1490 1319/1492 \nf 1319/1492 1326/1499 1325/1498 \nf 1330/1503 1329/1502 1328/1501 \nf 1328/1501 1331/1504 1330/1503 \nf 1333/1506 1332/1505 1331/1504 \nf 1333/1506 1331/1504 1328/1501 \nf 1332/1505 1312/1485 1309/1482 \nf 1309/1482 1331/1504 1332/1505 \nf 1331/1504 1309/1482 1310/1483 \nf 1310/1483 1330/1503 1331/1504 \nf 1336/1509 1335/1508 1334/1507 \nf 1335/1508 1336/1509 1337/1510 \nf 1337/1510 1338/1511 1335/1508 \nf 1338/1511 1337/1510 1339/1512 \nf 1338/1511 1340/1513 1335/1508 \nf 1340/1513 1338/1511 1341/1514 \nf 1342/1515 1334/1507 1335/1508 \nf 1342/1515 1335/1508 1340/1513 \nf 1302/1475 1344/1517 1343/1516 \nf 1344/1517 1302/1475 1303/1476 \nf 1343/1516 1336/1509 1334/1507 \nf 1336/1509 1343/1516 1344/1517 \nf 1334/1507 1342/1515 1345/1518 \nf 1345/1518 1343/1516 1334/1507 \nf 1343/1516 1345/1518 1305/1478 \nf 1305/1478 1302/1475 1343/1516 \nf 1348/1521 1347/1520 1346/1519 \nf 1347/1520 1348/1521 1349/1522 \nf 1349/1522 1350/1523 1347/1520 \nf 1350/1523 1349/1522 1351/1524 \nf 1352/1525 1347/1520 1350/1523 \nf 1352/1525 1350/1523 1353/1526 \nf 1354/1527 1346/1519 1347/1520 \nf 1354/1527 1347/1520 1352/1525 \nf 1357/1530 1356/1529 1355/1528 \nf 1356/1529 1357/1530 1358/1531 \nf 1358/1531 1357/1530 1348/1521 \nf 1358/1531 1348/1521 1346/1519 \nf 1359/1532 1358/1531 1346/1519 \nf 1359/1532 1346/1519 1354/1527 \nf 1306/1479 1356/1529 1358/1531 \nf 1306/1479 1358/1531 1359/1532 \nf 1362/1535 1361/1534 1360/1533 \nf 1362/1535 1360/1533 1363/1536 \nf 1365/1538 1364/1537 1361/1534 \nf 1365/1538 1361/1534 1362/1535 \nf 1364/1537 1367/1540 1366/1539 \nf 1366/1539 1361/1534 1364/1537 \nf 1361/1534 1366/1539 1368/1541 \nf 1368/1541 1360/1533 1361/1534 \nf 1370/1543 1369/1542 1311/1484 \nf 1370/1543 1311/1484 1312/1485 \nf 1363/1536 1360/1533 1369/1542 \nf 1363/1536 1369/1542 1370/1543 \nf 1360/1533 1368/1541 1371/1544 \nf 1371/1544 1369/1542 1360/1533 \nf 1369/1542 1371/1544 1314/1487 \nf 1314/1487 1311/1484 1369/1542 \nf 1374/1547 1373/1546 1372/1545 \nf 1372/1545 1375/1548 1374/1547 \nf 1375/1548 1372/1545 1376/1549 \nf 1376/1549 1377/1550 1375/1548 \nf 1378/1551 1375/1548 1377/1550 \nf 1378/1551 1377/1550 1379/1552 \nf 1380/1553 1374/1547 1375/1548 \nf 1380/1553 1375/1548 1378/1551 \nf 1307/1480 1315/1488 1381/1554 \nf 1381/1554 1382/1555 1307/1480 \nf 1382/1555 1381/1554 1373/1546 \nf 1373/1546 1374/1547 1382/1555 \nf 1383/1556 1382/1555 1374/1547 \nf 1383/1556 1374/1547 1380/1553 \nf 1310/1483 1307/1480 1382/1555 \nf 1310/1483 1382/1555 1383/1556 \nf 1386/1559 1385/1558 1384/1557 \nf 1385/1558 1386/1559 1387/1560 \nf 1384/1557 1389/1562 1388/1561 \nf 1389/1562 1384/1557 1385/1558 \nf 1384/1557 1391/1564 1390/1563 \nf 1391/1564 1384/1557 1388/1561 \nf 1384/1557 1390/1563 1392/1565 \nf 1392/1565 1386/1559 1384/1557 \nf 1320/1493 1394/1567 1393/1566 \nf 1394/1567 1320/1493 1321/1494 \nf 1393/1566 1387/1560 1386/1559 \nf 1387/1560 1393/1566 1394/1567 \nf 1386/1559 1392/1565 1395/1568 \nf 1395/1568 1393/1566 1386/1559 \nf 1393/1566 1395/1568 1323/1496 \nf 1323/1496 1320/1493 1393/1566 \nf 1398/1571 1397/1570 1396/1569 \nf 1396/1569 1399/1572 1398/1571 \nf 1399/1572 1396/1569 1400/1573 \nf 1400/1573 1401/1574 1399/1572 \nf 1401/1574 1402/1575 1399/1572 \nf 1402/1575 1401/1574 1403/1576 \nf 1399/1572 1404/1577 1398/1571 \nf 1404/1577 1399/1572 1402/1575 \nf 1406/1579 1299/1472 1405/1578 \nf 1405/1578 1407/1580 1406/1579 \nf 1407/1580 1405/1578 1397/1570 \nf 1397/1570 1398/1571 1407/1580 \nf 1398/1571 1408/1581 1407/1580 \nf 1408/1581 1398/1571 1404/1577 \nf 1407/1580 1324/1497 1406/1579 \nf 1324/1497 1407/1580 1408/1581 \nf 1410/1583 1366/1539 1409/1582 \nf 1366/1539 1410/1583 1368/1541 \nf 1409/1582 1367/1540 1411/1584 \nf 1367/1540 1409/1582 1366/1539 \nf 1411/1584 1389/1562 1385/1558 \nf 1385/1558 1409/1582 1411/1584 \nf 1409/1582 1385/1558 1387/1560 \nf 1387/1560 1410/1583 1409/1582 \nf 1327/1500 1371/1544 1412/1585 \nf 1371/1544 1327/1500 1314/1487 \nf 1412/1585 1368/1541 1410/1583 \nf 1368/1541 1412/1585 1371/1544 \nf 1410/1583 1387/1560 1394/1567 \nf 1394/1567 1412/1585 1410/1583 \nf 1412/1585 1394/1567 1321/1494 \nf 1321/1494 1327/1500 1412/1585 \nf 1415/1588 1414/1587 1413/1586 \nf 1413/1586 1416/1589 1415/1588 \nf 1416/1589 1413/1586 1417/1590 \nf 1417/1590 1418/1591 1416/1589 \nf 1418/1591 1372/1545 1416/1589 \nf 1372/1545 1418/1591 1376/1549 \nf 1416/1589 1373/1546 1415/1588 \nf 1373/1546 1416/1589 1372/1545 \nf 1326/1499 1319/1492 1419/1592 \nf 1419/1592 1420/1593 1326/1499 \nf 1420/1593 1419/1592 1414/1587 \nf 1414/1587 1415/1588 1420/1593 \nf 1415/1588 1381/1554 1420/1593 \nf 1381/1554 1415/1588 1373/1546 \nf 1420/1593 1315/1488 1326/1499 \nf 1315/1488 1420/1593 1381/1554 \nf 1423/1596 1422/1595 1421/1594 \nf 1423/1596 1421/1594 1424/1597 \nf 1426/1599 1425/1598 1422/1595 \nf 1426/1599 1422/1595 1423/1596 \nf 1425/1598 1365/1538 1362/1535 \nf 1362/1535 1422/1595 1425/1598 \nf 1422/1595 1362/1535 1363/1536 \nf 1363/1536 1421/1594 1422/1595 \nf 1428/1601 1427/1600 1332/1505 \nf 1428/1601 1332/1505 1333/1506 \nf 1424/1597 1421/1594 1427/1600 \nf 1424/1597 1427/1600 1428/1601 \nf 1421/1594 1363/1536 1370/1543 \nf 1370/1543 1427/1600 1421/1594 \nf 1427/1600 1370/1543 1312/1485 \nf 1312/1485 1332/1505 1427/1600 \nf 1429/1602 1380/1553 1378/1551 \nf 1378/1551 1430/1603 1429/1602 \nf 1430/1603 1378/1551 1379/1552 \nf 1379/1552 1431/1604 1430/1603 \nf 1431/1604 1433/1606 1432/1605 \nf 1432/1605 1430/1603 1431/1604 \nf 1430/1603 1432/1605 1434/1607 \nf 1434/1607 1429/1602 1430/1603 \nf 1330/1503 1310/1483 1383/1556 \nf 1383/1556 1435/1608 1330/1503 \nf 1435/1608 1383/1556 1380/1553 \nf 1380/1553 1429/1602 1435/1608 \nf 1429/1602 1434/1607 1436/1609 \nf 1436/1609 1435/1608 1429/1602 \nf 1435/1608 1436/1609 1329/1502 \nf 1329/1502 1330/1503 1435/1608 \nf 1438/1611 1305/1478 1437/1610 \nf 1305/1478 1438/1611 1304/1477 \nf 1440/1613 1437/1610 1439/1612 \nf 1437/1610 1440/1613 1438/1611 \nf 1438/1611 1355/1528 1356/1529 \nf 1355/1528 1438/1611 1440/1613 \nf 1304/1477 1356/1529 1306/1479 \nf 1356/1529 1304/1477 1438/1611 \nf 1341/1514 1441/1614 1340/1513 \nf 1441/1614 1341/1514 1442/1615 \nf 1444/1617 1442/1615 1443/1616 \nf 1442/1615 1444/1617 1441/1614 \nf 1441/1614 1446/1619 1445/1618 \nf 1446/1619 1441/1614 1444/1617 \nf 1445/1618 1340/1513 1441/1614 \nf 1340/1513 1445/1618 1342/1515 \nf 1447/1620 1342/1515 1445/1618 \nf 1342/1515 1447/1620 1345/1518 \nf 1448/1621 1447/1620 1446/1619 \nf 1445/1618 1446/1619 1447/1620 \nf 1448/1621 1437/1610 1447/1620 \nf 1437/1610 1448/1621 1439/1612 \nf 1437/1610 1345/1518 1447/1620 \nf 1345/1518 1437/1610 1305/1478 \nf 1353/1526 1449/1622 1352/1525 \nf 1449/1622 1353/1526 1450/1623 \nf 1450/1623 1396/1569 1449/1622 \nf 1396/1569 1450/1623 1400/1573 \nf 1449/1622 1397/1570 1451/1624 \nf 1397/1570 1449/1622 1396/1569 \nf 1352/1525 1451/1624 1354/1527 \nf 1451/1624 1352/1525 1449/1622 \nf 1354/1527 1452/1625 1359/1532 \nf 1452/1625 1354/1527 1451/1624 \nf 1451/1624 1405/1578 1452/1625 \nf 1405/1578 1451/1624 1397/1570 \nf 1452/1625 1299/1472 1300/1473 \nf 1299/1472 1452/1625 1405/1578 \nf 1359/1532 1300/1473 1306/1479 \nf 1300/1473 1359/1532 1452/1625 \nf 1323/1496 1453/1626 1322/1495 \nf 1322/1495 1453/1626 1454/1627 \nf 1453/1626 1303/1476 1454/1627 \nf 1454/1627 1303/1476 1298/1471 \nf 1454/1627 1298/1471 1406/1579 \nf 1299/1472 1406/1579 1298/1471 \nf 1322/1495 1454/1627 1324/1497 \nf 1324/1497 1454/1627 1406/1579 \nf 1391/1564 1455/1628 1390/1563 \nf 1390/1563 1455/1628 1456/1629 \nf 1455/1628 1339/1512 1456/1629 \nf 1456/1629 1339/1512 1337/1510 \nf 1456/1629 1337/1510 1457/1630 \nf 1336/1509 1457/1630 1337/1510 \nf 1390/1563 1456/1629 1392/1565 \nf 1392/1565 1456/1629 1457/1630 \nf 1458/1631 1392/1565 1457/1630 \nf 1392/1565 1458/1631 1395/1568 \nf 1344/1517 1457/1630 1336/1509 \nf 1457/1630 1344/1517 1458/1631 \nf 1303/1476 1458/1631 1344/1517 \nf 1458/1631 1303/1476 1453/1626 \nf 1453/1626 1395/1568 1458/1631 \nf 1395/1568 1453/1626 1323/1496 \nf 1403/1576 1459/1632 1402/1575 \nf 1459/1632 1403/1576 1460/1633 \nf 1460/1633 1413/1586 1459/1632 \nf 1413/1586 1460/1633 1417/1590 \nf 1459/1632 1414/1587 1461/1634 \nf 1414/1587 1459/1632 1413/1586 \nf 1402/1575 1461/1634 1404/1577 \nf 1461/1634 1402/1575 1459/1632 \nf 1404/1577 1462/1635 1408/1581 \nf 1462/1635 1404/1577 1461/1634 \nf 1461/1634 1419/1592 1462/1635 \nf 1419/1592 1461/1634 1414/1587 \nf 1462/1635 1319/1492 1318/1491 \nf 1319/1492 1462/1635 1419/1592 \nf 1408/1581 1318/1491 1324/1497 \nf 1318/1491 1408/1581 1462/1635 \nf 1166/1339 1328/1501 1329/1502 \nf 1328/1501 1166/1339 1165/1338 \nf 1165/1338 1333/1506 1328/1501 \nf 1333/1506 1165/1338 1168/1341 \nf 1174/1347 1339/1512 1173/1346 \nf 1339/1512 1174/1347 1338/1511 \nf 1338/1511 1175/1348 1341/1514 \nf 1175/1348 1338/1511 1174/1347 \nf 1348/1521 1184/1357 1349/1522 \nf 1184/1357 1348/1521 1182/1355 \nf 1350/1523 1351/1524 1186/1359 \nf 1350/1523 1186/1359 1185/1358 \nf 1186/1359 1349/1522 1184/1357 \nf 1349/1522 1186/1359 1351/1524 \nf 1353/1526 1350/1523 1185/1358 \nf 1353/1526 1185/1358 1188/1361 \nf 1357/1530 1355/1528 1190/1363 \nf 1357/1530 1190/1363 1191/1364 \nf 1357/1530 1182/1355 1348/1521 \nf 1182/1355 1357/1530 1191/1364 \nf 1364/1537 1365/1538 1200/1373 \nf 1364/1537 1200/1373 1199/1372 \nf 1367/1540 1364/1537 1199/1372 \nf 1367/1540 1199/1372 1201/1374 \nf 1376/1549 1212/1385 1377/1550 \nf 1212/1385 1376/1549 1211/1384 \nf 1377/1550 1214/1387 1379/1552 \nf 1214/1387 1377/1550 1212/1385 \nf 1224/1397 1388/1561 1389/1562 \nf 1388/1561 1224/1397 1223/1396 \nf 1391/1564 1223/1396 1225/1398 \nf 1223/1396 1391/1564 1388/1561 \nf 1401/1574 1400/1573 1236/1409 \nf 1401/1574 1236/1409 1235/1408 \nf 1403/1576 1401/1574 1235/1408 \nf 1403/1576 1235/1408 1238/1411 \nf 1411/1584 1367/1540 1201/1374 \nf 1201/1374 1246/1419 1411/1584 \nf 1389/1562 1411/1584 1246/1419 \nf 1246/1419 1224/1397 1389/1562 \nf 1417/1590 1253/1426 1418/1591 \nf 1253/1426 1417/1590 1252/1425 \nf 1418/1591 1211/1384 1376/1549 \nf 1211/1384 1418/1591 1253/1426 \nf 1259/1432 1423/1596 1424/1597 \nf 1423/1596 1259/1432 1258/1431 \nf 1425/1598 1426/1599 1261/1434 \nf 1261/1434 1260/1433 1425/1598 \nf 1258/1431 1426/1599 1423/1596 \nf 1426/1599 1258/1431 1261/1434 \nf 1365/1538 1425/1598 1260/1433 \nf 1365/1538 1260/1433 1200/1373 \nf 1168/1341 1428/1601 1333/1506 \nf 1428/1601 1168/1341 1263/1436 \nf 1263/1436 1424/1597 1428/1601 \nf 1424/1597 1263/1436 1259/1432 \nf 1379/1552 1266/1439 1431/1604 \nf 1266/1439 1379/1552 1214/1387 \nf 1268/1441 1432/1605 1433/1606 \nf 1432/1605 1268/1441 1267/1440 \nf 1431/1604 1268/1441 1433/1606 \nf 1268/1441 1431/1604 1266/1439 \nf 1267/1440 1434/1607 1432/1605 \nf 1434/1607 1267/1440 1269/1442 \nf 1269/1442 1436/1609 1434/1607 \nf 1436/1609 1269/1442 1271/1444 \nf 1271/1444 1329/1502 1436/1609 \nf 1329/1502 1271/1444 1166/1339 \nf 1274/1447 1439/1612 1275/1448 \nf 1439/1612 1274/1447 1440/1613 \nf 1190/1363 1440/1613 1274/1447 \nf 1440/1613 1190/1363 1355/1528 \nf 1341/1514 1277/1450 1442/1615 \nf 1277/1450 1341/1514 1175/1348 \nf 1444/1617 1443/1616 1279/1452 \nf 1444/1617 1279/1452 1278/1451 \nf 1442/1615 1279/1452 1443/1616 \nf 1279/1452 1442/1615 1277/1450 \nf 1280/1453 1444/1617 1278/1451 \nf 1444/1617 1280/1453 1446/1619 \nf 1448/1621 1446/1619 1280/1453 \nf 1280/1453 1283/1456 1448/1621 \nf 1439/1612 1448/1621 1283/1456 \nf 1283/1456 1275/1448 1439/1612 \nf 1450/1623 1353/1526 1188/1361 \nf 1450/1623 1188/1361 1285/1458 \nf 1400/1573 1450/1623 1285/1458 \nf 1400/1573 1285/1458 1236/1409 \nf 1455/1628 1225/1398 1291/1464 \nf 1225/1398 1455/1628 1391/1564 \nf 1339/1512 1291/1464 1173/1346 \nf 1291/1464 1339/1512 1455/1628 \nf 1460/1633 1403/1576 1238/1411 \nf 1460/1633 1238/1411 1295/1468 \nf 1417/1590 1460/1633 1295/1468 \nf 1417/1590 1295/1468 1252/1425 \n\ng box5 top ribbon group11 polySurface63\nusemtl ribbon1\nv 0.006714 0.136158 -0.025581\nv 0.009707 0.136486 -0.024089\nv 0.006786 0.136361 -0.024544\nv 0.009692 0.136708 -0.023286\nv 0.006811 0.136574 -0.023371\nv 0.009571 0.136948 -0.022315\nv 0.012072 0.137043 -0.021577\nv 0.011783 0.137369 -0.020793\nv 0.012146 0.136772 -0.022147\nv -0.037179 0.144641 -0.026989\nv -0.045637 0.149064 -0.02904\nv -0.037223 0.144634 -0.029714\nv -0.045666 0.149056 -0.031848\nv -0.037134 0.144649 -0.024264\nv -0.045609 0.149073 -0.026231\nv -0.02874 0.141252 -0.023117\nv -0.028831 0.141246 -0.025698\nv -0.028921 0.141239 -0.028279\nv -0.012724 0.136709 -0.025831\nv -0.013115 0.13666 -0.027902\nv -0.006613 0.135902 -0.026051\nv -0.006981 0.135704 -0.027838\nv -0.012331 0.13676 -0.02374\nv -0.006246 0.136106 -0.02418\nv -0.001289 0.136105 -0.024341\nv -0.001547 0.135775 -0.025996\nv -0.001818 0.13546 -0.027506\nv -0.020402 0.138545 -0.025514\nv -0.020654 0.138542 -0.027863\nv -0.020149 0.138548 -0.023165\nv -0.054412 0.154857 -0.0315\nv -0.063356 0.161342 -0.034165\nv -0.05437 0.154847 -0.034359\nv -0.063215 0.16133 -0.037059\nv -0.054454 0.154867 -0.02864\nv -0.063496 0.161354 -0.031271\nv 0.006874 0.136167 -0.021149\nv 0.009407 0.136501 -0.020521\nv 0.006929 0.136363 -0.02014\nv 0.009374 0.136712 -0.019755\nv 0.006976 0.136766 -0.01906\nv 0.009303 0.137155 -0.018896\nv 0.011305 0.137044 -0.018884\nv 0.011153 0.137602 -0.018241\nv 0.011367 0.136791 -0.019408\nv 0.006829 0.136362 -0.022193\nv 0.009451 0.136708 -0.021333\nv 0.011483 0.137042 -0.019988\nv 0.017758 0.138602 -0.017633\nv 0.017218 0.138353 -0.017273\nv 0.015277 0.138113 -0.021049\nv 0.014872 0.137897 -0.020488\nv 0.018235 0.138598 -0.017942\nv 0.015628 0.138112 -0.021561\nv 0.012918 0.137628 -0.024896\nv 0.012701 0.137629 -0.024183\nv 0.012443 0.137457 -0.023424\nv 0.014531 0.137352 -0.019979\nv 0.016748 0.137717 -0.016965\nv 0.014379 0.137088 -0.019643\nv 0.016505 0.137419 -0.016847\nv 0.012228 0.137006 -0.022708\nv -0.036999 0.144671 -0.016088\nv -0.045522 0.149097 -0.017806\nv -0.037044 0.144664 -0.018814\nv -0.045551 0.149089 -0.020614\nv -0.036955 0.144679 -0.013363\nv -0.045495 0.149106 -0.014997\nv -0.028376 0.141278 -0.012791\nv -0.028467 0.141272 -0.015373\nv -0.028558 0.141265 -0.017954\nv -0.037089 0.144656 -0.021539\nv -0.04558 0.149081 -0.023423\nv -0.028649 0.141259 -0.020535\nv -0.029103 0.141226 -0.033442\nv -0.037313 0.144619 -0.035164\nv -0.029194 0.14122 -0.036023\nv -0.037358 0.144611 -0.037889\nv -0.029283 0.141213 -0.038604\nv -0.037401 0.144603 -0.040615\nv -0.045752 0.149031 -0.040273\nv -0.045778 0.149021 -0.043082\nv -0.045724 0.14904 -0.037465\nv -0.029012 0.141233 -0.03086\nv -0.037268 0.144626 -0.032439\nv -0.045695 0.149048 -0.034656\nv -0.011156 0.136706 -0.017518\nv -0.011541 0.136656 -0.019585\nv -0.005155 0.135895 -0.018757\nv -0.005509 0.135699 -0.020531\nv -0.010766 0.136807 -0.015438\nv -0.004792 0.136297 -0.016939\nv -0.000265 0.136404 -0.018127\nv -0.000528 0.135768 -0.019684\nv -0.000781 0.13546 -0.021168\nv -0.011934 0.136707 -0.021654\nv -0.005873 0.135901 -0.022316\nv -0.001035 0.135775 -0.022684\nv 0.002377 0.136551 -0.030751\nv 0.006607 0.136766 -0.028895\nv 0.002506 0.136403 -0.029354\nv 0.006622 0.136657 -0.027738\nv 0.002234 0.13655 -0.032112\nv 0.006579 0.136764 -0.030019\nv -0.002846 0.136428 -0.03385\nv -0.002589 0.136427 -0.032248\nv -0.002338 0.136259 -0.030611\nv 0.00264 0.135977 -0.02799\nv 0.006647 0.136345 -0.02661\nv 0.002805 0.135713 -0.026736\nv -0.002085 0.135771 -0.029005\nv -0.019389 0.138557 -0.016121\nv -0.019641 0.138553 -0.018469\nv -0.019136 0.138559 -0.013771\nv -0.019895 0.138551 -0.020817\nv -0.013909 0.13679 -0.03205\nv -0.021416 0.138534 -0.034907\nv -0.014303 0.136816 -0.034136\nv -0.021162 0.138537 -0.032559\nv -0.021667 0.138531 -0.037257\nv -0.014689 0.136816 -0.03622\nv -0.020908 0.138539 -0.030211\nv -0.013512 0.136712 -0.029968\nv -0.054581 0.154897 -0.020062\nv -0.063917 0.161391 -0.022588\nv -0.054539 0.154887 -0.022922\nv -0.063777 0.161379 -0.025482\nv -0.054624 0.154908 -0.017202\nv -0.064057 0.161403 -0.019693\nv -0.054497 0.154877 -0.025781\nv -0.063637 0.161367 -0.028377\nv -0.054285 0.154826 -0.040078\nv -0.054242 0.154816 -0.042938\nv -0.054199 0.154805 -0.045797\nv -0.062794 0.161293 -0.045742\nv -0.062654 0.161281 -0.048637\nv -0.062934 0.161305 -0.042848\nv -0.054327 0.154836 -0.037219\nv -0.063075 0.161318 -0.039954\nv 0.014234 0.137392 -0.019291\nv 0.013784 0.137803 -0.018701\nv 0.016275 0.13775 -0.016716\nv 0.015689 0.138243 -0.01633\nv 0.013016 0.137386 -0.017426\nv 0.012758 0.138042 -0.016983\nv 0.014595 0.13774 -0.015675\nv 0.014211 0.138505 -0.015432\nv 0.013135 0.137114 -0.017734\nv 0.014794 0.137452 -0.015765\nv 0.013323 0.137401 -0.018084\nv 0.015076 0.137777 -0.015896\nv 0.010018 0.137151 -0.027663\nv 0.009928 0.137152 -0.026752\nv 0.009814 0.137027 -0.025802\nv 0.009723 0.136681 -0.024885\nv 0.002981 0.135988 -0.025473\nv 0.00313 0.136277 -0.02406\nv 0.003727 0.136535 -0.018826\nv 0.003566 0.135984 -0.020133\nv 0.00341 0.135717 -0.021368\nv 0.003266 0.135989 -0.022641\nv -0.008095 0.136315 -0.033312\nv -0.008458 0.136317 -0.035149\nv -0.007726 0.136211 -0.031455\nv -0.007355 0.135905 -0.029616\nv 0.009686 0.136359 -0.023195\nv 0.009755 0.136128 -0.024087\nv 0.006803 0.136007 -0.024477\nv 0.006758 0.1358 -0.025584\nv 0.009617 0.13659 -0.022304\nv 0.006848 0.136215 -0.023369\nv 0.011818 0.137011 -0.020767\nv 0.012003 0.136712 -0.021452\nv 0.012188 0.136414 -0.022136\nv -0.037331 0.144315 -0.026985\nv -0.037376 0.144307 -0.029711\nv -0.045821 0.148754 -0.029037\nv -0.045851 0.148746 -0.031845\nv -0.037285 0.144322 -0.02426\nv -0.045792 0.148762 -0.026229\nv -0.028862 0.140913 -0.023111\nv -0.028954 0.140907 -0.025693\nv -0.029046 0.140901 -0.028274\nv -0.013182 0.136306 -0.027889\nv -0.012787 0.136355 -0.02581\nv -0.006641 0.135546 -0.026006\nv -0.007013 0.135345 -0.027833\nv -0.012393 0.136405 -0.023731\nv -0.006269 0.135747 -0.024179\nv -0.001284 0.135744 -0.024341\nv -0.00155 0.135422 -0.025925\nv -0.001816 0.135099 -0.027509\nv -0.020499 0.138198 -0.025503\nv -0.020754 0.138196 -0.027851\nv -0.020244 0.1382 -0.023155\nv -0.054617 0.15456 -0.031502\nv -0.054576 0.154551 -0.034361\nv -0.063565 0.161049 -0.034174\nv -0.063426 0.161038 -0.037068\nv -0.054658 0.154569 -0.028642\nv -0.063704 0.16106 -0.031279\nv 0.009393 0.136375 -0.019626\nv 0.009462 0.136144 -0.020518\nv 0.006968 0.136018 -0.020044\nv 0.006923 0.13581 -0.021151\nv 0.009328 0.136833 -0.018735\nv 0.007017 0.13643 -0.018937\nv 0.011062 0.137326 -0.018027\nv 0.011242 0.136734 -0.01871\nv 0.011427 0.136436 -0.019395\nv 0.006885 0.136012 -0.02226\nv 0.009539 0.136367 -0.021411\nv 0.011622 0.136723 -0.020081\nv 0.017827 0.138248 -0.017634\nv 0.015353 0.137761 -0.021056\nv 0.0174 0.138054 -0.017362\nv 0.015043 0.137592 -0.020577\nv 0.01566 0.137753 -0.021535\nv 0.018251 0.138239 -0.017906\nv 0.012965 0.13727 -0.02488\nv 0.012775 0.137276 -0.024195\nv 0.012582 0.137135 -0.023509\nv 0.016964 0.137457 -0.017089\nv 0.014726 0.137073 -0.020098\nv 0.016533 0.137061 -0.016817\nv 0.014412 0.13673 -0.019618\nv 0.012383 0.136701 -0.022822\nv -0.037149 0.144344 -0.016085\nv -0.037195 0.144336 -0.01881\nv -0.045703 0.148786 -0.017803\nv -0.045733 0.148778 -0.020612\nv -0.037104 0.144351 -0.01336\nv -0.045674 0.148793 -0.014995\nv -0.028493 0.140937 -0.012787\nv -0.028585 0.140931 -0.015368\nv -0.028677 0.140925 -0.017949\nv -0.03724 0.144329 -0.021535\nv -0.045762 0.14877 -0.02342\nv -0.02877 0.140919 -0.02053\nv -0.02923 0.140889 -0.033436\nv -0.029322 0.140883 -0.036017\nv -0.037467 0.144293 -0.035161\nv -0.037512 0.144285 -0.037886\nv -0.029414 0.140877 -0.038598\nv -0.037558 0.144278 -0.040611\nv -0.045939 0.148723 -0.040271\nv -0.045968 0.148715 -0.043079\nv -0.045909 0.148731 -0.037462\nv -0.029138 0.140895 -0.030855\nv -0.037421 0.1443 -0.032436\nv -0.04588 0.148739 -0.034654\nv -0.011607 0.136301 -0.019572\nv -0.011212 0.136351 -0.017492\nv -0.005169 0.13554 -0.018694\nv -0.005541 0.13534 -0.020521\nv -0.010816 0.136451 -0.015413\nv -0.004793 0.135943 -0.016867\nv -0.000239 0.136067 -0.018001\nv -0.000511 0.135422 -0.019585\nv -0.000777 0.135099 -0.021169\nv -0.012 0.136353 -0.021651\nv -0.005905 0.135543 -0.02235\nv -0.00103 0.135422 -0.022755\nv 0.006684 0.136307 -0.027802\nv 0.006645 0.136407 -0.028911\nv 0.002547 0.136052 -0.029428\nv 0.002398 0.136191 -0.030771\nv 0.006604 0.136405 -0.030019\nv 0.002246 0.13619 -0.032113\nv -0.002578 0.136067 -0.032267\nv -0.002838 0.136068 -0.033852\nv -0.002321 0.135906 -0.030681\nv 0.00672 0.136002 -0.026693\nv 0.002837 0.135354 -0.026742\nv 0.002691 0.135633 -0.028085\nv -0.00207 0.135422 -0.029095\nv -0.019478 0.138207 -0.01611\nv -0.019733 0.138205 -0.018458\nv -0.019223 0.13821 -0.013762\nv -0.019989 0.138203 -0.020807\nv -0.021519 0.138189 -0.034896\nv -0.021264 0.138191 -0.032548\nv -0.013968 0.136434 -0.032049\nv -0.014361 0.13646 -0.034128\nv -0.021774 0.138187 -0.037244\nv -0.014755 0.136461 -0.036207\nv -0.021009 0.138194 -0.0302\nv -0.013575 0.136357 -0.029969\nv -0.054781 0.154597 -0.020064\nv -0.05474 0.154588 -0.022924\nv -0.064121 0.161094 -0.022596\nv -0.063982 0.161082 -0.025491\nv -0.054822 0.154606 -0.017205\nv -0.06426 0.161105 -0.019702\nv -0.054699 0.154579 -0.025783\nv -0.063843 0.161071 -0.028385\nv -0.054493 0.154532 -0.04008\nv -0.054452 0.154523 -0.04294\nv -0.054411 0.154514 -0.045799\nv -0.063009 0.161004 -0.045751\nv -0.06287 0.160993 -0.048645\nv -0.063148 0.161015 -0.042857\nv -0.054534 0.154541 -0.037221\nv -0.063287 0.161026 -0.039962\nv 0.014112 0.137088 -0.019141\nv 0.013811 0.137445 -0.018664\nv 0.016116 0.137474 -0.016546\nv 0.0157 0.137887 -0.016276\nv 0.012883 0.137116 -0.017227\nv 0.012589 0.137824 -0.016751\nv 0.01442 0.137509 -0.015461\nv 0.014011 0.138325 -0.015192\nv 0.014837 0.137096 -0.015731\nv 0.013184 0.136758 -0.017705\nv 0.013497 0.137102 -0.018184\nv 0.015268 0.137491 -0.016004\nv 0.009988 0.136797 -0.026766\nv 0.010061 0.136793 -0.027658\nv 0.009913 0.136688 -0.025873\nv 0.009833 0.136351 -0.02498\nv 0.003151 0.135917 -0.024059\nv 0.002994 0.135635 -0.025401\nv 0.003601 0.13564 -0.020032\nv 0.003763 0.136202 -0.018692\nv 0.003444 0.135359 -0.021373\nv 0.003298 0.135638 -0.022716\nv -0.008106 0.135955 -0.033319\nv -0.008474 0.135957 -0.035147\nv -0.007739 0.135853 -0.03149\nv -0.007377 0.135548 -0.029662\n\nvt 0.4 0.757812 0\nvt 0.4 0.8125 0\nvt 0.5 0.757812 0\nvt 0.5 0.8125 0\nvt 0.6 0.757812 0\nvt 0.6 0.8125 0\nvt 0.5 0.875 0\nvt 0.6 0.875 0\nvt 0.4 0.875 0\nvt 0.5 0.375 0\nvt 0.5 0.25 0\nvt 0.4 0.375 0\nvt 0.4 0.25 0\nvt 0.6 0.375 0\nvt 0.6 0.25 0\nvt 0.6 0.484375 0\nvt 0.5 0.484375 0\nvt 0.4 0.484375 0\nvt 0.5 0.617188 0\nvt 0.4 0.617188 0\nvt 0.5 0.65625 0\nvt 0.4 0.65625 0\nvt 0.6 0.617188 0\nvt 0.6 0.65625 0\nvt 0.6 0.6875 0\nvt 0.5 0.6875 0\nvt 0.4 0.6875 0\nvt 0.5 0.5625 0\nvt 0.4 0.5625 0\nvt 0.6 0.5625 0\nvt 0.5 0.125 0\nvt 0.5 0 0\nvt 0.4 0.125 0\nvt 0.4 0 0\nvt 0.6 0.125 0\nvt 0.6 0 0\nvt 0.8 0.757812 0\nvt 0.8 0.8125 0\nvt 0.9 0.757812 0\nvt 0.9 0.8125 0\nvt 1 0.757812 0\nvt 1 0.8125 0\nvt 0.9 0.875 0\nvt 1 0.875 0\nvt 0.8 0.875 0\nvt 0.7 0.757812 0\nvt 0.7 0.8125 0\nvt 0.7 0.875 0\nvt 0.1 1 0\nvt 0.2 1 0\nvt 0.1 0.9375 0\nvt 0.2 0.9375 0\nvt 0 1 0\nvt 0 0.9375 0\nvt 0 0.875 0\nvt 0.1 0.875 0\nvt 0.2 0.875 0\nvt 0.3 0.9375 0\nvt 0.3 1 0\nvt 0.4 0.9375 0\nvt 0.4 1 0\nvt 0.3 0.875 0\nvt 0.9 0.375 0\nvt 0.9 0.25 0\nvt 0.8 0.375 0\nvt 0.8 0.25 0\nvt 1 0.375 0\nvt 1 0.25 0\nvt 1 0.484375 0\nvt 0.9 0.484375 0\nvt 0.8 0.484375 0\nvt 0.7 0.375 0\nvt 0.7 0.25 0\nvt 0.7 0.484375 0\nvt 0.2 0.484375 0\nvt 0.2 0.375 0\nvt 0.1 0.484375 0\nvt 0.1 0.375 0\nvt 0 0.484375 0\nvt 0 0.375 0\nvt 0.1 0.25 0\nvt 0 0.25 0\nvt 0.2 0.25 0\nvt 0.3 0.484375 0\nvt 0.3 0.375 0\nvt 0.3 0.25 0\nvt 0.9 0.617188 0\nvt 0.8 0.617188 0\nvt 0.9 0.65625 0\nvt 0.8 0.65625 0\nvt 1 0.617188 0\nvt 1 0.65625 0\nvt 1 0.6875 0\nvt 0.9 0.6875 0\nvt 0.8 0.6875 0\nvt 0.7 0.617188 0\nvt 0.7 0.65625 0\nvt 0.7 0.6875 0\nvt 0.1 0.71875 0\nvt 0.1 0.757812 0\nvt 0.2 0.71875 0\nvt 0.2 0.757812 0\nvt 0 0.71875 0\nvt 0 0.757812 0\nvt 0 0.6875 0\nvt 0.1 0.6875 0\nvt 0.2 0.6875 0\nvt 0.3 0.71875 0\nvt 0.3 0.757812 0\nvt 0.4 0.71875 0\nvt 0.3 0.6875 0\nvt 0.9 0.5625 0\nvt 0.8 0.5625 0\nvt 1 0.5625 0\nvt 0.7 0.5625 0\nvt 0.2 0.617188 0\nvt 0.1 0.5625 0\nvt 0.1 0.617188 0\nvt 0.2 0.5625 0\nvt 0 0.5625 0\nvt 0 0.617188 0\nvt 0.3 0.5625 0\nvt 0.3 0.617188 0\nvt 0.9 0.125 0\nvt 0.9 0 0\nvt 0.8 0.125 0\nvt 0.8 0 0\nvt 1 0.125 0\nvt 1 0 0\nvt 0.7 0.125 0\nvt 0.7 0 0\nvt 0.2 0.125 0\nvt 0.1 0.125 0\nvt 0 0.125 0\nvt 0.1 0 0\nvt 0 0 0\nvt 0.2 0 0\nvt 0.3 0.125 0\nvt 0.3 0 0\nvt 0.5 0.9375 0\nvt 0.6 0.9375 0\nvt 0.5 1 0\nvt 0.6 1 0\nvt 0.9 0.9375 0\nvt 1 0.9375 0\nvt 0.9 1 0\nvt 1 1 0\nvt 0.8 0.9375 0\nvt 0.8 1 0\nvt 0.7 0.9375 0\nvt 0.7 1 0\nvt 0 0.8125 0\nvt 0.1 0.8125 0\nvt 0.2 0.8125 0\nvt 0.3 0.8125 0\nvt 0.5 0.71875 0\nvt 0.6 0.71875 0\nvt 1 0.71875 0\nvt 0.9 0.71875 0\nvt 0.8 0.71875 0\nvt 0.7 0.71875 0\nvt 0.1 0.65625 0\nvt 0 0.65625 0\nvt 0.2 0.65625 0\nvt 0.3 0.65625 0\nvt 0.5 0.8125 0\nvt 0.4 0.8125 0\nvt 0.5 0.757812 0\nvt 0.4 0.757812 0\nvt 0.6 0.8125 0\nvt 0.6 0.757812 0\nvt 0.6 0.875 0\nvt 0.5 0.875 0\nvt 0.4 0.875 0\nvt 0.5 0.375 0\nvt 0.4 0.375 0\nvt 0.5 0.25 0\nvt 0.4 0.25 0\nvt 0.6 0.375 0\nvt 0.6 0.25 0\nvt 0.6 0.484375 0\nvt 0.5 0.484375 0\nvt 0.4 0.484375 0\nvt 0.4 0.617188 0\nvt 0.5 0.617188 0\nvt 0.5 0.65625 0\nvt 0.4 0.65625 0\nvt 0.6 0.617188 0\nvt 0.6 0.65625 0\nvt 0.6 0.6875 0\nvt 0.5 0.6875 0\nvt 0.4 0.6875 0\nvt 0.5 0.5625 0\nvt 0.4 0.5625 0\nvt 0.6 0.5625 0\nvt 0.5 0.125 0\nvt 0.4 0.125 0\nvt 0.5 0 0\nvt 0.4 0 0\nvt 0.6 0.125 0\nvt 0.6 0 0\nvt 0.9 0.8125 0\nvt 0.8 0.8125 0\nvt 0.9 0.757812 0\nvt 0.8 0.757812 0\nvt 1 0.8125 0\nvt 1 0.757812 0\nvt 1 0.875 0\nvt 0.9 0.875 0\nvt 0.8 0.875 0\nvt 0.7 0.757812 0\nvt 0.7 0.8125 0\nvt 0.7 0.875 0\nvt 0.1 1 0\nvt 0.1 0.9375 0\nvt 0.2 1 0\nvt 0.2 0.9375 0\nvt 0 0.9375 0\nvt 0 1 0\nvt 0 0.875 0\nvt 0.1 0.875 0\nvt 0.2 0.875 0\nvt 0.3 1 0\nvt 0.3 0.9375 0\nvt 0.4 1 0\nvt 0.4 0.9375 0\nvt 0.3 0.875 0\nvt 0.9 0.375 0\nvt 0.8 0.375 0\nvt 0.9 0.25 0\nvt 0.8 0.25 0\nvt 1 0.375 0\nvt 1 0.25 0\nvt 1 0.484375 0\nvt 0.9 0.484375 0\nvt 0.8 0.484375 0\nvt 0.7 0.375 0\nvt 0.7 0.25 0\nvt 0.7 0.484375 0\nvt 0.2 0.484375 0\nvt 0.1 0.484375 0\nvt 0.2 0.375 0\nvt 0.1 0.375 0\nvt 0 0.484375 0\nvt 0 0.375 0\nvt 0.1 0.25 0\nvt 0 0.25 0\nvt 0.2 0.25 0\nvt 0.3 0.484375 0\nvt 0.3 0.375 0\nvt 0.3 0.25 0\nvt 0.8 0.617188 0\nvt 0.9 0.617188 0\nvt 0.9 0.65625 0\nvt 0.8 0.65625 0\nvt 1 0.617188 0\nvt 1 0.65625 0\nvt 1 0.6875 0\nvt 0.9 0.6875 0\nvt 0.8 0.6875 0\nvt 0.7 0.617188 0\nvt 0.7 0.65625 0\nvt 0.7 0.6875 0\nvt 0.2 0.757812 0\nvt 0.1 0.757812 0\nvt 0.2 0.71875 0\nvt 0.1 0.71875 0\nvt 0 0.757812 0\nvt 0 0.71875 0\nvt 0.1 0.6875 0\nvt 0 0.6875 0\nvt 0.2 0.6875 0\nvt 0.3 0.757812 0\nvt 0.4 0.71875 0\nvt 0.3 0.71875 0\nvt 0.3 0.6875 0\nvt 0.9 0.5625 0\nvt 0.8 0.5625 0\nvt 1 0.5625 0\nvt 0.7 0.5625 0\nvt 0.1 0.5625 0\nvt 0.2 0.5625 0\nvt 0.2 0.617188 0\nvt 0.1 0.617188 0\nvt 0 0.5625 0\nvt 0 0.617188 0\nvt 0.3 0.5625 0\nvt 0.3 0.617188 0\nvt 0.9 0.125 0\nvt 0.8 0.125 0\nvt 0.9 0 0\nvt 0.8 0 0\nvt 1 0.125 0\nvt 1 0 0\nvt 0.7 0.125 0\nvt 0.7 0 0\nvt 0.2 0.125 0\nvt 0.1 0.125 0\nvt 0 0.125 0\nvt 0.1 0 0\nvt 0 0 0\nvt 0.2 0 0\nvt 0.3 0.125 0\nvt 0.3 0 0\nvt 0.5 0.9375 0\nvt 0.6 0.9375 0\nvt 0.5 1 0\nvt 0.6 1 0\nvt 0.9 0.9375 0\nvt 1 0.9375 0\nvt 0.9 1 0\nvt 1 1 0\nvt 0.8 1 0\nvt 0.8 0.9375 0\nvt 0.7 0.9375 0\nvt 0.7 1 0\nvt 0.1 0.8125 0\nvt 0 0.8125 0\nvt 0.2 0.8125 0\nvt 0.3 0.8125 0\nvt 0.6 0.71875 0\nvt 0.5 0.71875 0\nvt 0.9 0.71875 0\nvt 1 0.71875 0\nvt 0.8 0.71875 0\nvt 0.7 0.71875 0\nvt 0.1 0.65625 0\nvt 0 0.65625 0\nvt 0.2 0.65625 0\nvt 0.3 0.65625 0\n\nf 1465/1638 1464/1637 1463/1636 \nf 1464/1637 1465/1638 1466/1639 \nf 1467/1640 1466/1639 1465/1638 \nf 1466/1639 1467/1640 1468/1641 \nf 1468/1641 1469/1642 1466/1639 \nf 1469/1642 1468/1641 1470/1643 \nf 1466/1639 1471/1644 1464/1637 \nf 1471/1644 1466/1639 1469/1642 \nf 1474/1647 1473/1646 1472/1645 \nf 1473/1646 1474/1647 1475/1648 \nf 1472/1645 1477/1650 1476/1649 \nf 1477/1650 1472/1645 1473/1646 \nf 1479/1652 1476/1649 1478/1651 \nf 1476/1649 1479/1652 1472/1645 \nf 1480/1653 1472/1645 1479/1652 \nf 1472/1645 1480/1653 1474/1647 \nf 1483/1656 1482/1655 1481/1654 \nf 1482/1655 1483/1656 1484/1657 \nf 1486/1659 1481/1654 1485/1658 \nf 1481/1654 1486/1659 1483/1656 \nf 1488/1661 1483/1656 1487/1660 \nf 1486/1659 1487/1660 1483/1656 \nf 1489/1662 1483/1656 1488/1661 \nf 1483/1656 1489/1662 1484/1657 \nf 1490/1663 1480/1653 1479/1652 \nf 1480/1653 1490/1663 1491/1664 \nf 1492/1665 1479/1652 1478/1651 \nf 1479/1652 1492/1665 1490/1663 \nf 1481/1654 1490/1663 1485/1658 \nf 1492/1665 1485/1658 1490/1663 \nf 1482/1655 1491/1664 1481/1654 \nf 1490/1663 1481/1654 1491/1664 \nf 1495/1668 1494/1667 1493/1666 \nf 1494/1667 1495/1668 1496/1669 \nf 1493/1666 1498/1671 1497/1670 \nf 1498/1671 1493/1666 1494/1667 \nf 1473/1646 1497/1670 1477/1650 \nf 1497/1670 1473/1646 1493/1666 \nf 1475/1648 1493/1666 1473/1646 \nf 1493/1666 1475/1648 1495/1668 \nf 1501/1674 1500/1673 1499/1672 \nf 1500/1673 1501/1674 1502/1675 \nf 1503/1676 1502/1675 1501/1674 \nf 1502/1675 1503/1676 1504/1677 \nf 1504/1677 1505/1678 1502/1675 \nf 1505/1678 1504/1677 1506/1679 \nf 1502/1675 1507/1680 1500/1673 \nf 1507/1680 1502/1675 1505/1678 \nf 1509/1682 1467/1640 1508/1681 \nf 1467/1640 1509/1682 1468/1641 \nf 1500/1673 1508/1681 1499/1672 \nf 1508/1681 1500/1673 1509/1682 \nf 1510/1683 1500/1673 1507/1680 \nf 1500/1673 1510/1683 1509/1682 \nf 1509/1682 1510/1683 1468/1641 \nf 1468/1641 1510/1683 1470/1643 \nf 1513/1686 1512/1685 1511/1684 \nf 1512/1685 1513/1686 1514/1687 \nf 1515/1688 1513/1686 1511/1684 \nf 1513/1686 1515/1688 1516/1689 \nf 1518/1691 1516/1689 1517/1690 \nf 1516/1689 1518/1691 1513/1686 \nf 1519/1692 1513/1686 1518/1691 \nf 1513/1686 1519/1692 1514/1687 \nf 1522/1695 1521/1694 1520/1693 \nf 1521/1694 1522/1695 1523/1696 \nf 1520/1693 1512/1685 1514/1687 \nf 1512/1685 1520/1693 1521/1694 \nf 1524/1697 1514/1687 1519/1692 \nf 1514/1687 1524/1697 1520/1693 \nf 1471/1644 1520/1693 1524/1697 \nf 1520/1693 1471/1644 1522/1695 \nf 1527/1700 1526/1699 1525/1698 \nf 1526/1699 1527/1700 1528/1701 \nf 1525/1698 1530/1703 1529/1702 \nf 1530/1703 1525/1698 1526/1699 \nf 1532/1705 1529/1702 1531/1704 \nf 1529/1702 1532/1705 1525/1698 \nf 1533/1706 1525/1698 1532/1705 \nf 1525/1698 1533/1706 1527/1700 \nf 1476/1649 1535/1708 1534/1707 \nf 1535/1708 1476/1649 1477/1650 \nf 1534/1707 1528/1701 1527/1700 \nf 1528/1701 1534/1707 1535/1708 \nf 1536/1709 1527/1700 1533/1706 \nf 1527/1700 1536/1709 1534/1707 \nf 1478/1651 1534/1707 1536/1709 \nf 1534/1707 1478/1651 1476/1649 \nf 1539/1712 1538/1711 1537/1710 \nf 1538/1711 1539/1712 1540/1713 \nf 1541/1714 1540/1713 1539/1712 \nf 1540/1713 1541/1714 1542/1715 \nf 1542/1715 1543/1716 1540/1713 \nf 1543/1716 1542/1715 1544/1717 \nf 1540/1713 1545/1718 1538/1711 \nf 1545/1718 1540/1713 1543/1716 \nf 1546/1719 1474/1647 1480/1653 \nf 1474/1647 1546/1719 1547/1720 \nf 1537/1710 1547/1720 1546/1719 \nf 1547/1720 1537/1710 1538/1711 \nf 1538/1711 1548/1721 1547/1720 \nf 1548/1721 1538/1711 1545/1718 \nf 1547/1720 1475/1648 1474/1647 \nf 1475/1648 1547/1720 1548/1721 \nf 1551/1724 1550/1723 1549/1722 \nf 1550/1723 1551/1724 1552/1725 \nf 1554/1727 1549/1722 1553/1726 \nf 1549/1722 1554/1727 1551/1724 \nf 1556/1729 1551/1724 1555/1728 \nf 1554/1727 1555/1728 1551/1724 \nf 1557/1730 1552/1725 1556/1729 \nf 1551/1724 1556/1729 1552/1725 \nf 1559/1732 1485/1658 1558/1731 \nf 1485/1658 1559/1732 1486/1659 \nf 1552/1725 1558/1731 1550/1723 \nf 1558/1731 1552/1725 1559/1732 \nf 1560/1733 1559/1732 1557/1730 \nf 1552/1725 1557/1730 1559/1732 \nf 1487/1660 1486/1659 1560/1733 \nf 1559/1732 1560/1733 1486/1659 \nf 1563/1736 1562/1735 1561/1734 \nf 1562/1735 1563/1736 1564/1737 \nf 1561/1734 1566/1739 1565/1738 \nf 1566/1739 1561/1734 1562/1735 \nf 1568/1741 1565/1738 1567/1740 \nf 1565/1738 1568/1741 1561/1734 \nf 1569/1742 1561/1734 1568/1741 \nf 1561/1734 1569/1742 1563/1736 \nf 1572/1745 1571/1744 1570/1743 \nf 1571/1744 1572/1745 1463/1636 \nf 1564/1737 1570/1743 1571/1744 \nf 1570/1743 1564/1737 1563/1736 \nf 1563/1736 1573/1746 1570/1743 \nf 1573/1746 1563/1736 1569/1742 \nf 1570/1743 1489/1662 1572/1745 \nf 1489/1662 1570/1743 1573/1746 \nf 1574/1747 1533/1706 1532/1705 \nf 1533/1706 1574/1747 1575/1748 \nf 1576/1749 1532/1705 1531/1704 \nf 1532/1705 1576/1749 1574/1747 \nf 1549/1722 1574/1747 1553/1726 \nf 1576/1749 1553/1726 1574/1747 \nf 1550/1723 1575/1748 1549/1722 \nf 1574/1747 1549/1722 1575/1748 \nf 1577/1750 1478/1651 1536/1709 \nf 1478/1651 1577/1750 1492/1665 \nf 1575/1748 1536/1709 1533/1706 \nf 1536/1709 1575/1748 1577/1750 \nf 1558/1731 1577/1750 1550/1723 \nf 1575/1748 1550/1723 1577/1750 \nf 1485/1658 1492/1665 1558/1731 \nf 1577/1750 1558/1731 1492/1665 \nf 1580/1753 1579/1752 1578/1751 \nf 1581/1754 1578/1751 1579/1752 \nf 1583/1756 1582/1755 1580/1753 \nf 1579/1752 1580/1753 1582/1755 \nf 1582/1755 1539/1712 1579/1752 \nf 1539/1712 1582/1755 1541/1714 \nf 1581/1754 1539/1712 1537/1710 \nf 1539/1712 1581/1754 1579/1752 \nf 1585/1758 1584/1757 1482/1655 \nf 1491/1664 1482/1655 1584/1757 \nf 1578/1751 1581/1754 1585/1758 \nf 1584/1757 1585/1758 1581/1754 \nf 1584/1757 1537/1710 1546/1719 \nf 1537/1710 1584/1757 1581/1754 \nf 1491/1664 1546/1719 1480/1653 \nf 1546/1719 1491/1664 1584/1757 \nf 1588/1761 1587/1760 1586/1759 \nf 1587/1760 1588/1761 1589/1762 \nf 1586/1759 1591/1764 1590/1763 \nf 1591/1764 1586/1759 1587/1760 \nf 1526/1699 1590/1763 1530/1703 \nf 1590/1763 1526/1699 1586/1759 \nf 1528/1701 1586/1759 1526/1699 \nf 1586/1759 1528/1701 1588/1761 \nf 1497/1670 1593/1766 1592/1765 \nf 1593/1766 1497/1670 1498/1671 \nf 1592/1765 1589/1762 1588/1761 \nf 1589/1762 1592/1765 1593/1766 \nf 1535/1708 1588/1761 1528/1701 \nf 1588/1761 1535/1708 1592/1765 \nf 1477/1650 1592/1765 1535/1708 \nf 1592/1765 1477/1650 1497/1670 \nf 1543/1716 1594/1767 1545/1718 \nf 1594/1767 1543/1716 1595/1768 \nf 1544/1717 1595/1768 1543/1716 \nf 1595/1768 1544/1717 1596/1769 \nf 1596/1769 1597/1770 1595/1768 \nf 1597/1770 1596/1769 1598/1771 \nf 1595/1768 1599/1772 1594/1767 \nf 1599/1772 1595/1768 1597/1770 \nf 1548/1721 1495/1668 1475/1648 \nf 1495/1668 1548/1721 1600/1773 \nf 1545/1718 1600/1773 1548/1721 \nf 1600/1773 1545/1718 1594/1767 \nf 1594/1767 1601/1774 1600/1773 \nf 1601/1774 1594/1767 1599/1772 \nf 1600/1773 1496/1669 1495/1668 \nf 1496/1669 1600/1773 1601/1774 \nf 1602/1775 1469/1642 1470/1643 \nf 1470/1643 1603/1776 1602/1775 \nf 1604/1777 1602/1775 1603/1776 \nf 1603/1776 1605/1778 1604/1777 \nf 1602/1775 1523/1696 1522/1695 \nf 1523/1696 1602/1775 1604/1777 \nf 1469/1642 1522/1695 1471/1644 \nf 1522/1695 1469/1642 1602/1775 \nf 1606/1779 1505/1678 1506/1679 \nf 1506/1679 1607/1780 1606/1779 \nf 1608/1781 1606/1779 1607/1780 \nf 1607/1780 1609/1782 1608/1781 \nf 1606/1779 1611/1784 1610/1783 \nf 1611/1784 1606/1779 1608/1781 \nf 1505/1678 1610/1783 1507/1680 \nf 1610/1783 1505/1678 1606/1779 \nf 1507/1680 1610/1783 1612/1785 \nf 1507/1680 1612/1785 1510/1683 \nf 1612/1785 1611/1784 1613/1786 \nf 1611/1784 1612/1785 1610/1783 \nf 1603/1776 1613/1786 1605/1778 \nf 1613/1786 1603/1776 1612/1785 \nf 1470/1643 1612/1785 1603/1776 \nf 1612/1785 1470/1643 1510/1683 \nf 1615/1788 1517/1690 1614/1787 \nf 1517/1690 1615/1788 1518/1691 \nf 1562/1735 1614/1787 1566/1739 \nf 1614/1787 1562/1735 1615/1788 \nf 1615/1788 1562/1735 1564/1737 \nf 1564/1737 1616/1789 1615/1788 \nf 1518/1691 1615/1788 1616/1789 \nf 1616/1789 1519/1692 1518/1691 \nf 1617/1790 1524/1697 1519/1692 \nf 1617/1790 1519/1692 1616/1789 \nf 1571/1744 1617/1790 1616/1789 \nf 1571/1744 1616/1789 1564/1737 \nf 1617/1790 1571/1744 1463/1636 \nf 1463/1636 1464/1637 1617/1790 \nf 1524/1697 1617/1790 1464/1637 \nf 1464/1637 1471/1644 1524/1697 \nf 1487/1660 1619/1792 1618/1791 \nf 1487/1660 1618/1791 1488/1661 \nf 1619/1792 1467/1640 1465/1638 \nf 1619/1792 1465/1638 1618/1791 \nf 1618/1791 1465/1638 1463/1636 \nf 1618/1791 1463/1636 1572/1745 \nf 1488/1661 1618/1791 1572/1745 \nf 1488/1661 1572/1745 1489/1662 \nf 1620/1793 1556/1729 1555/1728 \nf 1556/1729 1620/1793 1621/1794 \nf 1501/1674 1620/1793 1503/1676 \nf 1620/1793 1501/1674 1621/1794 \nf 1621/1794 1501/1674 1499/1672 \nf 1621/1794 1499/1672 1622/1795 \nf 1621/1794 1557/1730 1556/1729 \nf 1557/1730 1621/1794 1622/1795 \nf 1623/1796 1557/1730 1622/1795 \nf 1557/1730 1623/1796 1560/1733 \nf 1499/1672 1623/1796 1622/1795 \nf 1623/1796 1499/1672 1508/1681 \nf 1508/1681 1619/1792 1623/1796 \nf 1619/1792 1508/1681 1467/1640 \nf 1560/1733 1623/1796 1619/1792 \nf 1619/1792 1487/1660 1560/1733 \nf 1624/1797 1568/1741 1567/1740 \nf 1624/1797 1567/1740 1625/1798 \nf 1580/1753 1624/1797 1625/1798 \nf 1580/1753 1625/1798 1583/1756 \nf 1578/1751 1626/1799 1624/1797 \nf 1578/1751 1624/1797 1580/1753 \nf 1626/1799 1569/1742 1568/1741 \nf 1626/1799 1568/1741 1624/1797 \nf 1627/1800 1573/1746 1569/1742 \nf 1569/1742 1626/1799 1627/1800 \nf 1627/1800 1578/1751 1585/1758 \nf 1578/1751 1627/1800 1626/1799 \nf 1484/1657 1585/1758 1482/1655 \nf 1585/1758 1484/1657 1627/1800 \nf 1489/1662 1627/1800 1484/1657 \nf 1627/1800 1489/1662 1573/1746 \nf 1630/1803 1629/1802 1628/1801 \nf 1629/1802 1630/1803 1631/1804 \nf 1633/1806 1628/1801 1632/1805 \nf 1628/1801 1633/1806 1630/1803 \nf 1632/1805 1635/1808 1634/1807 \nf 1635/1808 1632/1805 1628/1801 \nf 1628/1801 1636/1809 1635/1808 \nf 1636/1809 1628/1801 1629/1802 \nf 1639/1812 1638/1811 1637/1810 \nf 1638/1811 1639/1812 1640/1813 \nf 1642/1815 1637/1810 1641/1814 \nf 1637/1810 1642/1815 1639/1812 \nf 1641/1814 1644/1817 1643/1816 \nf 1644/1817 1641/1814 1637/1810 \nf 1637/1810 1645/1818 1644/1817 \nf 1645/1818 1637/1810 1638/1811 \nf 1648/1821 1647/1820 1646/1819 \nf 1648/1821 1646/1819 1649/1822 \nf 1651/1824 1650/1823 1647/1820 \nf 1651/1824 1647/1820 1648/1821 \nf 1652/1825 1651/1824 1648/1821 \nf 1652/1825 1648/1821 1653/1826 \nf 1648/1821 1654/1827 1653/1826 \nf 1654/1827 1648/1821 1649/1822 \nf 1655/1828 1644/1817 1645/1818 \nf 1655/1828 1645/1818 1656/1829 \nf 1657/1830 1643/1816 1644/1817 \nf 1657/1830 1644/1817 1655/1828 \nf 1650/1823 1657/1830 1655/1828 \nf 1650/1823 1655/1828 1647/1820 \nf 1647/1820 1655/1828 1656/1829 \nf 1647/1820 1656/1829 1646/1819 \nf 1660/1833 1659/1832 1658/1831 \nf 1659/1832 1660/1833 1661/1834 \nf 1663/1836 1658/1831 1662/1835 \nf 1658/1831 1663/1836 1660/1833 \nf 1662/1835 1639/1812 1642/1815 \nf 1639/1812 1662/1835 1658/1831 \nf 1658/1831 1640/1813 1639/1812 \nf 1640/1813 1658/1831 1659/1832 \nf 1666/1839 1665/1838 1664/1837 \nf 1665/1838 1666/1839 1667/1840 \nf 1669/1842 1664/1837 1668/1841 \nf 1664/1837 1669/1842 1666/1839 \nf 1668/1841 1671/1844 1670/1843 \nf 1671/1844 1668/1841 1664/1837 \nf 1664/1837 1672/1845 1671/1844 \nf 1672/1845 1664/1837 1665/1838 \nf 1633/1806 1674/1847 1673/1846 \nf 1674/1847 1633/1806 1632/1805 \nf 1673/1846 1665/1838 1667/1840 \nf 1665/1838 1673/1846 1674/1847 \nf 1672/1845 1665/1838 1674/1847 \nf 1674/1847 1675/1848 1672/1845 \nf 1674/1847 1634/1807 1675/1848 \nf 1634/1807 1674/1847 1632/1805 \nf 1678/1851 1677/1850 1676/1849 \nf 1677/1850 1678/1851 1679/1852 \nf 1681/1854 1677/1850 1680/1853 \nf 1677/1850 1681/1854 1676/1849 \nf 1680/1853 1683/1856 1682/1855 \nf 1683/1856 1680/1853 1677/1850 \nf 1677/1850 1684/1857 1683/1856 \nf 1684/1857 1677/1850 1679/1852 \nf 1687/1860 1686/1859 1685/1858 \nf 1686/1859 1687/1860 1688/1861 \nf 1678/1851 1686/1859 1679/1852 \nf 1686/1859 1678/1851 1685/1858 \nf 1679/1852 1689/1862 1684/1857 \nf 1689/1862 1679/1852 1686/1859 \nf 1689/1862 1686/1859 1688/1861 \nf 1689/1862 1688/1861 1636/1809 \nf 1692/1865 1691/1864 1690/1863 \nf 1691/1864 1692/1865 1693/1866 \nf 1695/1868 1690/1863 1694/1867 \nf 1690/1863 1695/1868 1692/1865 \nf 1694/1867 1697/1870 1696/1869 \nf 1697/1870 1694/1867 1690/1863 \nf 1690/1863 1698/1871 1697/1870 \nf 1698/1871 1690/1863 1691/1864 \nf 1700/1873 1641/1814 1699/1872 \nf 1641/1814 1700/1873 1642/1815 \nf 1693/1866 1699/1872 1691/1864 \nf 1699/1872 1693/1866 1700/1873 \nf 1691/1864 1701/1874 1698/1871 \nf 1701/1874 1691/1864 1699/1872 \nf 1699/1872 1643/1816 1701/1874 \nf 1643/1816 1699/1872 1641/1814 \nf 1704/1877 1703/1876 1702/1875 \nf 1703/1876 1704/1877 1705/1878 \nf 1705/1878 1706/1879 1703/1876 \nf 1706/1879 1705/1878 1707/1880 \nf 1708/1881 1707/1880 1705/1878 \nf 1707/1880 1708/1881 1709/1882 \nf 1710/1883 1705/1878 1704/1877 \nf 1705/1878 1710/1883 1708/1881 \nf 1638/1811 1711/1884 1645/1818 \nf 1711/1884 1638/1811 1712/1885 \nf 1712/1885 1702/1875 1711/1884 \nf 1702/1875 1712/1885 1704/1877 \nf 1713/1886 1704/1877 1712/1885 \nf 1704/1877 1713/1886 1710/1883 \nf 1640/1813 1712/1885 1638/1811 \nf 1712/1885 1640/1813 1713/1886 \nf 1716/1889 1715/1888 1714/1887 \nf 1716/1889 1714/1887 1717/1890 \nf 1719/1892 1718/1891 1715/1888 \nf 1719/1892 1715/1888 1716/1889 \nf 1720/1893 1719/1892 1716/1889 \nf 1720/1893 1716/1889 1721/1894 \nf 1721/1894 1716/1889 1717/1890 \nf 1721/1894 1717/1890 1722/1895 \nf 1724/1897 1723/1896 1650/1823 \nf 1724/1897 1650/1823 1651/1824 \nf 1717/1890 1714/1887 1723/1896 \nf 1717/1890 1723/1896 1724/1897 \nf 1722/1895 1717/1890 1724/1897 \nf 1722/1895 1724/1897 1725/1898 \nf 1725/1898 1724/1897 1651/1824 \nf 1725/1898 1651/1824 1652/1825 \nf 1728/1901 1727/1900 1726/1899 \nf 1727/1900 1728/1901 1729/1902 \nf 1729/1902 1730/1903 1727/1900 \nf 1730/1903 1729/1902 1731/1904 \nf 1732/1905 1731/1904 1729/1902 \nf 1731/1904 1732/1905 1733/1906 \nf 1734/1907 1729/1902 1728/1901 \nf 1729/1902 1734/1907 1732/1905 \nf 1736/1909 1735/1908 1631/1804 \nf 1735/1908 1736/1909 1737/1910 \nf 1726/1899 1737/1910 1728/1901 \nf 1737/1910 1726/1899 1735/1908 \nf 1728/1901 1738/1911 1734/1907 \nf 1738/1911 1728/1901 1737/1910 \nf 1737/1910 1654/1827 1738/1911 \nf 1654/1827 1737/1910 1736/1909 \nf 1739/1912 1697/1870 1698/1871 \nf 1739/1912 1698/1871 1740/1913 \nf 1741/1914 1696/1869 1697/1870 \nf 1741/1914 1697/1870 1739/1912 \nf 1718/1891 1741/1914 1739/1912 \nf 1718/1891 1739/1912 1715/1888 \nf 1715/1888 1739/1912 1740/1913 \nf 1715/1888 1740/1913 1714/1887 \nf 1742/1915 1701/1874 1643/1816 \nf 1742/1915 1643/1816 1657/1830 \nf 1740/1913 1698/1871 1701/1874 \nf 1740/1913 1701/1874 1742/1915 \nf 1714/1887 1740/1913 1742/1915 \nf 1714/1887 1742/1915 1723/1896 \nf 1723/1896 1742/1915 1657/1830 \nf 1723/1896 1657/1830 1650/1823 \nf 1745/1918 1744/1917 1743/1916 \nf 1745/1918 1743/1916 1746/1919 \nf 1746/1919 1743/1916 1747/1920 \nf 1746/1919 1747/1920 1748/1921 \nf 1703/1876 1747/1920 1743/1916 \nf 1747/1920 1703/1876 1706/1879 \nf 1744/1917 1702/1875 1703/1876 \nf 1744/1917 1703/1876 1743/1916 \nf 1646/1819 1656/1829 1749/1922 \nf 1646/1819 1749/1922 1750/1923 \nf 1750/1923 1749/1922 1744/1917 \nf 1750/1923 1744/1917 1745/1918 \nf 1749/1922 1711/1884 1702/1875 \nf 1749/1922 1702/1875 1744/1917 \nf 1656/1829 1645/1818 1711/1884 \nf 1656/1829 1711/1884 1749/1922 \nf 1753/1926 1752/1925 1751/1924 \nf 1752/1925 1753/1926 1754/1927 \nf 1756/1929 1751/1924 1755/1928 \nf 1751/1924 1756/1929 1753/1926 \nf 1755/1928 1692/1865 1695/1868 \nf 1692/1865 1755/1928 1751/1924 \nf 1751/1924 1693/1866 1692/1865 \nf 1693/1866 1751/1924 1752/1925 \nf 1758/1931 1662/1835 1757/1930 \nf 1662/1835 1758/1931 1663/1836 \nf 1754/1927 1757/1930 1752/1925 \nf 1757/1930 1754/1927 1758/1931 \nf 1752/1925 1700/1873 1693/1866 \nf 1700/1873 1752/1925 1757/1930 \nf 1757/1930 1642/1815 1700/1873 \nf 1642/1815 1757/1930 1662/1835 \nf 1759/1932 1708/1881 1710/1883 \nf 1708/1881 1759/1932 1760/1933 \nf 1760/1933 1709/1882 1708/1881 \nf 1709/1882 1760/1933 1761/1934 \nf 1762/1935 1761/1934 1760/1933 \nf 1761/1934 1762/1935 1763/1936 \nf 1764/1937 1760/1933 1759/1932 \nf 1760/1933 1764/1937 1762/1935 \nf 1659/1832 1713/1886 1640/1813 \nf 1713/1886 1659/1832 1765/1938 \nf 1765/1938 1710/1883 1713/1886 \nf 1710/1883 1765/1938 1759/1932 \nf 1766/1939 1759/1932 1765/1938 \nf 1759/1932 1766/1939 1764/1937 \nf 1661/1834 1765/1938 1659/1832 \nf 1765/1938 1661/1834 1766/1939 \nf 1768/1941 1634/1807 1767/1940 \nf 1635/1808 1767/1940 1634/1807 \nf 1770/1943 1768/1941 1769/1942 \nf 1767/1940 1769/1942 1768/1941 \nf 1688/1861 1687/1860 1767/1940 \nf 1767/1940 1687/1860 1769/1942 \nf 1636/1809 1688/1861 1635/1808 \nf 1635/1808 1688/1861 1767/1940 \nf 1671/1844 1771/1944 1670/1843 \nf 1771/1944 1772/1945 1670/1843 \nf 1771/1944 1773/1946 1772/1945 \nf 1773/1946 1774/1947 1772/1945 \nf 1776/1949 1775/1948 1771/1944 \nf 1771/1944 1775/1948 1773/1946 \nf 1672/1845 1776/1949 1671/1844 \nf 1671/1844 1776/1949 1771/1944 \nf 1776/1949 1675/1848 1777/1950 \nf 1675/1848 1776/1949 1672/1845 \nf 1775/1948 1777/1950 1778/1951 \nf 1777/1950 1775/1948 1776/1949 \nf 1768/1941 1778/1951 1777/1950 \nf 1778/1951 1768/1941 1770/1943 \nf 1634/1807 1777/1950 1675/1848 \nf 1777/1950 1634/1807 1768/1941 \nf 1780/1953 1682/1855 1779/1952 \nf 1779/1952 1682/1855 1683/1856 \nf 1730/1903 1780/1953 1727/1900 \nf 1727/1900 1780/1953 1779/1952 \nf 1727/1900 1779/1952 1726/1899 \nf 1779/1952 1781/1954 1726/1899 \nf 1684/1857 1781/1954 1683/1856 \nf 1779/1952 1683/1856 1781/1954 \nf 1684/1857 1782/1955 1781/1954 \nf 1782/1955 1684/1857 1689/1862 \nf 1781/1954 1735/1908 1726/1899 \nf 1735/1908 1781/1954 1782/1955 \nf 1735/1908 1782/1955 1631/1804 \nf 1631/1804 1782/1955 1629/1802 \nf 1636/1809 1629/1802 1689/1862 \nf 1782/1955 1689/1862 1629/1802 \nf 1652/1825 1784/1957 1783/1956 \nf 1784/1957 1652/1825 1653/1826 \nf 1783/1956 1630/1803 1633/1806 \nf 1630/1803 1783/1956 1784/1957 \nf 1736/1909 1631/1804 1784/1957 \nf 1630/1803 1784/1957 1631/1804 \nf 1654/1827 1736/1909 1653/1826 \nf 1784/1957 1653/1826 1736/1909 \nf 1786/1959 1721/1894 1785/1958 \nf 1721/1894 1786/1959 1720/1893 \nf 1786/1959 1666/1839 1669/1842 \nf 1666/1839 1786/1959 1785/1958 \nf 1787/1960 1667/1840 1785/1958 \nf 1666/1839 1785/1958 1667/1840 \nf 1722/1895 1785/1958 1721/1894 \nf 1785/1958 1722/1895 1787/1960 \nf 1787/1960 1722/1895 1788/1961 \nf 1725/1898 1788/1961 1722/1895 \nf 1788/1961 1667/1840 1787/1960 \nf 1667/1840 1788/1961 1673/1846 \nf 1783/1956 1673/1846 1788/1961 \nf 1673/1846 1783/1956 1633/1806 \nf 1783/1956 1725/1898 1652/1825 \nf 1725/1898 1783/1956 1788/1961 \nf 1790/1963 1733/1906 1789/1962 \nf 1732/1905 1789/1962 1733/1906 \nf 1748/1921 1790/1963 1746/1919 \nf 1789/1962 1746/1919 1790/1963 \nf 1791/1964 1746/1919 1789/1962 \nf 1746/1919 1791/1964 1745/1918 \nf 1791/1964 1732/1905 1734/1907 \nf 1732/1905 1791/1964 1789/1962 \nf 1734/1907 1792/1965 1791/1964 \nf 1792/1965 1734/1907 1738/1911 \nf 1745/1918 1792/1965 1750/1923 \nf 1792/1965 1745/1918 1791/1964 \nf 1649/1822 1750/1923 1792/1965 \nf 1750/1923 1649/1822 1646/1819 \nf 1654/1827 1792/1965 1738/1911 \nf 1792/1965 1654/1827 1649/1822 \nf 1660/1833 1496/1669 1661/1834 \nf 1496/1669 1660/1833 1494/1667 \nf 1663/1836 1494/1667 1660/1833 \nf 1494/1667 1663/1836 1498/1671 \nf 1668/1841 1503/1676 1669/1842 \nf 1503/1676 1668/1841 1504/1677 \nf 1670/1843 1504/1677 1668/1841 \nf 1504/1677 1670/1843 1506/1679 \nf 1512/1685 1676/1849 1511/1684 \nf 1676/1849 1512/1685 1678/1851 \nf 1681/1854 1511/1684 1676/1849 \nf 1511/1684 1681/1854 1515/1688 \nf 1680/1853 1515/1688 1681/1854 \nf 1515/1688 1680/1853 1516/1689 \nf 1682/1855 1516/1689 1680/1853 \nf 1516/1689 1682/1855 1517/1690 \nf 1523/1696 1685/1858 1521/1694 \nf 1685/1858 1523/1696 1687/1860 \nf 1521/1694 1678/1851 1512/1685 \nf 1678/1851 1521/1694 1685/1858 \nf 1694/1867 1530/1703 1695/1868 \nf 1530/1703 1694/1867 1529/1702 \nf 1696/1869 1529/1702 1694/1867 \nf 1529/1702 1696/1869 1531/1704 \nf 1706/1879 1542/1715 1541/1714 \nf 1542/1715 1706/1879 1707/1880 \nf 1707/1880 1544/1717 1542/1715 \nf 1544/1717 1707/1880 1709/1882 \nf 1719/1892 1553/1726 1718/1891 \nf 1553/1726 1719/1892 1554/1727 \nf 1720/1893 1554/1727 1719/1892 \nf 1554/1727 1720/1893 1555/1728 \nf 1566/1739 1731/1904 1565/1738 \nf 1731/1904 1566/1739 1730/1903 \nf 1565/1738 1733/1906 1567/1740 \nf 1733/1906 1565/1738 1731/1904 \nf 1741/1914 1531/1704 1696/1869 \nf 1531/1704 1741/1914 1576/1749 \nf 1718/1891 1576/1749 1741/1914 \nf 1576/1749 1718/1891 1553/1726 \nf 1583/1756 1747/1920 1582/1755 \nf 1747/1920 1583/1756 1748/1921 \nf 1747/1920 1541/1714 1582/1755 \nf 1541/1714 1747/1920 1706/1879 \nf 1753/1926 1589/1762 1754/1927 \nf 1589/1762 1753/1926 1587/1760 \nf 1756/1929 1587/1760 1753/1926 \nf 1587/1760 1756/1929 1591/1764 \nf 1755/1928 1591/1764 1756/1929 \nf 1591/1764 1755/1928 1590/1763 \nf 1695/1868 1590/1763 1755/1928 \nf 1590/1763 1695/1868 1530/1703 \nf 1758/1931 1498/1671 1663/1836 \nf 1498/1671 1758/1931 1593/1766 \nf 1754/1927 1593/1766 1758/1931 \nf 1593/1766 1754/1927 1589/1762 \nf 1709/1882 1596/1769 1544/1717 \nf 1596/1769 1709/1882 1761/1934 \nf 1762/1935 1598/1771 1763/1936 \nf 1598/1771 1762/1935 1597/1770 \nf 1598/1771 1761/1934 1763/1936 \nf 1761/1934 1598/1771 1596/1769 \nf 1764/1937 1597/1770 1762/1935 \nf 1597/1770 1764/1937 1599/1772 \nf 1766/1939 1599/1772 1764/1937 \nf 1599/1772 1766/1939 1601/1774 \nf 1661/1834 1601/1774 1766/1939 \nf 1601/1774 1661/1834 1496/1669 \nf 1604/1777 1770/1943 1769/1942 \nf 1770/1943 1604/1777 1605/1778 \nf 1769/1942 1523/1696 1604/1777 \nf 1769/1942 1687/1860 1523/1696 \nf 1772/1945 1506/1679 1670/1843 \nf 1506/1679 1772/1945 1607/1780 \nf 1607/1780 1774/1947 1609/1782 \nf 1774/1947 1607/1780 1772/1945 \nf 1774/1947 1608/1781 1609/1782 \nf 1608/1781 1774/1947 1773/1946 \nf 1773/1946 1611/1784 1608/1781 \nf 1773/1946 1775/1948 1611/1784 \nf 1611/1784 1778/1951 1613/1786 \nf 1778/1951 1611/1784 1775/1948 \nf 1613/1786 1770/1943 1605/1778 \nf 1770/1943 1613/1786 1778/1951 \nf 1780/1953 1517/1690 1682/1855 \nf 1517/1690 1780/1953 1614/1787 \nf 1730/1903 1614/1787 1780/1953 \nf 1614/1787 1730/1903 1566/1739 \nf 1786/1959 1555/1728 1720/1893 \nf 1555/1728 1786/1959 1620/1793 \nf 1786/1959 1669/1842 1503/1676 \nf 1786/1959 1503/1676 1620/1793 \nf 1567/1740 1790/1963 1625/1798 \nf 1790/1963 1567/1740 1733/1906 \nf 1625/1798 1748/1921 1583/1756 \nf 1748/1921 1625/1798 1790/1963 \n\ng box5 top ribbon group11 polySurface61\nusemtl ribbon1\nv 0.020879 0.135568 -0.015833\nv 0.016788 0.134571 -0.02214\nv 0.019747 0.135283 -0.015395\nv 0.018583 0.134835 -0.022837\nv 0.018475 0.134982 -0.014892\nv 0.014893 0.134302 -0.0214\nv 0.01384 0.133964 -0.028897\nv 0.011393 0.133728 -0.027946\nv 0.016214 0.134197 -0.029819\nv -0.002777 0.15251 -0.068123\nv -0.006744 0.152587 -0.066579\nv -0.005086 0.149265 -0.073332\nv -0.009092 0.149343 -0.071773\nv 0.00119 0.152432 -0.069667\nv -0.001079 0.149186 -0.074891\nv -0.002116 0.144527 -0.077086\nv -0.006122 0.144606 -0.075527\nv -0.010128 0.144684 -0.073968\nv -0.005167 0.139345 -0.073068\nv -0.009173 0.139424 -0.071508\nv -0.00116 0.139267 -0.074627\nv -0.003014 0.135115 -0.067881\nv 0.000953 0.135038 -0.069424\nv -0.00698 0.135193 -0.066337\nv 0.009391 0.146644 -0.039727\nv 0.006234 0.146965 -0.038497\nv 0.006427 0.150156 -0.04672\nv 0.002994 0.150372 -0.045385\nv 0.012503 0.146326 -0.040938\nv 0.009838 0.14994 -0.048044\nv 0.006956 0.152931 -0.055499\nv 0.003297 0.15304 -0.054078\nv -0.000368 0.153149 -0.052654\nv -0.004273 0.133415 -0.060301\nv -0.000425 0.13334 -0.061798\nv 0.003422 0.133264 -0.063295\nv 0.006031 0.132937 -0.056736\nv 0.00237 0.132983 -0.055314\nv -0.001295 0.13303 -0.053889\nv 0.018568 0.138769 -0.014834\nv 0.017224 0.140124 -0.021354\nv 0.019812 0.138518 -0.015325\nv 0.015348 0.140417 -0.020617\nv 0.020957 0.138278 -0.015774\nv 0.019019 0.139836 -0.022053\nv 0.017013 0.141564 -0.028298\nv 0.014649 0.141889 -0.027377\nv 0.012215 0.142218 -0.026425\nv 0.016059 0.135664 -0.013947\nv 0.01122 0.13498 -0.019971\nv 0.014952 0.135383 -0.013576\nv 0.009438 0.134719 -0.019312\nv 0.013772 0.134794 -0.013155\nv 0.007606 0.134156 -0.018622\nv 0.004232 0.134154 -0.025177\nv 0.001829 0.13364 -0.024255\nv 0.006594 0.134385 -0.026077\nv 0.01301 0.134647 -0.020656\nv 0.0172 0.135336 -0.014374\nv 0.008959 0.13406 -0.026992\nv 0.017371 0.132809 -0.045996\nv 0.019294 0.133027 -0.038935\nv 0.02213 0.132848 -0.040038\nv 0.020522 0.132654 -0.047223\nv 0.024956 0.132793 -0.041138\nv 0.023666 0.132593 -0.048446\nv 0.025817 0.133163 -0.033565\nv 0.023403 0.133211 -0.032626\nv 0.020973 0.133401 -0.031682\nv 0.014234 0.133151 -0.04477\nv 0.011124 0.133397 -0.043553\nv 0.016475 0.13345 -0.037833\nv 0.013696 0.133748 -0.036746\nv 0.018567 0.133872 -0.030741\nv 0.009123 0.152277 -0.072754\nv 0.006933 0.14903 -0.078009\nv 0.01309 0.152199 -0.074298\nv 0.01094 0.148951 -0.079568\nv 0.017056 0.152121 -0.075842\nv 0.014946 0.148873 -0.081127\nv 0.01391 0.144214 -0.083323\nv 0.009903 0.144292 -0.081764\nv 0.005897 0.14437 -0.080205\nv 0.005156 0.152354 -0.07121\nv 0.002927 0.149108 -0.07645\nv 0.001891 0.144449 -0.078646\nv -0.021111 0.149579 -0.067095\nv -0.018141 0.144841 -0.07085\nv -0.017105 0.1495 -0.068654\nv -0.022147 0.144919 -0.069291\nv -0.025118 0.149655 -0.065538\nv -0.026154 0.144998 -0.067731\nv -0.018644 0.15282 -0.061948\nv -0.022612 0.152897 -0.060408\nv -0.014677 0.152743 -0.063492\nv -0.013099 0.149422 -0.070213\nv -0.014135 0.144763 -0.072409\nv -0.01071 0.152665 -0.065035\nv 0.010859 0.139031 -0.079304\nv 0.006853 0.13911 -0.077745\nv 0.014865 0.138953 -0.080863\nv 0.012853 0.134805 -0.074055\nv 0.016819 0.134728 -0.0756\nv 0.008886 0.134882 -0.072512\nv 0.002846 0.139188 -0.076186\nv 0.00492 0.13496 -0.070968\nv -0.021192 0.139659 -0.066831\nv -0.01888 0.135426 -0.061706\nv -0.017186 0.13958 -0.06839\nv -0.014914 0.135348 -0.06325\nv -0.025199 0.139739 -0.065273\nv -0.022848 0.135506 -0.060166\nv -0.013179 0.139502 -0.069949\nv -0.010947 0.135271 -0.064793\nv 0.021925 0.146919 -0.04461\nv 0.018766 0.146851 -0.043382\nv 0.020106 0.150188 -0.05205\nv 0.016672 0.15018 -0.050712\nv 0.025071 0.146857 -0.045832\nv 0.023532 0.150121 -0.053384\nv 0.021602 0.152757 -0.06121\nv 0.01794 0.152828 -0.059781\nv 0.014276 0.152881 -0.058353\nv 0.015615 0.146524 -0.042154\nv 0.013245 0.150022 -0.049373\nv 0.010614 0.152896 -0.056923\nv -0.015269 0.154094 -0.055475\nv -0.011421 0.154019 -0.056971\nv -0.019119 0.154169 -0.053982\nv -0.011349 0.153326 -0.048377\nv -0.01501 0.153474 -0.046961\nv -0.007692 0.153217 -0.049798\nv -0.007574 0.153944 -0.058469\nv -0.003727 0.153868 -0.059967\nv -0.004034 0.153183 -0.051225\nv 0.011117 0.133114 -0.066292\nv 0.014964 0.133038 -0.067789\nv 0.018811 0.132963 -0.069288\nv 0.020675 0.132575 -0.062443\nv 0.017012 0.132647 -0.061017\nv 0.013349 0.132731 -0.059589\nv 0.007269 0.133189 -0.064793\nv 0.009689 0.13284 -0.058161\nv -0.001432 0.133643 -0.038666\nv -0.00511 0.133323 -0.044858\nv -0.004551 0.133519 -0.037465\nv -0.008523 0.13329 -0.043537\nv -0.007691 0.133208 -0.036254\nv -0.011945 0.133157 -0.042215\nv -0.012276 0.13327 -0.049613\nv -0.015939 0.133292 -0.048192\nv -0.008617 0.133223 -0.051035\nv 0.004837 0.133148 -0.041111\nv -0.001698 0.133156 -0.046189\nv 0.001685 0.133397 -0.039878\nv 0.001731 0.132989 -0.047527\nv -0.004959 0.133127 -0.052462\nv 0.023301 0.138786 -0.016698\nv 0.022667 0.140401 -0.023477\nv 0.024552 0.138876 -0.01717\nv 0.024545 0.140493 -0.024199\nv 0.025773 0.138851 -0.017638\nv 0.026398 0.140455 -0.024915\nv 0.024236 0.142263 -0.031103\nv 0.026651 0.142215 -0.032039\nv 0.021801 0.14217 -0.030161\nv 0.022088 0.138474 -0.016226\nv 0.020809 0.140053 -0.022757\nv 0.019379 0.141796 -0.029221\nv -0.000053 0.146571 -0.036052\nv 0.00082 0.1442 -0.029024\nv -0.003156 0.146893 -0.034856\nv 0.003593 0.143853 -0.030091\nv -0.001976 0.144837 -0.027937\nv -0.006276 0.147471 -0.033646\nv 0.00266 0.142683 -0.022733\nv 0.00504 0.142079 -0.023656\nv 0.007395 0.141752 -0.024555\nv 0.006388 0.144087 -0.031172\nv 0.003068 0.146767 -0.037263\nv 0.009241 0.144326 -0.032285\nv 0.009772 0.141982 -0.02547\nv 0.010899 0.133559 -0.035661\nv 0.008048 0.133369 -0.034552\nv 0.007999 0.133273 -0.04234\nv 0.014866 0.143632 -0.034478\nv 0.012084 0.143978 -0.033395\nv -0.000365 0.13378 -0.031289\nv -0.003185 0.133347 -0.0302\nv 0.002423 0.133968 -0.03236\nv 0.00521 0.13367 -0.033441\nv 0.024074 0.133818 -0.024982\nv 0.025929 0.133782 -0.0257\nv 0.024436 0.134548 -0.017226\nv 0.025665 0.134524 -0.017694\nv 0.022196 0.13401 -0.024258\nv 0.023174 0.134741 -0.01675\nv 0.020353 0.134503 -0.023536\nv 0.021974 0.135243 -0.016276\nv 0.023332 0.144343 -0.03777\nv 0.026158 0.144286 -0.038868\nv 0.020487 0.144252 -0.036666\nv 0.017652 0.143868 -0.035564\nv 0.009873 0.140269 -0.018522\nv 0.008058 0.140812 -0.017827\nv 0.015013 0.138615 -0.013498\nv 0.013847 0.139075 -0.01307\nv 0.016139 0.138371 -0.013894\nv 0.011656 0.13998 -0.019188\nv 0.013464 0.140194 -0.019878\nv 0.017307 0.138563 -0.014334\nv 0.000121 0.153793 -0.061463\nv 0.003968 0.153718 -0.06296\nv 0.008584 0.133055 -0.050188\nv 0.005166 0.133022 -0.048861\nv 0.01551 0.153492 -0.067455\nv 0.019357 0.153416 -0.068954\nv 0.011663 0.153567 -0.065957\nv 0.007815 0.153642 -0.064459\nv -0.00726 0.150425 -0.041397\nv -0.010671 0.150791 -0.040078\nv -0.003857 0.150208 -0.042714\nv -0.000443 0.15029 -0.044044\nv 0.022264 0.132486 -0.055525\nv 0.018839 0.132553 -0.054192\nv 0.015411 0.132671 -0.052855\nv 0.011991 0.132888 -0.051518\nv -0.015815 0.133641 -0.05581\nv -0.019665 0.133717 -0.054316\nv -0.011968 0.133565 -0.057306\nv -0.00812 0.13349 -0.058804\nv 0.018578 0.135195 -0.022868\nv 0.020873 0.135927 -0.015861\nv 0.016732 0.134928 -0.022151\nv 0.019666 0.135634 -0.015393\nv 0.018459 0.135341 -0.014924\nv 0.014886 0.13466 -0.021433\nv 0.013801 0.134322 -0.028909\nv 0.01139 0.134087 -0.027972\nv 0.016211 0.134557 -0.029846\nv -0.002738 0.152171 -0.068007\nv -0.004996 0.149014 -0.073089\nv -0.006705 0.152248 -0.066463\nv -0.009002 0.149093 -0.07153\nv -0.00099 0.148936 -0.074648\nv 0.001228 0.152093 -0.06955\nv -0.001985 0.144525 -0.07675\nv -0.005991 0.144603 -0.075191\nv -0.009998 0.144682 -0.073632\nv -0.005062 0.139577 -0.072812\nv -0.009069 0.139655 -0.071253\nv -0.001056 0.139498 -0.074371\nv 0.001016 0.135362 -0.069279\nv -0.002951 0.135439 -0.067736\nv -0.006918 0.135517 -0.066192\nv 0.00636 0.149823 -0.046839\nv 0.00294 0.150038 -0.045508\nv 0.006177 0.146633 -0.038626\nv 0.009311 0.146314 -0.039847\nv 0.00978 0.149607 -0.048171\nv 0.012446 0.145994 -0.041068\nv 0.006921 0.152579 -0.055572\nv 0.003259 0.152688 -0.054147\nv -0.000402 0.152797 -0.052722\nv -0.000399 0.133696 -0.061749\nv -0.004247 0.133771 -0.060252\nv 0.003448 0.13362 -0.063246\nv 0.006039 0.133297 -0.056732\nv 0.002377 0.133344 -0.055307\nv -0.001285 0.13339 -0.053882\nv 0.017145 0.139777 -0.021416\nv 0.015309 0.140069 -0.020701\nv 0.018524 0.13842 -0.014913\nv 0.019721 0.138173 -0.01538\nv 0.018981 0.139486 -0.022132\nv 0.020918 0.137927 -0.015847\nv 0.016972 0.141218 -0.028388\nv 0.014572 0.141545 -0.027453\nv 0.012172 0.141872 -0.026518\nv 0.016068 0.136021 -0.013991\nv 0.014861 0.135728 -0.013523\nv 0.011216 0.135339 -0.020002\nv 0.009369 0.135072 -0.019285\nv 0.013648 0.135118 -0.013054\nv 0.007518 0.134501 -0.018567\nv 0.004181 0.13451 -0.025165\nv 0.001765 0.133994 -0.024227\nv 0.006591 0.134745 -0.026102\nv 0.013051 0.135 -0.020718\nv 0.017263 0.135681 -0.014458\nv 0.008991 0.134416 -0.027037\nv 0.017393 0.133169 -0.046011\nv 0.022139 0.133208 -0.040054\nv 0.019322 0.133386 -0.038958\nv 0.020531 0.133014 -0.047232\nv 0.024957 0.133153 -0.041151\nv 0.02367 0.132953 -0.048454\nv 0.02341 0.13357 -0.032651\nv 0.025815 0.133523 -0.033587\nv 0.021008 0.133758 -0.031716\nv 0.011124 0.133758 -0.043569\nv 0.01426 0.13351 -0.04479\nv 0.01651 0.133808 -0.037862\nv 0.013696 0.134108 -0.036765\nv 0.018611 0.134228 -0.030781\nv 0.011029 0.148701 -0.079325\nv 0.007023 0.148779 -0.077766\nv 0.013128 0.15186 -0.074181\nv 0.009162 0.151938 -0.072638\nv 0.015036 0.148622 -0.080884\nv 0.017095 0.151782 -0.075725\nv 0.01404 0.144211 -0.082987\nv 0.010034 0.14429 -0.081428\nv 0.006028 0.144368 -0.079869\nv 0.003017 0.148857 -0.076207\nv 0.005195 0.152015 -0.071094\nv 0.002021 0.144446 -0.07831\nv -0.021022 0.149328 -0.066852\nv -0.017015 0.14925 -0.068411\nv -0.01801 0.144839 -0.070514\nv -0.022017 0.144917 -0.068955\nv -0.025028 0.149406 -0.065293\nv -0.026023 0.144995 -0.067395\nv -0.018605 0.152481 -0.061832\nv -0.022572 0.152559 -0.060288\nv -0.014638 0.152403 -0.063375\nv -0.013009 0.149171 -0.06997\nv -0.014004 0.14476 -0.072073\nv -0.010672 0.152326 -0.064919\nv 0.010963 0.139263 -0.079048\nv 0.006957 0.139342 -0.077489\nv 0.014969 0.139185 -0.080607\nv 0.016882 0.135051 -0.075454\nv 0.012916 0.135129 -0.073911\nv 0.008949 0.135207 -0.072367\nv 0.00295 0.13942 -0.07593\nv 0.004982 0.135284 -0.070823\nv -0.014851 0.135672 -0.063105\nv -0.018818 0.13575 -0.061561\nv -0.017081 0.139812 -0.068134\nv -0.021088 0.139891 -0.066575\nv -0.022784 0.135828 -0.060017\nv -0.025094 0.139969 -0.065016\nv -0.010884 0.135595 -0.064648\nv -0.013075 0.139734 -0.069693\nv 0.020057 0.149851 -0.052169\nv 0.016633 0.149844 -0.050836\nv 0.018735 0.146517 -0.043513\nv 0.021877 0.146584 -0.044735\nv 0.02348 0.149784 -0.053501\nv 0.025016 0.146523 -0.045957\nv 0.017909 0.152475 -0.059847\nv 0.021571 0.152404 -0.061272\nv 0.014246 0.152529 -0.058422\nv 0.013206 0.149689 -0.049504\nv 0.015589 0.146191 -0.04229\nv 0.010583 0.152545 -0.056997\nv -0.01527 0.153734 -0.055458\nv -0.011422 0.153659 -0.056955\nv -0.019117 0.153809 -0.053961\nv -0.011388 0.152975 -0.048446\nv -0.015049 0.153121 -0.047021\nv -0.007727 0.152866 -0.049871\nv -0.003727 0.153508 -0.05995\nv -0.007575 0.153584 -0.058453\nv -0.004064 0.152831 -0.051296\nv 0.014991 0.133394 -0.067738\nv 0.011144 0.13347 -0.066241\nv 0.018839 0.133319 -0.069236\nv 0.017024 0.133007 -0.061008\nv 0.020686 0.132935 -0.062433\nv 0.013362 0.133091 -0.059583\nv 0.007296 0.133545 -0.064744\nv 0.009701 0.1332 -0.058158\nv -0.001432 0.134003 -0.038683\nv -0.004574 0.133879 -0.037461\nv -0.005107 0.133683 -0.044871\nv -0.008532 0.13365 -0.043538\nv -0.00772 0.133567 -0.036238\nv -0.011958 0.133517 -0.042206\nv -0.012271 0.13363 -0.049607\nv -0.015934 0.133652 -0.048182\nv -0.008608 0.133584 -0.051032\nv 0.001735 0.133349 -0.047534\nv 0.004839 0.133508 -0.041125\nv -0.001686 0.133516 -0.046203\nv 0.001704 0.133756 -0.039904\nv -0.004947 0.133487 -0.052457\nv 0.023331 0.138437 -0.016783\nv 0.024534 0.138525 -0.017251\nv 0.022674 0.140052 -0.023567\nv 0.024517 0.140143 -0.024283\nv 0.025735 0.138502 -0.017719\nv 0.026358 0.140107 -0.025\nv 0.024202 0.141917 -0.031199\nv 0.026607 0.14187 -0.032135\nv 0.021795 0.141824 -0.030262\nv 0.022123 0.138126 -0.016315\nv 0.020826 0.139705 -0.022849\nv 0.019382 0.141451 -0.029325\nv -0.00011 0.14624 -0.036182\nv -0.003245 0.14656 -0.034961\nv 0.00073 0.14386 -0.029103\nv 0.003543 0.143513 -0.030199\nv -0.006374 0.147137 -0.033741\nv -0.002078 0.144498 -0.028008\nv 0.002557 0.142341 -0.022775\nv 0.004952 0.141733 -0.023709\nv 0.007352 0.141406 -0.024644\nv 0.003033 0.146437 -0.037404\nv 0.006367 0.14375 -0.031297\nv 0.009191 0.143986 -0.032395\nv 0.009762 0.141639 -0.025581\nv 0.008049 0.133729 -0.03457\nv 0.010873 0.133918 -0.035668\nv 0.007982 0.133633 -0.042347\nv 0.012005 0.143639 -0.033491\nv 0.014818 0.143292 -0.034587\nv -0.000402 0.134139 -0.03128\nv -0.00323 0.133705 -0.030181\nv 0.002421 0.134329 -0.032378\nv 0.005235 0.134029 -0.033474\nv 0.024084 0.134177 -0.025014\nv 0.025925 0.134141 -0.025731\nv 0.024458 0.134906 -0.01726\nv 0.025659 0.134883 -0.017728\nv 0.02326 0.135088 -0.016794\nv 0.022246 0.134365 -0.024298\nv 0.020414 0.134855 -0.023583\nv 0.022068 0.135587 -0.016328\nv 0.02329 0.144002 -0.037881\nv 0.026109 0.143947 -0.038978\nv 0.020469 0.143911 -0.036783\nv 0.017642 0.143529 -0.035685\nv 0.007951 0.140468 -0.017836\nv 0.009782 0.139922 -0.018551\nv 0.013724 0.138737 -0.013044\nv 0.014917 0.138267 -0.01351\nv 0.011618 0.139631 -0.019267\nv 0.016114 0.138021 -0.013977\nv 0.013464 0.13985 -0.019984\nv 0.017319 0.13822 -0.014445\nv 0.00012 0.153433 -0.061447\nv 0.003968 0.153358 -0.062945\nv 0.00516 0.133382 -0.048867\nv 0.008585 0.133415 -0.050199\nv 0.01551 0.153132 -0.067437\nv 0.019358 0.153056 -0.068934\nv 0.011663 0.153207 -0.065939\nv 0.007815 0.153282 -0.064442\nv -0.010749 0.150454 -0.04018\nv -0.007332 0.150091 -0.041511\nv -0.003912 0.149875 -0.042843\nv -0.000486 0.149957 -0.044175\nv 0.018848 0.132914 -0.054195\nv 0.022271 0.132847 -0.055527\nv 0.015426 0.133031 -0.052863\nv 0.012006 0.133248 -0.051531\nv -0.015789 0.133997 -0.05576\nv -0.019637 0.134072 -0.054262\nv -0.011942 0.133922 -0.057257\nv -0.008094 0.133846 -0.058754\n\nvt 0 0.6 0\nvt 0.03125 0.5 0\nvt 0 0.5 0\nvt 0.03125 0.6 0\nvt 0 0.4 0\nvt 0.03125 0.4 0\nvt 0.0625 0.5 0\nvt 0.0625 0.4 0\nvt 0.0625 0.6 0\nvt 0.726562 0.5 0\nvt 0.726562 0.4 0\nvt 0.625 0.5 0\nvt 0.625 0.4 0\nvt 0.726562 0.6 0\nvt 0.625 0.6 0\nvt 0.5 0.6 0\nvt 0.5 0.5 0\nvt 0.5 0.4 0\nvt 0.375 0.5 0\nvt 0.375 0.4 0\nvt 0.375 0.6 0\nvt 0.273438 0.5 0\nvt 0.273438 0.6 0\nvt 0.273438 0.4 0\nvt 0.875 0.5 0\nvt 0.875 0.4 0\nvt 0.84375 0.5 0\nvt 0.84375 0.4 0\nvt 0.875 0.6 0\nvt 0.84375 0.6 0\nvt 0.8125 0.6 0\nvt 0.8125 0.5 0\nvt 0.8125 0.4 0\nvt 0.21875 0.4 0\nvt 0.21875 0.5 0\nvt 0.21875 0.6 0\nvt 0.1875 0.6 0\nvt 0.1875 0.5 0\nvt 0.1875 0.4 0\nvt 1 0.4 0\nvt 0.96875 0.5 0\nvt 1 0.5 0\nvt 0.96875 0.4 0\nvt 1 0.6 0\nvt 0.96875 0.6 0\nvt 0.9375 0.6 0\nvt 0.9375 0.5 0\nvt 0.9375 0.4 0\nvt 0 0.2 0\nvt 0.03125 0.2 0\nvt 0 0.1 0\nvt 0.03125 0.1 0\nvt 0 0 0\nvt 0.03125 0 0\nvt 0.0625 0.1 0\nvt 0.0625 0 0\nvt 0.0625 0.2 0\nvt 0.03125 0.3 0\nvt 0 0.3 0\nvt 0.0625 0.3 0\nvt 0.125 0.8 0\nvt 0.09375 0.8 0\nvt 0.09375 0.9 0\nvt 0.125 0.9 0\nvt 0.09375 1 0\nvt 0.125 1 0\nvt 0.0625 1 0\nvt 0.0625 0.9 0\nvt 0.0625 0.8 0\nvt 0.125 0.7 0\nvt 0.125 0.6 0\nvt 0.09375 0.7 0\nvt 0.09375 0.6 0\nvt 0.0625 0.7 0\nvt 0.726562 0.8 0\nvt 0.625 0.8 0\nvt 0.726562 0.9 0\nvt 0.625 0.9 0\nvt 0.726562 1 0\nvt 0.625 1 0\nvt 0.5 1 0\nvt 0.5 0.9 0\nvt 0.5 0.8 0\nvt 0.726562 0.7 0\nvt 0.625 0.7 0\nvt 0.5 0.7 0\nvt 0.625 0.1 0\nvt 0.5 0.2 0\nvt 0.625 0.2 0\nvt 0.5 0.1 0\nvt 0.625 0 0\nvt 0.5 0 0\nvt 0.726562 0.1 0\nvt 0.726562 0 0\nvt 0.726562 0.2 0\nvt 0.625 0.3 0\nvt 0.5 0.3 0\nvt 0.726562 0.3 0\nvt 0.375 0.9 0\nvt 0.375 0.8 0\nvt 0.375 1 0\nvt 0.273438 0.9 0\nvt 0.273438 1 0\nvt 0.273438 0.8 0\nvt 0.375 0.7 0\nvt 0.273438 0.7 0\nvt 0.375 0.1 0\nvt 0.273438 0.1 0\nvt 0.375 0.2 0\nvt 0.273438 0.2 0\nvt 0.375 0 0\nvt 0.273438 0 0\nvt 0.375 0.3 0\nvt 0.273438 0.3 0\nvt 0.875 0.9 0\nvt 0.875 0.8 0\nvt 0.84375 0.9 0\nvt 0.84375 0.8 0\nvt 0.875 1 0\nvt 0.84375 1 0\nvt 0.8125 1 0\nvt 0.8125 0.9 0\nvt 0.8125 0.8 0\nvt 0.875 0.7 0\nvt 0.84375 0.7 0\nvt 0.8125 0.7 0\nvt 0.78125 0.1 0\nvt 0.78125 0.2 0\nvt 0.78125 0 0\nvt 0.8125 0.1 0\nvt 0.8125 0 0\nvt 0.8125 0.2 0\nvt 0.78125 0.3 0\nvt 0.78125 0.4 0\nvt 0.8125 0.3 0\nvt 0.21875 0.8 0\nvt 0.21875 0.9 0\nvt 0.21875 1 0\nvt 0.1875 1 0\nvt 0.1875 0.9 0\nvt 0.1875 0.8 0\nvt 0.21875 0.7 0\nvt 0.1875 0.7 0\nvt 0.125 0.2 0\nvt 0.15625 0.2 0\nvt 0.125 0.1 0\nvt 0.15625 0.1 0\nvt 0.125 0 0\nvt 0.15625 0 0\nvt 0.1875 0.1 0\nvt 0.1875 0 0\nvt 0.1875 0.2 0\nvt 0.125 0.4 0\nvt 0.15625 0.3 0\nvt 0.125 0.3 0\nvt 0.15625 0.4 0\nvt 0.1875 0.3 0\nvt 1 0.8 0\nvt 0.96875 0.8 0\nvt 1 0.9 0\nvt 0.96875 0.9 0\nvt 1 1 0\nvt 0.96875 1 0\nvt 0.9375 0.9 0\nvt 0.9375 1 0\nvt 0.9375 0.8 0\nvt 1 0.7 0\nvt 0.96875 0.7 0\nvt 0.9375 0.7 0\nvt 0.875 0.2 0\nvt 0.90625 0.1 0\nvt 0.875 0.1 0\nvt 0.90625 0.2 0\nvt 0.90625 0 0\nvt 0.875 0 0\nvt 0.9375 0 0\nvt 0.9375 0.1 0\nvt 0.9375 0.2 0\nvt 0.90625 0.3 0\nvt 0.875 0.3 0\nvt 0.90625 0.4 0\nvt 0.9375 0.3 0\nvt 0.09375 0.5 0\nvt 0.09375 0.4 0\nvt 0.125 0.5 0\nvt 0.90625 0.6 0\nvt 0.90625 0.5 0\nvt 0.09375 0.1 0\nvt 0.09375 0 0\nvt 0.09375 0.2 0\nvt 0.09375 0.3 0\nvt 0.03125 0.9 0\nvt 0.03125 1 0\nvt 0 0.9 0\nvt 0 1 0\nvt 0.03125 0.8 0\nvt 0 0.8 0\nvt 0.03125 0.7 0\nvt 0 0.7 0\nvt 0.90625 0.9 0\nvt 0.90625 1 0\nvt 0.90625 0.8 0\nvt 0.90625 0.7 0\nvt 0.96875 0.1 0\nvt 0.96875 0 0\nvt 1 0.1 0\nvt 1 0 0\nvt 1 0.2 0\nvt 0.96875 0.2 0\nvt 0.96875 0.3 0\nvt 1 0.3 0\nvt 0.78125 0.5 0\nvt 0.78125 0.6 0\nvt 0.15625 0.6 0\nvt 0.15625 0.5 0\nvt 0.78125 0.9 0\nvt 0.78125 1 0\nvt 0.78125 0.8 0\nvt 0.78125 0.7 0\nvt 0.84375 0.1 0\nvt 0.84375 0 0\nvt 0.84375 0.2 0\nvt 0.84375 0.3 0\nvt 0.15625 1 0\nvt 0.15625 0.9 0\nvt 0.15625 0.8 0\nvt 0.15625 0.7 0\nvt 0.21875 0.1 0\nvt 0.21875 0 0\nvt 0.21875 0.2 0\nvt 0.21875 0.3 0\nvt 0.03125 0.6 0\nvt 0 0.6 0\nvt 0.03125 0.5 0\nvt 0 0.5 0\nvt 0 0.4 0\nvt 0.03125 0.4 0\nvt 0.0625 0.5 0\nvt 0.0625 0.4 0\nvt 0.0625 0.6 0\nvt 0.726562 0.5 0\nvt 0.625 0.5 0\nvt 0.726562 0.4 0\nvt 0.625 0.4 0\nvt 0.625 0.6 0\nvt 0.726562 0.6 0\nvt 0.5 0.6 0\nvt 0.5 0.5 0\nvt 0.5 0.4 0\nvt 0.375 0.5 0\nvt 0.375 0.4 0\nvt 0.375 0.6 0\nvt 0.273438 0.6 0\nvt 0.273438 0.5 0\nvt 0.273438 0.4 0\nvt 0.84375 0.5 0\nvt 0.84375 0.4 0\nvt 0.875 0.4 0\nvt 0.875 0.5 0\nvt 0.84375 0.6 0\nvt 0.875 0.6 0\nvt 0.8125 0.6 0\nvt 0.8125 0.5 0\nvt 0.8125 0.4 0\nvt 0.21875 0.5 0\nvt 0.21875 0.4 0\nvt 0.21875 0.6 0\nvt 0.1875 0.6 0\nvt 0.1875 0.5 0\nvt 0.1875 0.4 0\nvt 0.96875 0.5 0\nvt 0.96875 0.4 0\nvt 1 0.4 0\nvt 1 0.5 0\nvt 0.96875 0.6 0\nvt 1 0.6 0\nvt 0.9375 0.6 0\nvt 0.9375 0.5 0\nvt 0.9375 0.4 0\nvt 0 0.2 0\nvt 0 0.1 0\nvt 0.03125 0.2 0\nvt 0.03125 0.1 0\nvt 0 0 0\nvt 0.03125 0 0\nvt 0.0625 0.1 0\nvt 0.0625 0 0\nvt 0.0625 0.2 0\nvt 0.03125 0.3 0\nvt 0 0.3 0\nvt 0.0625 0.3 0\nvt 0.125 0.8 0\nvt 0.09375 0.9 0\nvt 0.09375 0.8 0\nvt 0.125 0.9 0\nvt 0.09375 1 0\nvt 0.125 1 0\nvt 0.0625 0.9 0\nvt 0.0625 1 0\nvt 0.0625 0.8 0\nvt 0.125 0.6 0\nvt 0.125 0.7 0\nvt 0.09375 0.7 0\nvt 0.09375 0.6 0\nvt 0.0625 0.7 0\nvt 0.625 0.9 0\nvt 0.625 0.8 0\nvt 0.726562 0.9 0\nvt 0.726562 0.8 0\nvt 0.625 1 0\nvt 0.726562 1 0\nvt 0.5 1 0\nvt 0.5 0.9 0\nvt 0.5 0.8 0\nvt 0.625 0.7 0\nvt 0.726562 0.7 0\nvt 0.5 0.7 0\nvt 0.625 0.1 0\nvt 0.625 0.2 0\nvt 0.5 0.2 0\nvt 0.5 0.1 0\nvt 0.625 0 0\nvt 0.5 0 0\nvt 0.726562 0.1 0\nvt 0.726562 0 0\nvt 0.726562 0.2 0\nvt 0.625 0.3 0\nvt 0.5 0.3 0\nvt 0.726562 0.3 0\nvt 0.375 0.9 0\nvt 0.375 0.8 0\nvt 0.375 1 0\nvt 0.273438 1 0\nvt 0.273438 0.9 0\nvt 0.273438 0.8 0\nvt 0.375 0.7 0\nvt 0.273438 0.7 0\nvt 0.273438 0.2 0\nvt 0.273438 0.1 0\nvt 0.375 0.2 0\nvt 0.375 0.1 0\nvt 0.273438 0 0\nvt 0.375 0 0\nvt 0.273438 0.3 0\nvt 0.375 0.3 0\nvt 0.84375 0.9 0\nvt 0.84375 0.8 0\nvt 0.875 0.8 0\nvt 0.875 0.9 0\nvt 0.84375 1 0\nvt 0.875 1 0\nvt 0.8125 0.9 0\nvt 0.8125 1 0\nvt 0.8125 0.8 0\nvt 0.84375 0.7 0\nvt 0.875 0.7 0\nvt 0.8125 0.7 0\nvt 0.78125 0.1 0\nvt 0.78125 0.2 0\nvt 0.78125 0 0\nvt 0.8125 0.1 0\nvt 0.8125 0 0\nvt 0.8125 0.2 0\nvt 0.78125 0.4 0\nvt 0.78125 0.3 0\nvt 0.8125 0.3 0\nvt 0.21875 0.9 0\nvt 0.21875 0.8 0\nvt 0.21875 1 0\nvt 0.1875 0.9 0\nvt 0.1875 1 0\nvt 0.1875 0.8 0\nvt 0.21875 0.7 0\nvt 0.1875 0.7 0\nvt 0.125 0.2 0\nvt 0.125 0.1 0\nvt 0.15625 0.2 0\nvt 0.15625 0.1 0\nvt 0.125 0 0\nvt 0.15625 0 0\nvt 0.1875 0.1 0\nvt 0.1875 0 0\nvt 0.1875 0.2 0\nvt 0.15625 0.4 0\nvt 0.125 0.4 0\nvt 0.15625 0.3 0\nvt 0.125 0.3 0\nvt 0.1875 0.3 0\nvt 1 0.8 0\nvt 1 0.9 0\nvt 0.96875 0.8 0\nvt 0.96875 0.9 0\nvt 1 1 0\nvt 0.96875 1 0\nvt 0.9375 0.9 0\nvt 0.9375 1 0\nvt 0.9375 0.8 0\nvt 1 0.7 0\nvt 0.96875 0.7 0\nvt 0.9375 0.7 0\nvt 0.875 0.2 0\nvt 0.875 0.1 0\nvt 0.90625 0.1 0\nvt 0.90625 0.2 0\nvt 0.875 0 0\nvt 0.90625 0 0\nvt 0.9375 0 0\nvt 0.9375 0.1 0\nvt 0.9375 0.2 0\nvt 0.875 0.3 0\nvt 0.90625 0.3 0\nvt 0.90625 0.4 0\nvt 0.9375 0.3 0\nvt 0.09375 0.4 0\nvt 0.09375 0.5 0\nvt 0.125 0.5 0\nvt 0.90625 0.5 0\nvt 0.90625 0.6 0\nvt 0.09375 0.1 0\nvt 0.09375 0 0\nvt 0.09375 0.2 0\nvt 0.09375 0.3 0\nvt 0.03125 0.9 0\nvt 0.03125 1 0\nvt 0 0.9 0\nvt 0 1 0\nvt 0 0.8 0\nvt 0.03125 0.8 0\nvt 0.03125 0.7 0\nvt 0 0.7 0\nvt 0.90625 0.9 0\nvt 0.90625 1 0\nvt 0.90625 0.8 0\nvt 0.90625 0.7 0\nvt 0.96875 0 0\nvt 0.96875 0.1 0\nvt 1 0 0\nvt 1 0.1 0\nvt 0.96875 0.2 0\nvt 1 0.2 0\nvt 0.96875 0.3 0\nvt 1 0.3 0\nvt 0.78125 0.5 0\nvt 0.78125 0.6 0\nvt 0.15625 0.5 0\nvt 0.15625 0.6 0\nvt 0.78125 0.9 0\nvt 0.78125 1 0\nvt 0.78125 0.8 0\nvt 0.78125 0.7 0\nvt 0.84375 0 0\nvt 0.84375 0.1 0\nvt 0.84375 0.2 0\nvt 0.84375 0.3 0\nvt 0.15625 0.9 0\nvt 0.15625 1 0\nvt 0.15625 0.8 0\nvt 0.15625 0.7 0\nvt 0.21875 0.1 0\nvt 0.21875 0 0\nvt 0.21875 0.2 0\nvt 0.21875 0.3 0\n\nf 1795/1968 1794/1967 1793/1966 \nf 1793/1966 1794/1967 1796/1969 \nf 1797/1970 1794/1967 1795/1968 \nf 1794/1967 1797/1970 1798/1971 \nf 1798/1971 1799/1972 1794/1967 \nf 1799/1972 1798/1971 1800/1973 \nf 1799/1972 1796/1969 1794/1967 \nf 1796/1969 1799/1972 1801/1974 \nf 1804/1977 1803/1976 1802/1975 \nf 1803/1976 1804/1977 1805/1978 \nf 1806/1979 1804/1977 1802/1975 \nf 1804/1977 1806/1979 1807/1980 \nf 1807/1980 1808/1981 1804/1977 \nf 1808/1981 1809/1982 1804/1977 \nf 1804/1977 1809/1982 1805/1978 \nf 1809/1982 1810/1983 1805/1978 \nf 1809/1982 1811/1984 1810/1983 \nf 1810/1983 1811/1984 1812/1985 \nf 1808/1981 1813/1986 1809/1982 \nf 1809/1982 1813/1986 1811/1984 \nf 1813/1986 1814/1987 1811/1984 \nf 1814/1987 1813/1986 1815/1988 \nf 1811/1984 1816/1989 1812/1985 \nf 1816/1989 1811/1984 1814/1987 \nf 1819/1992 1818/1991 1817/1990 \nf 1818/1991 1819/1992 1820/1993 \nf 1822/1995 1817/1990 1821/1994 \nf 1817/1990 1822/1995 1819/1992 \nf 1824/1997 1819/1992 1823/1996 \nf 1822/1995 1823/1996 1819/1992 \nf 1825/1998 1820/1993 1824/1997 \nf 1819/1992 1824/1997 1820/1993 \nf 1814/1987 1826/1999 1816/1989 \nf 1826/1999 1814/1987 1827/2000 \nf 1815/1988 1827/2000 1814/1987 \nf 1827/2000 1815/1988 1828/2001 \nf 1830/2003 1827/2000 1829/2002 \nf 1829/2002 1827/2000 1828/2001 \nf 1831/2004 1826/1999 1830/2003 \nf 1830/2003 1826/1999 1827/2000 \nf 1834/2007 1833/2006 1832/2005 \nf 1832/2005 1833/2006 1835/2008 \nf 1837/2010 1834/2007 1836/2009 \nf 1834/2007 1837/2010 1833/2006 \nf 1839/2012 1833/2006 1838/2011 \nf 1837/2010 1838/2011 1833/2006 \nf 1840/2013 1835/2008 1839/2012 \nf 1833/2006 1839/2012 1835/2008 \nf 1843/2016 1842/2015 1841/2014 \nf 1842/2015 1843/2016 1844/2017 \nf 1845/2018 1844/2017 1843/2016 \nf 1844/2017 1845/2018 1846/2019 \nf 1846/2019 1847/2020 1844/2017 \nf 1847/2020 1846/2019 1848/2021 \nf 1844/2017 1849/2022 1842/2015 \nf 1849/2022 1844/2017 1847/2020 \nf 1851/2024 1850/2023 1797/1970 \nf 1798/1971 1797/1970 1850/2023 \nf 1841/2014 1850/2023 1851/2024 \nf 1850/2023 1841/2014 1842/2015 \nf 1852/2025 1842/2015 1849/2022 \nf 1842/2015 1852/2025 1850/2023 \nf 1798/1971 1852/2025 1800/1973 \nf 1852/2025 1798/1971 1850/2023 \nf 1855/2028 1854/2027 1853/2026 \nf 1855/2028 1853/2026 1856/2029 \nf 1855/2028 1856/2029 1857/2030 \nf 1857/2030 1856/2029 1858/2031 \nf 1860/2033 1855/2028 1859/2032 \nf 1859/2032 1855/2028 1857/2030 \nf 1861/2034 1854/2027 1860/2033 \nf 1855/2028 1860/2033 1854/2027 \nf 1864/2037 1863/2036 1862/2035 \nf 1863/2036 1864/2037 1865/2038 \nf 1854/2027 1862/2035 1853/2026 \nf 1862/2035 1854/2027 1864/2037 \nf 1866/2039 1864/2037 1861/2034 \nf 1854/2027 1861/2034 1864/2037 \nf 1801/1974 1865/2038 1866/2039 \nf 1864/2037 1866/2039 1865/2038 \nf 1869/2042 1868/2041 1867/2040 \nf 1868/2041 1869/2042 1870/2043 \nf 1871/2044 1870/2043 1869/2042 \nf 1870/2043 1871/2044 1872/2045 \nf 1872/2045 1873/2046 1870/2043 \nf 1873/2046 1874/2047 1870/2043 \nf 1870/2043 1874/2047 1868/2041 \nf 1874/2047 1875/2048 1868/2041 \nf 1876/2049 1807/1980 1806/1979 \nf 1807/1980 1876/2049 1877/2050 \nf 1867/2040 1877/2050 1876/2049 \nf 1877/2050 1867/2040 1868/2041 \nf 1868/2041 1875/2048 1877/2050 \nf 1875/2048 1878/2051 1877/2050 \nf 1877/2050 1878/2051 1807/1980 \nf 1878/2051 1808/1981 1807/1980 \nf 1881/2054 1880/2053 1879/2052 \nf 1880/2053 1882/2055 1879/2052 \nf 1879/2052 1882/2055 1883/2056 \nf 1882/2055 1884/2057 1883/2056 \nf 1879/2052 1886/2059 1885/2058 \nf 1886/2059 1879/2052 1883/2056 \nf 1881/2054 1885/2058 1887/2060 \nf 1885/2058 1881/2054 1879/2052 \nf 1805/1978 1810/1983 1888/2061 \nf 1810/1983 1889/2062 1888/2061 \nf 1888/2061 1889/2062 1881/2054 \nf 1889/2062 1880/2053 1881/2054 \nf 1888/2061 1887/2060 1890/2063 \nf 1887/2060 1888/2061 1881/2054 \nf 1805/1978 1890/2063 1803/1976 \nf 1890/2063 1805/1978 1888/2061 \nf 1874/2047 1891/2064 1875/2048 \nf 1875/2048 1891/2064 1892/2065 \nf 1873/2046 1893/2066 1874/2047 \nf 1874/2047 1893/2066 1891/2064 \nf 1893/2066 1894/2067 1891/2064 \nf 1894/2067 1893/2066 1895/2068 \nf 1891/2064 1896/2069 1892/2065 \nf 1896/2069 1891/2064 1894/2067 \nf 1878/2051 1897/2070 1808/1981 \nf 1808/1981 1897/2070 1813/1986 \nf 1875/2048 1892/2065 1878/2051 \nf 1878/2051 1892/2065 1897/2070 \nf 1892/2065 1898/2071 1897/2070 \nf 1898/2071 1892/2065 1896/2069 \nf 1897/2070 1815/1988 1813/1986 \nf 1815/1988 1897/2070 1898/2071 \nf 1901/2074 1900/2073 1899/2072 \nf 1900/2073 1901/2074 1902/2075 \nf 1899/2072 1904/2077 1903/2076 \nf 1904/2077 1899/2072 1900/2073 \nf 1882/2055 1899/2072 1884/2057 \nf 1884/2057 1899/2072 1903/2076 \nf 1880/2053 1901/2074 1882/2055 \nf 1882/2055 1901/2074 1899/2072 \nf 1812/1985 1906/2079 1905/2078 \nf 1906/2079 1812/1985 1816/1989 \nf 1905/2078 1902/2075 1901/2074 \nf 1902/2075 1905/2078 1906/2079 \nf 1889/2062 1905/2078 1880/2053 \nf 1880/2053 1905/2078 1901/2074 \nf 1810/1983 1812/1985 1889/2062 \nf 1889/2062 1812/1985 1905/2078 \nf 1909/2082 1908/2081 1907/2080 \nf 1908/2081 1909/2082 1910/2083 \nf 1912/2085 1907/2080 1911/2084 \nf 1907/2080 1912/2085 1909/2082 \nf 1912/2085 1913/2086 1909/2082 \nf 1913/2086 1914/2087 1909/2082 \nf 1909/2082 1914/2087 1910/2083 \nf 1914/2087 1915/2088 1910/2083 \nf 1917/2090 1821/1994 1916/2089 \nf 1821/1994 1917/2090 1822/1995 \nf 1910/2083 1916/2089 1908/2081 \nf 1916/2089 1910/2083 1917/2090 \nf 1910/2083 1915/2088 1917/2090 \nf 1915/2088 1918/2091 1917/2090 \nf 1823/1996 1822/1995 1918/2091 \nf 1917/2090 1918/2091 1822/1995 \nf 1920/2093 1885/2058 1919/2092 \nf 1885/2058 1920/2093 1887/2060 \nf 1919/2092 1885/2058 1921/2094 \nf 1885/2058 1886/2059 1921/2094 \nf 1919/2092 1923/2096 1922/2095 \nf 1923/2096 1919/2092 1921/2094 \nf 1924/2097 1919/2092 1922/2095 \nf 1919/2092 1924/2097 1920/2093 \nf 1926/2099 1890/2063 1925/2098 \nf 1890/2063 1926/2099 1803/1976 \nf 1925/2098 1887/2060 1920/2093 \nf 1887/2060 1925/2098 1890/2063 \nf 1927/2100 1920/2093 1924/2097 \nf 1920/2093 1927/2100 1925/2098 \nf 1825/1998 1925/2098 1927/2100 \nf 1925/2098 1825/1998 1926/2099 \nf 1894/2067 1928/2101 1896/2069 \nf 1928/2101 1894/2067 1929/2102 \nf 1895/2068 1929/2102 1894/2067 \nf 1929/2102 1895/2068 1930/2103 \nf 1932/2105 1929/2102 1931/2104 \nf 1931/2104 1929/2102 1930/2103 \nf 1933/2106 1928/2101 1932/2105 \nf 1932/2105 1928/2101 1929/2102 \nf 1898/2071 1828/2001 1815/1988 \nf 1828/2001 1898/2071 1934/2107 \nf 1896/2069 1934/2107 1898/2071 \nf 1934/2107 1896/2069 1928/2101 \nf 1935/2108 1934/2107 1933/2106 \nf 1933/2106 1934/2107 1928/2101 \nf 1829/2002 1828/2001 1935/2108 \nf 1935/2108 1828/2001 1934/2107 \nf 1938/2111 1937/2110 1936/2109 \nf 1937/2110 1938/2111 1939/2112 \nf 1940/2113 1939/2112 1938/2111 \nf 1939/2112 1940/2113 1941/2114 \nf 1941/2114 1942/2115 1939/2112 \nf 1942/2115 1941/2114 1943/2116 \nf 1939/2112 1944/2117 1937/2110 \nf 1944/2117 1939/2112 1942/2115 \nf 1947/2120 1946/2119 1945/2118 \nf 1945/2118 1946/2119 1948/2121 \nf 1936/2109 1946/2119 1947/2120 \nf 1946/2119 1936/2109 1937/2110 \nf 1944/2117 1946/2119 1937/2110 \nf 1946/2119 1944/2117 1949/2122 \nf 1949/2122 1948/2121 1946/2119 \nf 1948/2121 1949/2122 1831/2004 \nf 1952/2125 1951/2124 1950/2123 \nf 1951/2124 1952/2125 1953/2126 \nf 1954/2127 1953/2126 1952/2125 \nf 1953/2126 1954/2127 1955/2128 \nf 1955/2128 1956/2129 1953/2126 \nf 1956/2129 1955/2128 1957/2130 \nf 1953/2126 1958/2131 1951/2124 \nf 1958/2131 1953/2126 1956/2129 \nf 1959/2132 1837/2010 1836/2009 \nf 1837/2010 1959/2132 1960/2133 \nf 1950/2123 1960/2133 1959/2132 \nf 1960/2133 1950/2123 1951/2124 \nf 1951/2124 1961/2134 1960/2133 \nf 1961/2134 1951/2124 1958/2131 \nf 1838/2011 1837/2010 1961/2134 \nf 1960/2133 1961/2134 1837/2010 \nf 1964/2137 1963/2136 1962/2135 \nf 1965/2138 1962/2135 1963/2136 \nf 1967/2140 1966/2139 1964/2137 \nf 1963/2136 1964/2137 1966/2139 \nf 1969/2142 1963/2136 1968/2141 \nf 1968/2141 1963/2136 1966/2139 \nf 1965/2138 1969/2142 1970/2143 \nf 1969/2142 1965/2138 1963/2136 \nf 1972/2145 1971/2144 1818/1991 \nf 1973/2146 1818/1991 1971/2144 \nf 1962/2135 1965/2138 1972/2145 \nf 1971/2144 1972/2145 1965/2138 \nf 1971/2144 1970/2143 1974/2147 \nf 1970/2143 1971/2144 1965/2138 \nf 1973/2146 1974/2147 1840/2013 \nf 1974/2147 1973/2146 1971/2144 \nf 1799/1972 1976/2149 1975/2148 \nf 1976/2149 1799/1972 1800/1973 \nf 1975/2148 1945/2118 1977/2150 \nf 1945/2118 1975/2148 1976/2149 \nf 1865/2038 1977/2150 1863/2036 \nf 1977/2150 1865/2038 1975/2148 \nf 1801/1974 1975/2148 1865/2038 \nf 1975/2148 1801/1974 1799/1972 \nf 1978/2151 1839/2012 1838/2011 \nf 1839/2012 1978/2151 1979/2152 \nf 1821/1994 1979/2152 1978/2151 \nf 1979/2152 1821/1994 1817/1990 \nf 1817/1990 1973/2146 1979/2152 \nf 1973/2146 1817/1990 1818/1991 \nf 1979/2152 1840/2013 1839/2012 \nf 1840/2013 1979/2152 1973/2146 \nf 1980/2153 1847/2020 1848/2021 \nf 1848/2021 1981/2154 1980/2153 \nf 1938/2111 1980/2153 1981/2154 \nf 1981/2154 1940/2113 1938/2111 \nf 1980/2153 1936/2109 1982/2155 \nf 1936/2109 1980/2153 1938/2111 \nf 1847/2020 1982/2155 1849/2022 \nf 1982/2155 1847/2020 1980/2153 \nf 1983/2156 1852/2025 1849/2022 \nf 1983/2156 1849/2022 1982/2155 \nf 1983/2156 1936/2109 1947/2120 \nf 1936/2109 1983/2156 1982/2155 \nf 1976/2149 1947/2120 1945/2118 \nf 1947/2120 1976/2149 1983/2156 \nf 1800/1973 1983/2156 1976/2149 \nf 1983/2156 1800/1973 1852/2025 \nf 1860/2033 1985/2158 1984/2157 \nf 1985/2158 1860/2033 1859/2032 \nf 1984/2157 1987/2160 1986/2159 \nf 1987/2160 1984/2157 1985/2158 \nf 1986/2159 1988/2161 1984/2157 \nf 1988/2161 1986/2159 1989/2162 \nf 1984/2157 1861/2034 1860/2033 \nf 1861/2034 1984/2157 1988/2161 \nf 1988/2161 1866/2039 1861/2034 \nf 1866/2039 1988/2161 1990/2163 \nf 1990/2163 1989/2162 1991/2164 \nf 1989/2162 1990/2163 1988/2161 \nf 1991/2164 1796/1969 1990/2163 \nf 1796/1969 1991/2164 1793/1966 \nf 1990/2163 1801/1974 1866/2039 \nf 1801/1974 1990/2163 1796/1969 \nf 1957/2130 1993/2166 1992/2165 \nf 1957/2130 1992/2165 1956/2129 \nf 1911/2084 1992/2165 1993/2166 \nf 1992/2165 1911/2084 1907/2080 \nf 1907/2080 1994/2167 1992/2165 \nf 1994/2167 1907/2080 1908/2081 \nf 1956/2129 1992/2165 1994/2167 \nf 1956/2129 1994/2167 1958/2131 \nf 1958/2131 1994/2167 1995/2168 \nf 1958/2131 1995/2168 1961/2134 \nf 1908/2081 1995/2168 1994/2167 \nf 1995/2168 1908/2081 1916/2089 \nf 1916/2089 1978/2151 1995/2168 \nf 1978/2151 1916/2089 1821/1994 \nf 1995/2168 1838/2011 1961/2134 \nf 1838/2011 1995/2168 1978/2151 \nf 1969/2142 1997/2170 1996/2169 \nf 1997/2170 1969/2142 1968/2141 \nf 1996/2169 1999/2172 1998/2171 \nf 1999/2172 1996/2169 1997/2170 \nf 2001/2174 1998/2171 2000/2173 \nf 1998/2171 2001/2174 1996/2169 \nf 1970/2143 1996/2169 2001/2174 \nf 1996/2169 1970/2143 1969/2142 \nf 1974/2147 2001/2174 2002/2175 \nf 2001/2174 1974/2147 1970/2143 \nf 2002/2175 2000/2173 2003/2176 \nf 2000/2173 2002/2175 2001/2174 \nf 1835/2008 2003/2176 1832/2005 \nf 2003/2176 1835/2008 2002/2175 \nf 1840/2013 2002/2175 1835/2008 \nf 2002/2175 1840/2013 1974/2147 \nf 1823/1996 2005/2178 2004/2177 \nf 1823/1996 2004/2177 1824/1997 \nf 2005/2178 1806/1979 1802/1975 \nf 2005/2178 1802/1975 2004/2177 \nf 1803/1976 2004/2177 1802/1975 \nf 2004/2177 1803/1976 1926/2099 \nf 1926/2099 1824/1997 2004/2177 \nf 1824/1997 1926/2099 1825/1998 \nf 2006/2179 1830/2003 1829/2002 \nf 1830/2003 2006/2179 2007/2180 \nf 1863/2036 2007/2180 2006/2179 \nf 2007/2180 1863/2036 1977/2150 \nf 1977/2150 1948/2121 2007/2180 \nf 1948/2121 1977/2150 1945/2118 \nf 2007/2180 1831/2004 1830/2003 \nf 1831/2004 2007/2180 1948/2121 \nf 1914/2087 1913/2086 2008/2181 \nf 1913/2086 2009/2182 2008/2181 \nf 2009/2182 1871/2044 1869/2042 \nf 2009/2182 1869/2042 2008/2181 \nf 1867/2040 2008/2181 1869/2042 \nf 2008/2181 1867/2040 2010/2183 \nf 1914/2087 2010/2183 1915/2088 \nf 2010/2183 1914/2087 2008/2181 \nf 1918/2091 1915/2088 2011/2184 \nf 1915/2088 2010/2183 2011/2184 \nf 2010/2183 1867/2040 1876/2049 \nf 2010/2183 1876/2049 2011/2184 \nf 1806/1979 2011/2184 1876/2049 \nf 2011/2184 1806/1979 2005/2178 \nf 2005/2178 1918/2091 2011/2184 \nf 1918/2091 2005/2178 1823/1996 \nf 1922/2095 2013/2186 2012/2185 \nf 2013/2186 1922/2095 1923/2096 \nf 2012/2185 1967/2140 1964/2137 \nf 1967/2140 2012/2185 2013/2186 \nf 2014/2187 1964/2137 1962/2135 \nf 1964/2137 2014/2187 2012/2185 \nf 1924/2097 2012/2185 2014/2187 \nf 2012/2185 1924/2097 1922/2095 \nf 1927/2100 2014/2187 2015/2188 \nf 2014/2187 1927/2100 1924/2097 \nf 2015/2188 1962/2135 1972/2145 \nf 1962/2135 2015/2188 2014/2187 \nf 1820/1993 1972/2145 1818/1991 \nf 1972/2145 1820/1993 2015/2188 \nf 1825/1998 2015/2188 1820/1993 \nf 2015/2188 1825/1998 1927/2100 \nf 2016/2189 1932/2105 1931/2104 \nf 1932/2105 2016/2189 2017/2190 \nf 1858/2031 2017/2190 2016/2189 \nf 2017/2190 1858/2031 1856/2029 \nf 1856/2029 2018/2191 2017/2190 \nf 2018/2191 1856/2029 1853/2026 \nf 2017/2190 1933/2106 1932/2105 \nf 1933/2106 2017/2190 2018/2191 \nf 2018/2191 1935/2108 1933/2106 \nf 1935/2108 2018/2191 2019/2192 \nf 1853/2026 2019/2192 2018/2191 \nf 2019/2192 1853/2026 1862/2035 \nf 1862/2035 2006/2179 2019/2192 \nf 2006/2179 1862/2035 1863/2036 \nf 2019/2192 1829/2002 1935/2108 \nf 1829/2002 2019/2192 2006/2179 \nf 2020/2193 1942/2115 1943/2116 \nf 1943/2116 2021/2194 2020/2193 \nf 1904/2077 1900/2073 2021/2194 \nf 2021/2194 1900/2073 2020/2193 \nf 2020/2193 1900/2073 1902/2075 \nf 1902/2075 2022/2195 2020/2193 \nf 1942/2115 2022/2195 1944/2117 \nf 2022/2195 1942/2115 2020/2193 \nf 1949/2122 2022/2195 2023/2196 \nf 2022/2195 1949/2122 1944/2117 \nf 1902/2075 1906/2079 2022/2195 \nf 2022/2195 1906/2079 2023/2196 \nf 2023/2196 1906/2079 1816/1989 \nf 1816/1989 1826/1999 2023/2196 \nf 1831/2004 2023/2196 1826/1999 \nf 2023/2196 1831/2004 1949/2122 \nf 2026/2199 2025/2198 2024/2197 \nf 2025/2198 2026/2199 2027/2200 \nf 2026/2199 2028/2201 2027/2200 \nf 2028/2201 2026/2199 2029/2202 \nf 2030/2203 2029/2202 2026/2199 \nf 2029/2202 2030/2203 2031/2204 \nf 2024/2197 2032/2205 2030/2203 \nf 2024/2197 2030/2203 2026/2199 \nf 2035/2208 2034/2207 2033/2206 \nf 2034/2207 2035/2208 2036/2209 \nf 2038/2211 2034/2207 2037/2210 \nf 2034/2207 2038/2211 2033/2206 \nf 2039/2212 2037/2210 2034/2207 \nf 2034/2207 2040/2213 2039/2212 \nf 2040/2213 2034/2207 2036/2209 \nf 2036/2209 2041/2214 2040/2213 \nf 2042/2215 2040/2213 2041/2214 \nf 2042/2215 2041/2214 2043/2216 \nf 2044/2217 2039/2212 2040/2213 \nf 2044/2217 2040/2213 2042/2215 \nf 2044/2217 2046/2219 2045/2218 \nf 2046/2219 2044/2217 2042/2215 \nf 2042/2215 2047/2220 2046/2219 \nf 2047/2220 2042/2215 2043/2216 \nf 2050/2223 2049/2222 2048/2221 \nf 2048/2221 2051/2224 2050/2223 \nf 2051/2224 2048/2221 2052/2225 \nf 2052/2225 2053/2226 2051/2224 \nf 2048/2221 2055/2228 2054/2227 \nf 2048/2221 2054/2227 2052/2225 \nf 2049/2222 2056/2229 2055/2228 \nf 2049/2222 2055/2228 2048/2221 \nf 2046/2219 2058/2231 2057/2230 \nf 2058/2231 2046/2219 2047/2220 \nf 2045/2218 2057/2230 2059/2232 \nf 2057/2230 2045/2218 2046/2219 \nf 2057/2230 2060/2233 2059/2232 \nf 2060/2233 2057/2230 2061/2234 \nf 2058/2231 2061/2234 2057/2230 \nf 2061/2234 2058/2231 2062/2235 \nf 2065/2238 2064/2237 2063/2236 \nf 2063/2236 2066/2239 2065/2238 \nf 2066/2239 2063/2236 2067/2240 \nf 2067/2240 2068/2241 2066/2239 \nf 2063/2236 2070/2243 2069/2242 \nf 2063/2236 2069/2242 2067/2240 \nf 2064/2237 2071/2244 2070/2243 \nf 2064/2237 2070/2243 2063/2236 \nf 2074/2247 2073/2246 2072/2245 \nf 2073/2246 2074/2247 2075/2248 \nf 2075/2248 2076/2249 2073/2246 \nf 2076/2249 2075/2248 2077/2250 \nf 2078/2251 2077/2250 2075/2248 \nf 2077/2250 2078/2251 2079/2252 \nf 2080/2253 2075/2248 2074/2247 \nf 2075/2248 2080/2253 2078/2251 \nf 2028/2201 2029/2202 2081/2254 \nf 2028/2201 2081/2254 2082/2255 \nf 2081/2254 2072/2245 2082/2255 \nf 2072/2245 2081/2254 2074/2247 \nf 2083/2256 2074/2247 2081/2254 \nf 2074/2247 2083/2256 2080/2253 \nf 2029/2202 2031/2204 2083/2256 \nf 2029/2202 2083/2256 2081/2254 \nf 2086/2259 2085/2258 2084/2257 \nf 2085/2258 2087/2260 2084/2257 \nf 2087/2260 2085/2258 2088/2261 \nf 2088/2261 2089/2262 2087/2260 \nf 2091/2264 2085/2258 2090/2263 \nf 2085/2258 2091/2264 2088/2261 \nf 2090/2263 2086/2259 2092/2265 \nf 2090/2263 2085/2258 2086/2259 \nf 2095/2268 2094/2267 2093/2266 \nf 2095/2268 2093/2266 2096/2269 \nf 2086/2259 2084/2257 2094/2267 \nf 2086/2259 2094/2267 2095/2268 \nf 2092/2265 2086/2259 2095/2268 \nf 2092/2265 2095/2268 2097/2270 \nf 2097/2270 2095/2268 2096/2269 \nf 2097/2270 2096/2269 2032/2205 \nf 2100/2273 2099/2272 2098/2271 \nf 2099/2272 2100/2273 2101/2274 \nf 2103/2276 2098/2271 2102/2275 \nf 2098/2271 2103/2276 2100/2273 \nf 2104/2277 2102/2275 2098/2271 \nf 2098/2271 2105/2278 2104/2277 \nf 2105/2278 2098/2271 2099/2272 \nf 2099/2272 2106/2279 2105/2278 \nf 2108/2281 2037/2210 2107/2280 \nf 2037/2210 2108/2281 2038/2211 \nf 2101/2274 2107/2280 2099/2272 \nf 2107/2280 2101/2274 2108/2281 \nf 2106/2279 2099/2272 2107/2280 \nf 2107/2280 2109/2282 2106/2279 \nf 2109/2282 2107/2280 2037/2210 \nf 2037/2210 2039/2212 2109/2282 \nf 2112/2285 2111/2284 2110/2283 \nf 2110/2283 2113/2286 2112/2285 \nf 2113/2286 2110/2283 2114/2287 \nf 2114/2287 2115/2288 2113/2286 \nf 2117/2290 2110/2283 2116/2289 \nf 2110/2283 2117/2290 2114/2287 \nf 2116/2289 2111/2284 2118/2291 \nf 2111/2284 2116/2289 2110/2283 \nf 2041/2214 2036/2209 2119/2292 \nf 2119/2292 2120/2293 2041/2214 \nf 2120/2293 2119/2292 2111/2284 \nf 2111/2284 2112/2285 2120/2293 \nf 2118/2291 2119/2292 2121/2294 \nf 2119/2292 2118/2291 2111/2284 \nf 2121/2294 2036/2209 2035/2208 \nf 2036/2209 2121/2294 2119/2292 \nf 2122/2295 2105/2278 2106/2279 \nf 2122/2295 2106/2279 2123/2296 \nf 2124/2297 2104/2277 2105/2278 \nf 2124/2297 2105/2278 2122/2295 \nf 2124/2297 2126/2299 2125/2298 \nf 2126/2299 2124/2297 2122/2295 \nf 2122/2295 2127/2300 2126/2299 \nf 2127/2300 2122/2295 2123/2296 \nf 2128/2301 2109/2282 2039/2212 \nf 2128/2301 2039/2212 2044/2217 \nf 2123/2296 2106/2279 2109/2282 \nf 2123/2296 2109/2282 2128/2301 \nf 2123/2296 2129/2302 2127/2300 \nf 2129/2302 2123/2296 2128/2301 \nf 2128/2301 2045/2218 2129/2302 \nf 2045/2218 2128/2301 2044/2217 \nf 2132/2305 2131/2304 2130/2303 \nf 2131/2304 2132/2305 2133/2306 \nf 2133/2306 2134/2307 2131/2304 \nf 2134/2307 2133/2306 2135/2308 \nf 2133/2306 2113/2286 2115/2288 \nf 2133/2306 2115/2288 2135/2308 \nf 2132/2305 2112/2285 2113/2286 \nf 2132/2305 2113/2286 2133/2306 \nf 2043/2216 2136/2309 2047/2220 \nf 2136/2309 2043/2216 2137/2310 \nf 2137/2310 2130/2303 2136/2309 \nf 2130/2303 2137/2310 2132/2305 \nf 2137/2310 2120/2293 2112/2285 \nf 2137/2310 2112/2285 2132/2305 \nf 2043/2216 2041/2214 2120/2293 \nf 2043/2216 2120/2293 2137/2310 \nf 2140/2313 2139/2312 2138/2311 \nf 2140/2313 2138/2311 2141/2314 \nf 2141/2314 2138/2311 2142/2315 \nf 2142/2315 2143/2316 2141/2314 \nf 2145/2318 2138/2311 2144/2317 \nf 2138/2311 2145/2318 2142/2315 \nf 2144/2317 2139/2312 2146/2319 \nf 2139/2312 2144/2317 2138/2311 \nf 2053/2226 2052/2225 2147/2320 \nf 2053/2226 2147/2320 2148/2321 \nf 2148/2321 2147/2320 2139/2312 \nf 2148/2321 2139/2312 2140/2313 \nf 2146/2319 2147/2320 2149/2322 \nf 2147/2320 2146/2319 2139/2312 \nf 2054/2227 2149/2322 2052/2225 \nf 2052/2225 2149/2322 2147/2320 \nf 2118/2291 2151/2324 2150/2323 \nf 2150/2323 2116/2289 2118/2291 \nf 2116/2289 2150/2323 2152/2325 \nf 2152/2325 2117/2290 2116/2289 \nf 2154/2327 2150/2323 2153/2326 \nf 2150/2323 2154/2327 2152/2325 \nf 2155/2328 2150/2323 2151/2324 \nf 2150/2323 2155/2328 2153/2326 \nf 2156/2329 2121/2294 2035/2208 \nf 2121/2294 2156/2329 2157/2330 \nf 2157/2330 2118/2291 2121/2294 \nf 2118/2291 2157/2330 2151/2324 \nf 2158/2331 2151/2324 2157/2330 \nf 2151/2324 2158/2331 2155/2328 \nf 2056/2229 2157/2330 2156/2329 \nf 2157/2330 2056/2229 2158/2331 \nf 2126/2299 2160/2333 2159/2332 \nf 2160/2333 2126/2299 2127/2300 \nf 2125/2298 2159/2332 2161/2334 \nf 2159/2332 2125/2298 2126/2299 \nf 2163/2336 2159/2332 2162/2335 \nf 2159/2332 2163/2336 2161/2334 \nf 2162/2335 2160/2333 2164/2337 \nf 2160/2333 2162/2335 2159/2332 \nf 2129/2302 2059/2232 2165/2338 \nf 2059/2232 2129/2302 2045/2218 \nf 2127/2300 2165/2338 2160/2333 \nf 2165/2338 2127/2300 2129/2302 \nf 2164/2337 2165/2338 2166/2339 \nf 2165/2338 2164/2337 2160/2333 \nf 2059/2232 2166/2339 2165/2338 \nf 2166/2339 2059/2232 2060/2233 \nf 2169/2342 2168/2341 2167/2340 \nf 2168/2341 2169/2342 2170/2343 \nf 2170/2343 2171/2344 2168/2341 \nf 2171/2344 2170/2343 2172/2345 \nf 2173/2346 2172/2345 2170/2343 \nf 2172/2345 2173/2346 2174/2347 \nf 2175/2348 2170/2343 2169/2342 \nf 2170/2343 2175/2348 2173/2346 \nf 2178/2351 2177/2350 2176/2349 \nf 2177/2350 2178/2351 2179/2352 \nf 2178/2351 2167/2340 2179/2352 \nf 2167/2340 2178/2351 2169/2342 \nf 2178/2351 2180/2353 2175/2348 \nf 2178/2351 2175/2348 2169/2342 \nf 2176/2349 2062/2235 2180/2353 \nf 2176/2349 2180/2353 2178/2351 \nf 2183/2356 2182/2355 2181/2354 \nf 2182/2355 2183/2356 2184/2357 \nf 2184/2357 2185/2358 2182/2355 \nf 2185/2358 2184/2357 2186/2359 \nf 2187/2360 2186/2359 2184/2357 \nf 2186/2359 2187/2360 2188/2361 \nf 2189/2362 2184/2357 2183/2356 \nf 2184/2357 2189/2362 2187/2360 \nf 2067/2240 2190/2363 2068/2241 \nf 2190/2363 2067/2240 2191/2364 \nf 2191/2364 2181/2354 2190/2363 \nf 2181/2354 2191/2364 2183/2356 \nf 2192/2365 2183/2356 2191/2364 \nf 2183/2356 2192/2365 2189/2362 \nf 2192/2365 2067/2240 2069/2242 \nf 2067/2240 2192/2365 2191/2364 \nf 2195/2368 2194/2367 2193/2366 \nf 2195/2368 2193/2366 2196/2369 \nf 2198/2371 2197/2370 2194/2367 \nf 2198/2371 2194/2367 2195/2368 \nf 2199/2372 2198/2371 2195/2368 \nf 2195/2368 2200/2373 2199/2372 \nf 2200/2373 2195/2368 2196/2369 \nf 2196/2369 2201/2374 2200/2373 \nf 2203/2376 2202/2375 2050/2223 \nf 2203/2376 2050/2223 2204/2377 \nf 2196/2369 2193/2366 2202/2375 \nf 2196/2369 2202/2375 2203/2376 \nf 2201/2374 2196/2369 2203/2376 \nf 2201/2374 2203/2376 2205/2378 \nf 2205/2378 2203/2376 2204/2377 \nf 2205/2378 2204/2377 2071/2244 \nf 2030/2203 2206/2379 2031/2204 \nf 2206/2379 2030/2203 2207/2380 \nf 2207/2380 2177/2350 2206/2379 \nf 2177/2350 2207/2380 2208/2381 \nf 2096/2269 2208/2381 2207/2380 \nf 2208/2381 2096/2269 2093/2266 \nf 2032/2205 2207/2380 2030/2203 \nf 2207/2380 2032/2205 2096/2269 \nf 2210/2383 2070/2243 2209/2382 \nf 2070/2243 2210/2383 2069/2242 \nf 2053/2226 2209/2382 2051/2224 \nf 2209/2382 2053/2226 2210/2383 \nf 2051/2224 2204/2377 2050/2223 \nf 2204/2377 2051/2224 2209/2382 \nf 2209/2382 2071/2244 2204/2377 \nf 2071/2244 2209/2382 2070/2243 \nf 2212/2385 2079/2252 2211/2384 \nf 2078/2251 2211/2384 2079/2252 \nf 2211/2384 2168/2341 2212/2385 \nf 2168/2341 2171/2344 2212/2385 \nf 2167/2340 2211/2384 2213/2386 \nf 2211/2384 2167/2340 2168/2341 \nf 2213/2386 2078/2251 2080/2253 \nf 2078/2251 2213/2386 2211/2384 \nf 2083/2256 2214/2387 2080/2253 \nf 2214/2387 2213/2386 2080/2253 \nf 2214/2387 2167/2340 2213/2386 \nf 2167/2340 2214/2387 2179/2352 \nf 2206/2379 2179/2352 2214/2387 \nf 2179/2352 2206/2379 2177/2350 \nf 2031/2204 2214/2387 2083/2256 \nf 2214/2387 2031/2204 2206/2379 \nf 2216/2389 2090/2263 2215/2388 \nf 2090/2263 2216/2389 2091/2264 \nf 2218/2391 2215/2388 2217/2390 \nf 2215/2388 2218/2391 2216/2389 \nf 2217/2390 2220/2393 2219/2392 \nf 2220/2393 2217/2390 2215/2388 \nf 2215/2388 2092/2265 2220/2393 \nf 2092/2265 2215/2388 2090/2263 \nf 2220/2393 2097/2270 2221/2394 \nf 2097/2270 2220/2393 2092/2265 \nf 2219/2392 2221/2394 2222/2395 \nf 2221/2394 2219/2392 2220/2393 \nf 2222/2395 2024/2197 2025/2198 \nf 2024/2197 2222/2395 2221/2394 \nf 2221/2394 2032/2205 2024/2197 \nf 2032/2205 2221/2394 2097/2270 \nf 2224/2397 2188/2361 2223/2396 \nf 2223/2396 2188/2361 2187/2360 \nf 2143/2316 2223/2396 2141/2314 \nf 2223/2396 2143/2316 2224/2397 \nf 2225/2398 2141/2314 2223/2396 \nf 2141/2314 2225/2398 2140/2313 \nf 2225/2398 2187/2360 2189/2362 \nf 2187/2360 2225/2398 2223/2396 \nf 2225/2398 2189/2362 2226/2399 \nf 2192/2365 2226/2399 2189/2362 \nf 2140/2313 2226/2399 2148/2321 \nf 2226/2399 2140/2313 2225/2398 \nf 2210/2383 2148/2321 2226/2399 \nf 2148/2321 2210/2383 2053/2226 \nf 2069/2242 2226/2399 2192/2365 \nf 2226/2399 2069/2242 2210/2383 \nf 2200/2373 2227/2400 2199/2372 \nf 2227/2400 2200/2373 2228/2401 \nf 2228/2401 2229/2402 2227/2400 \nf 2229/2402 2228/2401 2230/2403 \nf 2231/2404 2230/2403 2228/2401 \nf 2230/2403 2231/2404 2232/2405 \nf 2201/2374 2228/2401 2200/2373 \nf 2228/2401 2201/2374 2231/2404 \nf 2231/2404 2205/2378 2233/2406 \nf 2205/2378 2231/2404 2201/2374 \nf 2232/2405 2233/2406 2234/2407 \nf 2233/2406 2232/2405 2231/2404 \nf 2064/2237 2234/2407 2233/2406 \nf 2234/2407 2064/2237 2065/2238 \nf 2233/2406 2071/2244 2064/2237 \nf 2071/2244 2233/2406 2205/2378 \nf 2235/2408 2054/2227 2055/2228 \nf 2054/2227 2235/2408 2236/2409 \nf 2033/2206 2236/2409 2235/2408 \nf 2236/2409 2033/2206 2038/2211 \nf 2156/2329 2035/2208 2235/2408 \nf 2235/2408 2035/2208 2033/2206 \nf 2056/2229 2156/2329 2055/2228 \nf 2055/2228 2156/2329 2235/2408 \nf 2238/2411 2061/2234 2237/2410 \nf 2061/2234 2238/2411 2060/2233 \nf 2093/2266 2237/2410 2208/2381 \nf 2237/2410 2093/2266 2238/2411 \nf 2208/2381 2176/2349 2177/2350 \nf 2176/2349 2208/2381 2237/2410 \nf 2237/2410 2062/2235 2176/2349 \nf 2062/2235 2237/2410 2061/2234 \nf 2145/2318 2144/2317 2239/2412 \nf 2145/2318 2239/2412 2240/2413 \nf 2100/2273 2240/2413 2239/2412 \nf 2240/2413 2100/2273 2103/2276 \nf 2241/2414 2101/2274 2239/2412 \nf 2239/2412 2101/2274 2100/2273 \nf 2146/2319 2241/2414 2144/2317 \nf 2144/2317 2241/2414 2239/2412 \nf 2146/2319 2149/2322 2242/2415 \nf 2146/2319 2242/2415 2241/2414 \nf 2108/2281 2241/2414 2242/2415 \nf 2241/2414 2108/2281 2101/2274 \nf 2236/2409 2038/2211 2242/2415 \nf 2242/2415 2038/2211 2108/2281 \nf 2054/2227 2236/2409 2149/2322 \nf 2149/2322 2236/2409 2242/2415 \nf 2153/2326 2243/2416 2154/2327 \nf 2243/2416 2153/2326 2244/2417 \nf 2244/2417 2197/2370 2243/2416 \nf 2197/2370 2244/2417 2194/2367 \nf 2245/2418 2194/2367 2244/2417 \nf 2194/2367 2245/2418 2193/2366 \nf 2155/2328 2244/2417 2153/2326 \nf 2244/2417 2155/2328 2245/2418 \nf 2245/2418 2158/2331 2246/2419 \nf 2158/2331 2245/2418 2155/2328 \nf 2193/2366 2246/2419 2202/2375 \nf 2246/2419 2193/2366 2245/2418 \nf 2049/2222 2202/2375 2246/2419 \nf 2202/2375 2049/2222 2050/2223 \nf 2056/2229 2246/2419 2158/2331 \nf 2246/2419 2056/2229 2049/2222 \nf 2248/2421 2162/2335 2247/2420 \nf 2162/2335 2248/2421 2163/2336 \nf 2089/2262 2247/2420 2087/2260 \nf 2247/2420 2089/2262 2248/2421 \nf 2087/2260 2249/2422 2084/2257 \nf 2249/2422 2087/2260 2247/2420 \nf 2247/2420 2164/2337 2249/2422 \nf 2164/2337 2247/2420 2162/2335 \nf 2249/2422 2166/2339 2250/2423 \nf 2166/2339 2249/2422 2164/2337 \nf 2084/2257 2250/2423 2094/2267 \nf 2250/2423 2084/2257 2249/2422 \nf 2094/2267 2238/2411 2093/2266 \nf 2238/2411 2094/2267 2250/2423 \nf 2250/2423 2060/2233 2238/2411 \nf 2060/2233 2250/2423 2166/2339 \nf 2173/2346 2251/2424 2174/2347 \nf 2251/2424 2252/2425 2174/2347 \nf 2251/2424 2131/2304 2252/2425 \nf 2131/2304 2134/2307 2252/2425 \nf 2130/2303 2251/2424 2253/2426 \nf 2251/2424 2130/2303 2131/2304 \nf 2253/2426 2173/2346 2175/2348 \nf 2173/2346 2253/2426 2251/2424 \nf 2180/2353 2253/2426 2175/2348 \nf 2253/2426 2180/2353 2254/2427 \nf 2254/2427 2136/2309 2253/2426 \nf 2136/2309 2130/2303 2253/2426 \nf 2047/2220 2254/2427 2058/2231 \nf 2254/2427 2047/2220 2136/2309 \nf 2062/2235 2254/2427 2180/2353 \nf 2254/2427 2062/2235 2058/2231 \nf 1793/1966 2027/2200 1795/1968 \nf 2027/2200 1793/1966 2025/2198 \nf 1795/1968 2028/2201 1797/1970 \nf 2028/2201 1795/1968 2027/2200 \nf 2066/2239 1832/2005 2065/2238 \nf 1832/2005 2066/2239 1834/2007 \nf 2068/2241 1834/2007 2066/2239 \nf 1834/2007 2068/2241 1836/2009 \nf 1841/2014 2073/2246 1843/2016 \nf 2073/2246 1841/2014 2072/2245 \nf 2076/2249 1843/2016 2073/2246 \nf 1843/2016 2076/2249 1845/2018 \nf 2077/2250 1845/2018 2076/2249 \nf 1845/2018 2077/2250 1846/2019 \nf 2077/2250 2079/2252 1848/2021 \nf 1848/2021 1846/2019 2077/2250 \nf 1797/1970 2082/2255 1851/2024 \nf 2082/2255 1797/1970 2028/2201 \nf 1851/2024 2072/2245 1841/2014 \nf 2072/2245 1851/2024 2082/2255 \nf 2089/2262 1857/2030 1858/2031 \nf 1857/2030 2089/2262 2088/2261 \nf 1859/2032 1857/2030 2088/2261 \nf 1859/2032 2088/2261 2091/2264 \nf 2102/2275 1871/2044 2103/2276 \nf 1871/2044 2102/2275 1872/2045 \nf 1872/2045 2104/2277 1873/2046 \nf 2104/2277 1872/2045 2102/2275 \nf 1883/2056 1884/2057 2115/2288 \nf 1883/2056 2115/2288 2114/2287 \nf 2114/2287 2117/2290 1886/2059 \nf 1886/2059 1883/2056 2114/2287 \nf 2104/2277 2124/2297 1893/2066 \nf 1893/2066 1873/2046 2104/2277 \nf 1895/2068 2124/2297 2125/2298 \nf 2124/2297 1895/2068 1893/2066 \nf 2135/2308 1904/2077 2134/2307 \nf 1904/2077 2135/2308 1903/2076 \nf 2115/2288 1903/2076 2135/2308 \nf 1903/2076 2115/2288 1884/2057 \nf 2143/2316 2142/2315 1912/2085 \nf 1912/2085 1911/2084 2143/2316 \nf 2145/2318 1912/2085 2142/2315 \nf 1912/2085 2145/2318 1913/2086 \nf 2117/2290 2152/2325 1921/2094 \nf 1921/2094 1886/2059 2117/2290 \nf 1923/2096 2152/2325 2154/2327 \nf 2152/2325 1923/2096 1921/2094 \nf 2125/2298 1930/2103 1895/2068 \nf 1930/2103 2125/2298 2161/2334 \nf 2161/2334 1931/2104 1930/2103 \nf 1931/2104 2161/2334 2163/2336 \nf 2171/2344 2172/2345 1941/2114 \nf 1941/2114 1940/2113 2171/2344 \nf 2172/2345 2174/2347 1943/2116 \nf 1943/2116 1941/2114 2172/2345 \nf 2182/2355 1950/2123 2181/2354 \nf 1950/2123 2182/2355 1952/2125 \nf 2185/2358 1952/2125 2182/2355 \nf 1952/2125 2185/2358 1954/2127 \nf 2185/2358 2186/2359 1955/2128 \nf 1955/2128 1954/2127 2185/2358 \nf 2186/2359 2188/2361 1957/2130 \nf 1957/2130 1955/2128 2186/2359 \nf 2190/2363 1836/2009 2068/2241 \nf 1836/2009 2190/2363 1959/2132 \nf 1959/2132 2181/2354 1950/2123 \nf 2181/2354 1959/2132 2190/2363 \nf 2197/2370 1966/2139 1967/2140 \nf 1966/2139 2197/2370 2198/2371 \nf 2198/2371 1968/2141 1966/2139 \nf 1968/2141 2198/2371 2199/2372 \nf 2079/2252 2212/2385 1981/2154 \nf 1981/2154 1848/2021 2079/2252 \nf 2212/2385 2171/2344 1940/2113 \nf 1940/2113 1981/2154 2212/2385 \nf 2091/2264 2216/2389 1985/2158 \nf 1985/2158 1859/2032 2091/2264 \nf 2216/2389 2218/2391 1987/2160 \nf 1987/2160 1985/2158 2216/2389 \nf 1987/2160 2217/2390 1986/2159 \nf 2217/2390 1987/2160 2218/2391 \nf 1986/2159 2219/2392 1989/2162 \nf 2219/2392 1986/2159 2217/2390 \nf 1989/2162 2222/2395 1991/2164 \nf 2222/2395 1989/2162 2219/2392 \nf 1991/2164 2025/2198 1793/1966 \nf 2025/2198 1991/2164 2222/2395 \nf 2188/2361 2224/2397 1993/2166 \nf 1993/2166 1957/2130 2188/2361 \nf 2224/2397 2143/2316 1911/2084 \nf 1911/2084 1993/2166 2224/2397 \nf 2199/2372 1997/2170 1968/2141 \nf 2199/2372 2227/2400 1997/2170 \nf 1999/2172 2227/2400 2229/2402 \nf 2227/2400 1999/2172 1997/2170 \nf 2230/2403 1999/2172 2229/2402 \nf 1999/2172 2230/2403 1998/2171 \nf 2232/2405 1998/2171 2230/2403 \nf 1998/2171 2232/2405 2000/2173 \nf 2000/2173 2234/2407 2003/2176 \nf 2234/2407 2000/2173 2232/2405 \nf 2065/2238 2003/2176 2234/2407 \nf 2003/2176 2065/2238 1832/2005 \nf 2240/2413 1913/2086 2145/2318 \nf 1913/2086 2240/2413 2009/2182 \nf 2103/2276 2009/2182 2240/2413 \nf 2009/2182 2103/2276 1871/2044 \nf 2013/2186 2154/2327 2243/2416 \nf 2154/2327 2013/2186 1923/2096 \nf 2243/2416 1967/2140 2013/2186 \nf 1967/2140 2243/2416 2197/2370 \nf 2163/2336 2016/2189 1931/2104 \nf 2016/2189 2163/2336 2248/2421 \nf 2248/2421 1858/2031 2016/2189 \nf 1858/2031 2248/2421 2089/2262 \nf 2174/2347 2252/2425 2021/2194 \nf 2021/2194 1943/2116 2174/2347 \nf 2134/2307 2021/2194 2252/2425 \nf 2021/2194 2134/2307 1904/2077 \n\ng box5 top ribbon group11 polySurface59\nusemtl ribbon1\nv 0.009171 0.131784 -0.018189\nv 0.007332 0.132819 -0.017589\nv 0.009297 0.131579 -0.016497\nv 0.007369 0.132665 -0.015865\nv 0.011498 0.131255 -0.018966\nv 0.011743 0.131024 -0.017314\nv 0.00948 0.131396 -0.014814\nv 0.007474 0.132522 -0.014151\nv 0.012027 0.13082 -0.015668\nv 0.014144 0.131045 -0.019858\nv 0.014524 0.130804 -0.018253\nv 0.017468 0.130747 -0.019249\nv 0.016945 0.13099 -0.020807\nv 0.014925 0.130592 -0.016647\nv 0.017994 0.130532 -0.017686\nv 0.015365 0.130438 -0.015047\nv 0.015862 0.130373 -0.013459\nv 0.019056 0.130311 -0.014541\nv 0.018523 0.130376 -0.016116\nv 0.012384 0.130673 -0.014038\nv 0.012848 0.13061 -0.012436\nv 0.007704 0.132417 -0.012465\nv 0.010202 0.131207 -0.011538\nv 0.009766 0.131263 -0.013155\nv 0.008121 0.132371 -0.010829\nv 0.00751 0.140362 -0.015888\nv 0.007468 0.140199 -0.017611\nv 0.009477 0.141372 -0.016526\nv 0.009344 0.141162 -0.018217\nv 0.007621 0.140512 -0.014175\nv 0.009668 0.141558 -0.014844\nv 0.011942 0.141832 -0.017346\nv 0.011689 0.141601 -0.018997\nv 0.012234 0.142035 -0.015701\nv 0.007855 0.140618 -0.01249\nv 0.009958 0.141691 -0.013186\nv 0.008274 0.140658 -0.010854\nv 0.010396 0.141741 -0.011569\nv 0.013062 0.142234 -0.012471\nv 0.012596 0.142179 -0.014072\nv 0.019277 0.142292 -0.014577\nv 0.015584 0.142298 -0.015082\nv 0.018742 0.142237 -0.016152\nv 0.016083 0.142354 -0.013494\nv 0.015138 0.142151 -0.016681\nv 0.018207 0.142092 -0.01772\nv 0.017674 0.141887 -0.019283\nv 0.014341 0.141708 -0.01989\nv 0.017142 0.141653 -0.020839\nv 0.01473 0.141944 -0.018286\nv 0.006222 0.134527 -0.017228\nv 0.006211 0.134445 -0.015486\nv 0.00627 0.134369 -0.013752\nv 0.005882 0.136539 -0.017113\nv 0.005856 0.136544 -0.015364\nv 0.0059 0.136549 -0.013624\nv 0.006466 0.134312 -0.012049\nv 0.006872 0.134286 -0.010399\nv 0.006086 0.13655 -0.011915\nv 0.006488 0.136548 -0.010262\nv 0.006548 0.138772 -0.012062\nv 0.006955 0.138793 -0.010413\nv 0.00635 0.138712 -0.013765\nv 0.006296 0.138536 -0.01724\nv 0.006288 0.138628 -0.015498\nv 0.030865 0.132404 -0.011507\nv 0.032044 0.133975 -0.013619\nv 0.030822 0.132241 -0.01323\nv 0.032037 0.134067 -0.011877\nv 0.031983 0.133891 -0.015353\nv 0.030711 0.132091 -0.014943\nv 0.032476 0.136059 -0.013753\nv 0.03245 0.136065 -0.012005\nv 0.032432 0.136054 -0.015493\nv 0.030477 0.131985 -0.016628\nv 0.031377 0.13381 -0.018705\nv 0.030059 0.131945 -0.018264\nv 0.031784 0.133831 -0.017055\nv 0.032247 0.136053 -0.017202\nv 0.031845 0.136055 -0.018856\nv 0.031866 0.138291 -0.017069\nv 0.030211 0.140232 -0.018289\nv 0.03146 0.138317 -0.018718\nv 0.030628 0.140186 -0.016652\nv 0.032063 0.138234 -0.015365\nv 0.030858 0.140081 -0.014967\nv 0.030964 0.139938 -0.013253\nv 0.032121 0.138158 -0.013632\nv 0.032111 0.138076 -0.011889\nv 0.031001 0.139783 -0.011529\nv 0.020412 0.13069 -0.020248\nv 0.019746 0.130936 -0.021757\nv 0.023197 0.130802 -0.021196\nv 0.022395 0.131043 -0.022659\nv 0.021063 0.130472 -0.018727\nv 0.023965 0.130589 -0.019714\nv 0.027605 0.132272 -0.022724\nv 0.026592 0.132445 -0.024117\nv 0.025653 0.131262 -0.022041\nv 0.024732 0.131482 -0.023463\nv 0.028558 0.132112 -0.021297\nv 0.026524 0.131065 -0.020591\nv 0.029397 0.131995 -0.019817\nv 0.027936 0.130862 -0.017548\nv 0.027301 0.130923 -0.019099\nv 0.024667 0.130434 -0.018201\nv 0.02527 0.130369 -0.016647\nv 0.022249 0.130249 -0.015623\nv 0.021681 0.130315 -0.017187\nv 0.021387 0.141613 -0.008311\nv 0.020864 0.141856 -0.009868\nv 0.024188 0.141558 -0.009259\nv 0.023808 0.141799 -0.010865\nv 0.026834 0.141348 -0.010152\nv 0.026589 0.141579 -0.011804\nv 0.020338 0.142071 -0.011432\nv 0.023407 0.142011 -0.012471\nv 0.026305 0.141782 -0.01345\nv 0.029035 0.141024 -0.01262\nv 0.029161 0.140819 -0.010928\nv 0.028852 0.141207 -0.014304\nv 0.02813 0.141396 -0.01758\nv 0.028567 0.14134 -0.015962\nv 0.025949 0.14193 -0.01508\nv 0.025484 0.141993 -0.016681\nv 0.019809 0.142227 -0.013001\nv 0.022967 0.142165 -0.014071\nv 0.02247 0.14223 -0.015659\nv 0.019591 0.130366 -0.012966\nv 0.016433 0.130428 -0.011895\nv 0.020125 0.130511 -0.011397\nv 0.017057 0.130571 -0.010356\nv 0.013453 0.130662 -0.010882\nv 0.014161 0.1308 -0.009371\nv 0.020659 0.130716 -0.009835\nv 0.017715 0.130773 -0.008836\nv 0.021191 0.13095 -0.008279\nv 0.01839 0.131004 -0.007329\nv 0.014937 0.130994 -0.007889\nv 0.015747 0.131214 -0.006428\nv 0.012499 0.131548 -0.007048\nv 0.010586 0.132634 -0.006371\nv 0.013428 0.131743 -0.005626\nv 0.011605 0.132778 -0.004979\nv 0.011621 0.131376 -0.008497\nv 0.009627 0.132501 -0.007797\nv 0.010839 0.131253 -0.009988\nv 0.008785 0.132406 -0.009276\nv 0.008936 0.140608 -0.0093\nv 0.011031 0.14168 -0.010019\nv 0.011808 0.141538 -0.008527\nv 0.009774 0.140491 -0.007821\nv 0.013665 0.142169 -0.010917\nv 0.014367 0.142014 -0.009404\nv 0.013601 0.141121 -0.005654\nv 0.011741 0.140158 -0.005001\nv 0.012679 0.141341 -0.007077\nv 0.010727 0.140331 -0.006394\nv 0.015937 0.14156 -0.006459\nv 0.015136 0.141801 -0.007922\nv 0.01792 0.141913 -0.00887\nv 0.018587 0.141667 -0.007361\nv 0.01727 0.142131 -0.010391\nv 0.016652 0.142288 -0.011931\nv 0.007553 0.134301 -0.008843\nv 0.008432 0.134348 -0.007371\nv 0.007174 0.13654 -0.008704\nv 0.008065 0.136528 -0.007235\nv 0.010508 0.134486 -0.004581\nv 0.00944 0.134414 -0.005958\nv 0.010171 0.136497 -0.004454\nv 0.009088 0.136513 -0.005826\nv 0.009517 0.138597 -0.005971\nv 0.010581 0.138494 -0.004593\nv 0.008512 0.138692 -0.007384\nv 0.007635 0.138762 -0.008856\nv 0.030698 0.133841 -0.020261\nv 0.02982 0.133911 -0.021734\nv 0.031158 0.136063 -0.020413\nv 0.030267 0.136075 -0.021883\nv 0.027751 0.134109 -0.024525\nv 0.028816 0.134006 -0.023147\nv 0.029245 0.13609 -0.023291\nv 0.028161 0.136106 -0.024664\nv 0.028893 0.138189 -0.02316\nv 0.027747 0.139969 -0.022747\nv 0.027825 0.138117 -0.024537\nv 0.026728 0.139825 -0.024139\nv 0.0299 0.138255 -0.021747\nv 0.028705 0.140102 -0.02132\nv 0.029548 0.140197 -0.019842\nv 0.03078 0.138301 -0.020275\nv 0.028375 0.130912 -0.015931\nv 0.028665 0.131045 -0.014273\nv 0.025737 0.130424 -0.015045\nv 0.026099 0.130568 -0.013417\nv 0.028989 0.131441 -0.0109\nv 0.028855 0.131231 -0.012591\nv 0.02639 0.130771 -0.011771\nv 0.026644 0.131002 -0.010121\nv 0.023603 0.130659 -0.010832\nv 0.023992 0.130895 -0.009227\nv 0.023194 0.130452 -0.012437\nv 0.022749 0.130305 -0.014036\nv 0.027493 0.14135 -0.01913\nv 0.026711 0.141227 -0.020621\nv 0.024879 0.14194 -0.018235\nv 0.024171 0.141803 -0.019747\nv 0.024904 0.14086 -0.023491\nv 0.025833 0.141055 -0.02207\nv 0.022585 0.141389 -0.02269\nv 0.023396 0.141609 -0.021228\nv 0.020617 0.14183 -0.020281\nv 0.019942 0.141599 -0.021789\nv 0.021275 0.142032 -0.018761\nv 0.021899 0.142175 -0.017222\nv 0.009303 0.132118 -0.018159\nv 0.009433 0.131912 -0.016472\nv 0.007575 0.133085 -0.01757\nv 0.007618 0.132925 -0.015853\nv 0.011809 0.131377 -0.017278\nv 0.011562 0.131607 -0.018926\nv 0.009614 0.131731 -0.014801\nv 0.00772 0.132785 -0.014156\nv 0.01209 0.131175 -0.015642\nv 0.017491 0.131104 -0.019204\nv 0.014177 0.131401 -0.019813\nv 0.016969 0.131347 -0.020759\nv 0.014556 0.131161 -0.01821\nv 0.018013 0.13089 -0.01765\nv 0.014954 0.130949 -0.016613\nv 0.015879 0.130733 -0.013463\nv 0.015389 0.130797 -0.015029\nv 0.019063 0.130671 -0.014542\nv 0.018537 0.130736 -0.016096\nv 0.012897 0.130967 -0.012452\nv 0.012441 0.131029 -0.014029\nv 0.007944 0.132683 -0.0125\nv 0.009893 0.131601 -0.013164\nv 0.01032 0.131545 -0.011577\nv 0.00835 0.13264 -0.010905\nv 0.009601 0.141035 -0.016499\nv 0.007701 0.139925 -0.017591\nv 0.00775 0.140093 -0.015874\nv 0.009463 0.140824 -0.018185\nv 0.009788 0.141219 -0.014829\nv 0.007858 0.140239 -0.014178\nv 0.011995 0.141477 -0.017308\nv 0.01174 0.141246 -0.018955\nv 0.012283 0.141679 -0.015673\nv 0.010502 0.141398 -0.011606\nv 0.010072 0.141349 -0.013193\nv 0.008492 0.140381 -0.010929\nv 0.008085 0.140343 -0.012523\nv 0.013098 0.141875 -0.012484\nv 0.01264 0.141821 -0.014061\nv 0.015594 0.141938 -0.015062\nv 0.016086 0.141993 -0.013497\nv 0.01927 0.141932 -0.014576\nv 0.018742 0.141877 -0.016129\nv 0.015154 0.141793 -0.016646\nv 0.018213 0.141733 -0.017682\nv 0.01436 0.141351 -0.019842\nv 0.014748 0.141587 -0.018241\nv 0.017683 0.14153 -0.019236\nv 0.017152 0.141297 -0.020789\nv 0.006557 0.13466 -0.01722\nv 0.006547 0.134576 -0.015485\nv 0.006604 0.134501 -0.013772\nv 0.006216 0.136538 -0.015366\nv 0.006242 0.136532 -0.017107\nv 0.00626 0.136542 -0.013649\nv 0.006796 0.134447 -0.012105\nv 0.007188 0.134422 -0.010506\nv 0.006829 0.136541 -0.010377\nv 0.006441 0.136544 -0.011978\nv 0.007266 0.138645 -0.010519\nv 0.006873 0.138625 -0.012118\nv 0.006679 0.138568 -0.013784\nv 0.006619 0.138485 -0.015496\nv 0.006626 0.138391 -0.017231\nv 0.031707 0.134212 -0.011887\nv 0.030631 0.132678 -0.011527\nv 0.031713 0.134118 -0.013621\nv 0.030583 0.13251 -0.013243\nv 0.031653 0.134035 -0.015333\nv 0.030475 0.132363 -0.014939\nv 0.032116 0.136065 -0.013751\nv 0.03209 0.136071 -0.01201\nv 0.032073 0.136061 -0.015469\nv 0.031066 0.133958 -0.018599\nv 0.03146 0.133978 -0.017\nv 0.030247 0.13226 -0.016595\nv 0.02984 0.132222 -0.018189\nv 0.031503 0.136062 -0.01874\nv 0.031892 0.136059 -0.01714\nv 0.029983 0.139963 -0.018212\nv 0.031537 0.138156 -0.017012\nv 0.031144 0.138181 -0.018612\nv 0.030388 0.13992 -0.016618\nv 0.031728 0.138102 -0.015345\nv 0.030612 0.139818 -0.014962\nv 0.030715 0.139678 -0.013265\nv 0.031775 0.137943 -0.011898\nv 0.031785 0.138027 -0.013633\nv 0.030757 0.139518 -0.011547\nv 0.020425 0.131047 -0.020199\nv 0.01976 0.131293 -0.021705\nv 0.023179 0.131156 -0.021132\nv 0.02238 0.131397 -0.022593\nv 0.021072 0.130831 -0.018687\nv 0.023943 0.130944 -0.019659\nv 0.027424 0.13254 -0.022566\nv 0.025572 0.131598 -0.021941\nv 0.026419 0.132719 -0.023957\nv 0.024657 0.13182 -0.023363\nv 0.028369 0.132384 -0.021154\nv 0.026438 0.131404 -0.020503\nv 0.027207 0.131264 -0.019032\nv 0.029194 0.13227 -0.019702\nv 0.027831 0.131205 -0.017512\nv 0.025234 0.130728 -0.016633\nv 0.02464 0.130792 -0.018164\nv 0.022246 0.13061 -0.015621\nv 0.021685 0.130675 -0.017163\nv 0.023776 0.141442 -0.010908\nv 0.020842 0.141499 -0.009913\nv 0.024156 0.141202 -0.009305\nv 0.021364 0.141256 -0.008359\nv 0.026524 0.141226 -0.01184\nv 0.02677 0.140995 -0.010191\nv 0.023378 0.141654 -0.012504\nv 0.020319 0.141713 -0.011467\nv 0.026243 0.141428 -0.013476\nv 0.028899 0.140691 -0.012646\nv 0.02903 0.140485 -0.010959\nv 0.028719 0.140872 -0.014317\nv 0.028012 0.141058 -0.017541\nv 0.02844 0.141002 -0.015954\nv 0.025435 0.141636 -0.016666\nv 0.025892 0.141574 -0.015088\nv 0.022454 0.14187 -0.015655\nv 0.022943 0.141806 -0.014089\nv 0.019795 0.141867 -0.013022\nv 0.016442 0.130787 -0.011921\nv 0.01959 0.130726 -0.012988\nv 0.01706 0.130929 -0.010398\nv 0.020119 0.13087 -0.011435\nv 0.013494 0.131018 -0.010922\nv 0.014196 0.131154 -0.009427\nv 0.018389 0.131361 -0.007383\nv 0.017715 0.13113 -0.008888\nv 0.021181 0.131306 -0.008329\nv 0.02065 0.131073 -0.009882\nv 0.015774 0.131567 -0.006496\nv 0.014968 0.131347 -0.007956\nv 0.011787 0.133044 -0.00514\nv 0.010776 0.132895 -0.006531\nv 0.013515 0.132077 -0.005729\nv 0.012592 0.131882 -0.007149\nv 0.01172 0.131711 -0.008586\nv 0.009826 0.132765 -0.007941\nv 0.010946 0.13159 -0.010056\nv 0.008997 0.132673 -0.009393\nv 0.011125 0.141339 -0.010085\nv 0.009138 0.140333 -0.009415\nv 0.011894 0.141199 -0.008614\nv 0.009964 0.140219 -0.007963\nv 0.013693 0.141811 -0.010954\nv 0.014389 0.141659 -0.009458\nv 0.013675 0.140783 -0.005755\nv 0.01276 0.141004 -0.007176\nv 0.011913 0.139884 -0.005161\nv 0.010908 0.140063 -0.006552\nv 0.015952 0.141206 -0.006525\nv 0.015154 0.141447 -0.007986\nv 0.017907 0.141556 -0.008919\nv 0.018572 0.14131 -0.007413\nv 0.01726 0.141772 -0.010431\nv 0.016647 0.141928 -0.011955\nv 0.007849 0.134437 -0.008998\nv 0.00871 0.134481 -0.007557\nv 0.007494 0.136533 -0.008871\nv 0.008365 0.136522 -0.007434\nv 0.009706 0.134545 -0.006162\nv 0.010769 0.134619 -0.00479\nv 0.010454 0.136491 -0.004677\nv 0.009375 0.136507 -0.006044\nv 0.009778 0.138455 -0.006174\nv 0.010838 0.13835 -0.004801\nv 0.008785 0.138547 -0.00757\nv 0.007926 0.138615 -0.00901\nv 0.030407 0.133988 -0.020107\nv 0.029547 0.134056 -0.021548\nv 0.030839 0.13607 -0.020247\nv 0.029967 0.136081 -0.021684\nv 0.027495 0.134253 -0.024316\nv 0.028554 0.134148 -0.022944\nv 0.027878 0.136112 -0.02444\nv 0.028957 0.136096 -0.023074\nv 0.026545 0.139559 -0.023977\nv 0.027556 0.139708 -0.022587\nv 0.027563 0.137984 -0.024327\nv 0.028626 0.138058 -0.022955\nv 0.028506 0.139838 -0.021176\nv 0.029622 0.138122 -0.02156\nv 0.029335 0.13993 -0.019725\nv 0.030484 0.138166 -0.02012\nv 0.02826 0.131254 -0.015925\nv 0.028544 0.131384 -0.014288\nv 0.025693 0.130781 -0.015056\nv 0.026049 0.130924 -0.013444\nv 0.028869 0.131779 -0.010933\nv 0.028731 0.131568 -0.012619\nv 0.026592 0.131357 -0.010163\nv 0.026338 0.131126 -0.011809\nv 0.023972 0.131252 -0.009275\nv 0.023584 0.131016 -0.010877\nv 0.023178 0.13081 -0.012472\nv 0.022738 0.130665 -0.014055\nv 0.027387 0.141013 -0.019061\nv 0.026613 0.140892 -0.020532\nv 0.024839 0.141584 -0.018196\nv 0.024137 0.141449 -0.019691\nv 0.024818 0.140526 -0.023389\nv 0.02574 0.140721 -0.021968\nv 0.023365 0.141256 -0.021162\nv 0.022558 0.141036 -0.022621\nv 0.020617 0.141473 -0.02023\nv 0.019944 0.141242 -0.021735\nv 0.021272 0.141674 -0.018719\nv 0.02189 0.141816 -0.017196\n\nvt 1 0.125 0\nvt 0 0 0\nvt 1 0 0\nvt 0.875 0.125 0\nvt 0.125 0 0\nvt 0.875 0 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 0.75 0.125 0\nvt 0.25 0 0\nvt 0.75 0 0\nvt 0.75 0.25 0\nvt 1 0.375 0\nvt 0.875 0.375 0\nvt 0.875 0.5 0\nvt 1 0.5 0\nvt 0.75 0.375 0\nvt 0.75 0.5 0\nvt 0.625 0.375 0\nvt 0.5 0.375 0\nvt 0.5 0.5 0\nvt 0.625 0.5 0\nvt 0.625 0.25 0\nvt 0.5 0.25 0\nvt 0.375 0 0\nvt 0.625 0 0\nvt 0.5 0.125 0\nvt 0.625 0.125 0\nvt 0.5 0 0\nvt 0.125 1 0\nvt 0.125 0 0\nvt 0 1 0\nvt 0 0 0\nvt 0.125 0.125 0\nvt 0 0.125 0\nvt 0.25 1 0\nvt 0.25 0 0\nvt 0.25 0.125 0\nvt 0.125 0.25 0\nvt 0 0.25 0\nvt 0.25 0.25 0\nvt 0.375 1 0\nvt 0.375 0 0\nvt 0.375 0.125 0\nvt 0.5 1 0\nvt 0.5 0 0\nvt 0.5 0.125 0\nvt 0.5 0.25 0\nvt 0.375 0.25 0\nvt 0.5 0.5 0\nvt 0.375 0.375 0\nvt 0.375 0.5 0\nvt 0.5 0.375 0\nvt 0.25 0.375 0\nvt 0.25 0.5 0\nvt 0.125 0.5 0\nvt 0 0.375 0\nvt 0 0.5 0\nvt 0.125 0.375 0\nvt 0 0.25 0\nvt 0.125 0.25 0\nvt 0.25 0.25 0\nvt 0 0.5 0\nvt 0.125 0.5 0\nvt 0.25 0.5 0\nvt 0.375 0.25 0\nvt 0.5 0.25 0\nvt 0.375 0.5 0\nvt 0.5 0.5 0\nvt 0.375 0.75 0\nvt 0.5 0.75 0\nvt 0.25 0.75 0\nvt 0 0.75 0\nvt 0.125 0.75 0\nvt 0 1 0\nvt 0 0 0\nvt 0.125 0.25 0\nvt 0.125 1 0\nvt 0.125 0 0\nvt 0 0.25 0\nvt 0.25 0.25 0\nvt 0.25 1 0\nvt 0.25 0 0\nvt 0.125 0.5 0\nvt 0 0.5 0\nvt 0.25 0.5 0\nvt 0.375 1 0\nvt 0.375 0 0\nvt 0.5 0.25 0\nvt 0.5 1 0\nvt 0.5 0 0\nvt 0.375 0.25 0\nvt 0.375 0.5 0\nvt 0.5 0.5 0\nvt 0.375 0.75 0\nvt 0.5 1 0\nvt 0.5 0.75 0\nvt 0.625 1 0\nvt 0.375 1 0\nvt 0.25 0.75 0\nvt 0.75 1 0\nvt 0.25 1 0\nvt 0.875 1 0\nvt 0.125 1 0\nvt 0.125 0.75 0\nvt 0 0.75 0\nvt 1 1 0\nvt 0 1 0\nvt 0.875 0.625 0\nvt 1 0.625 0\nvt 0.875 0.75 0\nvt 1 0.75 0\nvt 0.75 0.625 0\nvt 0.75 0.75 0\nvt 0.875 0 0\nvt 0.875 1 0\nvt 1 0 0\nvt 1 1 0\nvt 0.875 0.875 0\nvt 1 0.875 0\nvt 0.75 0 0\nvt 0.75 1 0\nvt 0.75 0.875 0\nvt 0.625 0 0\nvt 0.625 1 0\nvt 0.5 0.875 0\nvt 0.625 0.875 0\nvt 0.625 0.75 0\nvt 0.5 0.75 0\nvt 0.5 0.625 0\nvt 0.625 0.625 0\nvt 1 0.5 0\nvt 0.875 0.5 0\nvt 1 0.625 0\nvt 0.875 0.625 0\nvt 1 0.75 0\nvt 0.875 0.75 0\nvt 0.75 0.5 0\nvt 0.75 0.625 0\nvt 0.75 0.75 0\nvt 0.875 0.875 0\nvt 1 0.875 0\nvt 0.75 0.875 0\nvt 0.5 0.875 0\nvt 0.625 0.875 0\nvt 0.625 0.75 0\nvt 0.5 0.75 0\nvt 0.625 0.5 0\nvt 0.625 0.625 0\nvt 0.5 0.625 0\nvt 0.375 0.5 0\nvt 0.375 0.375 0\nvt 0.25 0.5 0\nvt 0.25 0.375 0\nvt 0.375 0.25 0\nvt 0.25 0.25 0\nvt 0.125 0.5 0\nvt 0.125 0.375 0\nvt 0 0.5 0\nvt 0 0.375 0\nvt 0.125 0.25 0\nvt 0 0.25 0\nvt 0.125 0.125 0\nvt 0.875 0 0\nvt 0.125 0 0\nvt 0 0.125 0\nvt 1 0 0\nvt 0 0 0\nvt 0.25 0.125 0\nvt 0.75 0 0\nvt 0.25 0 0\nvt 0.375 0.125 0\nvt 0.625 0 0\nvt 0.375 0 0\nvt 0.625 1 0\nvt 0.625 0 0\nvt 0.625 0.125 0\nvt 0.75 0.125 0\nvt 0.75 1 0\nvt 0.75 0 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 1 0.125 0\nvt 1 1 0\nvt 1 0 0\nvt 0.875 0.125 0\nvt 0.875 1 0\nvt 0.875 0 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 0.875 0.375 0\nvt 1 0.375 0\nvt 0.75 0.375 0\nvt 0.625 0.375 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 0.625 0.5 0\nvt 0.75 0.5 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 1 0.5 0\nvt 0.875 0.5 0\nvt 0.875 0.75 0\nvt 1 0.75 0\nvt 0.75 0.75 0\nvt 0.625 0.75 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 0.625 0.5 0\nvt 0.75 0.5 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 0.875 0.5 0\nvt 1 0.5 0\nvt 0.875 0.75 0\nvt 0.125 1 0\nvt 0.875 1 0\nvt 1 0.75 0\nvt 0 1 0\nvt 1 1 0\nvt 0.75 0.75 0\nvt 0.25 1 0\nvt 0.75 1 0\nvt 0.375 1 0\nvt 0.625 1 0\nvt 0.625 0.75 0\nvt 0.375 0.875 0\nvt 0.25 0.875 0\nvt 0.375 0.75 0\nvt 0.25 0.75 0\nvt 0 0.875 0\nvt 0.125 0.875 0\nvt 0.125 0.75 0\nvt 0 0.75 0\nvt 0.125 0.625 0\nvt 0 0.625 0\nvt 0.25 0.625 0\nvt 0.375 0.625 0\nvt 0.375 0.875 0\nvt 0.25 0.875 0\nvt 0.375 0.75 0\nvt 0.25 0.75 0\nvt 0 0.875 0\nvt 0.125 0.875 0\nvt 0 0.75 0\nvt 0.125 0.75 0\nvt 0.125 0.625 0\nvt 0 0.625 0\nvt 0.25 0.625 0\nvt 0.375 0.625 0\nvt 1 0.125 0\nvt 0.875 0.125 0\nvt 0 0 0\nvt 1 0 0\nvt 0.125 0 0\nvt 0.875 0 0\nvt 0.875 0.25 0\nvt 1 0.25 0\nvt 0.75 0.125 0\nvt 0.25 0 0\nvt 0.75 0 0\nvt 0.75 0.25 0\nvt 0.875 0.5 0\nvt 1 0.375 0\nvt 1 0.5 0\nvt 0.875 0.375 0\nvt 0.75 0.5 0\nvt 0.75 0.375 0\nvt 0.5 0.375 0\nvt 0.625 0.375 0\nvt 0.5 0.5 0\nvt 0.625 0.5 0\nvt 0.5 0.25 0\nvt 0.625 0.25 0\nvt 0.375 0 0\nvt 0.625 0 0\nvt 0.625 0.125 0\nvt 0.5 0.125 0\nvt 0.5 0 0\nvt 0.125 0.125 0\nvt 0 1 0\nvt 0 0 0\nvt 0.125 1 0\nvt 0.125 0 0\nvt 0 0.125 0\nvt 0.25 0.125 0\nvt 0.25 1 0\nvt 0.25 0 0\nvt 0.125 0.25 0\nvt 0 0.25 0\nvt 0.25 0.25 0\nvt 0.5 0.125 0\nvt 0.375 0.125 0\nvt 0.5 1 0\nvt 0.5 0 0\nvt 0.375 1 0\nvt 0.375 0 0\nvt 0.5 0.25 0\nvt 0.375 0.25 0\nvt 0.375 0.375 0\nvt 0.5 0.375 0\nvt 0.5 0.5 0\nvt 0.375 0.5 0\nvt 0.25 0.375 0\nvt 0.25 0.5 0\nvt 0 0.375 0\nvt 0.125 0.375 0\nvt 0.125 0.5 0\nvt 0 0.5 0\nvt 0 0.25 0\nvt 0.125 0.25 0\nvt 0.25 0.25 0\nvt 0.125 0.5 0\nvt 0 0.5 0\nvt 0.25 0.5 0\nvt 0.375 0.25 0\nvt 0.5 0.25 0\nvt 0.5 0.5 0\nvt 0.375 0.5 0\nvt 0.5 0.75 0\nvt 0.375 0.75 0\nvt 0.25 0.75 0\nvt 0.125 0.75 0\nvt 0 0.75 0\nvt 0 0.25 0\nvt 0 1 0\nvt 0 0 0\nvt 0.125 0.25 0\nvt 0.125 1 0\nvt 0.125 0 0\nvt 0.25 0.25 0\nvt 0.25 1 0\nvt 0.25 0 0\nvt 0.125 0.5 0\nvt 0 0.5 0\nvt 0.25 0.5 0\nvt 0.5 0.25 0\nvt 0.375 0.25 0\nvt 0.375 1 0\nvt 0.375 0 0\nvt 0.5 1 0\nvt 0.5 0 0\nvt 0.5 0.5 0\nvt 0.375 0.5 0\nvt 0.5 1 0\nvt 0.375 0.75 0\nvt 0.5 0.75 0\nvt 0.625 1 0\nvt 0.375 1 0\nvt 0.25 0.75 0\nvt 0.75 1 0\nvt 0.25 1 0\nvt 0.875 1 0\nvt 0.125 1 0\nvt 0 0.75 0\nvt 0.125 0.75 0\nvt 1 1 0\nvt 0 1 0\nvt 0.875 0.625 0\nvt 1 0.625 0\nvt 0.875 0.75 0\nvt 1 0.75 0\nvt 0.75 0.625 0\nvt 0.75 0.75 0\nvt 0.875 0 0\nvt 0.875 1 0\nvt 0.875 0.875 0\nvt 1 0 0\nvt 1 1 0\nvt 1 0.875 0\nvt 0.75 0 0\nvt 0.75 1 0\nvt 0.75 0.875 0\nvt 0.625 0.875 0\nvt 0.625 0 0\nvt 0.625 1 0\nvt 0.5 0.875 0\nvt 0.5 0.75 0\nvt 0.625 0.75 0\nvt 0.5 0.625 0\nvt 0.625 0.625 0\nvt 0.875 0.625 0\nvt 0.875 0.5 0\nvt 1 0.625 0\nvt 1 0.5 0\nvt 0.875 0.75 0\nvt 1 0.75 0\nvt 0.75 0.625 0\nvt 0.75 0.5 0\nvt 0.75 0.75 0\nvt 0.875 0.875 0\nvt 1 0.875 0\nvt 0.75 0.875 0\nvt 0.5 0.875 0\nvt 0.625 0.875 0\nvt 0.5 0.75 0\nvt 0.625 0.75 0\nvt 0.5 0.625 0\nvt 0.625 0.625 0\nvt 0.625 0.5 0\nvt 0.375 0.375 0\nvt 0.375 0.5 0\nvt 0.25 0.375 0\nvt 0.25 0.5 0\nvt 0.375 0.25 0\nvt 0.25 0.25 0\nvt 0 0.375 0\nvt 0.125 0.375 0\nvt 0 0.5 0\nvt 0.125 0.5 0\nvt 0 0.25 0\nvt 0.125 0.25 0\nvt 1 0 0\nvt 0 0 0\nvt 0.875 0 0\nvt 0.125 0 0\nvt 0 0.125 0\nvt 0.125 0.125 0\nvt 0.25 0.125 0\nvt 0.75 0 0\nvt 0.25 0 0\nvt 0.375 0.125 0\nvt 0.625 0 0\nvt 0.375 0 0\nvt 0.625 0.125 0\nvt 0.625 1 0\nvt 0.625 0 0\nvt 0.75 0.125 0\nvt 0.75 1 0\nvt 0.75 0 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 1 0.125 0\nvt 0.875 0.125 0\nvt 1 1 0\nvt 1 0 0\nvt 0.875 1 0\nvt 0.875 0 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 0.875 0.375 0\nvt 1 0.375 0\nvt 0.75 0.375 0\nvt 0.625 0.375 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 0.625 0.5 0\nvt 0.75 0.5 0\nvt 0.875 0.25 0\nvt 1 0.25 0\nvt 1 0.5 0\nvt 0.875 0.5 0\nvt 0.875 0.75 0\nvt 1 0.75 0\nvt 0.75 0.75 0\nvt 0.625 0.75 0\nvt 0.625 0.25 0\nvt 0.75 0.25 0\nvt 0.625 0.5 0\nvt 0.75 0.5 0\nvt 1 0.25 0\nvt 0.875 0.25 0\nvt 1 0.5 0\nvt 0.875 0.5 0\nvt 0 1 0\nvt 1 1 0\nvt 0.125 1 0\nvt 0.875 1 0\nvt 1 0.75 0\nvt 0.875 0.75 0\nvt 0.25 1 0\nvt 0.75 1 0\nvt 0.75 0.75 0\nvt 0.375 1 0\nvt 0.625 1 0\nvt 0.625 0.75 0\nvt 0.375 0.875 0\nvt 0.25 0.875 0\nvt 0.375 0.75 0\nvt 0.25 0.75 0\nvt 0 0.875 0\nvt 0.125 0.875 0\nvt 0 0.75 0\nvt 0.125 0.75 0\nvt 0 0.625 0\nvt 0.125 0.625 0\nvt 0.25 0.625 0\nvt 0.375 0.625 0\nvt 0.375 0.875 0\nvt 0.25 0.875 0\nvt 0.375 0.75 0\nvt 0.25 0.75 0\nvt 0 0.875 0\nvt 0.125 0.875 0\nvt 0.125 0.75 0\nvt 0 0.75 0\nvt 0.125 0.625 0\nvt 0 0.625 0\nvt 0.25 0.625 0\nvt 0.375 0.625 0\n\nf 2257/2431 2256/2430 2255/2428 \nf 2256/2430 2257/2431 2258/2433 \nf 2259/2434 2257/2431 2255/2428 \nf 2257/2431 2259/2434 2260/2435 \nf 2261/2436 2258/2433 2257/2431 \nf 2258/2433 2261/2436 2262/2438 \nf 2263/2439 2261/2436 2257/2431 \nf 2263/2439 2257/2431 2260/2435 \nf 2266/2442 2265/2441 2264/2440 \nf 2266/2442 2264/2440 2267/2443 \nf 2269/2445 2268/2444 2265/2441 \nf 2269/2445 2265/2441 2266/2442 \nf 2265/2441 2260/2435 2259/2434 \nf 2265/2441 2259/2434 2264/2440 \nf 2268/2444 2263/2439 2260/2435 \nf 2268/2444 2260/2435 2265/2441 \nf 2272/2448 2271/2447 2270/2446 \nf 2272/2448 2270/2446 2273/2449 \nf 2271/2447 2275/2451 2274/2450 \nf 2271/2447 2274/2450 2270/2446 \nf 2273/2449 2270/2446 2268/2444 \nf 2273/2449 2268/2444 2269/2445 \nf 2270/2446 2274/2450 2263/2439 \nf 2270/2446 2263/2439 2268/2444 \nf 2278/2455 2277/2454 2276/2453 \nf 2277/2454 2279/2456 2276/2453 \nf 2261/2436 2278/2455 2262/2438 \nf 2278/2455 2276/2453 2262/2438 \nf 2275/2451 2277/2454 2278/2455 \nf 2275/2451 2278/2455 2274/2450 \nf 2274/2450 2278/2455 2261/2436 \nf 2274/2450 2261/2436 2263/2439 \nf 2282/2461 2281/2460 2280/2458 \nf 2281/2460 2282/2461 2283/2462 \nf 2285/2465 2280/2458 2284/2464 \nf 2280/2458 2285/2465 2282/2461 \nf 2286/2466 2283/2462 2282/2461 \nf 2283/2462 2286/2466 2287/2467 \nf 2288/2468 2282/2461 2285/2465 \nf 2282/2461 2288/2468 2286/2466 \nf 2291/2473 2290/2471 2289/2470 \nf 2290/2471 2291/2473 2292/2474 \nf 2293/2475 2290/2471 2292/2474 \nf 2290/2471 2293/2475 2294/2476 \nf 2290/2471 2284/2464 2289/2470 \nf 2284/2464 2290/2471 2285/2465 \nf 2294/2476 2285/2465 2290/2471 \nf 2285/2465 2294/2476 2288/2468 \nf 2297/2479 2296/2478 2295/2477 \nf 2298/2480 2295/2477 2296/2478 \nf 2300/2482 2299/2481 2297/2479 \nf 2296/2478 2297/2479 2299/2481 \nf 2296/2478 2294/2476 2298/2480 \nf 2293/2475 2298/2480 2294/2476 \nf 2299/2481 2288/2468 2296/2478 \nf 2294/2476 2296/2478 2288/2468 \nf 2303/2485 2302/2484 2301/2483 \nf 2304/2486 2301/2483 2302/2484 \nf 2302/2484 2287/2467 2304/2486 \nf 2286/2466 2304/2486 2287/2467 \nf 2301/2483 2304/2486 2300/2482 \nf 2299/2481 2300/2482 2304/2486 \nf 2304/2486 2286/2466 2299/2481 \nf 2288/2468 2299/2481 2286/2466 \nf 2258/2432 2305/2487 2256/2429 \nf 2305/2487 2258/2432 2306/2488 \nf 2262/2437 2306/2488 2258/2432 \nf 2306/2488 2262/2437 2307/2489 \nf 2306/2488 2308/2490 2305/2487 \nf 2308/2490 2306/2488 2309/2491 \nf 2307/2489 2309/2491 2306/2488 \nf 2309/2491 2307/2489 2310/2492 \nf 2279/2456 2311/2493 2276/2452 \nf 2311/2493 2279/2456 2312/2494 \nf 2312/2494 2313/2495 2311/2493 \nf 2313/2495 2312/2494 2314/2496 \nf 2276/2452 2307/2489 2262/2437 \nf 2307/2489 2276/2452 2311/2493 \nf 2311/2493 2310/2492 2307/2489 \nf 2310/2492 2311/2493 2313/2495 \nf 2316/2498 2289/2469 2315/2497 \nf 2289/2469 2316/2498 2291/2472 \nf 2315/2497 2284/2463 2317/2499 \nf 2284/2463 2315/2497 2289/2469 \nf 2313/2495 2314/2496 2316/2498 \nf 2313/2495 2316/2498 2315/2497 \nf 2313/2495 2317/2499 2310/2492 \nf 2317/2499 2313/2495 2315/2497 \nf 2319/2501 2281/2459 2318/2500 \nf 2281/2459 2319/2501 2280/2457 \nf 2309/2491 2318/2500 2308/2490 \nf 2318/2500 2309/2491 2319/2501 \nf 2317/2499 2280/2457 2319/2501 \nf 2280/2457 2317/2499 2284/2463 \nf 2310/2492 2319/2501 2309/2491 \nf 2319/2501 2310/2492 2317/2499 \nf 2322/2506 2321/2504 2320/2503 \nf 2320/2503 2321/2504 2323/2507 \nf 2325/2510 2324/2508 2322/2506 \nf 2322/2506 2324/2508 2321/2504 \nf 2321/2504 2326/2511 2323/2507 \nf 2323/2507 2326/2511 2327/2512 \nf 2324/2508 2328/2513 2321/2504 \nf 2321/2504 2328/2513 2326/2511 \nf 2331/2518 2330/2516 2329/2515 \nf 2332/2519 2329/2515 2330/2516 \nf 2330/2516 2333/2520 2332/2519 \nf 2333/2520 2330/2516 2334/2521 \nf 2329/2515 2332/2519 2325/2510 \nf 2324/2508 2325/2510 2332/2519 \nf 2333/2520 2324/2508 2332/2519 \nf 2324/2508 2333/2520 2328/2513 \nf 2337/2524 2336/2523 2335/2522 \nf 2336/2523 2338/2526 2335/2522 \nf 2339/2527 2335/2522 2338/2526 \nf 2338/2526 2340/2529 2339/2527 \nf 2333/2520 2334/2521 2337/2524 \nf 2333/2520 2337/2524 2335/2522 \nf 2328/2513 2333/2520 2335/2522 \nf 2328/2513 2335/2522 2339/2527 \nf 2343/2533 2342/2532 2341/2531 \nf 2341/2531 2344/2535 2343/2533 \nf 2327/2512 2326/2511 2342/2532 \nf 2327/2512 2342/2532 2343/2533 \nf 2342/2532 2339/2527 2340/2529 \nf 2340/2529 2341/2531 2342/2532 \nf 2326/2511 2328/2513 2339/2527 \nf 2326/2511 2339/2527 2342/2532 \nf 2345/2536 2266/2442 2267/2443 \nf 2345/2536 2267/2443 2346/2537 \nf 2347/2538 2345/2536 2346/2537 \nf 2347/2538 2346/2537 2348/2539 \nf 2349/2540 2269/2445 2266/2442 \nf 2349/2540 2266/2442 2345/2536 \nf 2350/2541 2349/2540 2345/2536 \nf 2350/2541 2345/2536 2347/2538 \nf 2353/2546 2352/2545 2351/2543 \nf 2352/2545 2353/2546 2354/2547 \nf 2356/2550 2351/2543 2355/2549 \nf 2351/2543 2356/2550 2353/2546 \nf 2347/2538 2354/2547 2353/2546 \nf 2354/2547 2347/2538 2348/2539 \nf 2350/2541 2353/2546 2356/2550 \nf 2353/2546 2350/2541 2347/2538 \nf 2358/2553 2357/2552 2331/2517 \nf 2357/2552 2358/2553 2359/2554 \nf 2358/2553 2361/2556 2360/2555 \nf 2358/2553 2360/2555 2359/2554 \nf 2359/2554 2355/2549 2357/2552 \nf 2355/2549 2359/2554 2356/2550 \nf 2360/2555 2356/2550 2359/2554 \nf 2356/2550 2360/2555 2350/2541 \nf 2362/2557 2272/2448 2273/2449 \nf 2362/2557 2273/2449 2363/2558 \nf 2363/2558 2273/2449 2269/2445 \nf 2363/2558 2269/2445 2349/2540 \nf 2361/2556 2362/2557 2363/2558 \nf 2361/2556 2363/2558 2360/2555 \nf 2360/2555 2363/2558 2349/2540 \nf 2360/2555 2349/2540 2350/2541 \nf 2366/2561 2365/2560 2364/2559 \nf 2365/2560 2366/2561 2367/2562 \nf 2368/2563 2367/2562 2366/2561 \nf 2367/2562 2368/2563 2369/2564 \nf 2367/2562 2370/2565 2365/2560 \nf 2370/2565 2367/2562 2371/2566 \nf 2369/2564 2371/2566 2367/2562 \nf 2371/2566 2369/2564 2372/2567 \nf 2373/2568 2344/2534 2341/2530 \nf 2344/2534 2373/2568 2374/2569 \nf 2375/2570 2341/2530 2340/2528 \nf 2341/2530 2375/2570 2373/2568 \nf 2373/2568 2368/2563 2374/2569 \nf 2368/2563 2373/2568 2369/2564 \nf 2373/2568 2372/2567 2369/2564 \nf 2372/2567 2373/2568 2375/2570 \nf 2376/2571 2338/2525 2336/2523 \nf 2338/2525 2376/2571 2377/2572 \nf 2377/2572 2379/2574 2378/2573 \nf 2379/2574 2377/2572 2376/2571 \nf 2377/2572 2340/2528 2338/2525 \nf 2340/2528 2377/2572 2375/2570 \nf 2375/2570 2378/2573 2372/2567 \nf 2378/2573 2375/2570 2377/2572 \nf 2381/2576 2295/2477 2380/2575 \nf 2295/2477 2381/2576 2382/2577 \nf 2371/2566 2380/2575 2370/2565 \nf 2380/2575 2371/2566 2381/2576 \nf 2378/2573 2382/2577 2381/2576 \nf 2382/2577 2378/2573 2379/2574 \nf 2372/2567 2381/2576 2371/2566 \nf 2381/2576 2372/2567 2378/2573 \nf 2383/2578 2271/2447 2272/2448 \nf 2271/2447 2383/2578 2384/2579 \nf 2385/2580 2384/2579 2383/2578 \nf 2384/2579 2385/2580 2386/2581 \nf 2384/2579 2275/2451 2271/2447 \nf 2275/2451 2384/2579 2387/2582 \nf 2386/2581 2387/2582 2384/2579 \nf 2387/2582 2386/2581 2388/2583 \nf 2391/2586 2390/2585 2389/2584 \nf 2390/2585 2391/2586 2392/2587 \nf 2392/2587 2393/2588 2390/2585 \nf 2393/2588 2392/2587 2394/2589 \nf 2389/2584 2386/2581 2385/2580 \nf 2386/2581 2389/2584 2390/2585 \nf 2390/2585 2388/2583 2386/2581 \nf 2388/2583 2390/2585 2393/2588 \nf 2397/2593 2396/2592 2395/2590 \nf 2396/2592 2397/2593 2398/2595 \nf 2395/2590 2400/2598 2399/2596 \nf 2400/2598 2395/2590 2396/2592 \nf 2394/2589 2395/2590 2393/2588 \nf 2395/2590 2394/2589 2397/2593 \nf 2393/2588 2399/2596 2388/2583 \nf 2399/2596 2393/2588 2395/2590 \nf 2401/2599 2279/2456 2277/2454 \nf 2279/2456 2401/2599 2402/2601 \nf 2387/2582 2277/2454 2275/2451 \nf 2277/2454 2387/2582 2401/2599 \nf 2399/2596 2402/2601 2401/2599 \nf 2402/2601 2399/2596 2400/2598 \nf 2388/2583 2401/2599 2387/2582 \nf 2401/2599 2388/2583 2399/2596 \nf 2403/2603 2292/2474 2291/2473 \nf 2292/2474 2403/2603 2404/2604 \nf 2404/2604 2406/2607 2405/2605 \nf 2406/2607 2404/2604 2403/2603 \nf 2407/2608 2292/2474 2404/2604 \nf 2292/2474 2407/2608 2293/2475 \nf 2407/2608 2405/2605 2408/2609 \nf 2405/2605 2407/2608 2404/2604 \nf 2411/2613 2410/2612 2409/2610 \nf 2410/2612 2411/2613 2412/2615 \nf 2414/2617 2409/2610 2413/2616 \nf 2409/2610 2414/2617 2411/2613 \nf 2405/2605 2412/2615 2411/2613 \nf 2412/2615 2405/2605 2406/2607 \nf 2408/2609 2411/2613 2414/2617 \nf 2411/2613 2408/2609 2405/2605 \nf 2365/2560 2415/2618 2364/2559 \nf 2416/2619 2364/2559 2415/2618 \nf 2370/2565 2417/2620 2365/2560 \nf 2415/2618 2365/2560 2417/2620 \nf 2415/2618 2414/2617 2416/2619 \nf 2416/2619 2414/2617 2413/2616 \nf 2417/2620 2408/2609 2415/2618 \nf 2415/2618 2408/2609 2414/2617 \nf 2295/2477 2298/2480 2380/2575 \nf 2418/2621 2380/2575 2298/2480 \nf 2298/2480 2293/2475 2418/2621 \nf 2407/2608 2418/2621 2293/2475 \nf 2380/2575 2418/2621 2370/2565 \nf 2417/2620 2370/2565 2418/2621 \nf 2418/2621 2407/2608 2417/2620 \nf 2417/2620 2407/2608 2408/2609 \nf 2402/2600 2312/2494 2279/2456 \nf 2312/2494 2402/2600 2419/2622 \nf 2400/2597 2419/2622 2402/2600 \nf 2419/2622 2400/2597 2420/2623 \nf 2419/2622 2421/2624 2312/2494 \nf 2312/2494 2421/2624 2314/2496 \nf 2420/2623 2422/2625 2419/2622 \nf 2419/2622 2422/2625 2421/2624 \nf 2398/2594 2423/2626 2396/2591 \nf 2396/2591 2423/2626 2424/2627 \nf 2423/2626 2425/2628 2424/2627 \nf 2424/2627 2425/2628 2426/2629 \nf 2396/2591 2424/2627 2400/2597 \nf 2400/2597 2424/2627 2420/2623 \nf 2424/2627 2426/2629 2420/2623 \nf 2420/2623 2426/2629 2422/2625 \nf 2427/2630 2410/2611 2412/2614 \nf 2410/2611 2427/2630 2428/2631 \nf 2429/2632 2412/2614 2406/2606 \nf 2412/2614 2429/2632 2427/2630 \nf 2426/2629 2425/2628 2428/2631 \nf 2426/2629 2428/2631 2427/2630 \nf 2422/2625 2426/2629 2427/2630 \nf 2422/2625 2427/2630 2429/2632 \nf 2316/2498 2403/2602 2291/2472 \nf 2403/2602 2316/2498 2430/2633 \nf 2314/2496 2421/2624 2430/2633 \nf 2314/2496 2430/2633 2316/2498 \nf 2430/2633 2406/2606 2403/2602 \nf 2406/2606 2430/2633 2429/2632 \nf 2421/2624 2422/2625 2429/2632 \nf 2421/2624 2429/2632 2430/2633 \nf 2357/2551 2330/2516 2331/2518 \nf 2330/2516 2357/2551 2431/2634 \nf 2355/2548 2431/2634 2357/2551 \nf 2431/2634 2355/2548 2432/2635 \nf 2431/2634 2334/2521 2330/2516 \nf 2334/2521 2431/2634 2433/2636 \nf 2432/2635 2433/2636 2431/2634 \nf 2433/2636 2432/2635 2434/2637 \nf 2436/2639 2352/2544 2435/2638 \nf 2352/2544 2436/2639 2351/2542 \nf 2435/2638 2437/2640 2436/2639 \nf 2437/2640 2435/2638 2438/2641 \nf 2432/2635 2351/2542 2436/2639 \nf 2351/2542 2432/2635 2355/2548 \nf 2436/2639 2434/2637 2432/2635 \nf 2434/2637 2436/2639 2437/2640 \nf 2441/2645 2440/2644 2439/2642 \nf 2440/2644 2441/2645 2442/2647 \nf 2439/2642 2444/2650 2443/2648 \nf 2444/2650 2439/2642 2440/2644 \nf 2438/2641 2439/2642 2437/2640 \nf 2439/2642 2438/2641 2441/2645 \nf 2437/2640 2443/2648 2434/2637 \nf 2443/2648 2437/2640 2439/2642 \nf 2446/2653 2445/2652 2337/2524 \nf 2445/2652 2336/2523 2337/2524 \nf 2433/2636 2337/2524 2334/2521 \nf 2337/2524 2433/2636 2446/2653 \nf 2443/2648 2444/2650 2446/2653 \nf 2444/2650 2445/2652 2446/2653 \nf 2434/2637 2446/2653 2433/2636 \nf 2446/2653 2434/2637 2443/2648 \nf 2447/2654 2331/2517 2329/2514 \nf 2331/2517 2447/2654 2358/2553 \nf 2325/2509 2447/2654 2329/2514 \nf 2447/2654 2325/2509 2448/2655 \nf 2447/2654 2361/2556 2358/2553 \nf 2361/2556 2447/2654 2449/2656 \nf 2448/2655 2449/2656 2447/2654 \nf 2449/2656 2448/2655 2450/2657 \nf 2452/2659 2320/2502 2451/2658 \nf 2320/2502 2452/2659 2322/2505 \nf 2451/2658 2453/2660 2452/2659 \nf 2453/2660 2451/2658 2454/2661 \nf 2322/2505 2448/2655 2325/2509 \nf 2448/2655 2322/2505 2452/2659 \nf 2452/2659 2450/2657 2448/2655 \nf 2450/2657 2452/2659 2453/2660 \nf 2456/2663 2389/2584 2455/2662 \nf 2389/2584 2456/2663 2391/2586 \nf 2455/2662 2385/2580 2457/2664 \nf 2385/2580 2455/2662 2389/2584 \nf 2454/2661 2455/2662 2453/2660 \nf 2455/2662 2454/2661 2456/2663 \nf 2453/2660 2457/2664 2450/2657 \nf 2457/2664 2453/2660 2455/2662 \nf 2458/2665 2272/2448 2362/2557 \nf 2272/2448 2458/2665 2383/2578 \nf 2449/2656 2362/2557 2361/2556 \nf 2362/2557 2449/2656 2458/2665 \nf 2457/2664 2383/2578 2458/2665 \nf 2383/2578 2457/2664 2385/2580 \nf 2450/2657 2458/2665 2449/2656 \nf 2458/2665 2450/2657 2457/2664 \nf 2459/2666 2336/2523 2445/2651 \nf 2336/2523 2459/2666 2376/2571 \nf 2460/2667 2445/2651 2444/2649 \nf 2445/2651 2460/2667 2459/2666 \nf 2459/2666 2461/2668 2376/2571 \nf 2379/2574 2376/2571 2461/2668 \nf 2460/2667 2462/2669 2459/2666 \nf 2459/2666 2462/2669 2461/2668 \nf 2442/2646 2463/2670 2440/2643 \nf 2440/2643 2463/2670 2464/2671 \nf 2463/2670 2465/2672 2464/2671 \nf 2464/2671 2465/2672 2466/2673 \nf 2464/2671 2444/2649 2440/2643 \nf 2444/2649 2464/2671 2460/2667 \nf 2464/2671 2466/2673 2460/2667 \nf 2460/2667 2466/2673 2462/2669 \nf 2467/2674 2303/2485 2301/2483 \nf 2303/2485 2467/2674 2468/2675 \nf 2469/2676 2301/2483 2300/2482 \nf 2301/2483 2469/2676 2467/2674 \nf 2468/2675 2466/2673 2465/2672 \nf 2466/2673 2468/2675 2467/2674 \nf 2467/2674 2462/2669 2466/2673 \nf 2462/2669 2467/2674 2469/2676 \nf 2382/2577 2297/2479 2295/2477 \nf 2297/2479 2382/2577 2470/2677 \nf 2379/2574 2470/2677 2382/2577 \nf 2470/2677 2379/2574 2461/2668 \nf 2470/2677 2300/2482 2297/2479 \nf 2300/2482 2470/2677 2469/2676 \nf 2469/2676 2461/2668 2462/2669 \nf 2461/2668 2469/2676 2470/2677 \nf 2473/2681 2472/2679 2471/2678 \nf 2472/2679 2473/2681 2474/2683 \nf 2476/2685 2472/2679 2475/2684 \nf 2472/2679 2476/2685 2471/2678 \nf 2474/2683 2477/2686 2472/2679 \nf 2477/2686 2474/2683 2478/2688 \nf 2475/2684 2472/2679 2479/2689 \nf 2477/2686 2479/2689 2472/2679 \nf 2482/2692 2481/2691 2480/2690 \nf 2483/2693 2480/2690 2481/2691 \nf 2480/2690 2483/2693 2484/2694 \nf 2485/2695 2484/2694 2483/2693 \nf 2481/2691 2476/2685 2483/2693 \nf 2475/2684 2483/2693 2476/2685 \nf 2483/2693 2475/2684 2485/2695 \nf 2479/2689 2485/2695 2475/2684 \nf 2488/2698 2487/2697 2486/2696 \nf 2487/2697 2488/2698 2489/2699 \nf 2486/2696 2491/2701 2490/2700 \nf 2491/2701 2486/2696 2487/2697 \nf 2489/2699 2485/2695 2487/2697 \nf 2485/2695 2489/2699 2484/2694 \nf 2487/2697 2479/2689 2491/2701 \nf 2479/2689 2487/2697 2485/2695 \nf 2494/2705 2493/2704 2492/2703 \nf 2492/2703 2495/2706 2494/2705 \nf 2493/2704 2477/2686 2478/2688 \nf 2478/2688 2492/2703 2493/2704 \nf 2490/2700 2493/2704 2494/2705 \nf 2493/2704 2490/2700 2491/2701 \nf 2491/2701 2477/2686 2493/2704 \nf 2477/2686 2491/2701 2479/2689 \nf 2498/2711 2497/2709 2496/2707 \nf 2496/2707 2497/2709 2499/2712 \nf 2501/2715 2498/2711 2500/2713 \nf 2500/2713 2498/2711 2496/2707 \nf 2502/2716 2496/2707 2499/2712 \nf 2502/2716 2499/2712 2503/2717 \nf 2504/2718 2500/2713 2496/2707 \nf 2504/2718 2496/2707 2502/2716 \nf 2507/2722 2506/2720 2505/2719 \nf 2506/2720 2507/2722 2508/2724 \nf 2509/2725 2505/2719 2506/2720 \nf 2509/2725 2506/2720 2510/2726 \nf 2508/2724 2501/2715 2506/2720 \nf 2506/2720 2501/2715 2500/2713 \nf 2510/2726 2506/2720 2500/2713 \nf 2510/2726 2500/2713 2504/2718 \nf 2513/2729 2512/2728 2511/2727 \nf 2513/2729 2511/2727 2514/2730 \nf 2514/2730 2511/2727 2515/2731 \nf 2514/2730 2515/2731 2516/2732 \nf 2512/2728 2509/2725 2510/2726 \nf 2512/2728 2510/2726 2511/2727 \nf 2511/2727 2510/2726 2504/2718 \nf 2511/2727 2504/2718 2515/2731 \nf 2519/2735 2518/2734 2517/2733 \nf 2519/2735 2517/2733 2520/2736 \nf 2518/2734 2502/2716 2503/2717 \nf 2518/2734 2503/2717 2517/2733 \nf 2516/2732 2515/2731 2518/2734 \nf 2516/2732 2518/2734 2519/2735 \nf 2515/2731 2504/2718 2502/2716 \nf 2515/2731 2502/2716 2518/2734 \nf 2521/2737 2474/2682 2473/2680 \nf 2474/2682 2521/2737 2522/2738 \nf 2522/2738 2478/2687 2474/2682 \nf 2478/2687 2522/2738 2523/2739 \nf 2522/2738 2525/2741 2524/2740 \nf 2525/2741 2522/2738 2521/2737 \nf 2523/2739 2524/2740 2526/2742 \nf 2524/2740 2523/2739 2522/2738 \nf 2527/2743 2495/2706 2492/2702 \nf 2495/2706 2527/2743 2528/2744 \nf 2528/2744 2530/2746 2529/2745 \nf 2530/2746 2528/2744 2527/2743 \nf 2523/2739 2492/2702 2478/2687 \nf 2492/2702 2523/2739 2527/2743 \nf 2527/2743 2526/2742 2530/2746 \nf 2526/2742 2527/2743 2523/2739 \nf 2531/2747 2508/2723 2507/2721 \nf 2508/2723 2531/2747 2532/2748 \nf 2532/2748 2501/2714 2508/2723 \nf 2501/2714 2532/2748 2533/2749 \nf 2529/2745 2530/2746 2531/2747 \nf 2530/2746 2532/2748 2531/2747 \nf 2530/2746 2533/2749 2532/2748 \nf 2533/2749 2530/2746 2526/2742 \nf 2534/2750 2497/2708 2498/2710 \nf 2497/2708 2534/2750 2535/2751 \nf 2524/2740 2535/2751 2534/2750 \nf 2535/2751 2524/2740 2525/2741 \nf 2533/2749 2498/2710 2501/2714 \nf 2498/2710 2533/2749 2534/2750 \nf 2526/2742 2534/2750 2533/2749 \nf 2534/2750 2526/2742 2524/2740 \nf 2538/2755 2537/2754 2536/2752 \nf 2537/2754 2538/2755 2539/2757 \nf 2540/2758 2539/2757 2538/2755 \nf 2539/2757 2540/2758 2541/2760 \nf 2536/2752 2542/2761 2538/2755 \nf 2542/2761 2536/2752 2543/2762 \nf 2538/2755 2544/2763 2540/2758 \nf 2544/2763 2538/2755 2542/2761 \nf 2547/2767 2546/2765 2545/2764 \nf 2547/2767 2545/2764 2548/2769 \nf 2545/2764 2550/2771 2549/2770 \nf 2550/2771 2545/2764 2546/2765 \nf 2541/2760 2540/2758 2546/2765 \nf 2541/2760 2546/2765 2547/2767 \nf 2540/2758 2550/2771 2546/2765 \nf 2550/2771 2540/2758 2544/2763 \nf 2553/2774 2552/2773 2551/2772 \nf 2552/2773 2554/2776 2551/2772 \nf 2552/2773 2555/2777 2554/2776 \nf 2555/2777 2556/2779 2554/2776 \nf 2549/2770 2550/2771 2553/2774 \nf 2550/2771 2552/2773 2553/2774 \nf 2550/2771 2544/2763 2552/2773 \nf 2544/2763 2555/2777 2552/2773 \nf 2559/2783 2558/2782 2557/2781 \nf 2558/2782 2560/2785 2557/2781 \nf 2542/2761 2543/2762 2559/2783 \nf 2543/2762 2558/2782 2559/2783 \nf 2555/2777 2559/2783 2556/2779 \nf 2559/2783 2557/2781 2556/2779 \nf 2544/2763 2542/2761 2555/2777 \nf 2542/2761 2559/2783 2555/2777 \nf 2562/2787 2482/2692 2561/2786 \nf 2480/2690 2561/2786 2482/2692 \nf 2564/2789 2562/2787 2563/2788 \nf 2561/2786 2563/2788 2562/2787 \nf 2561/2786 2480/2690 2565/2790 \nf 2484/2694 2565/2790 2480/2690 \nf 2563/2788 2561/2786 2566/2791 \nf 2565/2790 2566/2791 2561/2786 \nf 2569/2796 2568/2794 2567/2793 \nf 2568/2794 2569/2796 2570/2797 \nf 2567/2793 2572/2800 2571/2799 \nf 2572/2800 2567/2793 2568/2794 \nf 2570/2797 2563/2788 2568/2794 \nf 2563/2788 2570/2797 2564/2789 \nf 2568/2794 2566/2791 2572/2800 \nf 2566/2791 2568/2794 2563/2788 \nf 2575/2804 2574/2803 2573/2801 \nf 2574/2803 2575/2804 2548/2768 \nf 2575/2804 2577/2806 2576/2805 \nf 2577/2806 2575/2804 2573/2801 \nf 2571/2799 2573/2801 2574/2803 \nf 2573/2801 2571/2799 2572/2800 \nf 2572/2800 2577/2806 2573/2801 \nf 2577/2806 2572/2800 2566/2791 \nf 2578/2807 2489/2699 2488/2698 \nf 2489/2699 2578/2807 2579/2808 \nf 2579/2808 2484/2694 2489/2699 \nf 2484/2694 2579/2808 2565/2790 \nf 2576/2805 2579/2808 2578/2807 \nf 2579/2808 2576/2805 2577/2806 \nf 2577/2806 2565/2790 2579/2808 \nf 2565/2790 2577/2806 2566/2791 \nf 2582/2811 2581/2810 2580/2809 \nf 2581/2810 2582/2811 2583/2812 \nf 2585/2814 2580/2809 2584/2813 \nf 2580/2809 2585/2814 2582/2811 \nf 2580/2809 2587/2816 2586/2815 \nf 2587/2816 2580/2809 2581/2810 \nf 2584/2813 2586/2815 2588/2817 \nf 2586/2815 2584/2813 2580/2809 \nf 2560/2784 2589/2818 2557/2780 \nf 2589/2818 2560/2784 2590/2819 \nf 2557/2780 2591/2820 2556/2778 \nf 2591/2820 2557/2780 2589/2818 \nf 2584/2813 2589/2818 2585/2814 \nf 2589/2818 2590/2819 2585/2814 \nf 2588/2817 2589/2818 2584/2813 \nf 2589/2818 2588/2817 2591/2820 \nf 2554/2775 2592/2821 2551/2772 \nf 2592/2821 2554/2775 2593/2822 \nf 2593/2822 2594/2823 2592/2821 \nf 2594/2823 2593/2822 2595/2824 \nf 2556/2778 2593/2822 2554/2775 \nf 2593/2822 2556/2778 2591/2820 \nf 2591/2820 2595/2824 2593/2822 \nf 2595/2824 2591/2820 2588/2817 \nf 2597/2826 2513/2729 2596/2825 \nf 2513/2729 2597/2826 2598/2827 \nf 2586/2815 2598/2827 2597/2826 \nf 2598/2827 2586/2815 2587/2816 \nf 2595/2824 2596/2825 2594/2823 \nf 2596/2825 2595/2824 2597/2826 \nf 2588/2817 2597/2826 2595/2824 \nf 2597/2826 2588/2817 2586/2815 \nf 2600/2829 2486/2696 2599/2828 \nf 2486/2696 2600/2829 2488/2698 \nf 2602/2831 2599/2828 2601/2830 \nf 2599/2828 2602/2831 2600/2829 \nf 2599/2828 2490/2700 2603/2832 \nf 2490/2700 2599/2828 2486/2696 \nf 2601/2830 2603/2832 2604/2833 \nf 2603/2832 2601/2830 2599/2828 \nf 2607/2836 2606/2835 2605/2834 \nf 2606/2835 2607/2836 2608/2837 \nf 2605/2834 2610/2839 2609/2838 \nf 2610/2839 2605/2834 2606/2835 \nf 2608/2837 2601/2830 2606/2835 \nf 2601/2830 2608/2837 2602/2831 \nf 2606/2835 2604/2833 2610/2839 \nf 2604/2833 2606/2835 2601/2830 \nf 2613/2844 2612/2843 2611/2841 \nf 2612/2843 2613/2844 2614/2845 \nf 2616/2848 2614/2845 2615/2846 \nf 2614/2845 2616/2848 2612/2843 \nf 2609/2838 2614/2845 2613/2844 \nf 2614/2845 2609/2838 2610/2839 \nf 2610/2839 2615/2846 2614/2845 \nf 2615/2846 2610/2839 2604/2833 \nf 2495/2706 2617/2849 2494/2705 \nf 2617/2849 2495/2706 2618/2851 \nf 2603/2832 2494/2705 2617/2849 \nf 2494/2705 2603/2832 2490/2700 \nf 2618/2851 2615/2846 2617/2849 \nf 2615/2846 2618/2851 2616/2848 \nf 2604/2833 2617/2849 2615/2846 \nf 2617/2849 2604/2833 2603/2832 \nf 2620/2854 2505/2719 2619/2852 \nf 2505/2719 2620/2854 2507/2722 \nf 2622/2857 2619/2852 2621/2855 \nf 2619/2852 2622/2857 2620/2854 \nf 2623/2858 2619/2852 2505/2719 \nf 2623/2858 2505/2719 2509/2725 \nf 2621/2855 2623/2858 2624/2859 \nf 2623/2858 2621/2855 2619/2852 \nf 2627/2863 2626/2861 2625/2860 \nf 2626/2861 2627/2863 2628/2865 \nf 2625/2860 2630/2867 2629/2866 \nf 2630/2867 2625/2860 2626/2861 \nf 2628/2865 2621/2855 2626/2861 \nf 2621/2855 2628/2865 2622/2857 \nf 2626/2861 2624/2859 2630/2867 \nf 2624/2859 2626/2861 2621/2855 \nf 2583/2812 2632/2869 2631/2868 \nf 2583/2812 2631/2868 2581/2810 \nf 2581/2810 2631/2868 2633/2870 \nf 2581/2810 2633/2870 2587/2816 \nf 2630/2867 2632/2869 2629/2866 \nf 2632/2869 2630/2867 2631/2868 \nf 2624/2859 2631/2868 2630/2867 \nf 2631/2868 2624/2859 2633/2870 \nf 2598/2827 2634/2871 2512/2728 \nf 2598/2827 2512/2728 2513/2729 \nf 2634/2871 2623/2858 2509/2725 \nf 2634/2871 2509/2725 2512/2728 \nf 2587/2816 2633/2870 2634/2871 \nf 2587/2816 2634/2871 2598/2827 \nf 2623/2858 2633/2870 2624/2859 \nf 2633/2870 2623/2858 2634/2871 \nf 2528/2744 2618/2850 2495/2706 \nf 2618/2850 2528/2744 2635/2872 \nf 2636/2873 2618/2850 2635/2872 \nf 2618/2850 2636/2873 2616/2847 \nf 2528/2744 2637/2874 2635/2872 \nf 2637/2874 2528/2744 2529/2745 \nf 2635/2872 2638/2875 2636/2873 \nf 2638/2875 2635/2872 2637/2874 \nf 2640/2877 2612/2842 2639/2876 \nf 2612/2842 2640/2877 2611/2840 \nf 2639/2876 2641/2878 2640/2877 \nf 2641/2878 2639/2876 2642/2879 \nf 2639/2876 2616/2847 2636/2873 \nf 2616/2847 2639/2876 2612/2842 \nf 2636/2873 2642/2879 2639/2876 \nf 2642/2879 2636/2873 2638/2875 \nf 2627/2862 2644/2881 2643/2880 \nf 2627/2862 2643/2880 2628/2864 \nf 2628/2864 2643/2880 2645/2882 \nf 2628/2864 2645/2882 2622/2856 \nf 2641/2878 2642/2879 2644/2881 \nf 2642/2879 2643/2880 2644/2881 \nf 2642/2879 2638/2875 2643/2880 \nf 2638/2875 2645/2882 2643/2880 \nf 2620/2853 2646/2883 2531/2747 \nf 2531/2747 2507/2721 2620/2853 \nf 2637/2874 2529/2745 2646/2883 \nf 2529/2745 2531/2747 2646/2883 \nf 2622/2856 2645/2882 2646/2883 \nf 2646/2883 2620/2853 2622/2856 \nf 2638/2875 2637/2874 2645/2882 \nf 2637/2874 2646/2883 2645/2882 \nf 2574/2802 2545/2764 2647/2884 \nf 2545/2764 2574/2802 2548/2769 \nf 2571/2798 2647/2884 2648/2885 \nf 2647/2884 2571/2798 2574/2802 \nf 2647/2884 2549/2770 2649/2886 \nf 2549/2770 2647/2884 2545/2764 \nf 2648/2885 2649/2886 2650/2887 \nf 2649/2886 2648/2885 2647/2884 \nf 2569/2795 2652/2889 2651/2888 \nf 2652/2889 2569/2795 2567/2792 \nf 2651/2888 2654/2891 2653/2890 \nf 2654/2891 2651/2888 2652/2889 \nf 2567/2792 2648/2885 2652/2889 \nf 2648/2885 2567/2792 2571/2798 \nf 2652/2889 2650/2887 2654/2891 \nf 2650/2887 2652/2889 2648/2885 \nf 2657/2896 2656/2895 2655/2893 \nf 2656/2895 2657/2896 2658/2897 \nf 2658/2897 2659/2899 2656/2895 \nf 2659/2899 2658/2897 2660/2900 \nf 2653/2890 2658/2897 2657/2896 \nf 2658/2897 2653/2890 2654/2891 \nf 2654/2891 2660/2900 2658/2897 \nf 2660/2900 2654/2891 2650/2887 \nf 2662/2903 2553/2774 2661/2902 \nf 2553/2774 2551/2772 2661/2902 \nf 2649/2886 2553/2774 2662/2903 \nf 2553/2774 2649/2886 2549/2770 \nf 2660/2900 2661/2902 2659/2899 \nf 2661/2902 2660/2900 2662/2903 \nf 2650/2887 2662/2903 2660/2900 \nf 2662/2903 2650/2887 2649/2886 \nf 2547/2766 2548/2768 2663/2904 \nf 2663/2904 2548/2768 2575/2804 \nf 2541/2759 2663/2904 2664/2905 \nf 2663/2904 2541/2759 2547/2766 \nf 2663/2904 2576/2805 2665/2906 \nf 2576/2805 2663/2904 2575/2804 \nf 2664/2905 2665/2906 2666/2907 \nf 2665/2906 2664/2905 2663/2904 \nf 2537/2753 2668/2909 2667/2908 \nf 2668/2909 2537/2753 2539/2756 \nf 2667/2908 2670/2911 2669/2910 \nf 2670/2911 2667/2908 2668/2909 \nf 2539/2756 2664/2905 2668/2909 \nf 2664/2905 2539/2756 2541/2759 \nf 2668/2909 2666/2907 2670/2911 \nf 2666/2907 2668/2909 2664/2905 \nf 2671/2912 2608/2837 2607/2836 \nf 2608/2837 2671/2912 2672/2913 \nf 2672/2913 2602/2831 2608/2837 \nf 2602/2831 2672/2913 2673/2914 \nf 2669/2910 2672/2913 2671/2912 \nf 2672/2913 2669/2910 2670/2911 \nf 2670/2911 2673/2914 2672/2913 \nf 2673/2914 2670/2911 2666/2907 \nf 2674/2915 2488/2698 2600/2829 \nf 2488/2698 2674/2915 2578/2807 \nf 2665/2906 2578/2807 2674/2915 \nf 2578/2807 2665/2906 2576/2805 \nf 2673/2914 2600/2829 2602/2831 \nf 2600/2829 2673/2914 2674/2915 \nf 2666/2907 2674/2915 2673/2914 \nf 2674/2915 2666/2907 2665/2906 \nf 2551/2772 2675/2916 2661/2901 \nf 2675/2916 2551/2772 2592/2821 \nf 2661/2901 2676/2917 2659/2898 \nf 2676/2917 2661/2901 2675/2916 \nf 2592/2821 2594/2823 2677/2918 \nf 2592/2821 2677/2918 2675/2916 \nf 2678/2919 2675/2916 2677/2918 \nf 2675/2916 2678/2919 2676/2917 \nf 2656/2894 2679/2920 2655/2892 \nf 2679/2920 2656/2894 2680/2921 \nf 2682/2923 2680/2921 2681/2922 \nf 2680/2921 2682/2923 2679/2920 \nf 2659/2898 2680/2921 2656/2894 \nf 2680/2921 2659/2898 2676/2917 \nf 2681/2922 2676/2917 2678/2919 \nf 2676/2917 2681/2922 2680/2921 \nf 2683/2924 2519/2735 2520/2736 \nf 2683/2924 2520/2736 2684/2925 \nf 2685/2926 2516/2732 2519/2735 \nf 2685/2926 2519/2735 2683/2924 \nf 2681/2922 2683/2924 2684/2925 \nf 2681/2922 2684/2925 2682/2923 \nf 2678/2919 2685/2926 2683/2924 \nf 2678/2919 2683/2924 2681/2922 \nf 2596/2825 2513/2729 2514/2730 \nf 2596/2825 2514/2730 2686/2927 \nf 2594/2823 2596/2825 2686/2927 \nf 2594/2823 2686/2927 2677/2918 \nf 2686/2927 2514/2730 2516/2732 \nf 2686/2927 2516/2732 2685/2926 \nf 2677/2918 2686/2927 2685/2926 \nf 2677/2918 2685/2926 2678/2919 \nf 2473/2681 2471/2678 2255/2428 \nf 2255/2428 2256/2430 2473/2681 \nf 2471/2678 2476/2685 2259/2434 \nf 2259/2434 2255/2428 2471/2678 \nf 2481/2691 2482/2692 2267/2443 \nf 2481/2691 2267/2443 2264/2440 \nf 2476/2685 2481/2691 2264/2440 \nf 2476/2685 2264/2440 2259/2434 \nf 2497/2709 2283/2462 2499/2712 \nf 2283/2462 2497/2709 2281/2460 \nf 2503/2717 2499/2712 2283/2462 \nf 2283/2462 2287/2467 2503/2717 \nf 2520/2736 2517/2733 2302/2484 \nf 2302/2484 2303/2485 2520/2736 \nf 2517/2733 2503/2717 2287/2467 \nf 2287/2467 2302/2484 2517/2733 \nf 2521/2737 2473/2680 2256/2429 \nf 2256/2429 2305/2487 2521/2737 \nf 2525/2741 2305/2487 2308/2490 \nf 2305/2487 2525/2741 2521/2737 \nf 2535/2751 2281/2459 2497/2708 \nf 2281/2459 2535/2751 2318/2500 \nf 2525/2741 2318/2500 2535/2751 \nf 2318/2500 2525/2741 2308/2490 \nf 2536/2752 2537/2754 2320/2503 \nf 2320/2503 2323/2507 2536/2752 \nf 2543/2762 2536/2752 2323/2507 \nf 2323/2507 2327/2512 2543/2762 \nf 2344/2535 2558/2782 2343/2533 \nf 2558/2782 2344/2535 2560/2785 \nf 2343/2533 2543/2762 2327/2512 \nf 2543/2762 2343/2533 2558/2782 \nf 2482/2692 2562/2787 2346/2537 \nf 2482/2692 2346/2537 2267/2443 \nf 2562/2787 2564/2789 2348/2539 \nf 2348/2539 2346/2537 2562/2787 \nf 2569/2796 2354/2547 2570/2797 \nf 2354/2547 2569/2796 2352/2545 \nf 2564/2789 2570/2797 2354/2547 \nf 2354/2547 2348/2539 2564/2789 \nf 2582/2811 2364/2559 2583/2812 \nf 2364/2559 2582/2811 2366/2561 \nf 2585/2814 2366/2561 2582/2811 \nf 2366/2561 2585/2814 2368/2563 \nf 2560/2784 2374/2569 2590/2819 \nf 2374/2569 2560/2784 2344/2534 \nf 2590/2819 2368/2563 2585/2814 \nf 2368/2563 2590/2819 2374/2569 \nf 2391/2586 2605/2834 2392/2587 \nf 2605/2834 2391/2586 2607/2836 \nf 2392/2587 2609/2838 2394/2589 \nf 2609/2838 2392/2587 2605/2834 \nf 2397/2593 2611/2841 2398/2595 \nf 2611/2841 2397/2593 2613/2844 \nf 2394/2589 2613/2844 2397/2593 \nf 2613/2844 2394/2589 2609/2838 \nf 2409/2610 2410/2612 2627/2863 \nf 2409/2610 2627/2863 2625/2860 \nf 2629/2866 2409/2610 2625/2860 \nf 2409/2610 2629/2866 2413/2616 \nf 2583/2812 2416/2619 2632/2869 \nf 2416/2619 2583/2812 2364/2559 \nf 2632/2869 2413/2616 2629/2866 \nf 2413/2616 2632/2869 2416/2619 \nf 2611/2840 2640/2877 2423/2626 \nf 2423/2626 2398/2594 2611/2840 \nf 2640/2877 2641/2878 2425/2628 \nf 2425/2628 2423/2626 2640/2877 \nf 2644/2881 2410/2611 2428/2631 \nf 2410/2611 2644/2881 2627/2862 \nf 2428/2631 2641/2878 2644/2881 \nf 2641/2878 2428/2631 2425/2628 \nf 2651/2888 2352/2544 2569/2795 \nf 2352/2544 2651/2888 2435/2638 \nf 2435/2638 2653/2890 2438/2641 \nf 2653/2890 2435/2638 2651/2888 \nf 2655/2893 2441/2645 2657/2896 \nf 2441/2645 2655/2893 2442/2647 \nf 2657/2896 2438/2641 2653/2890 \nf 2438/2641 2657/2896 2441/2645 \nf 2451/2658 2537/2753 2667/2908 \nf 2537/2753 2451/2658 2320/2502 \nf 2451/2658 2669/2910 2454/2661 \nf 2669/2910 2451/2658 2667/2908 \nf 2456/2663 2607/2836 2391/2586 \nf 2607/2836 2456/2663 2671/2912 \nf 2454/2661 2671/2912 2456/2663 \nf 2671/2912 2454/2661 2669/2910 \nf 2655/2892 2463/2670 2442/2646 \nf 2463/2670 2655/2892 2679/2920 \nf 2465/2672 2463/2670 2679/2920 \nf 2465/2672 2679/2920 2682/2923 \nf 2684/2925 2520/2736 2303/2485 \nf 2303/2485 2468/2675 2684/2925 \nf 2682/2923 2684/2925 2468/2675 \nf 2468/2675 2465/2672 2682/2923 \n\ng box5 top ribbon group11 polySurface60\nusemtl ribbon1\nv 0.022595 0.13451 -0.007056\nv 0.019458 0.1356 -0.013782\nv 0.020763 0.134844 -0.006493\nv 0.020611 0.135271 -0.014138\nv 0.024529 0.134165 -0.007648\nv 0.02191 0.13492 -0.014541\nv 0.027072 0.13352 -0.000726\nv 0.024569 0.133853 0.000037\nv 0.022143 0.134179 0.000779\nv 0.037831 0.148832 0.046543\nv 0.04044 0.152036 0.03982\nv 0.041944 0.148752 0.045287\nv 0.036367 0.152114 0.041063\nv 0.033717 0.148911 0.047799\nv 0.032295 0.152193 0.042307\nv 0.034277 0.144236 0.050128\nv 0.03839 0.144157 0.048872\nv 0.042504 0.144077 0.047616\nv 0.041693 0.138835 0.045071\nv 0.03758 0.138914 0.046326\nv 0.033466 0.138994 0.047582\nv 0.031919 0.1348 0.042158\nv 0.035992 0.134722 0.040915\nv 0.040065 0.134643 0.039672\nv 0.030071 0.149915 0.018635\nv 0.02796 0.146454 0.011321\nv 0.033602 0.149996 0.01756\nv 0.031212 0.146651 0.010331\nv 0.026564 0.149834 0.019702\nv 0.024756 0.146259 0.012299\nv 0.028519 0.152781 0.027479\nv 0.032277 0.152746 0.026335\nv 0.036042 0.152711 0.025187\nv 0.034187 0.132989 0.034549\nv 0.038137 0.132913 0.033344\nv 0.030237 0.133066 0.035755\nv 0.02853 0.132778 0.028896\nv 0.032288 0.13268 0.027752\nv 0.03605 0.132582 0.026605\nv 0.022472 0.140066 -0.007912\nv 0.021963 0.138707 -0.014623\nv 0.024409 0.140286 -0.008505\nv 0.020673 0.138505 -0.014226\nv 0.020621 0.139851 -0.007344\nv 0.019488 0.13831 -0.01386\nv 0.021828 0.141557 -0.00086\nv 0.024266 0.141788 -0.001605\nv 0.026776 0.142021 -0.002372\nv 0.02441 0.135506 -0.015301\nv 0.028323 0.134698 -0.008802\nv 0.02553 0.135182 -0.015595\nv 0.030138 0.134367 -0.009329\nv 0.026716 0.134547 -0.015928\nv 0.031995 0.133733 -0.00988\nv 0.036877 0.133056 -0.003696\nv 0.034433 0.133664 -0.002957\nv 0.03202 0.133988 -0.002234\nv 0.026477 0.134435 -0.008248\nv 0.023231 0.135222 -0.014957\nv 0.029582 0.133756 -0.001494\nv 0.018861 0.13297 0.017092\nv 0.014994 0.133131 0.010665\nv 0.015622 0.132939 0.018079\nv 0.017912 0.133198 0.009777\nv 0.012094 0.133187 0.01155\nv 0.012394 0.133001 0.019064\nv 0.012252 0.133525 0.003803\nv 0.01473 0.133477 0.003047\nv 0.017231 0.133571 0.002288\nv 0.025293 0.133311 0.015118\nv 0.02082 0.133509 0.008887\nv 0.022093 0.133188 0.016101\nv 0.023682 0.133697 0.008008\nv 0.019717 0.133947 0.001528\nv 0.021377 0.14915 0.051566\nv 0.024149 0.15235 0.044793\nv 0.02549 0.14907 0.050311\nv 0.020076 0.152429 0.046037\nv 0.017264 0.149228 0.052824\nv 0.016005 0.152507 0.047283\nv 0.017823 0.144554 0.055151\nv 0.021937 0.144475 0.053895\nv 0.02605 0.144395 0.052639\nv 0.029604 0.148991 0.049055\nv 0.028222 0.152272 0.04355\nv 0.030163 0.144316 0.051383\nv 0.050731 0.143918 0.045104\nv 0.050171 0.148593 0.042776\nv 0.054844 0.143839 0.043849\nv 0.054284 0.148514 0.04152\nv 0.058958 0.14376 0.042593\nv 0.058398 0.148434 0.040264\nv 0.056731 0.15172 0.034848\nv 0.052658 0.151799 0.03609\nv 0.048585 0.151878 0.037333\nv 0.046617 0.143998 0.04636\nv 0.046057 0.148673 0.044032\nv 0.044513 0.151957 0.038577\nv 0.025239 0.139153 0.050094\nv 0.021126 0.139232 0.051349\nv 0.017013 0.139313 0.052606\nv 0.01563 0.135117 0.047135\nv 0.019701 0.135036 0.045888\nv 0.023774 0.134958 0.044645\nv 0.029353 0.139073 0.048838\nv 0.027847 0.134879 0.043402\nv 0.04992 0.138676 0.042559\nv 0.054034 0.138596 0.041303\nv 0.04821 0.134485 0.037185\nv 0.052283 0.134407 0.035942\nv 0.058147 0.138517 0.040047\nv 0.056356 0.134329 0.0347\nv 0.045807 0.138755 0.043815\nv 0.044137 0.134564 0.038428\nv 0.016038 0.150486 0.022929\nv 0.01511 0.147223 0.015254\nv 0.01956 0.150343 0.021852\nv 0.018349 0.147031 0.014267\nv 0.01252 0.150555 0.024004\nv 0.01188 0.147285 0.016238\nv 0.013485 0.153185 0.032081\nv 0.017245 0.153112 0.030929\nv 0.021006 0.15302 0.029778\nv 0.023071 0.150051 0.020774\nv 0.02157 0.14658 0.01328\nv 0.024765 0.152891 0.028626\nv 0.050249 0.15314 0.029251\nv 0.046298 0.153217 0.030455\nv 0.054201 0.153064 0.028048\nv 0.047314 0.152455 0.021742\nv 0.051075 0.152458 0.020601\nv 0.043559 0.15249 0.022887\nv 0.042348 0.153293 0.031662\nv 0.038398 0.153369 0.032868\nv 0.039804 0.152601 0.024037\nv 0.018386 0.133295 0.039375\nv 0.022336 0.133219 0.038168\nv 0.014437 0.133372 0.040584\nv 0.013492 0.132993 0.033495\nv 0.017252 0.132921 0.032346\nv 0.021013 0.13286 0.031196\nv 0.026287 0.133142 0.036962\nv 0.024773 0.132825 0.030044\nv 0.040956 0.132661 0.017759\nv 0.044455 0.132494 0.016695\nv 0.038185 0.133062 0.011182\nv 0.041379 0.132815 0.010216\nv 0.04796 0.132226 0.015632\nv 0.044588 0.132381 0.009244\nv 0.051084 0.132267 0.022016\nv 0.047326 0.132389 0.023159\nv 0.04357 0.132487 0.024305\nv 0.031734 0.132814 0.013153\nv 0.033923 0.132597 0.019911\nv 0.037448 0.132629 0.018831\nv 0.034977 0.132939 0.012159\nv 0.039813 0.132535 0.025454\nv 0.014976 0.140724 -0.00562\nv 0.015825 0.13905 -0.012738\nv 0.016899 0.140559 -0.006197\nv 0.017106 0.138912 -0.013112\nv 0.013074 0.14076 -0.005045\nv 0.014571 0.139073 -0.012363\nv 0.011964 0.142587 0.002148\nv 0.014443 0.14254 0.001396\nv 0.016939 0.142352 0.00064\nv 0.018793 0.140139 -0.006775\nv 0.018337 0.138552 -0.01349\nv 0.01941 0.141883 -0.000114\nv 0.040842 0.146208 0.007399\nv 0.037648 0.14601 0.008364\nv 0.037624 0.143611 0.001176\nv 0.034767 0.143375 0.002037\nv 0.044063 0.146663 0.006423\nv 0.040516 0.144137 0.000298\nv 0.036593 0.14211 -0.005346\nv 0.034129 0.141599 -0.004599\nv 0.031704 0.141366 -0.003874\nv 0.028991 0.14407 0.003801\nv 0.034453 0.146328 0.009338\nv 0.03191 0.143719 0.002907\nv 0.029275 0.14169 -0.003138\nv 0.029463 0.133096 0.006243\nv 0.026544 0.133398 0.007134\nv 0.028494 0.133064 0.014141\nv 0.023193 0.143599 0.005571\nv 0.026061 0.143833 0.004695\nv 0.040985 0.132632 0.00274\nv 0.038109 0.133176 0.003613\nv 0.035257 0.133474 0.004474\nv 0.032387 0.133286 0.005348\nv 0.013187 0.134081 -0.004182\nv 0.015091 0.134044 -0.004759\nv 0.014513 0.134745 -0.012279\nv 0.015775 0.134721 -0.012653\nv 0.017026 0.134161 -0.005339\nv 0.017079 0.134864 -0.013031\nv 0.018936 0.134582 -0.005923\nv 0.018327 0.135318 -0.013415\nv 0.011632 0.144697 0.009101\nv 0.014534 0.144642 0.008218\nv 0.01745 0.144439 0.007332\nv 0.020344 0.143945 0.006447\nv 0.031898 0.140393 -0.01075\nv 0.030018 0.139923 -0.010188\nv 0.026808 0.138827 -0.016036\nv 0.025597 0.138412 -0.015691\nv 0.028181 0.139705 -0.009652\nv 0.024436 0.138214 -0.015373\nv 0.026336 0.13999 -0.009098\nv 0.023249 0.138453 -0.015021\nv 0.030497 0.153522 0.035279\nv 0.034447 0.153446 0.034074\nv 0.030401 0.132765 0.020983\nv 0.026896 0.132933 0.022051\nv 0.014697 0.153827 0.040109\nv 0.018647 0.153751 0.0389\nv 0.022597 0.153675 0.037693\nv 0.026547 0.153598 0.036486\nv 0.047636 0.149875 0.013285\nv 0.044124 0.149644 0.014348\nv 0.040625 0.149562 0.01541\nv 0.037125 0.149778 0.016481\nv 0.012837 0.132904 0.026354\nv 0.016354 0.132836 0.02528\nv 0.019876 0.132818 0.024203\nv 0.023393 0.132901 0.023124\nv 0.05394 0.132608 0.028523\nv 0.049988 0.132684 0.029726\nv 0.046038 0.13276 0.030931\nv 0.042088 0.132837 0.032137\nv 0.022663 0.134863 -0.00704\nv 0.020779 0.135203 -0.006464\nv 0.01948 0.135959 -0.013756\nv 0.020707 0.135619 -0.014131\nv 0.024548 0.134524 -0.007616\nv 0.021934 0.135278 -0.014507\nv 0.024622 0.134209 0.000052\nv 0.027086 0.13388 -0.000701\nv 0.022158 0.134538 0.000805\nv 0.036325 0.151776 0.040946\nv 0.03775 0.148583 0.046295\nv 0.040397 0.151697 0.039703\nv 0.041863 0.148504 0.045039\nv 0.032252 0.151855 0.042189\nv 0.033637 0.148663 0.047551\nv 0.034172 0.144236 0.049783\nv 0.038285 0.144157 0.048527\nv 0.042399 0.144077 0.047271\nv 0.041617 0.139068 0.044807\nv 0.037504 0.139147 0.046062\nv 0.03339 0.139227 0.047318\nv 0.03188 0.135125 0.042008\nv 0.035952 0.135047 0.040764\nv 0.040025 0.134968 0.039521\nv 0.031246 0.146318 0.010465\nv 0.028019 0.146122 0.01145\nv 0.033634 0.149661 0.017688\nv 0.030117 0.149581 0.018762\nv 0.024791 0.145926 0.012435\nv 0.0266 0.1495 0.019835\nv 0.032296 0.152393 0.026407\nv 0.028536 0.152429 0.027555\nv 0.036057 0.152358 0.025259\nv 0.038128 0.13327 0.03329\nv 0.034178 0.133346 0.034496\nv 0.030227 0.133422 0.035702\nv 0.028536 0.133138 0.028891\nv 0.032295 0.13304 0.027743\nv 0.036054 0.132943 0.026595\nv 0.022535 0.139719 -0.007839\nv 0.024429 0.139937 -0.008417\nv 0.021985 0.138357 -0.014537\nv 0.020748 0.138158 -0.01416\nv 0.019511 0.137959 -0.013783\nv 0.02064 0.1395 -0.007262\nv 0.024324 0.141443 -0.001519\nv 0.02185 0.14121 -0.000764\nv 0.026799 0.141675 -0.002274\nv 0.030223 0.134717 -0.009348\nv 0.028339 0.135057 -0.008771\nv 0.02564 0.135523 -0.015637\nv 0.024413 0.135864 -0.015262\nv 0.032102 0.134075 -0.009923\nv 0.026861 0.134866 -0.016012\nv 0.036958 0.133407 -0.003716\nv 0.034499 0.134018 -0.002964\nv 0.032035 0.134348 -0.002211\nv 0.023174 0.135571 -0.014884\nv 0.026443 0.13479 -0.008194\nv 0.02956 0.134114 -0.001456\nv 0.015626 0.133299 0.018086\nv 0.014998 0.133491 0.010678\nv 0.018851 0.13333 0.017102\nv 0.017895 0.133557 0.009794\nv 0.012403 0.133362 0.01907\nv 0.012104 0.133547 0.011562\nv 0.012265 0.133884 0.003823\nv 0.014734 0.133837 0.003069\nv 0.017206 0.13393 0.002315\nv 0.022079 0.133547 0.016117\nv 0.020795 0.133868 0.00891\nv 0.025305 0.133672 0.015132\nv 0.023694 0.134057 0.008025\nv 0.019683 0.134305 0.001559\nv 0.020034 0.152091 0.045919\nv 0.021296 0.148901 0.051318\nv 0.024107 0.152012 0.044676\nv 0.02541 0.148822 0.050062\nv 0.015961 0.15217 0.047163\nv 0.017183 0.148981 0.052574\nv 0.017718 0.144554 0.054806\nv 0.021831 0.144475 0.05355\nv 0.025945 0.144395 0.052294\nv 0.028179 0.151933 0.043433\nv 0.029523 0.148742 0.048807\nv 0.030058 0.144316 0.051039\nv 0.050626 0.143918 0.04476\nv 0.054739 0.143839 0.043504\nv 0.05009 0.148345 0.042528\nv 0.054204 0.148265 0.041272\nv 0.058852 0.143759 0.042248\nv 0.058317 0.148186 0.040016\nv 0.052616 0.151461 0.035973\nv 0.056688 0.151383 0.034729\nv 0.048543 0.15154 0.037216\nv 0.046512 0.143998 0.046015\nv 0.045977 0.148424 0.043783\nv 0.04447 0.151619 0.038459\nv 0.025163 0.139386 0.04983\nv 0.02105 0.139465 0.051085\nv 0.016936 0.139545 0.052341\nv 0.015589 0.13544 0.046981\nv 0.019662 0.135361 0.045738\nv 0.023734 0.135283 0.044494\nv 0.029277 0.139306 0.048574\nv 0.027807 0.135204 0.043251\nv 0.04817 0.13481 0.037034\nv 0.052243 0.134732 0.035791\nv 0.053958 0.138829 0.041039\nv 0.049844 0.138909 0.042295\nv 0.058071 0.13875 0.039783\nv 0.056316 0.134653 0.034547\nv 0.044098 0.134889 0.038277\nv 0.045731 0.138988 0.043551\nv 0.018357 0.146696 0.014401\nv 0.015137 0.146888 0.015384\nv 0.019578 0.150007 0.02198\nv 0.016065 0.150149 0.023052\nv 0.011914 0.14695 0.016368\nv 0.012551 0.150217 0.024125\nv 0.017258 0.152758 0.030998\nv 0.013498 0.152831 0.032146\nv 0.021018 0.152667 0.029851\nv 0.021573 0.146247 0.013418\nv 0.023088 0.149716 0.020907\nv 0.024777 0.152539 0.028703\nv 0.050238 0.15278 0.029235\nv 0.046287 0.152857 0.030441\nv 0.054188 0.152704 0.028029\nv 0.051097 0.152104 0.020668\nv 0.047336 0.152103 0.021816\nv 0.043575 0.152138 0.022964\nv 0.042337 0.152933 0.031647\nv 0.038387 0.153009 0.032853\nv 0.039816 0.152248 0.024112\nv 0.018376 0.133651 0.03932\nv 0.022327 0.133575 0.038114\nv 0.014426 0.133728 0.040526\nv 0.013495 0.133354 0.033482\nv 0.017255 0.133281 0.032334\nv 0.021015 0.133221 0.031186\nv 0.026277 0.133499 0.036908\nv 0.024775 0.133186 0.030038\nv 0.038197 0.133422 0.011197\nv 0.041416 0.133174 0.010213\nv 0.044477 0.132853 0.016696\nv 0.040964 0.133021 0.017769\nv 0.044632 0.132739 0.009231\nv 0.047988 0.132585 0.015624\nv 0.051093 0.132627 0.022004\nv 0.047334 0.13275 0.023151\nv 0.043575 0.132847 0.024299\nv 0.031744 0.133174 0.013166\nv 0.037448 0.132989 0.018842\nv 0.033932 0.132957 0.019916\nv 0.03497 0.133298 0.012181\nv 0.039815 0.132895 0.025447\nv 0.017055 0.138564 -0.013032\nv 0.015823 0.1387 -0.012655\nv 0.016872 0.140211 -0.00611\nv 0.014984 0.140375 -0.005533\nv 0.01459 0.138723 -0.012279\nv 0.013094 0.140411 -0.004956\nv 0.011988 0.142242 0.002249\nv 0.014457 0.142194 0.001495\nv 0.016924 0.142006 0.000741\nv 0.018282 0.138206 -0.013407\nv 0.018755 0.139792 -0.006685\nv 0.019386 0.141538 -0.000011\nv 0.04091 0.145873 0.007514\nv 0.037696 0.14327 0.001266\nv 0.037683 0.145677 0.008499\nv 0.034797 0.143034 0.00215\nv 0.044143 0.146327 0.006529\nv 0.040601 0.143797 0.000381\nv 0.036681 0.141764 -0.00529\nv 0.034202 0.141252 -0.004534\nv 0.031727 0.141019 -0.00378\nv 0.031908 0.143382 0.003033\nv 0.029019 0.143729 0.003916\nv 0.034464 0.145998 0.009482\nv 0.029263 0.141347 -0.003027\nv 0.026584 0.133757 0.007142\nv 0.029473 0.133456 0.00626\nv 0.028524 0.133423 0.014149\nv 0.02612 0.143493 0.0048\nv 0.023221 0.143258 0.005685\nv 0.03816 0.133533 0.003608\nv 0.041045 0.132987 0.002726\nv 0.03527 0.133834 0.004491\nv 0.032372 0.133645 0.005375\nv 0.013203 0.13444 -0.004153\nv 0.015093 0.134403 -0.00473\nv 0.014529 0.135104 -0.012247\nv 0.015763 0.13508 -0.012623\nv 0.016985 0.134518 -0.005307\nv 0.016999 0.135215 -0.013\nv 0.018884 0.134936 -0.005886\nv 0.018241 0.135666 -0.013378\nv 0.014554 0.144301 0.008333\nv 0.01166 0.144356 0.009216\nv 0.017446 0.144099 0.007449\nv 0.020332 0.143605 0.006567\nv 0.031994 0.140046 -0.010726\nv 0.030094 0.139573 -0.010147\nv 0.026922 0.138485 -0.016044\nv 0.025681 0.138063 -0.015666\nv 0.0282 0.139354 -0.009569\nv 0.024443 0.137864 -0.015289\nv 0.026314 0.139646 -0.008993\nv 0.023214 0.13811 -0.014913\nv 0.034436 0.153086 0.034059\nv 0.030486 0.153162 0.035265\nv 0.026907 0.133293 0.022061\nv 0.030419 0.133125 0.020988\nv 0.018635 0.153391 0.038883\nv 0.014684 0.153467 0.040089\nv 0.022585 0.153315 0.037677\nv 0.026535 0.153238 0.036471\nv 0.047695 0.149537 0.013396\nv 0.044175 0.149309 0.01447\nv 0.040658 0.149229 0.015543\nv 0.037146 0.149445 0.016616\nv 0.012844 0.133265 0.026353\nv 0.016358 0.133197 0.02528\nv 0.019873 0.133179 0.024207\nv 0.02339 0.133261 0.023134\nv 0.049979 0.133041 0.029672\nv 0.05393 0.132964 0.028466\nv 0.046029 0.133117 0.030878\nv 0.042078 0.133193 0.032084\n\nvt 0.03125 0.5 0\nvt 0 0.6 0\nvt 0.03125 0.6 0\nvt 0 0.5 0\nvt 0.03125 0.4 0\nvt 0 0.4 0\nvt 0.0625 0.4 0\nvt 0.0625 0.5 0\nvt 0.0625 0.6 0\nvt 0.625 0.5 0\nvt 0.726562 0.4 0\nvt 0.625 0.4 0\nvt 0.726562 0.5 0\nvt 0.625 0.6 0\nvt 0.726562 0.6 0\nvt 0.5 0.6 0\nvt 0.5 0.5 0\nvt 0.5 0.4 0\nvt 0.375 0.4 0\nvt 0.375 0.5 0\nvt 0.375 0.6 0\nvt 0.273438 0.6 0\nvt 0.273438 0.5 0\nvt 0.273438 0.4 0\nvt 0.84375 0.5 0\nvt 0.875 0.5 0\nvt 0.84375 0.4 0\nvt 0.875 0.4 0\nvt 0.84375 0.6 0\nvt 0.875 0.6 0\nvt 0.8125 0.6 0\nvt 0.8125 0.5 0\nvt 0.8125 0.4 0\nvt 0.21875 0.5 0\nvt 0.21875 0.4 0\nvt 0.21875 0.6 0\nvt 0.1875 0.6 0\nvt 0.1875 0.5 0\nvt 0.1875 0.4 0\nvt 0.96875 0.5 0\nvt 1 0.4 0\nvt 0.96875 0.4 0\nvt 1 0.5 0\nvt 0.96875 0.6 0\nvt 1 0.6 0\nvt 0.9375 0.6 0\nvt 0.9375 0.5 0\nvt 0.9375 0.4 0\nvt 0 0.2 0\nvt 0.03125 0.2 0\nvt 0 0.1 0\nvt 0.03125 0.1 0\nvt 0 0 0\nvt 0.03125 0 0\nvt 0.0625 0 0\nvt 0.0625 0.1 0\nvt 0.0625 0.2 0\nvt 0.03125 0.3 0\nvt 0 0.3 0\nvt 0.0625 0.3 0\nvt 0.125 0.8 0\nvt 0.09375 0.9 0\nvt 0.125 0.9 0\nvt 0.09375 0.8 0\nvt 0.09375 1 0\nvt 0.125 1 0\nvt 0.0625 1 0\nvt 0.0625 0.9 0\nvt 0.0625 0.8 0\nvt 0.125 0.6 0\nvt 0.09375 0.7 0\nvt 0.125 0.7 0\nvt 0.09375 0.6 0\nvt 0.0625 0.7 0\nvt 0.625 0.9 0\nvt 0.726562 0.8 0\nvt 0.625 0.8 0\nvt 0.726562 0.9 0\nvt 0.625 1 0\nvt 0.726562 1 0\nvt 0.5 1 0\nvt 0.5 0.9 0\nvt 0.5 0.8 0\nvt 0.625 0.7 0\nvt 0.726562 0.7 0\nvt 0.5 0.7 0\nvt 0.5 0.2 0\nvt 0.625 0.2 0\nvt 0.5 0.1 0\nvt 0.625 0.1 0\nvt 0.5 0 0\nvt 0.625 0 0\nvt 0.726562 0 0\nvt 0.726562 0.1 0\nvt 0.726562 0.2 0\nvt 0.5 0.3 0\nvt 0.625 0.3 0\nvt 0.726562 0.3 0\nvt 0.375 0.8 0\nvt 0.375 0.9 0\nvt 0.375 1 0\nvt 0.273438 1 0\nvt 0.273438 0.9 0\nvt 0.273438 0.8 0\nvt 0.375 0.7 0\nvt 0.273438 0.7 0\nvt 0.375 0.2 0\nvt 0.375 0.1 0\nvt 0.273438 0.2 0\nvt 0.273438 0.1 0\nvt 0.375 0 0\nvt 0.273438 0 0\nvt 0.375 0.3 0\nvt 0.273438 0.3 0\nvt 0.84375 0.9 0\nvt 0.875 0.9 0\nvt 0.84375 0.8 0\nvt 0.875 0.8 0\nvt 0.84375 1 0\nvt 0.875 1 0\nvt 0.8125 1 0\nvt 0.8125 0.9 0\nvt 0.8125 0.8 0\nvt 0.84375 0.7 0\nvt 0.875 0.7 0\nvt 0.8125 0.7 0\nvt 0.78125 0.1 0\nvt 0.78125 0.2 0\nvt 0.78125 0 0\nvt 0.8125 0.1 0\nvt 0.8125 0 0\nvt 0.8125 0.2 0\nvt 0.78125 0.3 0\nvt 0.78125 0.4 0\nvt 0.8125 0.3 0\nvt 0.21875 0.9 0\nvt 0.21875 0.8 0\nvt 0.21875 1 0\nvt 0.1875 1 0\nvt 0.1875 0.9 0\nvt 0.1875 0.8 0\nvt 0.21875 0.7 0\nvt 0.1875 0.7 0\nvt 0.15625 0.2 0\nvt 0.15625 0.1 0\nvt 0.125 0.2 0\nvt 0.125 0.1 0\nvt 0.15625 0 0\nvt 0.125 0 0\nvt 0.1875 0 0\nvt 0.1875 0.1 0\nvt 0.1875 0.2 0\nvt 0.125 0.4 0\nvt 0.15625 0.4 0\nvt 0.15625 0.3 0\nvt 0.125 0.3 0\nvt 0.1875 0.3 0\nvt 0.96875 0.9 0\nvt 1 0.9 0\nvt 0.96875 0.8 0\nvt 1 0.8 0\nvt 0.96875 1 0\nvt 1 1 0\nvt 0.9375 1 0\nvt 0.9375 0.9 0\nvt 0.9375 0.8 0\nvt 0.96875 0.7 0\nvt 1 0.7 0\nvt 0.9375 0.7 0\nvt 0.875 0.1 0\nvt 0.875 0.2 0\nvt 0.90625 0.1 0\nvt 0.90625 0.2 0\nvt 0.875 0 0\nvt 0.90625 0 0\nvt 0.9375 0 0\nvt 0.9375 0.1 0\nvt 0.9375 0.2 0\nvt 0.90625 0.4 0\nvt 0.875 0.3 0\nvt 0.90625 0.3 0\nvt 0.9375 0.3 0\nvt 0.09375 0.4 0\nvt 0.09375 0.5 0\nvt 0.125 0.5 0\nvt 0.90625 0.6 0\nvt 0.90625 0.5 0\nvt 0.09375 0 0\nvt 0.09375 0.1 0\nvt 0.09375 0.2 0\nvt 0.09375 0.3 0\nvt 0.03125 1 0\nvt 0.03125 0.9 0\nvt 0 1 0\nvt 0 0.9 0\nvt 0.03125 0.8 0\nvt 0 0.8 0\nvt 0.03125 0.7 0\nvt 0 0.7 0\nvt 0.90625 1 0\nvt 0.90625 0.9 0\nvt 0.90625 0.8 0\nvt 0.90625 0.7 0\nvt 0.96875 0 0\nvt 0.96875 0.1 0\nvt 1 0 0\nvt 1 0.1 0\nvt 0.96875 0.2 0\nvt 1 0.2 0\nvt 0.96875 0.3 0\nvt 1 0.3 0\nvt 0.78125 0.6 0\nvt 0.78125 0.5 0\nvt 0.15625 0.5 0\nvt 0.15625 0.6 0\nvt 0.78125 1 0\nvt 0.78125 0.9 0\nvt 0.78125 0.8 0\nvt 0.78125 0.7 0\nvt 0.84375 0 0\nvt 0.84375 0.1 0\nvt 0.84375 0.2 0\nvt 0.84375 0.3 0\nvt 0.15625 1 0\nvt 0.15625 0.9 0\nvt 0.15625 0.8 0\nvt 0.15625 0.7 0\nvt 0.21875 0 0\nvt 0.21875 0.1 0\nvt 0.21875 0.2 0\nvt 0.21875 0.3 0\nvt 0.03125 0.5 0\nvt 0.03125 0.6 0\nvt 0 0.6 0\nvt 0 0.5 0\nvt 0.03125 0.4 0\nvt 0 0.4 0\nvt 0.0625 0.5 0\nvt 0.0625 0.4 0\nvt 0.0625 0.6 0\nvt 0.726562 0.5 0\nvt 0.625 0.5 0\nvt 0.726562 0.4 0\nvt 0.625 0.4 0\nvt 0.726562 0.6 0\nvt 0.625 0.6 0\nvt 0.5 0.6 0\nvt 0.5 0.5 0\nvt 0.5 0.4 0\nvt 0.375 0.4 0\nvt 0.375 0.5 0\nvt 0.375 0.6 0\nvt 0.273438 0.6 0\nvt 0.273438 0.5 0\nvt 0.273438 0.4 0\nvt 0.875 0.4 0\nvt 0.875 0.5 0\nvt 0.84375 0.4 0\nvt 0.84375 0.5 0\nvt 0.875 0.6 0\nvt 0.84375 0.6 0\nvt 0.8125 0.5 0\nvt 0.8125 0.6 0\nvt 0.8125 0.4 0\nvt 0.21875 0.4 0\nvt 0.21875 0.5 0\nvt 0.21875 0.6 0\nvt 0.1875 0.6 0\nvt 0.1875 0.5 0\nvt 0.1875 0.4 0\nvt 0.96875 0.5 0\nvt 0.96875 0.4 0\nvt 1 0.4 0\nvt 1 0.5 0\nvt 1 0.6 0\nvt 0.96875 0.6 0\nvt 0.9375 0.5 0\nvt 0.9375 0.6 0\nvt 0.9375 0.4 0\nvt 0.03125 0.1 0\nvt 0.03125 0.2 0\nvt 0 0.1 0\nvt 0 0.2 0\nvt 0.03125 0 0\nvt 0 0 0\nvt 0.0625 0 0\nvt 0.0625 0.1 0\nvt 0.0625 0.2 0\nvt 0 0.3 0\nvt 0.03125 0.3 0\nvt 0.0625 0.3 0\nvt 0.125 0.9 0\nvt 0.09375 0.9 0\nvt 0.125 0.8 0\nvt 0.09375 0.8 0\nvt 0.125 1 0\nvt 0.09375 1 0\nvt 0.0625 1 0\nvt 0.0625 0.9 0\nvt 0.0625 0.8 0\nvt 0.125 0.7 0\nvt 0.09375 0.7 0\nvt 0.125 0.6 0\nvt 0.09375 0.6 0\nvt 0.0625 0.7 0\nvt 0.726562 0.9 0\nvt 0.625 0.9 0\nvt 0.726562 0.8 0\nvt 0.625 0.8 0\nvt 0.726562 1 0\nvt 0.625 1 0\nvt 0.5 1 0\nvt 0.5 0.9 0\nvt 0.5 0.8 0\nvt 0.726562 0.7 0\nvt 0.625 0.7 0\nvt 0.5 0.7 0\nvt 0.5 0.2 0\nvt 0.5 0.1 0\nvt 0.625 0.2 0\nvt 0.625 0.1 0\nvt 0.5 0 0\nvt 0.625 0 0\nvt 0.726562 0.1 0\nvt 0.726562 0 0\nvt 0.726562 0.2 0\nvt 0.5 0.3 0\nvt 0.625 0.3 0\nvt 0.726562 0.3 0\nvt 0.375 0.8 0\nvt 0.375 0.9 0\nvt 0.375 1 0\nvt 0.273438 1 0\nvt 0.273438 0.9 0\nvt 0.273438 0.8 0\nvt 0.375 0.7 0\nvt 0.273438 0.7 0\nvt 0.273438 0.2 0\nvt 0.273438 0.1 0\nvt 0.375 0.1 0\nvt 0.375 0.2 0\nvt 0.375 0 0\nvt 0.273438 0 0\nvt 0.273438 0.3 0\nvt 0.375 0.3 0\nvt 0.875 0.8 0\nvt 0.875 0.9 0\nvt 0.84375 0.8 0\nvt 0.84375 0.9 0\nvt 0.875 1 0\nvt 0.84375 1 0\nvt 0.8125 0.9 0\nvt 0.8125 1 0\nvt 0.8125 0.8 0\nvt 0.875 0.7 0\nvt 0.84375 0.7 0\nvt 0.8125 0.7 0\nvt 0.78125 0.1 0\nvt 0.78125 0.2 0\nvt 0.78125 0 0\nvt 0.8125 0 0\nvt 0.8125 0.1 0\nvt 0.8125 0.2 0\nvt 0.78125 0.3 0\nvt 0.78125 0.4 0\nvt 0.8125 0.3 0\nvt 0.21875 0.9 0\nvt 0.21875 0.8 0\nvt 0.21875 1 0\nvt 0.1875 1 0\nvt 0.1875 0.9 0\nvt 0.1875 0.8 0\nvt 0.21875 0.7 0\nvt 0.1875 0.7 0\nvt 0.125 0.2 0\nvt 0.125 0.1 0\nvt 0.15625 0.1 0\nvt 0.15625 0.2 0\nvt 0.125 0 0\nvt 0.15625 0 0\nvt 0.1875 0 0\nvt 0.1875 0.1 0\nvt 0.1875 0.2 0\nvt 0.125 0.4 0\nvt 0.15625 0.3 0\nvt 0.15625 0.4 0\nvt 0.125 0.3 0\nvt 0.1875 0.3 0\nvt 1 0.8 0\nvt 1 0.9 0\nvt 0.96875 0.8 0\nvt 0.96875 0.9 0\nvt 1 1 0\nvt 0.96875 1 0\nvt 0.9375 1 0\nvt 0.9375 0.9 0\nvt 0.9375 0.8 0\nvt 1 0.7 0\nvt 0.96875 0.7 0\nvt 0.9375 0.7 0\nvt 0.875 0.1 0\nvt 0.90625 0.1 0\nvt 0.875 0.2 0\nvt 0.90625 0.2 0\nvt 0.875 0 0\nvt 0.90625 0 0\nvt 0.9375 0 0\nvt 0.9375 0.1 0\nvt 0.9375 0.2 0\nvt 0.90625 0.3 0\nvt 0.90625 0.4 0\nvt 0.875 0.3 0\nvt 0.9375 0.3 0\nvt 0.09375 0.5 0\nvt 0.09375 0.4 0\nvt 0.125 0.5 0\nvt 0.90625 0.5 0\nvt 0.90625 0.6 0\nvt 0.09375 0.1 0\nvt 0.09375 0 0\nvt 0.09375 0.2 0\nvt 0.09375 0.3 0\nvt 0.03125 1 0\nvt 0.03125 0.9 0\nvt 0 1 0\nvt 0 0.9 0\nvt 0.03125 0.8 0\nvt 0 0.8 0\nvt 0.03125 0.7 0\nvt 0 0.7 0\nvt 0.90625 0.9 0\nvt 0.90625 1 0\nvt 0.90625 0.8 0\nvt 0.90625 0.7 0\nvt 0.96875 0 0\nvt 0.96875 0.1 0\nvt 1 0 0\nvt 1 0.1 0\nvt 0.96875 0.2 0\nvt 1 0.2 0\nvt 0.96875 0.3 0\nvt 1 0.3 0\nvt 0.78125 0.5 0\nvt 0.78125 0.6 0\nvt 0.15625 0.6 0\nvt 0.15625 0.5 0\nvt 0.78125 0.9 0\nvt 0.78125 1 0\nvt 0.78125 0.8 0\nvt 0.78125 0.7 0\nvt 0.84375 0 0\nvt 0.84375 0.1 0\nvt 0.84375 0.2 0\nvt 0.84375 0.3 0\nvt 0.15625 1 0\nvt 0.15625 0.9 0\nvt 0.15625 0.8 0\nvt 0.15625 0.7 0\nvt 0.21875 0.1 0\nvt 0.21875 0 0\nvt 0.21875 0.2 0\nvt 0.21875 0.3 0\n\nf 2689/2930 2688/2929 2687/2928 \nf 2687/2928 2688/2929 2690/2931 \nf 2687/2928 2690/2931 2691/2932 \nf 2691/2932 2690/2931 2692/2933 \nf 2694/2935 2687/2928 2693/2934 \nf 2691/2932 2693/2934 2687/2928 \nf 2695/2936 2689/2930 2694/2935 \nf 2687/2928 2694/2935 2689/2930 \nf 2698/2939 2697/2938 2696/2937 \nf 2697/2938 2699/2940 2696/2937 \nf 2696/2937 2699/2940 2700/2941 \nf 2699/2940 2701/2942 2700/2941 \nf 2703/2944 2700/2941 2702/2943 \nf 2700/2941 2703/2944 2696/2937 \nf 2704/2945 2696/2937 2703/2944 \nf 2696/2937 2704/2945 2698/2939 \nf 2703/2944 2705/2946 2704/2945 \nf 2705/2946 2703/2944 2706/2947 \nf 2702/2943 2706/2947 2703/2944 \nf 2706/2947 2702/2943 2707/2948 \nf 2708/2949 2706/2947 2707/2948 \nf 2706/2947 2708/2949 2709/2950 \nf 2709/2950 2705/2946 2706/2947 \nf 2705/2946 2709/2950 2710/2951 \nf 2713/2954 2712/2953 2711/2952 \nf 2712/2953 2713/2954 2714/2955 \nf 2711/2952 2716/2957 2715/2956 \nf 2716/2957 2711/2952 2712/2953 \nf 2718/2959 2715/2956 2717/2958 \nf 2715/2956 2718/2959 2711/2952 \nf 2719/2960 2711/2952 2718/2959 \nf 2711/2952 2719/2960 2713/2954 \nf 2709/2950 2720/2961 2710/2951 \nf 2710/2951 2720/2961 2721/2962 \nf 2708/2949 2722/2963 2709/2950 \nf 2709/2950 2722/2963 2720/2961 \nf 2720/2961 2722/2963 2723/2964 \nf 2720/2961 2723/2964 2724/2965 \nf 2721/2962 2720/2961 2724/2965 \nf 2721/2962 2724/2965 2725/2966 \nf 2728/2969 2727/2968 2726/2967 \nf 2727/2968 2729/2970 2726/2967 \nf 2726/2967 2731/2972 2730/2971 \nf 2731/2972 2726/2967 2729/2970 \nf 2733/2974 2730/2971 2732/2973 \nf 2730/2971 2733/2974 2726/2967 \nf 2734/2975 2726/2967 2733/2974 \nf 2726/2967 2734/2975 2728/2969 \nf 2737/2978 2736/2977 2735/2976 \nf 2736/2977 2737/2978 2738/2979 \nf 2739/2980 2738/2979 2737/2978 \nf 2738/2979 2739/2980 2740/2981 \nf 2742/2983 2740/2981 2741/2982 \nf 2740/2981 2742/2983 2738/2979 \nf 2743/2984 2738/2979 2742/2983 \nf 2738/2979 2743/2984 2736/2977 \nf 2691/2932 2745/2986 2744/2985 \nf 2745/2986 2691/2932 2692/2933 \nf 2744/2985 2735/2976 2736/2977 \nf 2735/2976 2744/2985 2745/2986 \nf 2746/2987 2736/2977 2743/2984 \nf 2736/2977 2746/2987 2744/2985 \nf 2693/2934 2691/2932 2746/2987 \nf 2746/2987 2691/2932 2744/2985 \nf 2749/2990 2748/2989 2747/2988 \nf 2747/2988 2748/2989 2750/2991 \nf 2752/2993 2751/2992 2749/2990 \nf 2749/2990 2751/2992 2748/2989 \nf 2751/2992 2753/2994 2748/2989 \nf 2753/2994 2754/2995 2748/2989 \nf 2748/2989 2754/2995 2750/2991 \nf 2754/2995 2755/2996 2750/2991 \nf 2758/2999 2757/2998 2756/2997 \nf 2756/2997 2757/2998 2759/3000 \nf 2747/2988 2750/2991 2758/2999 \nf 2758/2999 2750/2991 2757/2998 \nf 2750/2991 2755/2996 2757/2998 \nf 2755/2996 2760/3001 2757/2998 \nf 2757/2998 2760/3001 2759/3000 \nf 2759/3000 2760/3001 2695/2936 \nf 2763/3004 2762/3003 2761/3002 \nf 2762/3003 2764/3005 2761/3002 \nf 2761/3002 2764/3005 2765/3006 \nf 2764/3005 2766/3007 2765/3006 \nf 2768/3009 2765/3006 2767/3008 \nf 2765/3006 2768/3009 2761/3002 \nf 2769/3010 2761/3002 2768/3009 \nf 2761/3002 2769/3010 2763/3004 \nf 2700/2941 2701/2942 2770/3011 \nf 2701/2942 2771/3012 2770/3011 \nf 2770/3011 2771/3012 2763/3004 \nf 2771/3012 2762/3003 2763/3004 \nf 2772/3013 2763/3004 2769/3010 \nf 2763/3004 2772/3013 2770/3011 \nf 2702/2943 2770/3011 2772/3013 \nf 2770/3011 2702/2943 2700/2941 \nf 2775/3016 2774/3015 2773/3014 \nf 2774/3015 2775/3016 2776/3017 \nf 2777/3018 2776/3017 2775/3016 \nf 2776/3017 2777/3018 2778/3019 \nf 2778/3019 2779/3020 2776/3017 \nf 2779/3020 2780/3021 2776/3017 \nf 2776/3017 2780/3021 2774/3015 \nf 2780/3021 2781/3022 2774/3015 \nf 2782/3023 2698/2939 2704/2945 \nf 2698/2939 2782/3023 2783/3024 \nf 2773/3014 2783/3024 2782/3023 \nf 2783/3024 2773/3014 2774/3015 \nf 2774/3015 2781/3022 2783/3024 \nf 2781/3022 2784/3025 2783/3024 \nf 2783/3024 2784/3025 2698/2939 \nf 2784/3025 2697/2938 2698/2939 \nf 2768/3009 2785/3026 2769/3010 \nf 2785/3026 2768/3009 2786/3027 \nf 2767/3008 2786/3027 2768/3009 \nf 2786/3027 2767/3008 2787/3028 \nf 2788/3029 2786/3027 2787/3028 \nf 2786/3027 2788/3029 2789/3030 \nf 2789/3030 2785/3026 2786/3027 \nf 2785/3026 2789/3030 2790/3031 \nf 2772/3013 2707/2948 2702/2943 \nf 2707/2948 2772/3013 2791/3032 \nf 2769/3010 2791/3032 2772/3013 \nf 2791/3032 2769/3010 2785/3026 \nf 2790/3031 2791/3032 2785/3026 \nf 2791/3032 2790/3031 2792/3033 \nf 2792/3033 2707/2948 2791/3032 \nf 2707/2948 2792/3033 2708/2949 \nf 2795/3036 2794/3035 2793/3034 \nf 2794/3035 2795/3036 2796/3037 \nf 2794/3035 2798/3039 2797/3038 \nf 2798/3039 2794/3035 2796/3037 \nf 2775/3016 2797/3038 2777/3018 \nf 2797/3038 2775/3016 2794/3035 \nf 2773/3014 2794/3035 2775/3016 \nf 2794/3035 2773/3014 2793/3034 \nf 2710/2951 2799/3040 2705/2946 \nf 2799/3040 2710/2951 2800/3041 \nf 2800/3041 2793/3034 2799/3040 \nf 2793/3034 2800/3041 2795/3036 \nf 2782/3023 2793/3034 2773/3014 \nf 2793/3034 2782/3023 2799/3040 \nf 2704/2945 2799/3040 2782/3023 \nf 2799/3040 2704/2945 2705/2946 \nf 2803/3044 2802/3043 2801/3042 \nf 2802/3043 2803/3044 2804/3045 \nf 2801/3042 2806/3047 2805/3046 \nf 2806/3047 2801/3042 2802/3043 \nf 2808/3049 2805/3046 2807/3048 \nf 2805/3046 2808/3049 2801/3042 \nf 2809/3050 2801/3042 2808/3049 \nf 2801/3042 2809/3050 2803/3044 \nf 2715/2956 2811/3052 2810/3051 \nf 2811/3052 2715/2956 2716/2957 \nf 2810/3051 2804/3045 2803/3044 \nf 2804/3045 2810/3051 2811/3052 \nf 2812/3053 2803/3044 2809/3050 \nf 2803/3044 2812/3053 2810/3051 \nf 2717/2958 2810/3051 2812/3053 \nf 2810/3051 2717/2958 2715/2956 \nf 2813/3054 2781/3022 2780/3021 \nf 2781/3022 2813/3054 2814/3055 \nf 2815/3056 2780/3021 2779/3020 \nf 2780/3021 2815/3056 2813/3054 \nf 2815/3056 2816/3057 2813/3054 \nf 2816/3057 2815/3056 2817/3058 \nf 2813/3054 2818/3059 2814/3055 \nf 2818/3059 2813/3054 2816/3057 \nf 2819/3060 2697/2938 2784/3025 \nf 2697/2938 2819/3060 2820/3061 \nf 2814/3055 2784/3025 2781/3022 \nf 2784/3025 2814/3055 2819/3060 \nf 2814/3055 2821/3062 2819/3060 \nf 2821/3062 2814/3055 2818/3059 \nf 2819/3060 2719/2960 2820/3061 \nf 2719/2960 2819/3060 2821/3062 \nf 2789/3030 2822/3063 2790/3031 \nf 2790/3031 2822/3063 2823/3064 \nf 2788/3029 2824/3065 2789/3030 \nf 2789/3030 2824/3065 2822/3063 \nf 2822/3063 2824/3065 2825/3066 \nf 2822/3063 2825/3066 2826/3067 \nf 2823/3064 2822/3063 2826/3067 \nf 2823/3064 2826/3067 2827/3068 \nf 2792/3033 2828/3069 2708/2949 \nf 2708/2949 2828/3069 2722/2963 \nf 2790/3031 2823/3064 2792/3033 \nf 2792/3033 2823/3064 2828/3069 \nf 2828/3069 2823/3064 2827/3068 \nf 2828/3069 2827/3068 2829/3070 \nf 2722/2963 2828/3069 2829/3070 \nf 2722/2963 2829/3070 2723/2964 \nf 2832/3073 2831/3072 2830/3071 \nf 2831/3072 2832/3073 2833/3074 \nf 2833/3074 2834/3075 2831/3072 \nf 2834/3075 2833/3074 2835/3076 \nf 2837/3078 2831/3072 2836/3077 \nf 2836/3077 2831/3072 2834/3075 \nf 2838/3079 2830/3071 2837/3078 \nf 2837/3078 2830/3071 2831/3072 \nf 2841/3082 2840/3081 2839/3080 \nf 2841/3082 2839/3080 2842/3083 \nf 2842/3083 2830/3071 2841/3082 \nf 2830/3071 2842/3083 2832/3073 \nf 2843/3084 2841/3082 2838/3079 \nf 2838/3079 2841/3082 2830/3071 \nf 2725/2966 2840/3081 2843/3084 \nf 2843/3084 2840/3081 2841/3082 \nf 2846/3087 2845/3086 2844/3085 \nf 2845/3086 2846/3087 2847/3088 \nf 2844/3085 2849/3090 2848/3089 \nf 2849/3090 2844/3085 2845/3086 \nf 2851/3092 2848/3089 2850/3091 \nf 2848/3089 2851/3092 2844/3085 \nf 2852/3093 2844/3085 2851/3092 \nf 2844/3085 2852/3093 2846/3087 \nf 2730/2971 2854/3095 2853/3094 \nf 2854/3095 2730/2971 2731/2972 \nf 2853/3094 2847/3088 2846/3087 \nf 2847/3088 2853/3094 2854/3095 \nf 2855/3096 2846/3087 2852/3093 \nf 2846/3087 2855/3096 2853/3094 \nf 2732/2973 2853/3094 2855/3096 \nf 2853/3094 2732/2973 2730/2971 \nf 2858/3099 2857/3098 2856/3097 \nf 2857/3098 2858/3099 2859/3100 \nf 2861/3102 2856/3097 2860/3101 \nf 2856/3097 2861/3102 2858/3099 \nf 2861/3102 2862/3103 2858/3099 \nf 2862/3103 2863/3104 2858/3099 \nf 2858/3099 2863/3104 2859/3100 \nf 2863/3104 2864/3105 2859/3100 \nf 2866/3107 2865/3106 2714/2955 \nf 2865/3106 2866/3107 2867/3108 \nf 2857/3098 2867/3108 2866/3107 \nf 2867/3108 2857/3098 2859/3100 \nf 2859/3100 2868/3109 2867/3108 \nf 2868/3109 2859/3100 2864/3105 \nf 2867/3108 2734/2975 2865/3106 \nf 2734/2975 2867/3108 2868/3109 \nf 2869/3110 2694/2935 2693/2934 \nf 2694/2935 2869/3110 2870/3111 \nf 2839/3080 2870/3111 2869/3110 \nf 2870/3111 2839/3080 2871/3112 \nf 2871/3112 2759/3000 2870/3111 \nf 2759/3000 2871/3112 2756/2997 \nf 2870/3111 2695/2936 2694/2935 \nf 2695/2936 2870/3111 2759/3000 \nf 2873/3114 2732/2973 2872/3113 \nf 2732/2973 2873/3114 2733/2974 \nf 2872/3113 2712/2953 2873/3114 \nf 2712/2953 2872/3113 2716/2957 \nf 2714/2955 2865/3106 2873/3114 \nf 2714/2955 2873/3114 2712/2953 \nf 2865/3106 2734/2975 2733/2974 \nf 2865/3106 2733/2974 2873/3114 \nf 2874/3115 2742/2983 2741/2982 \nf 2742/2983 2874/3115 2875/3116 \nf 2835/3076 2875/3116 2874/3115 \nf 2875/3116 2835/3076 2833/3074 \nf 2833/3074 2876/3117 2875/3116 \nf 2876/3117 2833/3074 2832/3073 \nf 2875/3116 2743/2984 2742/2983 \nf 2743/2984 2875/3116 2876/3117 \nf 2877/3118 2743/2984 2876/3117 \nf 2743/2984 2877/3118 2746/2987 \nf 2832/3073 2877/3118 2876/3117 \nf 2877/3118 2832/3073 2842/3083 \nf 2842/3083 2869/3110 2877/3118 \nf 2869/3110 2842/3083 2839/3080 \nf 2877/3118 2693/2934 2746/2987 \nf 2693/2934 2877/3118 2869/3110 \nf 2878/3119 2754/2995 2753/2994 \nf 2754/2995 2878/3119 2879/3120 \nf 2880/3121 2879/3120 2878/3119 \nf 2879/3120 2880/3121 2881/3122 \nf 2881/3122 2882/3123 2879/3120 \nf 2882/3123 2881/3122 2883/3124 \nf 2879/3120 2755/2996 2754/2995 \nf 2755/2996 2879/3120 2882/3123 \nf 2882/3123 2760/3001 2755/2996 \nf 2760/3001 2882/3123 2884/3125 \nf 2884/3125 2883/3124 2885/3126 \nf 2883/3124 2884/3125 2882/3123 \nf 2885/3126 2689/2930 2884/3125 \nf 2689/2930 2885/3126 2688/2929 \nf 2884/3125 2695/2936 2760/3001 \nf 2695/2936 2884/3125 2689/2930 \nf 2887/3128 2850/3091 2886/3127 \nf 2850/3091 2887/3128 2851/3092 \nf 2802/3043 2886/3127 2806/3047 \nf 2886/3127 2802/3043 2887/3128 \nf 2887/3128 2802/3043 2804/3045 \nf 2804/3045 2888/3129 2887/3128 \nf 2851/3092 2887/3128 2888/3129 \nf 2888/3129 2852/3093 2851/3092 \nf 2889/3130 2852/3093 2888/3129 \nf 2889/3130 2855/3096 2852/3093 \nf 2811/3052 2888/3129 2804/3045 \nf 2811/3052 2889/3130 2888/3129 \nf 2889/3130 2811/3052 2716/2957 \nf 2716/2957 2872/3113 2889/3130 \nf 2855/3096 2889/3130 2872/3113 \nf 2872/3113 2732/2973 2855/3096 \nf 2890/3131 2863/3104 2862/3103 \nf 2863/3104 2890/3131 2891/3132 \nf 2892/3133 2891/3132 2890/3131 \nf 2891/3132 2892/3133 2893/3134 \nf 2893/3134 2894/3135 2891/3132 \nf 2894/3135 2893/3134 2895/3136 \nf 2891/3132 2864/3105 2863/3104 \nf 2864/3105 2891/3132 2894/3135 \nf 2894/3135 2868/3109 2864/3105 \nf 2868/3109 2894/3135 2896/3137 \nf 2895/3136 2896/3137 2894/3135 \nf 2896/3137 2895/3136 2897/3138 \nf 2896/3137 2897/3138 2727/2968 \nf 2896/3137 2727/2968 2728/2969 \nf 2868/3109 2896/3137 2728/2969 \nf 2868/3109 2728/2969 2734/2975 \nf 2899/3140 2717/2958 2898/3139 \nf 2717/2958 2899/3140 2718/2959 \nf 2899/3140 2701/2942 2699/2940 \nf 2701/2942 2899/3140 2898/3139 \nf 2820/3061 2699/2940 2697/2938 \nf 2699/2940 2820/3061 2899/3140 \nf 2899/3140 2820/3061 2718/2959 \nf 2820/3061 2719/2960 2718/2959 \nf 2724/2965 2901/3142 2900/3141 \nf 2901/3142 2724/2965 2723/2964 \nf 2900/3141 2756/2997 2871/3112 \nf 2756/2997 2900/3141 2901/3142 \nf 2840/3081 2871/3112 2839/3080 \nf 2871/3112 2840/3081 2900/3141 \nf 2725/2966 2900/3141 2840/3081 \nf 2900/3141 2725/2966 2724/2965 \nf 2903/3144 2807/3048 2902/3143 \nf 2807/3048 2903/3144 2808/3049 \nf 2903/3144 2766/3007 2764/3005 \nf 2766/3007 2903/3144 2902/3143 \nf 2904/3145 2764/3005 2762/3003 \nf 2764/3005 2904/3145 2903/3144 \nf 2903/3144 2904/3145 2808/3049 \nf 2904/3145 2809/3050 2808/3049 \nf 2905/3146 2809/3050 2904/3145 \nf 2809/3050 2905/3146 2812/3053 \nf 2905/3146 2762/3003 2771/3012 \nf 2762/3003 2905/3146 2904/3145 \nf 2898/3139 2771/3012 2701/2942 \nf 2771/3012 2898/3139 2905/3146 \nf 2905/3146 2898/3139 2812/3053 \nf 2898/3139 2717/2958 2812/3053 \nf 2906/3147 2816/3057 2817/3058 \nf 2816/3057 2906/3147 2907/3148 \nf 2860/3101 2907/3148 2906/3147 \nf 2907/3148 2860/3101 2856/3097 \nf 2856/3097 2908/3149 2907/3148 \nf 2908/3149 2856/3097 2857/3098 \nf 2907/3148 2818/3059 2816/3057 \nf 2818/3059 2907/3148 2908/3149 \nf 2818/3059 2908/3149 2909/3150 \nf 2818/3059 2909/3150 2821/3062 \nf 2908/3149 2857/3098 2866/3107 \nf 2908/3149 2866/3107 2909/3150 \nf 2714/2955 2909/3150 2866/3107 \nf 2909/3150 2714/2955 2713/2954 \nf 2713/2954 2821/3062 2909/3150 \nf 2821/3062 2713/2954 2719/2960 \nf 2910/3151 2826/3067 2825/3066 \nf 2826/3067 2910/3151 2911/3152 \nf 2752/2993 2911/3152 2910/3151 \nf 2911/3152 2752/2993 2749/2990 \nf 2749/2990 2912/3153 2911/3152 \nf 2912/3153 2749/2990 2747/2988 \nf 2827/3068 2911/3152 2912/3153 \nf 2911/3152 2827/3068 2826/3067 \nf 2829/3070 2912/3153 2913/3154 \nf 2912/3153 2829/3070 2827/3068 \nf 2913/3154 2747/2988 2758/2999 \nf 2747/2988 2913/3154 2912/3153 \nf 2901/3142 2758/2999 2756/2997 \nf 2758/2999 2901/3142 2913/3154 \nf 2723/2964 2913/3154 2901/3142 \nf 2913/3154 2723/2964 2829/3070 \nf 2914/3155 2837/3078 2836/3077 \nf 2837/3078 2914/3155 2915/3156 \nf 2798/3039 2915/3156 2914/3155 \nf 2915/3156 2798/3039 2796/3037 \nf 2796/3037 2916/3157 2915/3156 \nf 2916/3157 2796/3037 2795/3036 \nf 2915/3156 2838/3079 2837/3078 \nf 2838/3079 2915/3156 2916/3157 \nf 2916/3157 2843/3084 2838/3079 \nf 2843/3084 2916/3157 2917/3158 \nf 2795/3036 2917/3158 2916/3157 \nf 2917/3158 2795/3036 2800/3041 \nf 2800/3041 2721/2962 2917/3158 \nf 2721/2962 2800/3041 2710/2951 \nf 2917/3158 2725/2966 2843/3084 \nf 2725/2966 2917/3158 2721/2962 \nf 2920/3161 2919/3160 2918/3159 \nf 2918/3159 2921/3162 2920/3161 \nf 2921/3162 2918/3159 2922/3163 \nf 2922/3163 2923/3164 2921/3162 \nf 2925/3166 2918/3159 2924/3165 \nf 2925/3166 2922/3163 2918/3159 \nf 2924/3165 2919/3160 2926/3167 \nf 2924/3165 2918/3159 2919/3160 \nf 2929/3170 2928/3169 2927/3168 \nf 2928/3169 2929/3170 2930/3171 \nf 2927/3168 2932/3173 2931/3172 \nf 2932/3173 2927/3168 2928/3169 \nf 2932/3173 2934/3175 2933/3174 \nf 2934/3175 2932/3173 2928/3169 \nf 2928/3169 2935/3176 2934/3175 \nf 2935/3176 2928/3169 2930/3171 \nf 2936/3177 2934/3175 2935/3176 \nf 2934/3175 2936/3177 2937/3178 \nf 2937/3178 2933/3174 2934/3175 \nf 2933/3174 2937/3178 2938/3179 \nf 2937/3178 2940/3181 2939/3180 \nf 2937/3178 2939/3180 2938/3179 \nf 2936/3177 2941/3182 2940/3181 \nf 2936/3177 2940/3181 2937/3178 \nf 2944/3185 2943/3184 2942/3183 \nf 2943/3184 2944/3185 2945/3186 \nf 2945/3186 2946/3187 2943/3184 \nf 2946/3187 2945/3186 2947/3188 \nf 2948/3189 2947/3188 2945/3186 \nf 2947/3188 2948/3189 2949/3190 \nf 2950/3191 2945/3186 2944/3185 \nf 2945/3186 2950/3191 2948/3189 \nf 2952/3193 2941/3182 2951/3192 \nf 2941/3182 2952/3193 2940/3181 \nf 2940/3181 2953/3194 2939/3180 \nf 2953/3194 2940/3181 2952/3193 \nf 2953/3194 2952/3193 2954/3195 \nf 2952/3193 2955/3196 2954/3195 \nf 2952/3193 2951/3192 2955/3196 \nf 2951/3192 2956/3197 2955/3196 \nf 2959/3200 2958/3199 2957/3198 \nf 2957/3198 2960/3201 2959/3200 \nf 2957/3198 2961/3202 2960/3201 \nf 2961/3202 2957/3198 2962/3203 \nf 2963/3204 2962/3203 2957/3198 \nf 2962/3203 2963/3204 2964/3205 \nf 2965/3206 2957/3198 2958/3199 \nf 2957/3198 2965/3206 2963/3204 \nf 2968/3209 2967/3208 2966/3207 \nf 2967/3208 2968/3209 2969/3210 \nf 2971/3212 2966/3207 2970/3211 \nf 2966/3207 2971/3212 2968/3209 \nf 2970/3211 2973/3214 2972/3213 \nf 2973/3214 2970/3211 2966/3207 \nf 2966/3207 2974/3215 2973/3214 \nf 2974/3215 2966/3207 2967/3208 \nf 2922/3163 2975/3216 2923/3164 \nf 2975/3216 2922/3163 2976/3217 \nf 2969/3210 2976/3217 2967/3208 \nf 2976/3217 2969/3210 2975/3216 \nf 2967/3208 2977/3218 2974/3215 \nf 2977/3218 2967/3208 2976/3217 \nf 2922/3163 2977/3218 2976/3217 \nf 2977/3218 2922/3163 2925/3166 \nf 2980/3221 2979/3220 2978/3219 \nf 2979/3220 2980/3221 2981/3222 \nf 2978/3219 2983/3224 2982/3223 \nf 2983/3224 2978/3219 2979/3220 \nf 2984/3225 2983/3224 2979/3220 \nf 2979/3220 2985/3226 2984/3225 \nf 2985/3226 2979/3220 2981/3222 \nf 2981/3222 2986/3227 2985/3226 \nf 2989/3230 2988/3229 2987/3228 \nf 2988/3229 2989/3230 2990/3231 \nf 2987/3228 2981/3222 2980/3221 \nf 2981/3222 2987/3228 2988/3229 \nf 2986/3227 2981/3222 2988/3229 \nf 2988/3229 2991/3232 2986/3227 \nf 2991/3232 2988/3229 2990/3231 \nf 2990/3231 2926/3167 2991/3232 \nf 2994/3235 2993/3234 2992/3233 \nf 2993/3234 2994/3235 2995/3236 \nf 2992/3233 2997/3238 2996/3237 \nf 2997/3238 2992/3233 2993/3234 \nf 2997/3238 2999/3240 2998/3239 \nf 2999/3240 2997/3238 2993/3234 \nf 2993/3234 3000/3241 2999/3240 \nf 3000/3241 2993/3234 2995/3236 \nf 2931/3172 3002/3243 3001/3242 \nf 3002/3243 2931/3172 2932/3173 \nf 3001/3242 2995/3236 2994/3235 \nf 2995/3236 3001/3242 3002/3243 \nf 2995/3236 3003/3244 3000/3241 \nf 3003/3244 2995/3236 3002/3243 \nf 3002/3243 2933/3174 3003/3244 \nf 2933/3174 3002/3243 2932/3173 \nf 3006/3247 3005/3246 3004/3245 \nf 3005/3246 3006/3247 3007/3248 \nf 3007/3248 3008/3249 3005/3246 \nf 3008/3249 3007/3248 3009/3250 \nf 3011/3252 3007/3248 3010/3251 \nf 3007/3248 3011/3252 3009/3250 \nf 3010/3251 3006/3247 3012/3253 \nf 3006/3247 3010/3251 3007/3248 \nf 2930/3171 3013/3254 2935/3176 \nf 3013/3254 2930/3171 3014/3255 \nf 3014/3255 3004/3245 3013/3254 \nf 3004/3245 3014/3255 3006/3247 \nf 3012/3253 3014/3255 3015/3256 \nf 3014/3255 3012/3253 3006/3247 \nf 3015/3256 2930/3171 2929/3170 \nf 2930/3171 3015/3256 3014/3255 \nf 3016/3257 2999/3240 3000/3241 \nf 2999/3240 3016/3257 3017/3258 \nf 3017/3258 2998/3239 2999/3240 \nf 2998/3239 3017/3258 3018/3259 \nf 3017/3258 3020/3261 3019/3260 \nf 3017/3258 3019/3260 3018/3259 \nf 3016/3257 3021/3262 3020/3261 \nf 3016/3257 3020/3261 3017/3258 \nf 2938/3179 3003/3244 2933/3174 \nf 3003/3244 2938/3179 3022/3263 \nf 3022/3263 3000/3241 3003/3244 \nf 3000/3241 3022/3263 3016/3257 \nf 3022/3263 3023/3264 3021/3262 \nf 3022/3263 3021/3262 3016/3257 \nf 2938/3179 2939/3180 3023/3264 \nf 2938/3179 3023/3264 3022/3263 \nf 3026/3267 3025/3266 3024/3265 \nf 3026/3267 3024/3265 3027/3268 \nf 3029/3270 3026/3267 3028/3269 \nf 3026/3267 3029/3270 3025/3266 \nf 3028/3269 3005/3246 3008/3249 \nf 3005/3246 3028/3269 3026/3267 \nf 3026/3267 3004/3245 3005/3246 \nf 3004/3245 3026/3267 3027/3268 \nf 3031/3272 3030/3271 2941/3182 \nf 3031/3272 2941/3182 2936/3177 \nf 3027/3268 3024/3265 3030/3271 \nf 3027/3268 3030/3271 3031/3272 \nf 3027/3268 3013/3254 3004/3245 \nf 3013/3254 3027/3268 3031/3272 \nf 3031/3272 2935/3176 3013/3254 \nf 2935/3176 3031/3272 2936/3177 \nf 3034/3275 3033/3274 3032/3273 \nf 3033/3274 3034/3275 3035/3276 \nf 3035/3276 3036/3277 3033/3274 \nf 3036/3277 3035/3276 3037/3278 \nf 3038/3279 3037/3278 3035/3276 \nf 3037/3278 3038/3279 3039/3280 \nf 3040/3281 3035/3276 3034/3275 \nf 3035/3276 3040/3281 3038/3279 \nf 2947/3188 3041/3282 2946/3187 \nf 3041/3282 2947/3188 3042/3283 \nf 3042/3283 3032/3273 3041/3282 \nf 3032/3273 3042/3283 3034/3275 \nf 3043/3284 3034/3275 3042/3283 \nf 3034/3275 3043/3284 3040/3281 \nf 2949/3190 3042/3283 2947/3188 \nf 3042/3283 2949/3190 3043/3284 \nf 3012/3253 3045/3286 3044/3285 \nf 3044/3285 3010/3251 3012/3253 \nf 3010/3251 3044/3285 3046/3287 \nf 3046/3287 3011/3252 3010/3251 \nf 3046/3287 3048/3289 3047/3288 \nf 3048/3289 3046/3287 3044/3285 \nf 3044/3285 3049/3290 3048/3289 \nf 3049/3290 3044/3285 3045/3286 \nf 2929/3170 3051/3292 3050/3291 \nf 3050/3291 3015/3256 2929/3170 \nf 3015/3256 3050/3291 3045/3286 \nf 3045/3286 3012/3253 3015/3256 \nf 3045/3286 3052/3293 3049/3290 \nf 3052/3293 3045/3286 3050/3291 \nf 3050/3291 2950/3191 3052/3293 \nf 2950/3191 3050/3291 3051/3292 \nf 3021/3262 3053/3294 3020/3261 \nf 3053/3294 3021/3262 3054/3295 \nf 3020/3261 3055/3296 3019/3260 \nf 3055/3296 3020/3261 3053/3294 \nf 3055/3296 3053/3294 3056/3297 \nf 3053/3294 3057/3298 3056/3297 \nf 3053/3294 3054/3295 3057/3298 \nf 3054/3295 3058/3299 3057/3298 \nf 2939/3180 3059/3300 3023/3264 \nf 3059/3300 2939/3180 2953/3194 \nf 3023/3264 3054/3295 3021/3262 \nf 3054/3295 3023/3264 3059/3300 \nf 3054/3295 3059/3300 3058/3299 \nf 3059/3300 3060/3301 3058/3299 \nf 3059/3300 2953/3194 3060/3301 \nf 2953/3194 2954/3195 3060/3301 \nf 3063/3304 3062/3303 3061/3302 \nf 3063/3304 3061/3302 3064/3305 \nf 3066/3307 3065/3306 3062/3303 \nf 3066/3307 3062/3303 3063/3304 \nf 3063/3304 3067/3308 3066/3307 \nf 3067/3308 3063/3304 3068/3309 \nf 3064/3305 3068/3309 3063/3304 \nf 3068/3309 3064/3305 3069/3310 \nf 3072/3313 3071/3312 3070/3311 \nf 3071/3312 3073/3314 3070/3311 \nf 3064/3305 3061/3302 3073/3314 \nf 3064/3305 3073/3314 3071/3312 \nf 3069/3310 3071/3312 3074/3315 \nf 3071/3312 3069/3310 3064/3305 \nf 3074/3315 3072/3313 2956/3197 \nf 3072/3313 3074/3315 3071/3312 \nf 3077/3318 3076/3317 3075/3316 \nf 3076/3317 3077/3318 3078/3319 \nf 3078/3319 3079/3320 3076/3317 \nf 3079/3320 3078/3319 3080/3321 \nf 3080/3321 3082/3323 3081/3322 \nf 3082/3323 3080/3321 3078/3319 \nf 3078/3319 3083/3324 3082/3323 \nf 3083/3324 3078/3319 3077/3318 \nf 2962/3203 3084/3325 2961/3202 \nf 3084/3325 2962/3203 3085/3326 \nf 3085/3326 3075/3316 3084/3325 \nf 3075/3316 3085/3326 3077/3318 \nf 3086/3327 3077/3318 3085/3326 \nf 3077/3318 3086/3327 3083/3324 \nf 2964/3205 3085/3326 2962/3203 \nf 3085/3326 2964/3205 3086/3327 \nf 3089/3330 3088/3329 3087/3328 \nf 3088/3329 3089/3330 3090/3331 \nf 3087/3328 3092/3333 3091/3332 \nf 3092/3333 3087/3328 3088/3329 \nf 3093/3334 3092/3333 3088/3329 \nf 3088/3329 3094/3335 3093/3334 \nf 3094/3335 3088/3329 3090/3331 \nf 3090/3331 3095/3336 3094/3335 \nf 3098/3339 3097/3338 3096/3337 \nf 3097/3338 3098/3339 2942/3183 \nf 3089/3330 3096/3337 3090/3331 \nf 3096/3337 3089/3330 3098/3339 \nf 3090/3331 3099/3340 3095/3336 \nf 3099/3340 3090/3331 3096/3337 \nf 3096/3337 2965/3206 3099/3340 \nf 2965/3206 3096/3337 3097/3338 \nf 3101/3342 2924/3165 3100/3341 \nf 2924/3165 3101/3342 2925/3166 \nf 3070/3311 3100/3341 3102/3343 \nf 3100/3341 3070/3311 3101/3342 \nf 3102/3343 2990/3231 2989/3230 \nf 2990/3231 3102/3343 3100/3341 \nf 3100/3341 2926/3167 2990/3231 \nf 2926/3167 3100/3341 2924/3165 \nf 3104/3345 2964/3205 3103/3344 \nf 3103/3344 2964/3205 2963/3204 \nf 2946/3187 3104/3345 2943/3184 \nf 2943/3184 3104/3345 3103/3344 \nf 3103/3344 2942/3183 2943/3184 \nf 2942/3183 3103/3344 3097/3338 \nf 2963/3204 3097/3338 3103/3344 \nf 3097/3338 2963/3204 2965/3206 \nf 3106/3347 2973/3214 3105/3346 \nf 2973/3214 3106/3347 2972/3213 \nf 3065/3306 3105/3346 3062/3303 \nf 3105/3346 3065/3306 3106/3347 \nf 3062/3303 3107/3348 3061/3302 \nf 3107/3348 3062/3303 3105/3346 \nf 3105/3346 2974/3215 3107/3348 \nf 2974/3215 3105/3346 2973/3214 \nf 2974/3215 3108/3349 3107/3348 \nf 3108/3349 2974/3215 2977/3218 \nf 3061/3302 3108/3349 3073/3314 \nf 3108/3349 3061/3302 3107/3348 \nf 3073/3314 3101/3342 3070/3311 \nf 3101/3342 3073/3314 3108/3349 \nf 3108/3349 2925/3166 3101/3342 \nf 2925/3166 3108/3349 2977/3218 \nf 2985/3226 3109/3350 2984/3225 \nf 3109/3350 2985/3226 3110/3351 \nf 3110/3351 3111/3352 3109/3350 \nf 3111/3352 3110/3351 3112/3353 \nf 3113/3354 3112/3353 3110/3351 \nf 3112/3353 3113/3354 3114/3355 \nf 2986/3227 3110/3351 2985/3226 \nf 3110/3351 2986/3227 3113/3354 \nf 2991/3232 3113/3354 2986/3227 \nf 3113/3354 2991/3232 3115/3356 \nf 3115/3356 3114/3355 3113/3354 \nf 3114/3355 3115/3356 3116/3357 \nf 2919/3160 3116/3357 3115/3356 \nf 3116/3357 2919/3160 2920/3161 \nf 2926/3167 3115/3356 2991/3232 \nf 3115/3356 2926/3167 2919/3160 \nf 3118/3359 3081/3322 3117/3358 \nf 3117/3358 3081/3322 3082/3323 \nf 3036/3277 3118/3359 3033/3274 \nf 3033/3274 3118/3359 3117/3358 \nf 3033/3274 3117/3358 3032/3273 \nf 3032/3273 3117/3358 3119/3360 \nf 3117/3358 3082/3323 3119/3360 \nf 3119/3360 3082/3323 3083/3324 \nf 3119/3360 3083/3324 3120/3361 \nf 3086/3327 3120/3361 3083/3324 \nf 3032/3273 3119/3360 3041/3282 \nf 3120/3361 3041/3282 3119/3360 \nf 3041/3282 3120/3361 2946/3187 \nf 2946/3187 3120/3361 3104/3345 \nf 3120/3361 3086/3327 3104/3345 \nf 3104/3345 3086/3327 2964/3205 \nf 3094/3335 3121/3362 3093/3334 \nf 3121/3362 3094/3335 3122/3363 \nf 3122/3363 3123/3364 3121/3362 \nf 3123/3364 3122/3363 3124/3365 \nf 3125/3366 3124/3365 3122/3363 \nf 3124/3365 3125/3366 3126/3367 \nf 3095/3336 3122/3363 3094/3335 \nf 3122/3363 3095/3336 3125/3366 \nf 3125/3366 3099/3340 3127/3368 \nf 3099/3340 3125/3366 3095/3336 \nf 3126/3367 3127/3368 3128/3369 \nf 3127/3368 3126/3367 3125/3366 \nf 2958/3199 2959/3200 3127/3368 \nf 3128/3369 3127/3368 2959/3200 \nf 2965/3206 2958/3199 3099/3340 \nf 3127/3368 3099/3340 2958/3199 \nf 3130/3371 2949/3190 3129/3370 \nf 3129/3370 2949/3190 2948/3189 \nf 3129/3370 2931/3172 3130/3371 \nf 2931/3172 3129/3370 2927/3168 \nf 3051/3292 2927/3168 3129/3370 \nf 2927/3168 3051/3292 2929/3170 \nf 3051/3292 3129/3370 2948/3189 \nf 3051/3292 2948/3189 2950/3191 \nf 2955/3196 3131/3372 2954/3195 \nf 3131/3372 2955/3196 3132/3373 \nf 3132/3373 2989/3230 3131/3372 \nf 2989/3230 3132/3373 3102/3343 \nf 3072/3313 3102/3343 3132/3373 \nf 3102/3343 3072/3313 3070/3311 \nf 2956/3197 3132/3373 2955/3196 \nf 3132/3373 2956/3197 3072/3313 \nf 3134/3375 3039/3280 3133/3374 \nf 3133/3374 3039/3280 3038/3279 \nf 3133/3374 2996/3237 3134/3375 \nf 2996/3237 3133/3374 2992/3233 \nf 3135/3376 2992/3233 3133/3374 \nf 2992/3233 3135/3376 2994/3235 \nf 3135/3376 3133/3374 3038/3279 \nf 3135/3376 3038/3279 3040/3281 \nf 3135/3376 3040/3281 3136/3377 \nf 3136/3377 3040/3281 3043/3284 \nf 3136/3377 2994/3235 3135/3376 \nf 2994/3235 3136/3377 3001/3242 \nf 3130/3371 3001/3242 3136/3377 \nf 3001/3242 3130/3371 2931/3172 \nf 3130/3371 3136/3377 3043/3284 \nf 3130/3371 3043/3284 2949/3190 \nf 3048/3289 3137/3378 3047/3288 \nf 3137/3378 3048/3289 3138/3379 \nf 3138/3379 3091/3332 3137/3378 \nf 3091/3332 3138/3379 3087/3328 \nf 3139/3380 3087/3328 3138/3379 \nf 3087/3328 3139/3380 3089/3330 \nf 3049/3290 3138/3379 3048/3289 \nf 3138/3379 3049/3290 3139/3380 \nf 3140/3381 3049/3290 3052/3293 \nf 3049/3290 3140/3381 3139/3380 \nf 3098/3339 3139/3380 3140/3381 \nf 3139/3380 3098/3339 3089/3330 \nf 2944/3185 2942/3183 3140/3381 \nf 3140/3381 2942/3183 3098/3339 \nf 2950/3191 2944/3185 3052/3293 \nf 3052/3293 2944/3185 3140/3381 \nf 3057/3298 3141/3382 3056/3297 \nf 3141/3382 3057/3298 3142/3383 \nf 3142/3383 2982/3223 3141/3382 \nf 2982/3223 3142/3383 2978/3219 \nf 3143/3384 2978/3219 3142/3383 \nf 2978/3219 3143/3384 2980/3221 \nf 3058/3299 3142/3383 3057/3298 \nf 3142/3383 3058/3299 3143/3384 \nf 3060/3301 3143/3384 3058/3299 \nf 3143/3384 3060/3301 3144/3385 \nf 3144/3385 2980/3221 3143/3384 \nf 2980/3221 3144/3385 2987/3228 \nf 3131/3372 2987/3228 3144/3385 \nf 2987/3228 3131/3372 2989/3230 \nf 2954/3195 3144/3385 3060/3301 \nf 3144/3385 2954/3195 3131/3372 \nf 3146/3387 3068/3309 3145/3386 \nf 3068/3309 3146/3387 3067/3308 \nf 3029/3270 3145/3386 3025/3266 \nf 3145/3386 3029/3270 3146/3387 \nf 3025/3266 3147/3388 3024/3265 \nf 3147/3388 3025/3266 3145/3386 \nf 3145/3386 3069/3310 3147/3388 \nf 3069/3310 3145/3386 3068/3309 \nf 3147/3388 3074/3315 3148/3389 \nf 3074/3315 3147/3388 3069/3310 \nf 3024/3265 3148/3389 3030/3271 \nf 3148/3389 3024/3265 3147/3388 \nf 3030/3271 2951/3192 2941/3182 \nf 2951/3192 3030/3271 3148/3389 \nf 3148/3389 2956/3197 2951/3192 \nf 2956/3197 3148/3389 3074/3315 \nf 2920/3161 2921/3162 2690/2931 \nf 2920/3161 2690/2931 2688/2929 \nf 2921/3162 2923/3164 2692/2933 \nf 2921/3162 2692/2933 2690/2931 \nf 2959/3200 2960/3201 2729/2970 \nf 2729/2970 2727/2968 2959/3200 \nf 2960/3201 2961/3202 2731/2972 \nf 2731/2972 2729/2970 2960/3201 \nf 2969/3210 2968/3209 2737/2978 \nf 2969/3210 2737/2978 2735/2976 \nf 2968/3209 2971/3212 2739/2980 \nf 2739/2980 2737/2978 2968/3209 \nf 2970/3211 2739/2980 2971/3212 \nf 2739/2980 2970/3211 2740/2981 \nf 2740/2981 2972/3213 2741/2982 \nf 2972/3213 2740/2981 2970/3211 \nf 2745/2986 2923/3164 2975/3216 \nf 2923/3164 2745/2986 2692/2933 \nf 2975/3216 2969/3210 2735/2976 \nf 2975/3216 2735/2976 2745/2986 \nf 2752/2993 2983/3224 2751/2992 \nf 2983/3224 2752/2993 2982/3223 \nf 2751/2992 2984/3225 2753/2994 \nf 2984/3225 2751/2992 2983/3224 \nf 2766/3007 2997/3238 2765/3006 \nf 2997/3238 2766/3007 2996/3237 \nf 2998/3239 2765/3006 2997/3238 \nf 2765/3006 2998/3239 2767/3008 \nf 3008/3249 2778/3019 2777/3018 \nf 2778/3019 3008/3249 3009/3250 \nf 3009/3250 3011/3252 2779/3020 \nf 2779/3020 2778/3019 3009/3250 \nf 2787/3028 2767/3008 2998/3239 \nf 2787/3028 2998/3239 3018/3259 \nf 3018/3259 2788/3029 2787/3028 \nf 2788/3029 3018/3259 3019/3260 \nf 3028/3269 2798/3039 3029/3270 \nf 2798/3039 3028/3269 2797/3038 \nf 2797/3038 3008/3249 2777/3018 \nf 3008/3249 2797/3038 3028/3269 \nf 3037/3278 2806/3047 3036/3277 \nf 2806/3047 3037/3278 2805/3046 \nf 3039/3280 2805/3046 3037/3278 \nf 2805/3046 3039/3280 2807/3048 \nf 3011/3252 3046/3287 2815/3056 \nf 2815/3056 2779/3020 3011/3252 \nf 3047/3288 2815/3056 3046/3287 \nf 2815/3056 3047/3288 2817/3058 \nf 3019/3260 2824/3065 2788/3029 \nf 2824/3065 3019/3260 3055/3296 \nf 2825/3066 2824/3065 3055/3296 \nf 2825/3066 3055/3296 3056/3297 \nf 2835/3076 3066/3307 2834/3075 \nf 3066/3307 2835/3076 3065/3306 \nf 2834/3075 3067/3308 2836/3077 \nf 3067/3308 2834/3075 3066/3307 \nf 2845/3086 2847/3088 3075/3316 \nf 2845/3086 3075/3316 3076/3317 \nf 2849/3090 2845/3086 3076/3317 \nf 2849/3090 3076/3317 3079/3320 \nf 3080/3321 2849/3090 3079/3320 \nf 2849/3090 3080/3321 2848/3089 \nf 3081/3322 2848/3089 3080/3321 \nf 2848/3089 3081/3322 2850/3091 \nf 2854/3095 2731/2972 2961/3202 \nf 2854/3095 2961/3202 3084/3325 \nf 2847/3088 2854/3095 3084/3325 \nf 2847/3088 3084/3325 3075/3316 \nf 3092/3333 2860/3101 3091/3332 \nf 2860/3101 3092/3333 2861/3102 \nf 3093/3334 2861/3102 3092/3333 \nf 2861/3102 3093/3334 2862/3103 \nf 2741/2982 3106/3347 2874/3115 \nf 3106/3347 2741/2982 2972/3213 \nf 2874/3115 3065/3306 2835/3076 \nf 3065/3306 2874/3115 3106/3347 \nf 2753/2994 3109/3350 2878/3119 \nf 3109/3350 2753/2994 2984/3225 \nf 2878/3119 3111/3352 2880/3121 \nf 3111/3352 2878/3119 3109/3350 \nf 3111/3352 3112/3353 2881/3122 \nf 3111/3352 2881/3122 2880/3121 \nf 2883/3124 3112/3353 3114/3355 \nf 3112/3353 2883/3124 2881/3122 \nf 3114/3355 2885/3126 2883/3124 \nf 2885/3126 3114/3355 3116/3357 \nf 3116/3357 2688/2929 2885/3126 \nf 3116/3357 2920/3161 2688/2929 \nf 3118/3359 2850/3091 3081/3322 \nf 2850/3091 3118/3359 2886/3127 \nf 3036/3277 2886/3127 3118/3359 \nf 2886/3127 3036/3277 2806/3047 \nf 3121/3362 2862/3103 3093/3334 \nf 2862/3103 3121/3362 2890/3131 \nf 3123/3364 2890/3131 3121/3362 \nf 2890/3131 3123/3364 2892/3133 \nf 3123/3364 3124/3365 2893/3134 \nf 2893/3134 2892/3133 3123/3364 \nf 3124/3365 3126/3367 2895/3136 \nf 2895/3136 2893/3134 3124/3365 \nf 2897/3138 2895/3136 3126/3367 \nf 2897/3138 3126/3367 3128/3369 \nf 2727/2968 2897/3138 3128/3369 \nf 2727/2968 3128/3369 2959/3200 \nf 3134/3375 2807/3048 3039/3280 \nf 2807/3048 3134/3375 2902/3143 \nf 2996/3237 2902/3143 3134/3375 \nf 2902/3143 2996/3237 2766/3007 \nf 3137/3378 2817/3058 3047/3288 \nf 2817/3058 3137/3378 2906/3147 \nf 3091/3332 2906/3147 3137/3378 \nf 2906/3147 3091/3332 2860/3101 \nf 2825/3066 3141/3382 2910/3151 \nf 3141/3382 2825/3066 3056/3297 \nf 2910/3151 2982/3223 2752/2993 \nf 2982/3223 2910/3151 3141/3382 \nf 2836/3077 3146/3387 2914/3155 \nf 3146/3387 2836/3077 3067/3308 \nf 3029/3270 2914/3155 3146/3387 \nf 2914/3155 3029/3270 2798/3039 \n\n";

},{}],6:[function(require,module,exports){
module.exports = "# WaveFront *.obj file (generated by CINEMA 4D)\n\ng Canes pCylinder3\nusemtl cane\nv 0.012733 -0.085715 0.17135\nv 0.013456 -0.085715 0.165151\nv 0.012495 -0.119098 0.172004\nv 0.011595 -0.085715 0.159194\nv 0.013505 -0.119098 0.165845\nv 0.007472 -0.085715 0.154509\nv 0.011922 -0.119098 0.159808\nv 0.0018 -0.085715 0.151906\nv 0.00802 -0.119098 0.154937\nv -0.00444 -0.085715 0.151835\nv 0.002475 -0.119098 0.152074\nv -0.01017 -0.085715 0.154308\nv -0.003755 -0.119098 0.151714\nv -0.014398 -0.085715 0.158898\nv -0.009593 -0.119098 0.153919\nv -0.016394 -0.085715 0.164811\nv -0.01403 -0.119098 0.158308\nv -0.015813 -0.085715 0.171025\nv -0.016298 -0.119098 0.164122\nv -0.012754 -0.085715 0.176465\nv -0.016005 -0.119098 0.170356\nv -0.007747 -0.085715 0.18019\nv -0.013201 -0.119098 0.175932\nv -0.001658 -0.085715 0.181557\nv -0.008372 -0.119098 0.179886\nv 0.004461 -0.085715 0.180329\nv -0.002353 -0.119098 0.181533\nv 0.009551 -0.085715 0.176719\nv 0.003816 -0.119098 0.18059\nv 0.009068 -0.119098 0.177219\nv 0.013519 -0.052333 0.166798\nv 0.012323 -0.052333 0.160673\nv 0.008739 -0.052333 0.155564\nv 0.003386 -0.052333 0.152355\nv -0.002809 -0.052333 0.1516\nv -0.008775 -0.052333 0.15343\nv -0.013481 -0.052333 0.157529\nv -0.016114 -0.052333 0.163187\nv -0.016217 -0.052333 0.169427\nv -0.013773 -0.052333 0.175169\nv -0.009205 -0.052333 0.179421\nv -0.003302 -0.052333 0.181448\nv 0.002914 -0.052333 0.180898\nv 0.00837 -0.052333 0.177868\nv 0.012121 -0.052333 0.17288\nv 0.01315 -0.01895 0.163234\nv 0.010536 -0.01895 0.157567\nv 0.005843 -0.01895 0.153453\nv -0.000118 -0.01895 0.151604\nv -0.006315 -0.01895 0.152339\nv -0.011677 -0.01895 0.155532\nv -0.015278 -0.01895 0.160629\nv -0.016494 -0.01895 0.16675\nv -0.015115 -0.01895 0.172837\nv -0.01138 -0.01895 0.177836\nv -0.005934 -0.01895 0.180884\nv 0.000281 -0.01895 0.181454\nv 0.00619 -0.01895 0.179446\nv 0.010772 -0.01895 0.175209\nv 0.013234 -0.01895 0.169474\nv 0.012224 0.014432 0.160445\nv 0.008555 0.014432 0.155397\nv 0.003151 0.014432 0.152276\nv -0.003056 0.014432 0.151624\nv -0.008991 0.014432 0.153552\nv -0.013629 0.014432 0.157728\nv -0.016167 0.014432 0.163429\nv -0.016167 0.014432 0.16967\nv -0.013629 0.014432 0.175371\nv -0.008991 0.014432 0.179547\nv -0.003056 0.014432 0.181476\nv 0.003151 0.014432 0.180824\nv 0.008555 0.014432 0.177703\nv 0.012224 0.014432 0.172654\nv 0.013521 0.014432 0.16655\nv 0.012266 0.042107 0.160445\nv 0.008606 0.04235 0.155397\nv 0.003214 0.042709 0.152276\nv -0.002979 0.043122 0.151624\nv -0.008901 0.043516 0.153552\nv -0.013529 0.043824 0.157728\nv -0.016062 0.043993 0.163429\nv -0.016062 0.043993 0.16967\nv -0.013529 0.043824 0.175371\nv -0.008901 0.043516 0.179547\nv -0.002979 0.043122 0.181476\nv 0.003214 0.042709 0.180824\nv 0.008606 0.04235 0.177703\nv 0.012266 0.042107 0.172654\nv 0.013561 0.04202 0.16655\nv 0.013633 0.048076 0.160445\nv 0.010232 0.049449 0.155397\nv 0.005221 0.051473 0.152276\nv -0.000535 0.053797 0.151624\nv -0.006038 0.056019 0.153552\nv -0.010339 0.057755 0.157728\nv -0.012692 0.058706 0.163429\nv -0.012692 0.058706 0.16967\nv -0.010339 0.057755 0.175371\nv -0.006038 0.056019 0.179547\nv -0.000535 0.053797 0.181476\nv 0.005221 0.051473 0.180824\nv 0.010232 0.049449 0.177703\nv 0.013634 0.048076 0.172654\nv 0.014837 0.04759 0.16655\nv 0.013991 0.055687 0.155397\nv 0.009861 0.059173 0.152276\nv 0.005118 0.063176 0.151624\nv 0.000583 0.067005 0.153552\nv -0.002962 0.069996 0.157728\nv -0.004901 0.071633 0.163429\nv -0.004901 0.071633 0.16967\nv -0.002962 0.069996 0.175371\nv 0.000583 0.067005 0.179547\nv 0.005118 0.063176 0.181476\nv 0.009861 0.059173 0.180824\nv 0.013991 0.055687 0.177703\nv 0.016795 0.053321 0.172654\nv 0.017786 0.052484 0.16655\nv 0.016795 0.053321 0.160445\nv 0.019509 0.060441 0.155397\nv 0.016672 0.065041 0.152276\nv 0.013415 0.070324 0.151624\nv 0.0103 0.075376 0.153552\nv 0.007866 0.079324 0.157728\nv 0.006534 0.081485 0.163429\nv 0.006534 0.081485 0.16967\nv 0.007866 0.079324 0.175371\nv 0.0103 0.075376 0.179547\nv 0.013415 0.070324 0.181476\nv 0.016672 0.065041 0.180824\nv 0.019509 0.060441 0.177703\nv 0.021434 0.057318 0.172654\nv 0.022115 0.056214 0.16655\nv 0.021434 0.057318 0.160445\nv 0.026234 0.063236 0.155397\nv 0.024974 0.068492 0.152276\nv 0.023528 0.074527 0.151624\nv 0.022144 0.080299 0.153552\nv 0.021063 0.084809 0.157728\nv 0.020472 0.087277 0.163429\nv 0.020472 0.087277 0.16967\nv 0.021063 0.084809 0.175371\nv 0.022144 0.080299 0.179547\nv 0.023528 0.074527 0.181476\nv 0.024974 0.068492 0.180824\nv 0.026234 0.063236 0.177703\nv 0.027089 0.059669 0.172654\nv 0.027392 0.058407 0.16655\nv 0.027089 0.059669 0.160445\nv 0.033496 0.063793 0.155397\nv 0.033939 0.06918 0.152276\nv 0.034447 0.075365 0.151624\nv 0.034933 0.081281 0.153552\nv 0.035313 0.085903 0.157728\nv 0.035521 0.088433 0.163429\nv 0.035521 0.088433 0.16967\nv 0.035313 0.085903 0.175371\nv 0.034933 0.081281 0.179547\nv 0.034447 0.075365 0.181476\nv 0.033939 0.06918 0.180824\nv 0.033496 0.063793 0.177703\nv 0.033195 0.060137 0.172654\nv 0.033089 0.058844 0.16655\nv 0.033195 0.060137 0.160445\nv 0.040569 0.062058 0.155397\nv 0.04267 0.067037 0.152276\nv 0.045083 0.072755 0.151624\nv 0.04739 0.078224 0.153552\nv 0.049193 0.082497 0.157728\nv 0.05018 0.084836 0.163429\nv 0.05018 0.084836 0.16967\nv 0.049193 0.082497 0.175371\nv 0.04739 0.078224 0.179547\nv 0.045083 0.072755 0.181476\nv 0.04267 0.067037 0.180824\nv 0.040569 0.062058 0.177703\nv 0.039143 0.058678 0.172654\nv 0.038638 0.057482 0.16655\nv 0.039143 0.058678 0.160445\nv 0.044338 0.055436 0.160445\nv 0.046747 0.058202 0.155397\nv 0.050297 0.062277 0.152276\nv 0.054373 0.066958 0.151624\nv 0.058272 0.071433 0.153552\nv 0.061318 0.074931 0.157728\nv 0.062985 0.076845 0.163429\nv 0.062985 0.076845 0.16967\nv 0.061318 0.074931 0.175371\nv 0.058272 0.071433 0.179547\nv 0.054373 0.066958 0.181476\nv 0.050297 0.062277 0.180824\nv 0.046747 0.058202 0.177703\nv 0.044338 0.055436 0.172654\nv 0.043486 0.054457 0.16655\nv 0.048263 0.050735 0.160445\nv 0.051415 0.052611 0.155397\nv 0.056059 0.055376 0.152276\nv 0.061392 0.058551 0.151624\nv 0.066492 0.061587 0.153552\nv 0.070477 0.06396 0.157728\nv 0.072658 0.065258 0.163429\nv 0.072658 0.065258 0.16967\nv 0.070477 0.06396 0.175371\nv 0.066492 0.061587 0.179547\nv 0.061392 0.058551 0.181476\nv 0.056059 0.055376 0.180824\nv 0.051415 0.052611 0.177703\nv 0.048263 0.050735 0.172654\nv 0.047148 0.050071 0.16655\nv 0.050525 0.045044 0.160445\nv 0.054105 0.045843 0.155397\nv 0.05938 0.047021 0.152276\nv 0.065437 0.048374 0.151624\nv 0.07123 0.049668 0.153552\nv 0.075756 0.050679 0.157728\nv 0.078233 0.051232 0.163429\nv 0.078233 0.051232 0.16967\nv 0.075756 0.050679 0.175371\nv 0.07123 0.049668 0.179547\nv 0.065437 0.048374 0.181476\nv 0.05938 0.047021 0.180824\nv 0.054105 0.045843 0.177703\nv 0.050525 0.045044 0.172654\nv 0.049259 0.044761 0.16655\nv 0.050899 0.038931 0.160445\nv 0.05455 0.038574 0.155397\nv 0.059929 0.038048 0.152276\nv 0.066106 0.037443 0.151624\nv 0.072013 0.036865 0.153552\nv 0.076629 0.036414 0.157728\nv 0.079155 0.036167 0.163429\nv 0.079155 0.036167 0.16967\nv 0.076629 0.036414 0.175371\nv 0.072013 0.036865 0.179547\nv 0.066106 0.037443 0.181476\nv 0.059929 0.038048 0.180824\nv 0.05455 0.038574 0.177703\nv 0.050899 0.038931 0.172654\nv 0.049608 0.039058 0.16655\nv 0.049248 0.031509 0.160177\nv 0.052652 0.030734 0.154906\nv 0.057667 0.029592 0.151648\nv 0.063426 0.028281 0.150967\nv 0.068934 0.027027 0.15298\nv 0.073237 0.026047 0.15734\nv 0.075593 0.025511 0.163292\nv 0.075593 0.025511 0.169808\nv 0.073237 0.026047 0.17576\nv 0.068934 0.027027 0.180119\nv 0.063426 0.028281 0.182133\nv 0.057667 0.029592 0.181452\nv 0.052652 0.030734 0.178194\nv 0.049248 0.031509 0.172923\nv 0.048044 0.031783 0.16655\nv -0.001487 -0.127299 0.16655\nv 0.058972 0.020546 0.16655\nv 0.053754 0.027265 0.157132\nv 0.051118 0.028008 0.161395\nv 0.057637 0.026171 0.154497\nv 0.062097 0.024915 0.153946\nv 0.066362 0.023714 0.155575\nv 0.069695 0.022776 0.159101\nv 0.071518 0.022262 0.163915\nv 0.071518 0.022262 0.169185\nv 0.069695 0.022776 0.173999\nv 0.066362 0.023714 0.177525\nv 0.062097 0.024915 0.179154\nv 0.057637 0.026171 0.178603\nv 0.053754 0.027265 0.175968\nv 0.051118 0.028008 0.171705\nv 0.050186 0.02827 0.16655\n\nvt 0.372677 0.797475 0\nvt 0.354475 0.819153 0\nvt 0.355688 0.817708 0\nvt 0.354465 0.816363 0\nvt 0.614232 0.9269 0\nvt 0.356902 0.816263 0\nvt 0.355679 0.814918 0\nvt 0.613153 0.927174 0\nvt 0.358115 0.814817 0\nvt 0.356892 0.813472 0\nvt 0.612264 0.927928 0\nvt 0.359329 0.813372 0\nvt 0.358106 0.812027 0\nvt 0.61172 0.92903 0\nvt 0.360542 0.811927 0\nvt 0.359319 0.810582 0\nvt 0.611615 0.930291 0\nvt 0.361756 0.810482 0\nvt 0.360533 0.809137 0\nvt 0.611967 0.931491 0\nvt 0.362969 0.809037 0\nvt 0.361746 0.807691 0\nvt 0.612715 0.932423 0\nvt 0.364182 0.807591 0\nvt 0.36296 0.806246 0\nvt 0.613729 0.932927 0\nvt 0.365396 0.806146 0\nvt 0.364173 0.804801 0\nvt 0.614835 0.932915 0\nvt 0.366609 0.804701 0\nvt 0.365386 0.803356 0\nvt 0.615841 0.932389 0\nvt 0.367823 0.803256 0\nvt 0.3666 0.801911 0\nvt 0.616573 0.931441 0\nvt 0.369036 0.801811 0\nvt 0.367813 0.800465 0\nvt 0.616905 0.930233 0\nvt 0.37025 0.800365 0\nvt 0.369027 0.79902 0\nvt 0.616779 0.928976 0\nvt 0.371463 0.79892 0\nvt 0.37024 0.797575 0\nvt 0.616217 0.927885 0\nvt 0.371454 0.79613 0\nvt 0.353252 0.817808 0\nvt 0.615316 0.927151 0\nvt 0.373899 0.79882 0\nvt 0.355698 0.820498 0\nvt 0.356911 0.819053 0\nvt 0.358125 0.817608 0\nvt 0.359338 0.816163 0\nvt 0.360552 0.814718 0\nvt 0.361765 0.813272 0\nvt 0.362978 0.811827 0\nvt 0.364192 0.810382 0\nvt 0.365405 0.808937 0\nvt 0.366619 0.807492 0\nvt 0.367832 0.806046 0\nvt 0.369046 0.804601 0\nvt 0.370259 0.803156 0\nvt 0.371473 0.801711 0\nvt 0.372686 0.800265 0\nvt 0.375122 0.800166 0\nvt 0.356921 0.821844 0\nvt 0.358134 0.820398 0\nvt 0.359347 0.818953 0\nvt 0.360561 0.817508 0\nvt 0.361774 0.816063 0\nvt 0.362988 0.814618 0\nvt 0.364201 0.813172 0\nvt 0.365415 0.811727 0\nvt 0.366628 0.810282 0\nvt 0.367842 0.808837 0\nvt 0.369055 0.807392 0\nvt 0.370269 0.805946 0\nvt 0.371482 0.804501 0\nvt 0.372695 0.803056 0\nvt 0.373909 0.801611 0\nvt 0.376345 0.801511 0\nvt 0.358143 0.823189 0\nvt 0.359357 0.821744 0\nvt 0.36057 0.820298 0\nvt 0.361784 0.818853 0\nvt 0.362997 0.817408 0\nvt 0.364211 0.815963 0\nvt 0.365424 0.814518 0\nvt 0.366638 0.813072 0\nvt 0.367851 0.811627 0\nvt 0.369064 0.810182 0\nvt 0.370278 0.808737 0\nvt 0.371491 0.807292 0\nvt 0.372705 0.805846 0\nvt 0.373918 0.804401 0\nvt 0.375132 0.802956 0\nvt 0.359366 0.824534 0\nvt 0.377568 0.802856 0\nvt 0.36058 0.823089 0\nvt 0.361793 0.821644 0\nvt 0.363007 0.820198 0\nvt 0.36422 0.818753 0\nvt 0.365434 0.817308 0\nvt 0.366647 0.815863 0\nvt 0.36786 0.814418 0\nvt 0.369074 0.812972 0\nvt 0.370287 0.811527 0\nvt 0.371501 0.810082 0\nvt 0.372714 0.808637 0\nvt 0.373928 0.807192 0\nvt 0.375141 0.805746 0\nvt 0.376355 0.804301 0\nvt 0.360589 0.825879 0\nvt 0.378791 0.804201 0\nvt 0.361803 0.824434 0\nvt 0.363016 0.822989 0\nvt 0.36423 0.821544 0\nvt 0.365443 0.820099 0\nvt 0.366656 0.818653 0\nvt 0.36787 0.817208 0\nvt 0.369083 0.815763 0\nvt 0.370297 0.814318 0\nvt 0.37151 0.812872 0\nvt 0.372724 0.811427 0\nvt 0.373937 0.809982 0\nvt 0.375151 0.808537 0\nvt 0.376364 0.807092 0\nvt 0.377577 0.805646 0\nvt 0.363025 0.825779 0\nvt 0.364239 0.824334 0\nvt 0.365452 0.822889 0\nvt 0.366666 0.821444 0\nvt 0.367879 0.819999 0\nvt 0.369093 0.818553 0\nvt 0.370306 0.817108 0\nvt 0.37152 0.815663 0\nvt 0.372733 0.814218 0\nvt 0.373947 0.812773 0\nvt 0.37516 0.811327 0\nvt 0.376373 0.809882 0\nvt 0.377587 0.808437 0\nvt 0.3788 0.806992 0\nvt 0.361812 0.827225 0\nvt 0.380014 0.805546 0\nvt 0.364248 0.827125 0\nvt 0.365462 0.825679 0\nvt 0.366675 0.824234 0\nvt 0.367889 0.822789 0\nvt 0.369102 0.821344 0\nvt 0.370316 0.819899 0\nvt 0.371529 0.818453 0\nvt 0.372742 0.817008 0\nvt 0.373956 0.815563 0\nvt 0.375169 0.814118 0\nvt 0.376383 0.812672 0\nvt 0.377596 0.811227 0\nvt 0.37881 0.809782 0\nvt 0.380023 0.808337 0\nvt 0.381237 0.806892 0\nvt 0.363035 0.82857 0\nvt 0.365471 0.82847 0\nvt 0.366685 0.827025 0\nvt 0.367898 0.825579 0\nvt 0.369112 0.824134 0\nvt 0.370325 0.822689 0\nvt 0.371538 0.821244 0\nvt 0.372752 0.819799 0\nvt 0.373965 0.818353 0\nvt 0.375179 0.816908 0\nvt 0.376392 0.815463 0\nvt 0.377606 0.814018 0\nvt 0.378819 0.812573 0\nvt 0.380033 0.811127 0\nvt 0.381246 0.809682 0\nvt 0.382459 0.808237 0\nvt 0.364258 0.829915 0\nvt 0.366694 0.829815 0\nvt 0.367908 0.82837 0\nvt 0.369121 0.826925 0\nvt 0.370334 0.825479 0\nvt 0.371548 0.824034 0\nvt 0.372761 0.822589 0\nvt 0.373975 0.821144 0\nvt 0.375188 0.819699 0\nvt 0.376402 0.818253 0\nvt 0.377615 0.816808 0\nvt 0.378829 0.815363 0\nvt 0.380042 0.813918 0\nvt 0.381255 0.812473 0\nvt 0.382469 0.811027 0\nvt 0.365481 0.83126 0\nvt 0.383682 0.809582 0\nvt 0.367917 0.83116 0\nvt 0.36913 0.829715 0\nvt 0.370344 0.82827 0\nvt 0.371557 0.826825 0\nvt 0.372771 0.825379 0\nvt 0.373984 0.823934 0\nvt 0.375198 0.822489 0\nvt 0.376411 0.821044 0\nvt 0.377624 0.819599 0\nvt 0.378838 0.818153 0\nvt 0.380051 0.816708 0\nvt 0.381265 0.815263 0\nvt 0.382478 0.813818 0\nvt 0.383692 0.812373 0\nvt 0.366703 0.832606 0\nvt 0.384905 0.810927 0\nvt 0.367926 0.833951 0\nvt 0.386128 0.812273 0\nvt 0.36914 0.832506 0\nvt 0.370353 0.83106 0\nvt 0.371567 0.829615 0\nvt 0.37278 0.82817 0\nvt 0.373994 0.826725 0\nvt 0.375207 0.82528 0\nvt 0.37642 0.823834 0\nvt 0.377634 0.822389 0\nvt 0.378847 0.820944 0\nvt 0.380061 0.819499 0\nvt 0.381274 0.818053 0\nvt 0.382488 0.816608 0\nvt 0.383701 0.815163 0\nvt 0.384915 0.813718 0\nvt 0.369149 0.835296 0\nvt 0.387351 0.813618 0\nvt 0.370363 0.833851 0\nvt 0.371576 0.832406 0\nvt 0.372789 0.83096 0\nvt 0.374003 0.829515 0\nvt 0.375216 0.82807 0\nvt 0.37643 0.826625 0\nvt 0.377643 0.82518 0\nvt 0.378857 0.823734 0\nvt 0.38007 0.822289 0\nvt 0.381284 0.820844 0\nvt 0.382497 0.819399 0\nvt 0.383711 0.817954 0\nvt 0.384924 0.816508 0\nvt 0.386137 0.815063 0\nvt 0.370372 0.836641 0\nvt 0.388574 0.814963 0\nvt 0.371585 0.835196 0\nvt 0.372799 0.833751 0\nvt 0.374012 0.832306 0\nvt 0.375226 0.83086 0\nvt 0.376439 0.829415 0\nvt 0.377653 0.82797 0\nvt 0.378866 0.826525 0\nvt 0.38008 0.82508 0\nvt 0.381293 0.823634 0\nvt 0.382507 0.822189 0\nvt 0.38372 0.820744 0\nvt 0.384933 0.819299 0\nvt 0.386147 0.817854 0\nvt 0.38736 0.816408 0\nvt 0.389797 0.816308 0\nvt 0.371595 0.837986 0\nvt 0.372808 0.836541 0\nvt 0.374022 0.835096 0\nvt 0.375235 0.833651 0\nvt 0.376449 0.832206 0\nvt 0.377662 0.83076 0\nvt 0.378876 0.829315 0\nvt 0.380089 0.82787 0\nvt 0.381302 0.826425 0\nvt 0.382516 0.82498 0\nvt 0.383729 0.823534 0\nvt 0.384943 0.822089 0\nvt 0.386156 0.820644 0\nvt 0.38737 0.819199 0\nvt 0.388583 0.817754 0\nvt 0.372483 0.838963 0\nvt 0.390685 0.817285 0\nvt 0.373696 0.837518 0\nvt 0.37491 0.836073 0\nvt 0.376123 0.834628 0\nvt 0.377337 0.833183 0\nvt 0.37855 0.831737 0\nvt 0.379764 0.830292 0\nvt 0.380977 0.828847 0\nvt 0.38219 0.827402 0\nvt 0.383404 0.825956 0\nvt 0.384617 0.824511 0\nvt 0.385831 0.823066 0\nvt 0.387044 0.821621 0\nvt 0.388258 0.820176 0\nvt 0.389471 0.81873 0\nvt 0.614186 0.929854 0\nvt 0.194785 0.924923 0\nvt 0.374031 0.837887 0\nvt 0.196892 0.925216 0\nvt 0.391019 0.817654 0\nvt 0.372818 0.839332 0\nvt 0.196795 0.924242 0\nvt 0.375245 0.836441 0\nvt 0.196635 0.926152 0\nvt 0.376458 0.834996 0\nvt 0.196068 0.926887 0\nvt 0.377672 0.833551 0\nvt 0.195289 0.927294 0\nvt 0.378885 0.832106 0\nvt 0.194432 0.927304 0\nvt 0.380098 0.830661 0\nvt 0.193646 0.926913 0\nvt 0.381312 0.829215 0\nvt 0.193067 0.926191 0\nvt 0.382525 0.82777 0\nvt 0.192794 0.925261 0\nvt 0.383739 0.826325 0\nvt 0.192876 0.924285 0\nvt 0.384952 0.82488 0\nvt 0.193297 0.923431 0\nvt 0.386166 0.823434 0\nvt 0.193985 0.922847 0\nvt 0.387379 0.821989 0\nvt 0.194822 0.922634 0\nvt 0.388593 0.820544 0\nvt 0.195661 0.922828 0\nvt 0.389806 0.819099 0\nvt 0.196359 0.923397 0\n\nf 3/4 2/3 1/2 \nf 5/7 4/6 2/3 \nf 7/10 6/9 4/6 \nf 9/13 8/12 6/9 \nf 11/16 10/15 8/12 \nf 13/19 12/18 10/15 \nf 15/22 14/21 12/18 \nf 17/25 16/24 14/21 \nf 19/28 18/27 16/24 \nf 21/31 20/30 18/27 \nf 23/34 22/33 20/30 \nf 25/37 24/36 22/33 \nf 27/40 26/39 24/36 \nf 29/43 28/42 26/39 \nf 30/45 1/1 28/42 \nf 2/3 32/50 31/49 \nf 4/6 33/51 32/50 \nf 6/9 34/52 33/51 \nf 8/12 35/53 34/52 \nf 10/15 36/54 35/53 \nf 12/18 37/55 36/54 \nf 14/21 38/56 37/55 \nf 16/24 39/57 38/56 \nf 18/27 40/58 39/57 \nf 20/30 41/59 40/58 \nf 22/33 42/60 41/59 \nf 24/36 43/61 42/60 \nf 26/39 44/62 43/61 \nf 28/42 45/63 44/62 \nf 1/1 31/48 45/63 \nf 32/50 47/66 46/65 \nf 33/51 48/67 47/66 \nf 34/52 49/68 48/67 \nf 35/53 50/69 49/68 \nf 36/54 51/70 50/69 \nf 37/55 52/71 51/70 \nf 38/56 53/72 52/71 \nf 39/57 54/73 53/72 \nf 40/58 55/74 54/73 \nf 41/59 56/75 55/74 \nf 42/60 57/76 56/75 \nf 43/61 58/77 57/76 \nf 44/62 59/78 58/77 \nf 45/63 60/79 59/78 \nf 31/48 46/64 60/79 \nf 47/66 62/82 61/81 \nf 48/67 63/83 62/82 \nf 49/68 64/84 63/83 \nf 50/69 65/85 64/84 \nf 51/70 66/86 65/85 \nf 52/71 67/87 66/86 \nf 53/72 68/88 67/87 \nf 54/73 69/89 68/88 \nf 55/74 70/90 69/89 \nf 56/75 71/91 70/90 \nf 57/76 72/92 71/91 \nf 58/77 73/93 72/92 \nf 59/78 74/94 73/93 \nf 60/79 75/95 74/94 \nf 46/64 61/80 75/95 \nf 62/82 77/98 76/96 \nf 63/83 78/99 77/98 \nf 64/84 79/100 78/99 \nf 65/85 80/101 79/100 \nf 66/86 81/102 80/101 \nf 67/87 82/103 81/102 \nf 67/87 68/88 83/104 \nf 68/88 69/89 84/105 \nf 69/89 70/90 85/106 \nf 70/90 71/91 86/107 \nf 71/91 72/92 87/108 \nf 72/92 73/93 88/109 \nf 73/93 74/94 89/110 \nf 74/94 75/95 90/111 \nf 61/80 76/97 90/111 \nf 77/98 92/114 91/112 \nf 77/98 78/99 93/115 \nf 78/99 79/100 94/116 \nf 79/100 80/101 95/117 \nf 81/102 96/118 95/117 \nf 81/102 82/103 97/119 \nf 82/103 83/104 98/120 \nf 84/105 99/121 98/120 \nf 84/105 85/106 100/122 \nf 85/106 86/107 101/123 \nf 87/108 102/124 101/123 \nf 88/109 103/125 102/124 \nf 88/109 89/110 104/126 \nf 90/111 105/127 104/126 \nf 90/111 76/97 91/113 \nf 91/112 92/114 106/128 \nf 92/114 93/115 107/129 \nf 94/116 108/130 107/129 \nf 94/116 95/117 109/131 \nf 95/117 96/118 110/132 \nf 97/119 111/133 110/132 \nf 97/119 98/120 112/134 \nf 98/120 99/121 113/135 \nf 100/122 114/136 113/135 \nf 100/122 101/123 115/137 \nf 101/123 102/124 116/138 \nf 103/125 117/139 116/138 \nf 104/126 118/140 117/139 \nf 105/127 119/141 118/140 \nf 105/127 91/113 120/143 \nf 120/142 106/128 121/144 \nf 107/129 122/145 121/144 \nf 107/129 108/130 123/146 \nf 108/130 109/131 124/147 \nf 110/132 125/148 124/147 \nf 111/133 126/149 125/148 \nf 111/133 112/134 127/150 \nf 112/134 113/135 128/151 \nf 113/135 114/136 129/152 \nf 115/137 130/153 129/152 \nf 115/137 116/138 131/154 \nf 116/138 117/139 132/155 \nf 118/140 133/156 132/155 \nf 119/141 134/157 133/156 \nf 119/141 120/143 135/158 \nf 135/159 121/144 136/160 \nf 122/145 137/161 136/160 \nf 122/145 123/146 138/162 \nf 124/147 139/163 138/162 \nf 124/147 125/148 140/164 \nf 126/149 141/165 140/164 \nf 126/149 127/150 142/166 \nf 127/150 128/151 143/167 \nf 128/151 129/152 144/168 \nf 130/153 145/169 144/168 \nf 131/154 146/170 145/169 \nf 131/154 132/155 147/171 \nf 133/156 148/172 147/171 \nf 133/156 134/157 149/173 \nf 135/158 150/174 149/173 \nf 150/175 136/160 151/176 \nf 137/161 152/177 151/176 \nf 137/161 138/162 153/178 \nf 139/163 154/179 153/178 \nf 139/163 140/164 155/180 \nf 141/165 156/181 155/180 \nf 141/165 142/166 157/182 \nf 142/166 143/167 158/183 \nf 143/167 144/168 159/184 \nf 144/168 145/169 160/185 \nf 146/170 161/186 160/185 \nf 146/170 147/171 162/187 \nf 147/171 148/172 163/188 \nf 148/172 149/173 164/189 \nf 150/174 165/191 164/189 \nf 165/190 151/176 166/192 \nf 152/177 167/193 166/192 \nf 152/177 153/178 168/194 \nf 154/179 169/195 168/194 \nf 155/180 170/196 169/195 \nf 155/180 156/181 171/197 \nf 156/181 157/182 172/198 \nf 158/183 173/199 172/198 \nf 158/183 159/184 174/200 \nf 160/185 175/201 174/200 \nf 161/186 176/202 175/201 \nf 161/186 162/187 177/203 \nf 163/188 178/204 177/203 \nf 164/189 179/205 178/204 \nf 164/189 165/191 180/207 \nf 166/192 182/210 181/208 \nf 166/192 167/193 183/211 \nf 167/193 168/194 184/212 \nf 168/194 169/195 185/213 \nf 169/195 170/196 186/214 \nf 170/196 171/197 187/215 \nf 171/197 172/198 188/216 \nf 173/199 189/217 188/216 \nf 173/199 174/200 190/218 \nf 175/201 191/219 190/218 \nf 175/201 176/202 192/220 \nf 176/202 177/203 193/221 \nf 177/203 178/204 194/222 \nf 179/205 195/223 194/222 \nf 179/205 180/207 181/209 \nf 182/210 197/226 196/224 \nf 182/210 183/211 198/227 \nf 184/212 199/228 198/227 \nf 184/212 185/213 200/229 \nf 185/213 186/214 201/230 \nf 187/215 202/231 201/230 \nf 187/215 188/216 203/232 \nf 188/216 189/217 204/233 \nf 190/218 205/234 204/233 \nf 190/218 191/219 206/235 \nf 191/219 192/220 207/236 \nf 193/221 208/237 207/236 \nf 193/221 194/222 209/238 \nf 195/223 210/239 209/238 \nf 195/223 181/209 196/225 \nf 197/226 212/242 211/240 \nf 197/226 198/227 213/243 \nf 199/228 214/244 213/243 \nf 199/228 200/229 215/245 \nf 200/229 201/230 216/246 \nf 202/231 217/247 216/246 \nf 202/231 203/232 218/248 \nf 203/232 204/233 219/249 \nf 205/234 220/250 219/249 \nf 205/234 206/235 221/251 \nf 206/235 207/236 222/252 \nf 208/237 223/253 222/252 \nf 208/237 209/238 224/254 \nf 210/239 225/255 224/254 \nf 210/239 196/225 211/241 \nf 212/242 227/258 226/257 \nf 212/242 213/243 228/259 \nf 214/244 229/260 228/259 \nf 214/244 215/245 230/261 \nf 216/246 231/262 230/261 \nf 217/247 232/263 231/262 \nf 217/247 218/248 233/264 \nf 218/248 219/249 234/265 \nf 219/249 220/250 235/266 \nf 221/251 236/267 235/266 \nf 221/251 222/252 237/268 \nf 223/253 238/269 237/268 \nf 223/253 224/254 239/270 \nf 225/255 240/271 239/270 \nf 225/255 211/241 226/256 \nf 227/258 242/274 241/272 \nf 227/258 228/259 243/275 \nf 228/259 229/260 244/276 \nf 229/260 230/261 245/277 \nf 230/261 231/262 246/278 \nf 231/262 232/263 247/279 \nf 233/264 248/280 247/279 \nf 234/265 249/281 248/280 \nf 235/266 250/282 249/281 \nf 236/267 251/283 250/282 \nf 237/268 252/284 251/283 \nf 238/269 253/285 252/284 \nf 238/269 239/270 254/286 \nf 239/270 240/271 255/287 \nf 226/256 241/273 255/287 \nf 3/5 30/47 256/288 \nf 5/8 3/5 256/288 \nf 7/11 5/8 256/288 \nf 9/14 7/11 256/288 \nf 11/17 9/14 256/288 \nf 13/20 11/17 256/288 \nf 15/23 13/20 256/288 \nf 17/26 15/23 256/288 \nf 19/29 17/26 256/288 \nf 21/32 19/29 256/288 \nf 23/35 21/32 256/288 \nf 25/38 23/35 256/288 \nf 27/41 25/38 256/288 \nf 29/44 27/41 256/288 \nf 30/47 29/44 256/288 \nf 259/294 258/291 257/289 \nf 258/291 260/296 257/289 \nf 260/296 261/298 257/289 \nf 261/298 262/300 257/289 \nf 262/300 263/302 257/289 \nf 263/302 264/304 257/289 \nf 264/304 265/306 257/289 \nf 265/306 266/308 257/289 \nf 266/308 267/310 257/289 \nf 267/310 268/312 257/289 \nf 268/312 269/314 257/289 \nf 269/314 270/316 257/289 \nf 270/316 271/318 257/289 \nf 271/318 272/320 257/289 \nf 272/320 259/294 257/289 \nf 251/283 268/311 267/309 \nf 249/281 250/282 267/309 \nf 248/280 249/281 266/307 \nf 247/279 248/280 265/305 \nf 247/279 264/303 263/301 \nf 246/278 263/301 262/299 \nf 244/276 245/277 262/299 \nf 243/275 244/276 261/297 \nf 242/274 243/275 260/295 \nf 241/272 242/274 258/290 \nf 255/287 241/273 259/292 \nf 255/287 272/319 271/317 \nf 254/286 271/317 270/315 \nf 253/285 270/315 269/313 \nf 252/284 269/313 268/311 \nf 30/46 3/4 1/2 \nf 3/4 5/7 2/3 \nf 5/7 7/10 4/6 \nf 7/10 9/13 6/9 \nf 9/13 11/16 8/12 \nf 11/16 13/19 10/15 \nf 13/19 15/22 12/18 \nf 15/22 17/25 14/21 \nf 17/25 19/28 16/24 \nf 19/28 21/31 18/27 \nf 21/31 23/34 20/30 \nf 23/34 25/37 22/33 \nf 25/37 27/40 24/36 \nf 27/40 29/43 26/39 \nf 29/43 30/45 28/42 \nf 1/2 2/3 31/49 \nf 2/3 4/6 32/50 \nf 4/6 6/9 33/51 \nf 6/9 8/12 34/52 \nf 8/12 10/15 35/53 \nf 10/15 12/18 36/54 \nf 12/18 14/21 37/55 \nf 14/21 16/24 38/56 \nf 16/24 18/27 39/57 \nf 18/27 20/30 40/58 \nf 20/30 22/33 41/59 \nf 22/33 24/36 42/60 \nf 24/36 26/39 43/61 \nf 26/39 28/42 44/62 \nf 28/42 1/1 45/63 \nf 31/49 32/50 46/65 \nf 32/50 33/51 47/66 \nf 33/51 34/52 48/67 \nf 34/52 35/53 49/68 \nf 35/53 36/54 50/69 \nf 36/54 37/55 51/70 \nf 37/55 38/56 52/71 \nf 38/56 39/57 53/72 \nf 39/57 40/58 54/73 \nf 40/58 41/59 55/74 \nf 41/59 42/60 56/75 \nf 42/60 43/61 57/76 \nf 43/61 44/62 58/77 \nf 44/62 45/63 59/78 \nf 45/63 31/48 60/79 \nf 46/65 47/66 61/81 \nf 47/66 48/67 62/82 \nf 48/67 49/68 63/83 \nf 49/68 50/69 64/84 \nf 50/69 51/70 65/85 \nf 51/70 52/71 66/86 \nf 52/71 53/72 67/87 \nf 53/72 54/73 68/88 \nf 54/73 55/74 69/89 \nf 55/74 56/75 70/90 \nf 56/75 57/76 71/91 \nf 57/76 58/77 72/92 \nf 58/77 59/78 73/93 \nf 59/78 60/79 74/94 \nf 60/79 46/64 75/95 \nf 61/81 62/82 76/96 \nf 62/82 63/83 77/98 \nf 63/83 64/84 78/99 \nf 64/84 65/85 79/100 \nf 65/85 66/86 80/101 \nf 66/86 67/87 81/102 \nf 82/103 67/87 83/104 \nf 83/104 68/88 84/105 \nf 84/105 69/89 85/106 \nf 85/106 70/90 86/107 \nf 86/107 71/91 87/108 \nf 87/108 72/92 88/109 \nf 88/109 73/93 89/110 \nf 89/110 74/94 90/111 \nf 75/95 61/80 90/111 \nf 76/96 77/98 91/112 \nf 92/114 77/98 93/115 \nf 93/115 78/99 94/116 \nf 94/116 79/100 95/117 \nf 80/101 81/102 95/117 \nf 96/118 81/102 97/119 \nf 97/119 82/103 98/120 \nf 83/104 84/105 98/120 \nf 99/121 84/105 100/122 \nf 100/122 85/106 101/123 \nf 86/107 87/108 101/123 \nf 87/108 88/109 102/124 \nf 103/125 88/109 104/126 \nf 89/110 90/111 104/126 \nf 105/127 90/111 91/113 \nf 120/142 91/112 106/128 \nf 106/128 92/114 107/129 \nf 93/115 94/116 107/129 \nf 108/130 94/116 109/131 \nf 109/131 95/117 110/132 \nf 96/118 97/119 110/132 \nf 111/133 97/119 112/134 \nf 112/134 98/120 113/135 \nf 99/121 100/122 113/135 \nf 114/136 100/122 115/137 \nf 115/137 101/123 116/138 \nf 102/124 103/125 116/138 \nf 103/125 104/126 117/139 \nf 104/126 105/127 118/140 \nf 119/141 105/127 120/143 \nf 135/159 120/142 121/144 \nf 106/128 107/129 121/144 \nf 122/145 107/129 123/146 \nf 123/146 108/130 124/147 \nf 109/131 110/132 124/147 \nf 110/132 111/133 125/148 \nf 126/149 111/133 127/150 \nf 127/150 112/134 128/151 \nf 128/151 113/135 129/152 \nf 114/136 115/137 129/152 \nf 130/153 115/137 131/154 \nf 131/154 116/138 132/155 \nf 117/139 118/140 132/155 \nf 118/140 119/141 133/156 \nf 134/157 119/141 135/158 \nf 150/175 135/159 136/160 \nf 121/144 122/145 136/160 \nf 137/161 122/145 138/162 \nf 123/146 124/147 138/162 \nf 139/163 124/147 140/164 \nf 125/148 126/149 140/164 \nf 141/165 126/149 142/166 \nf 142/166 127/150 143/167 \nf 143/167 128/151 144/168 \nf 129/152 130/153 144/168 \nf 130/153 131/154 145/169 \nf 146/170 131/154 147/171 \nf 132/155 133/156 147/171 \nf 148/172 133/156 149/173 \nf 134/157 135/158 149/173 \nf 165/190 150/175 151/176 \nf 136/160 137/161 151/176 \nf 152/177 137/161 153/178 \nf 138/162 139/163 153/178 \nf 154/179 139/163 155/180 \nf 140/164 141/165 155/180 \nf 156/181 141/165 157/182 \nf 157/182 142/166 158/183 \nf 158/183 143/167 159/184 \nf 159/184 144/168 160/185 \nf 145/169 146/170 160/185 \nf 161/186 146/170 162/187 \nf 162/187 147/171 163/188 \nf 163/188 148/172 164/189 \nf 149/173 150/174 164/189 \nf 180/206 165/190 166/192 \nf 151/176 152/177 166/192 \nf 167/193 152/177 168/194 \nf 153/178 154/179 168/194 \nf 154/179 155/180 169/195 \nf 170/196 155/180 171/197 \nf 171/197 156/181 172/198 \nf 157/182 158/183 172/198 \nf 173/199 158/183 174/200 \nf 159/184 160/185 174/200 \nf 160/185 161/186 175/201 \nf 176/202 161/186 177/203 \nf 162/187 163/188 177/203 \nf 163/188 164/189 178/204 \nf 179/205 164/189 180/207 \nf 180/206 166/192 181/208 \nf 182/210 166/192 183/211 \nf 183/211 167/193 184/212 \nf 184/212 168/194 185/213 \nf 185/213 169/195 186/214 \nf 186/214 170/196 187/215 \nf 187/215 171/197 188/216 \nf 172/198 173/199 188/216 \nf 189/217 173/199 190/218 \nf 174/200 175/201 190/218 \nf 191/219 175/201 192/220 \nf 192/220 176/202 193/221 \nf 193/221 177/203 194/222 \nf 178/204 179/205 194/222 \nf 195/223 179/205 181/209 \nf 181/208 182/210 196/224 \nf 197/226 182/210 198/227 \nf 183/211 184/212 198/227 \nf 199/228 184/212 200/229 \nf 200/229 185/213 201/230 \nf 186/214 187/215 201/230 \nf 202/231 187/215 203/232 \nf 203/232 188/216 204/233 \nf 189/217 190/218 204/233 \nf 205/234 190/218 206/235 \nf 206/235 191/219 207/236 \nf 192/220 193/221 207/236 \nf 208/237 193/221 209/238 \nf 194/222 195/223 209/238 \nf 210/239 195/223 196/225 \nf 196/224 197/226 211/240 \nf 212/242 197/226 213/243 \nf 198/227 199/228 213/243 \nf 214/244 199/228 215/245 \nf 215/245 200/229 216/246 \nf 201/230 202/231 216/246 \nf 217/247 202/231 218/248 \nf 218/248 203/232 219/249 \nf 204/233 205/234 219/249 \nf 220/250 205/234 221/251 \nf 221/251 206/235 222/252 \nf 207/236 208/237 222/252 \nf 223/253 208/237 224/254 \nf 209/238 210/239 224/254 \nf 225/255 210/239 211/241 \nf 211/240 212/242 226/257 \nf 227/258 212/242 228/259 \nf 213/243 214/244 228/259 \nf 229/260 214/244 230/261 \nf 215/245 216/246 230/261 \nf 216/246 217/247 231/262 \nf 232/263 217/247 233/264 \nf 233/264 218/248 234/265 \nf 234/265 219/249 235/266 \nf 220/250 221/251 235/266 \nf 236/267 221/251 237/268 \nf 222/252 223/253 237/268 \nf 238/269 223/253 239/270 \nf 224/254 225/255 239/270 \nf 240/271 225/255 226/256 \nf 226/257 227/258 241/272 \nf 242/274 227/258 243/275 \nf 243/275 228/259 244/276 \nf 244/276 229/260 245/277 \nf 245/277 230/261 246/278 \nf 246/278 231/262 247/279 \nf 232/263 233/264 247/279 \nf 233/264 234/265 248/280 \nf 234/265 235/266 249/281 \nf 235/266 236/267 250/282 \nf 236/267 237/268 251/283 \nf 237/268 238/269 252/284 \nf 253/285 238/269 254/286 \nf 254/286 239/270 255/287 \nf 240/271 226/256 255/287 \nf 250/282 251/283 267/309 \nf 266/307 249/281 267/309 \nf 265/305 248/280 266/307 \nf 264/303 247/279 265/305 \nf 246/278 247/279 263/301 \nf 245/277 246/278 262/299 \nf 261/297 244/276 262/299 \nf 260/295 243/275 261/297 \nf 258/290 242/274 260/295 \nf 259/293 241/272 258/290 \nf 272/319 255/287 259/292 \nf 254/286 255/287 271/317 \nf 253/285 254/286 270/315 \nf 252/284 253/285 269/313 \nf 251/283 252/284 268/311 \n\n";

},{}],7:[function(require,module,exports){
module.exports = "# Blender v2.77 (sub 0) OBJ File: 'base6.blend'\n# www.blender.org\nmtllib lamp.mtl\no LIGHTS_Cylinder.004\nv 0.031097 0.843239 -1.548096\nv 0.031097 0.843238 1.548107\nv 0.071091 0.836128 1.548107\nv 0.071091 0.836128 -1.548095\nv 0.108856 0.821479 1.548105\nv 0.108856 0.821480 -1.548097\nv 0.142914 0.799857 1.548105\nv 0.142914 0.799858 -1.548096\nv 0.171967 0.772087 1.548106\nv 0.171967 0.772087 -1.548096\nv 0.194901 0.739234 1.548107\nv 0.194901 0.739235 -1.548096\nv 0.210815 0.702583 1.548105\nv 0.210815 0.702583 -1.548097\nv 0.219131 0.663520 1.548106\nv 0.219131 0.663521 -1.548096\nv -0.192841 0.661857 -1.548096\nv -0.192841 0.661857 1.548106\nv -0.186371 0.695762 1.548106\nv -0.186371 0.695763 -1.548096\nv -0.171204 0.732948 1.548106\nv -0.171204 0.732948 -1.548095\nv -0.148941 0.766578 1.548106\nv -0.148941 0.766579 -1.548096\nv -0.120468 0.795341 1.548106\nv -0.120468 0.795341 -1.548096\nv -0.086868 0.818122 1.548106\nv -0.086868 0.818123 -1.548095\nv -0.049438 0.834068 1.548106\nv -0.049438 0.834053 -1.548095\nv -0.009598 0.842536 1.548106\nv -0.009598 0.842552 -1.548095\nv 0.219452 0.629081 1.548105\nv 0.219452 0.629082 -1.548098\nv 0.026245 0.789162 -1.200114\nv 0.026245 0.789162 -2.216957\nv 0.031418 0.788216 -2.216955\nv 0.031418 0.788215 -1.200114\nv 0.036285 0.786324 -2.216954\nv 0.036285 0.786323 -1.200112\nv 0.040680 0.783546 -2.216957\nv 0.040680 0.783546 -1.200114\nv 0.044434 0.779945 -2.216956\nv 0.044434 0.779945 -1.200115\nv 0.047394 0.775734 -2.216955\nv 0.047394 0.775734 -1.200113\nv 0.049454 0.770973 -2.216956\nv 0.049454 0.770973 -1.200114\nv 0.050537 0.765938 -2.216956\nv 0.050537 0.765938 -1.200114\nv 0.050583 0.760780 -2.216955\nv 0.050583 0.760780 -1.200114\nv 0.049606 0.755714 -2.216956\nv 0.049606 0.755714 -1.200114\nv 0.047653 0.750893 -2.216956\nv 0.047653 0.750892 -1.200115\nv 0.044769 0.746559 -2.216956\nv 0.044769 0.746559 -1.200114\nv 0.041092 0.742836 -2.216956\nv 0.041092 0.742836 -1.200114\nv 0.036758 0.739906 -2.216956\nv 0.036758 0.739906 -1.200116\nv 0.031921 0.737862 -2.216955\nv 0.031921 0.737861 -1.200113\nv 0.026779 0.736763 -2.216955\nv 0.026779 0.736763 -1.200114\nv 0.021530 0.736671 -2.216957\nv 0.021530 0.736671 -1.200114\nv 0.016373 0.737587 -2.216955\nv 0.016373 0.737587 -1.200114\nv 0.011490 0.739479 -2.216955\nv 0.011490 0.739479 -1.200113\nv 0.007095 0.742256 -2.216955\nv 0.007095 0.742256 -1.200113\nv 0.003342 0.745857 -2.216957\nv 0.003342 0.745857 -1.200116\nv 0.000381 0.750099 -2.216957\nv 0.000381 0.750099 -1.200115\nv -0.001678 0.754829 -2.216957\nv -0.001678 0.754829 -1.200115\nv -0.002762 0.759865 -2.216957\nv -0.002747 0.759865 -1.200116\nv -0.002808 0.765022 -2.216957\nv -0.002808 0.765022 -1.200116\nv -0.001831 0.770119 -2.216957\nv -0.001831 0.770119 -1.200116\nv 0.000122 0.774910 -2.216957\nv 0.000122 0.774910 -1.200115\nv 0.003006 0.779243 -2.216957\nv 0.003006 0.779243 -1.200116\nv 0.006683 0.782967 -2.216957\nv 0.006683 0.782966 -1.200115\nv 0.011017 0.785896 -2.216955\nv 0.011017 0.785896 -1.200113\nv 0.015854 0.787971 -2.216956\nv 0.015854 0.787971 -1.200113\nv 0.030258 0.585304 -2.517254\nv 0.032516 0.582863 -2.513302\nv 0.020996 0.789070 -2.216956\nv 0.020996 0.789070 -1.200114\nv 0.011475 0.566597 -2.482134\nv 0.016541 0.566933 -2.483434\nv -0.008057 0.293526 -2.644189\nv -0.013062 0.293892 -2.642690\nv -0.018982 0.579353 -2.500095\nv -0.019257 0.581947 -2.504554\nv 0.013779 0.592201 -2.526974\nv 0.018723 0.591072 -2.525671\nv 0.031616 0.572853 -2.495806\nv 0.028946 0.570808 -2.491853\nv -0.008377 0.570137 -2.485546\nv -0.012268 0.572090 -2.488391\nv -0.010620 0.590553 -2.520720\nv -0.006424 0.591835 -2.523560\nv 0.033813 0.580269 -2.509012\nv 0.006241 0.566750 -2.481697\nv -0.018524 0.584450 -2.509015\nv 0.023224 0.589485 -2.523561\nv 0.025452 0.569099 -2.488390\nv -0.015411 0.574318 -2.491854\nv -0.001709 0.592690 -2.525673\nv 0.034103 0.577705 -2.504553\nv 0.001068 0.567421 -2.482134\nv -0.016785 0.586769 -2.513304\nv 0.027115 0.587563 -2.520720\nv 0.021271 0.567787 -2.485548\nv -0.017685 0.576790 -2.495806\nv 0.003372 0.593025 -2.526974\nv 0.033356 0.575203 -2.500093\nv -0.003876 0.568581 -2.483434\nv -0.014114 0.588844 -2.517254\nv 0.008591 0.592873 -2.527415\nv -0.028458 0.295143 -2.644187\nv -0.023468 0.294716 -2.642689\nv -0.054581 -0.051353 -2.653321\nv -0.059570 -0.050896 -2.654819\nv -0.012924 0.295448 -2.694355\nv -0.007919 0.295021 -2.692855\nv -0.036987 0.297157 -2.687150\nv -0.032944 0.296913 -2.690423\nv -0.018265 0.294289 -2.642186\nv -0.003326 0.294563 -2.690423\nv -0.028320 0.296639 -2.692857\nv 0.000717 0.294136 -2.687149\nv -0.023315 0.296272 -2.694356\nv 0.004013 0.293770 -2.683157\nv -0.018112 0.295876 -2.694863\nv -0.033066 0.295601 -2.646622\nv 0.006470 0.293434 -2.678603\nv -0.037094 0.296028 -2.649900\nv 0.007965 0.293160 -2.673662\nv -0.040390 0.296394 -2.653890\nv 0.008469 0.292976 -2.668522\nv -0.042847 0.296730 -2.658446\nv 0.007935 0.292854 -2.663385\nv -0.044357 0.297005 -2.663386\nv 0.006409 0.292824 -2.658442\nv -0.044846 0.297188 -2.668524\nv 0.003937 0.292885 -2.653890\nv -0.044327 0.297310 -2.673663\nv 0.000610 0.293007 -2.649899\nv -0.042786 0.297340 -2.678604\nv -0.003433 0.293251 -2.646624\nv -0.040314 0.297279 -2.683157\nv -0.044052 -0.050590 -2.704987\nv -0.049240 -0.050163 -2.705494\nv -0.054443 -0.049766 -2.704987\nv -0.059433 -0.049431 -2.703487\nv -0.064056 -0.049126 -2.701054\nv -0.068100 -0.048912 -2.697780\nv -0.071411 -0.048759 -2.693789\nv -0.073898 -0.048698 -2.689237\nv -0.075424 -0.048729 -2.684294\nv -0.075943 -0.048851 -2.679155\nv -0.075455 -0.049065 -2.674017\nv -0.073944 -0.049339 -2.669076\nv -0.071503 -0.049644 -2.664521\nv -0.068192 -0.050041 -2.660531\nv -0.064163 -0.050468 -2.657254\nv -0.049393 -0.051781 -2.652816\nv -0.044189 -0.052177 -2.653321\nv -0.039200 -0.052513 -2.654819\nv -0.034576 -0.052818 -2.657257\nv -0.030533 -0.053032 -2.660531\nv -0.027222 -0.053184 -2.664522\nv -0.024734 -0.053245 -2.669076\nv -0.023209 -0.053215 -2.674017\nv -0.022690 -0.053093 -2.679154\nv -0.023178 -0.052879 -2.684292\nv -0.024689 -0.052605 -2.689235\nv -0.027130 -0.052299 -2.693788\nv -0.030441 -0.051903 -2.697781\nv -0.034454 -0.051475 -2.701055\nv -0.039062 -0.051048 -2.703488\nv 0.026245 0.789161 1.200062\nv 0.026245 0.789161 2.216968\nv 0.020996 0.789069 2.216967\nv 0.020996 0.789070 1.200062\nv 0.015854 0.787971 2.216970\nv 0.015854 0.787971 1.200062\nv 0.011017 0.785896 2.216968\nv 0.011017 0.785896 1.200062\nv 0.006683 0.782966 2.216968\nv 0.006683 0.782966 1.200060\nv 0.003006 0.779243 2.216966\nv 0.003006 0.779243 1.200061\nv 0.000122 0.774909 2.216968\nv 0.000122 0.774909 1.200062\nv -0.001831 0.770118 2.216967\nv -0.001831 0.770118 1.200061\nv -0.002808 0.765022 2.216968\nv -0.002808 0.765022 1.200061\nv -0.002747 0.759864 2.216967\nv -0.002747 0.759864 1.200061\nv -0.001678 0.754829 2.216968\nv -0.001678 0.754829 1.200061\nv 0.000381 0.750098 2.216966\nv 0.000381 0.750099 1.200060\nv 0.003342 0.745857 2.216967\nv 0.003342 0.745857 1.200062\nv 0.007095 0.742255 2.216968\nv 0.007095 0.742256 1.200062\nv 0.011490 0.739478 2.216970\nv 0.011490 0.739479 1.200062\nv 0.016373 0.737586 2.216968\nv 0.016373 0.737586 1.200061\nv 0.021530 0.736671 2.216968\nv 0.021530 0.736671 1.200062\nv 0.026779 0.736762 2.216968\nv 0.026779 0.736762 1.200062\nv 0.031921 0.737861 2.216968\nv 0.031921 0.737861 1.200062\nv 0.036758 0.739906 2.216967\nv 0.036758 0.739906 1.200061\nv 0.041092 0.742835 2.216966\nv 0.041092 0.742835 1.200060\nv 0.044769 0.746558 2.216968\nv 0.044769 0.746559 1.200061\nv 0.047653 0.750892 2.216966\nv 0.047653 0.750892 1.200061\nv 0.049606 0.755714 2.216968\nv 0.049606 0.755714 1.200061\nv 0.050583 0.760780 2.216970\nv 0.050583 0.760780 1.200063\nv 0.050537 0.765937 2.216968\nv 0.050537 0.765937 1.200062\nv 0.049454 0.770972 2.216967\nv 0.049454 0.770973 1.200061\nv 0.047394 0.775703 2.216968\nv 0.047394 0.775733 1.200061\nv 0.044434 0.779945 2.216967\nv 0.044434 0.779945 1.200060\nv 0.040680 0.783546 2.216967\nv 0.040680 0.783546 1.200060\nv 0.036285 0.786323 2.216969\nv 0.036285 0.786323 1.200063\nv -0.014114 0.588844 2.517264\nv -0.016785 0.586768 2.513313\nv 0.031418 0.788215 2.216967\nv 0.031418 0.788215 1.200062\nv 0.001068 0.567420 2.482144\nv -0.003876 0.568580 2.483448\nv -0.028458 0.295142 2.644201\nv -0.023453 0.294715 2.642701\nv 0.033356 0.575202 2.500106\nv 0.034103 0.577705 2.504566\nv 0.003372 0.593024 2.526986\nv -0.001709 0.592689 2.525686\nv -0.017670 0.576789 2.495817\nv -0.015411 0.574317 2.491863\nv 0.021271 0.567786 2.485556\nv 0.025452 0.569099 2.488400\nv 0.027115 0.587562 2.520728\nv 0.023224 0.589484 2.523570\nv -0.018509 0.584449 2.509023\nv 0.006256 0.566749 2.481706\nv 0.033813 0.580268 2.509025\nv -0.006424 0.591834 2.523572\nv -0.012268 0.572089 2.488400\nv 0.028961 0.570808 2.491865\nv 0.018723 0.591071 2.525686\nv -0.019257 0.581947 2.504565\nv 0.011475 0.566596 2.482144\nv 0.032516 0.582862 2.513312\nv -0.010620 0.590553 2.520729\nv -0.008377 0.570136 2.485559\nv 0.031631 0.572852 2.495816\nv 0.013779 0.592200 2.526986\nv -0.018967 0.579353 2.500105\nv 0.016556 0.566932 2.483446\nv 0.030258 0.585303 2.517265\nv 0.008591 0.592872 2.527425\nv -0.008057 0.293525 2.644201\nv -0.013062 0.293891 2.642701\nv -0.044189 -0.052178 2.653332\nv -0.039185 -0.052514 2.654833\nv -0.023315 0.296271 2.694367\nv -0.028320 0.296638 2.692870\nv 0.000717 0.294135 2.687157\nv -0.003311 0.294562 2.690434\nv -0.018265 0.294288 2.642195\nv -0.032944 0.296912 2.690434\nv -0.007919 0.295020 2.692869\nv -0.036987 0.297156 2.687158\nv -0.012909 0.295447 2.694367\nv -0.040314 0.297279 2.683166\nv -0.018112 0.295875 2.694874\nv -0.003433 0.293220 2.646632\nv -0.042786 0.297340 2.678614\nv 0.000610 0.293006 2.649908\nv -0.044327 0.297309 2.673672\nv 0.003937 0.292884 2.653902\nv -0.044846 0.297187 2.668535\nv 0.006409 0.292823 2.658454\nv -0.044342 0.297004 2.663394\nv 0.007950 0.292854 2.663394\nv -0.042847 0.296729 2.658454\nv 0.008469 0.292976 2.668535\nv -0.040390 0.296394 2.653900\nv 0.007965 0.293159 2.673672\nv -0.037094 0.295997 2.649909\nv 0.006470 0.293433 2.678614\nv -0.033051 0.295600 2.646634\nv 0.004013 0.293769 2.683167\nv -0.054443 -0.049767 2.704999\nv -0.049240 -0.050164 2.705506\nv -0.044052 -0.050591 2.704999\nv -0.039062 -0.051049 2.703501\nv -0.034454 -0.051476 2.701066\nv -0.030441 -0.051904 2.697789\nv -0.027130 -0.052300 2.693799\nv -0.024689 -0.052636 2.689244\nv -0.023178 -0.052880 2.684304\nv -0.022690 -0.053094 2.679167\nv -0.023209 -0.053216 2.674027\nv -0.024734 -0.053246 2.669085\nv -0.027206 -0.053185 2.664533\nv -0.030533 -0.053033 2.660540\nv -0.034576 -0.052819 2.657265\nv -0.049393 -0.051781 2.652826\nv -0.054581 -0.051354 2.653333\nv -0.059570 -0.050896 2.654833\nv -0.064163 -0.050469 2.657266\nv -0.068192 -0.050042 2.660541\nv -0.071503 -0.049645 2.664531\nv -0.073944 -0.049310 2.669085\nv -0.075439 -0.049065 2.674027\nv -0.075943 -0.048852 2.679166\nv -0.075424 -0.048730 2.684303\nv -0.073883 -0.048699 2.689244\nv -0.071411 -0.048760 2.693798\nv -0.068100 -0.048913 2.697789\nv -0.064041 -0.049126 2.701066\nv -0.059433 -0.049432 2.703501\nvn 0.1750 0.9846 0.0000\nvn 0.3616 0.9323 0.0000\nvn 0.5360 0.8442 0.0000\nvn 0.6910 0.7229 0.0000\nvn 0.8200 0.5724 0.0000\nvn 0.9173 0.3983 0.0000\nvn 0.9781 0.2082 0.0000\nvn -0.9823 0.1874 -0.0007\nvn -0.9822 0.1881 0.0000\nvn -0.9260 0.3774 0.0002\nvn -0.9261 0.3774 0.0000\nvn -0.8339 0.5520 0.0000\nvn -0.7107 0.7035 0.0000\nvn -0.5612 0.8277 0.0000\nvn -0.3916 0.9201 -0.0003\nvn -0.3913 0.9203 0.0000\nvn -0.2086 0.9780 -0.0000\nvn -0.0169 0.9999 0.0000\nvn 0.0000 0.0000 1.0000\nvn 1.0000 0.0093 0.0000\nvn -0.0000 0.0000 -1.0000\nvn 0.1799 0.9837 0.0000\nvn 0.3623 0.9321 -0.0018\nvn 0.3623 0.9321 0.0018\nvn 0.5342 0.8454 -0.0028\nvn 0.5363 0.8440 -0.0014\nvn 0.5342 0.8453 0.0028\nvn 0.6923 0.7216 0.0000\nvn 0.8181 0.5750 -0.0042\nvn 0.8181 0.5750 0.0042\nvn 0.9178 0.3971 -0.0048\nvn 0.9194 0.3933 -0.0024\nvn 0.9178 0.3971 0.0047\nvn 0.9776 0.2103 0.0000\nvn 0.9999 0.0089 -0.0051\nvn 0.9999 0.0089 0.0051\nvn 0.9819 -0.1893 -0.0000\nvn 0.9268 -0.3754 -0.0000\nvn 0.8325 -0.5540 -0.0000\nvn 0.7115 -0.7027 -0.0036\nvn 0.7093 -0.7049 -0.0018\nvn 0.7115 -0.7027 0.0036\nvn 0.5601 -0.8284 0.0029\nvn 0.5601 -0.8284 -0.0029\nvn 0.3894 -0.9211 -0.0000\nvn 0.2089 -0.9779 -0.0011\nvn 0.2080 -0.9781 -0.0005\nvn 0.2089 -0.9779 0.0011\nvn 0.0174 -0.9998 -0.0000\nvn -0.1756 -0.9845 0.0005\nvn -0.1748 -0.9846 0.0010\nvn -0.1748 -0.9846 -0.0010\nvn -0.3627 -0.9319 0.0008\nvn -0.3613 -0.9324 0.0017\nvn -0.3613 -0.9324 -0.0017\nvn -0.5342 -0.8453 -0.0000\nvn -0.6923 -0.7216 -0.0000\nvn -0.8201 -0.5723 -0.0000\nvn -0.9168 -0.3993 -0.0000\nvn -0.9782 -0.2075 -0.0000\nvn -0.9999 -0.0118 0.0000\nvn -0.9821 0.1882 -0.0050\nvn -0.9813 0.1925 -0.0025\nvn -0.9821 0.1882 0.0050\nvn -0.9260 0.3775 -0.0047\nvn -0.9260 0.3775 0.0047\nvn -0.8325 0.5540 0.0000\nvn -0.7092 0.7050 0.0018\nvn -0.7115 0.7027 0.0036\nvn -0.7115 0.7027 -0.0036\nvn -0.5601 0.8284 0.0000\nvn -0.3943 0.9190 0.0000\nvn 0.8780 0.3793 -0.2920\nvn 0.8786 0.3793 -0.2902\nvn 0.8780 0.3807 -0.2901\nvn -0.2089 0.9779 0.0011\nvn -0.2089 0.9779 -0.0011\nvn -0.0174 0.9998 0.0000\nvn -0.0005 -0.0002 1.0000\nvn 0.2457 -0.5071 0.8261\nvn 0.2467 -0.5080 0.8253\nvn 0.2445 -0.5082 0.8258\nvn 0.1783 -0.8328 0.5241\nvn 0.1783 -0.8329 0.5239\nvn 0.1775 -0.8331 0.5239\nvn -0.9980 -0.0084 0.0626\nvn -0.9980 -0.0086 0.0631\nvn -0.9980 -0.0091 0.0623\nvn 0.3117 0.7940 -0.5219\nvn 0.3113 0.7965 -0.5183\nvn 0.3071 0.7974 -0.5195\nvn 0.7965 -0.5279 0.2947\nvn 0.7978 -0.5275 0.2918\nvn 0.7956 -0.5317 0.2902\nvn -0.6200 -0.6440 0.4482\nvn -0.6194 -0.6438 0.4493\nvn -0.6185 -0.6460 0.4475\nvn -0.5039 0.7434 -0.4399\nvn -0.5036 0.7416 -0.4433\nvn -0.5010 0.7449 -0.4405\nvn 0.9607 0.2085 -0.1833\nvn 0.9597 0.2098 -0.1868\nvn 0.9604 0.2048 -0.1889\nvn 0.0129 -0.8419 0.5394\nvn 0.0145 -0.8410 0.5408\nvn 0.0162 -0.8419 0.5394\nvn -0.9796 0.1905 -0.0641\nvn -0.9800 0.1893 -0.0609\nvn -0.9803 0.1863 -0.0658\nvn 0.4638 0.7374 -0.4910\nvn 0.4632 0.7370 -0.4923\nvn 0.4659 0.7348 -0.4930\nvn 0.6588 -0.6503 0.3783\nvn 0.6590 -0.6503 0.3779\nvn 0.6585 -0.6509 0.3777\nvn -0.7569 -0.5296 0.3830\nvn -0.7578 -0.5301 0.3805\nvn -0.7581 -0.5277 0.3831\nvn -0.3429 0.8025 -0.4883\nvn -0.3432 0.8030 -0.4872\nvn -0.3453 0.8014 -0.4884\nvn 0.9977 0.0059 -0.0675\nvn 0.9983 0.0054 -0.0584\nvn 0.9982 0.0118 -0.0581\nvn -0.1460 -0.8289 0.5400\nvn -0.1463 -0.8291 0.5397\nvn -0.1477 -0.8282 0.5405\nvn -0.9103 0.3711 -0.1836\nvn 0.6206 0.6455 -0.4452\nvn 0.6210 0.6462 -0.4436\nvn 0.6199 0.6472 -0.4437\nvn 0.5004 -0.7429 0.4446\nvn 0.5001 -0.7415 0.4473\nvn 0.5023 -0.7403 0.4469\nvn -0.8780 -0.3783 0.2933\nvn -0.8764 -0.3793 0.2969\nvn -0.8763 -0.3840 0.2910\nvn -0.1786 0.8361 -0.5186\nvn 0.9799 -0.1889 0.0641\nvn -0.3072 -0.7929 0.5262\nvn -0.7971 0.5297 -0.2898\nvn -0.7967 0.5294 -0.2915\nvn -0.7964 0.5308 -0.2899\nvn 0.7564 0.5344 -0.3772\nvn 0.7545 0.5348 -0.3805\nvn 0.7572 0.5293 -0.3827\nvn 0.3387 -0.8009 0.4937\nvn -0.9589 -0.2098 0.1910\nvn -0.9606 -0.2097 0.1822\nvn -0.9602 -0.2035 0.1913\nvn 0.1523 0.8314 -0.5344\nvn -0.0148 0.8455 -0.5337\nvn 0.9109 -0.3717 0.1794\nvn 0.9096 -0.3713 0.1866\nvn 0.9115 -0.3664 0.1868\nvn -0.4626 -0.7336 0.4978\nvn -0.4630 -0.7346 0.4960\nvn -0.4643 -0.7327 0.4976\nvn -0.6573 0.6533 -0.3758\nvn -0.6587 0.6534 -0.3731\nvn -0.6604 0.6494 -0.3770\nvn -0.2878 -0.0035 0.9577\nvn 0.3235 0.4414 -0.8370\nvn 0.3242 0.4423 -0.8362\nvn 0.3195 0.4446 -0.8368\nvn -0.5918 0.4373 -0.6772\nvn 0.0567 -0.5105 0.8580\nvn 0.5005 0.3911 -0.7723\nvn 0.5008 0.3913 -0.7721\nvn 0.4995 0.3925 -0.7723\nvn -0.4303 0.4735 -0.7685\nvn -0.1350 -0.4942 0.8588\nvn -0.1355 -0.4948 0.8584\nvn -0.1381 -0.4931 0.8589\nvn 0.6573 0.3268 -0.6790\nvn 0.6568 0.3267 -0.6796\nvn 0.6577 0.3257 -0.6792\nvn -0.2462 0.4933 -0.8343\nvn -0.3260 -0.4574 0.8273\nvn -0.3250 -0.4570 0.8280\nvn -0.3241 -0.4584 0.8275\nvn 0.7923 0.2463 -0.5582\nvn -0.0598 0.4945 -0.8671\nvn -0.0598 0.4942 -0.8673\nvn -0.0579 0.4944 -0.8673\nvn -0.4983 -0.4060 0.7661\nvn -0.4986 -0.4063 0.7657\nvn -0.5003 -0.4047 0.7655\nvn 0.8962 0.1581 -0.4144\nvn 0.8955 0.1581 -0.4161\nvn 0.8967 0.1551 -0.4145\nvn -0.6599 -0.3352 0.6724\nvn 0.9649 0.0597 -0.2556\nvn -0.7942 -0.2503 0.5538\nvn -0.7915 -0.2498 0.5578\nvn -0.7894 -0.2574 0.5572\nvn 0.9955 -0.0377 -0.0864\nvn 0.9954 -0.0377 -0.0883\nvn 0.9954 -0.0410 -0.0864\nvn -0.8951 -0.1625 0.4152\nvn -0.8953 -0.1627 0.4147\nvn -0.8963 -0.1598 0.4137\nvn 0.9865 -0.1388 0.0875\nvn 0.9865 -0.1388 0.0869\nvn 0.9863 -0.1398 0.0876\nvn -0.9646 -0.0631 0.2560\nvn -0.9648 -0.0633 0.2554\nvn -0.9653 -0.0597 0.2542\nvn 0.9387 -0.2328 0.2541\nvn 0.9387 -0.2327 0.2543\nvn 0.9393 -0.2313 0.2535\nvn -0.9956 0.0416 0.0841\nvn -0.9955 0.0416 0.0855\nvn -0.9956 0.0393 0.0855\nvn 0.8535 -0.3181 0.4127\nvn 0.8534 -0.3180 0.4129\nvn 0.8543 -0.3167 0.4122\nvn -0.9869 0.1375 -0.0849\nvn 0.7376 -0.3871 0.5532\nvn 0.7391 -0.3878 0.5508\nvn 0.7357 -0.3907 0.5532\nvn -0.9385 0.2316 -0.2562\nvn -0.9387 0.2317 -0.2554\nvn -0.9390 0.2304 -0.2553\nvn 0.5949 -0.4446 0.6697\nvn 0.5960 -0.4452 0.6683\nvn 0.5934 -0.4468 0.6695\nvn -0.8563 0.3112 -0.4123\nvn -0.8561 0.3108 -0.4129\nvn -0.8538 0.3147 -0.4148\nvn 0.4269 -0.4873 0.7618\nvn 0.4267 -0.4868 0.7622\nvn 0.4296 -0.4859 0.7611\nvn 0.1357 0.4783 -0.8677\nvn 0.1348 0.4778 -0.8681\nvn 0.1366 0.4771 -0.8682\nvn -0.7361 0.3844 -0.5571\nvn -0.7379 0.3853 -0.5540\nvn -0.7403 0.3805 -0.5542\nvn -0.0790 -0.9964 -0.0308\nvn 0.7679 -0.0495 -0.6387\nvn -0.0940 0.0390 -0.9948\nvn -0.4659 0.0147 0.8847\nvn 0.8763 -0.0642 -0.4774\nvn -0.6288 0.0326 0.7769\nvn 0.9531 -0.0765 -0.2929\nvn 0.9530 -0.0769 -0.2930\nvn 0.9532 -0.0767 -0.2924\nvn -0.7678 0.0494 0.6388\nvn 0.9912 -0.0862 -0.1002\nvn -0.8764 0.0641 0.4774\nvn 0.9906 -0.0923 0.1008\nvn -0.9523 0.0765 0.2954\nvn 0.9512 -0.0947 0.2936\nvn 0.9514 -0.0942 0.2933\nvn 0.9515 -0.0946 0.2927\nvn -0.9915 0.0861 0.0973\nvn 0.8745 -0.0933 0.4761\nvn -0.9909 0.0921 -0.0978\nvn 0.7639 -0.0884 0.6393\nvn -0.9505 0.0946 -0.2959\nvn 0.6244 -0.0801 0.7770\nvn -0.8745 0.0932 -0.4760\nvn 0.4618 -0.0687 0.8843\nvn 0.0989 0.0217 -0.9949\nvn 0.0990 0.0214 -0.9949\nvn 0.0994 0.0219 -0.9948\nvn -0.7639 0.0883 -0.6392\nvn 0.2826 -0.0549 0.9577\nvn 0.2873 0.0036 -0.9578\nvn -0.6242 0.0800 -0.7771\nvn 0.0932 -0.0392 0.9949\nvn 0.0932 -0.0388 0.9949\nvn 0.0937 -0.0387 0.9948\nvn 0.4668 -0.0148 -0.8842\nvn -0.4617 0.0687 -0.8844\nvn -0.0979 -0.0217 0.9950\nvn 0.6269 -0.0325 -0.7784\nvn -0.2829 0.0549 -0.9576\nvn -0.2089 0.9779 0.0000\nvn -0.7115 0.7027 0.0035\nvn -0.7115 0.7027 -0.0035\nvn -0.9260 0.3775 0.0000\nvn -0.9821 0.1882 0.0000\nvn -0.9152 -0.4030 -0.0024\nvn -0.9168 -0.3992 -0.0047\nvn -0.9168 -0.3993 0.0047\nvn -0.3613 -0.9324 0.0018\nvn -0.3613 -0.9324 -0.0018\nvn -0.1748 -0.9846 -0.0000\nvn 0.2089 -0.9779 -0.0000\nvn 0.3908 -0.9205 -0.0009\nvn 0.3893 -0.9211 -0.0019\nvn 0.3894 -0.9211 0.0019\nvn 0.5601 -0.8284 -0.0000\nvn 0.7115 -0.7027 -0.0000\nvn 0.9819 -0.1893 -0.0050\nvn 0.9819 -0.1893 0.0050\nvn 0.9999 0.0133 -0.0026\nvn 0.9999 0.0088 -0.0051\nvn 0.9178 0.3971 0.0000\nvn 0.8201 0.5723 0.0042\nvn 0.8200 0.5723 0.0042\nvn 0.8201 0.5723 -0.0042\nvn 0.6923 0.7216 -0.0036\nvn 0.6923 0.7216 0.0036\nvn 0.5342 0.8453 0.0000\nvn -0.7963 0.5309 0.2899\nvn -0.7958 0.5310 0.2911\nvn -0.7967 0.5294 0.2916\nvn 0.3609 0.9326 -0.0009\nvn -0.3253 -0.4564 -0.8282\nvn -0.3270 -0.4572 -0.8271\nvn -0.3239 -0.4585 -0.8275\nvn -0.3040 -0.7955 -0.5242\nvn -0.3045 -0.7916 -0.5297\nvn -0.3110 -0.7902 -0.5282\nvn 0.9812 -0.1829 -0.0623\nvn 0.9802 -0.1854 -0.0694\nvn 0.9796 -0.1924 -0.0588\nvn -0.1792 0.8359 0.5189\nvn -0.1787 0.8366 0.5179\nvn -0.1775 0.8365 0.5184\nvn -0.8764 -0.3815 -0.2939\nvn 0.5013 -0.7416 -0.4458\nvn 0.6196 0.6468 0.4446\nvn 0.6199 0.6469 0.4441\nvn 0.6204 0.6459 0.4449\nvn -0.9104 0.3703 0.1847\nvn -0.9108 0.3703 0.1826\nvn -0.9102 0.3718 0.1825\nvn -0.1449 -0.8302 -0.5383\nvn -0.1439 -0.8295 -0.5396\nvn -0.1503 -0.8275 -0.5410\nvn 0.9981 0.0070 0.0604\nvn 0.9978 0.0073 0.0654\nvn 0.9981 0.0105 0.0602\nvn -0.3443 0.8022 0.4878\nvn -0.7582 -0.5273 -0.3835\nvn -0.7594 -0.5271 -0.3814\nvn -0.7576 -0.5307 -0.3800\nvn 0.6599 -0.6496 -0.3776\nvn 0.6593 -0.6494 -0.3789\nvn 0.6583 -0.6516 -0.3770\nvn 0.4638 0.7367 0.4920\nvn 0.4644 0.7370 0.4910\nvn 0.4661 0.7348 0.4928\nvn -0.9800 0.1893 0.0610\nvn -0.9796 0.1905 0.0641\nvn -0.9803 0.1863 0.0658\nvn 0.0146 -0.8411 -0.5407\nvn 0.0132 -0.8420 -0.5393\nvn 0.0162 -0.8418 -0.5395\nvn 0.9605 0.2067 0.1861\nvn -0.5027 0.7428 0.4422\nvn -0.5028 0.7432 0.4413\nvn -0.5022 0.7436 0.4415\nvn -0.6187 -0.6450 -0.4485\nvn 0.7967 -0.5289 -0.2923\nvn 0.7962 -0.5291 -0.2935\nvn 0.7958 -0.5306 -0.2917\nvn 0.3082 0.7960 0.5209\nvn 0.3084 0.7963 0.5204\nvn 0.3099 0.7953 0.5211\nvn -0.9978 -0.0118 -0.0646\nvn 0.1788 -0.8329 -0.5237\nvn 0.1787 -0.8326 -0.5242\nvn 0.1772 -0.8332 -0.5238\nvn 0.8766 0.3824 0.2923\nvn 0.8768 0.3823 0.2916\nvn 0.8769 0.3813 0.2926\nvn -0.6599 0.6506 0.3757\nvn -0.6603 0.6512 0.3742\nvn -0.6593 0.6521 0.3743\nvn -0.4639 -0.7331 -0.4974\nvn -0.4642 -0.7333 -0.4968\nvn -0.4629 -0.7344 -0.4964\nvn 0.9107 -0.3697 -0.1841\nvn 0.9111 -0.3699 -0.1818\nvn 0.9114 -0.3681 -0.1841\nvn -0.0142 0.8455 0.5338\nvn -0.0143 0.8453 0.5341\nvn -0.0155 0.8455 0.5337\nvn 0.1493 0.8324 0.5336\nvn 0.1523 0.8331 0.5317\nvn 0.1550 0.8304 0.5351\nvn -0.9614 -0.2047 -0.1839\nvn -0.9609 -0.2048 -0.1861\nvn -0.9613 -0.2031 -0.1864\nvn 0.3390 -0.8009 -0.4935\nvn 0.3390 -0.8007 -0.4940\nvn 0.3381 -0.8013 -0.4936\nvn 0.7619 0.5279 0.3752\nvn 0.7594 0.5263 0.3824\nvn 0.7583 0.5331 0.3751\nvn 0.2830 -0.0549 -0.9576\nvn -0.2459 0.4940 0.8340\nvn -0.2453 0.4933 0.8346\nvn -0.2467 0.4933 0.8341\nvn 0.6574 0.3262 0.6793\nvn -0.1356 -0.4942 -0.8587\nvn -0.1355 -0.4938 -0.8590\nvn -0.1373 -0.4935 -0.8588\nvn -0.4302 0.4741 0.7682\nvn -0.4296 0.4738 0.7687\nvn -0.4309 0.4733 0.7684\nvn 0.5018 0.3911 0.7716\nvn 0.5015 0.3907 0.7719\nvn 0.4998 0.3923 0.7722\nvn 0.0570 -0.5105 -0.8580\nvn -0.5933 0.4361 0.6766\nvn -0.5934 0.4365 0.6763\nvn -0.5909 0.4379 0.6776\nvn 0.3206 0.4438 0.8368\nvn 0.3213 0.4442 0.8364\nvn 0.3219 0.4434 0.8365\nvn 0.2431 -0.5084 -0.8261\nvn 0.2433 -0.5091 -0.8256\nvn 0.2470 -0.5079 -0.8252\nvn -0.7381 0.3833 0.5553\nvn -0.7376 0.3830 0.5561\nvn -0.7387 0.3821 0.5553\nvn 0.1326 0.4781 0.8682\nvn 0.1354 0.4798 0.8669\nvn 0.1378 0.4769 0.8681\nvn 0.4293 -0.4862 -0.7611\nvn 0.4289 -0.4858 -0.7617\nvn 0.4282 -0.4864 -0.7616\nvn -0.8551 0.3129 0.4135\nvn 0.5949 -0.4459 -0.6688\nvn -0.9396 0.2306 0.2530\nvn -0.9394 0.2305 0.2539\nvn -0.9399 0.2291 0.2530\nvn 0.7361 -0.3899 -0.5533\nvn -0.9868 0.1367 0.0868\nvn -0.9868 0.1370 0.0861\nvn -0.9860 0.1410 0.0887\nvn 0.8538 -0.3175 -0.4127\nvn -0.9953 0.0398 -0.0878\nvn -0.9954 0.0398 -0.0869\nvn -0.9954 0.0382 -0.0878\nvn 0.9398 -0.2311 -0.2517\nvn 0.9398 -0.2311 -0.2516\nvn 0.9401 -0.2304 -0.2512\nvn -0.9649 -0.0614 -0.2552\nvn 0.9863 -0.1398 -0.0877\nvn 0.9863 -0.1399 -0.0875\nvn 0.9865 -0.1386 -0.0868\nvn -0.8968 -0.1587 -0.4130\nvn -0.8974 -0.1588 -0.4117\nvn -0.8965 -0.1607 -0.4129\nvn 0.9954 -0.0369 0.0887\nvn 0.9956 -0.0369 0.0860\nvn 0.9954 -0.0418 0.0860\nvn -0.7918 -0.2538 -0.5555\nvn 0.9649 0.0598 0.2558\nvn -0.6594 -0.3339 -0.6736\nvn -0.6606 -0.3343 -0.6722\nvn -0.6583 -0.3367 -0.6733\nvn 0.8966 0.1555 0.4146\nvn 0.8965 0.1553 0.4150\nvn 0.8957 0.1576 0.4159\nvn -0.4985 -0.4067 -0.7656\nvn -0.4981 -0.4063 -0.7661\nvn -0.5007 -0.4043 -0.7654\nvn -0.0594 0.4941 0.8674\nvn -0.0595 0.4945 0.8671\nvn -0.0574 0.4944 0.8674\nvn 0.7918 0.2469 0.5586\nvn 0.7922 0.2470 0.5580\nvn 0.7925 0.2459 0.5581\nvn -0.0761 -0.9966 0.0308\nvn -0.7640 0.0883 0.6392\nvn 0.0987 0.0217 0.9949\nvn 0.4609 -0.0687 -0.8848\nvn -0.8744 0.0932 0.4761\nvn 0.6248 -0.0801 -0.7767\nvn -0.9505 0.0945 0.2959\nvn 0.7641 -0.0884 -0.6390\nvn -0.9909 0.0921 0.0979\nvn 0.8745 -0.0933 -0.4760\nvn -0.9912 0.0860 -0.1002\nvn 0.9505 -0.0947 -0.2959\nvn -0.9531 0.0767 -0.2928\nvn 0.9909 -0.0922 -0.0978\nvn -0.8763 0.0641 -0.4775\nvn 0.9912 -0.0862 0.1002\nvn -0.7675 0.0491 -0.6391\nvn -0.7675 0.0493 -0.6392\nvn -0.7681 0.0494 -0.6384\nvn 0.9531 -0.0768 0.2927\nvn -0.6270 0.0325 -0.7783\nvn 0.8764 -0.0642 0.4772\nvn 0.8764 -0.0643 0.4772\nvn 0.8761 -0.0643 0.4778\nvn -0.4669 0.0148 -0.8842\nvn -0.0940 0.0390 0.9948\nvn 0.7678 -0.0495 0.6388\nvn -0.2874 -0.0036 -0.9578\nvn -0.2825 0.0548 0.9577\nvn 0.6286 -0.0327 0.7771\nvn -0.0988 -0.0217 -0.9949\nvn -0.4617 0.0687 0.8844\nvn 0.4660 -0.0148 0.8846\nvn 0.0938 -0.0390 -0.9948\nvn -0.6246 0.0800 0.7768\nvn 0.2878 0.0035 0.9577\nvn -0.9822 0.1880 -0.0003\nvn -0.9259 0.3777 0.0003\nvn -0.3916 0.9201 -0.0000\nvn -0.3917 0.9201 -0.0002\nvn -0.2079 0.9781 0.0000\nvn -0.0172 0.9999 0.0000\nvn -0.0003 -0.0002 1.0000\nvn 0.0004 0.0006 1.0000\nvn 0.0002 0.0006 1.0000\nvn -0.0002 0.0003 1.0000\nvn -0.0002 -0.0000 1.0000\nvn 0.0002 0.0000 1.0000\nvn -0.0001 -0.0000 1.0000\nvn 0.0001 0.0000 1.0000\nvn 0.0003 0.0006 1.0000\nvn 0.0004 0.0005 1.0000\nvn -0.0000 0.0003 1.0000\nvn -0.0002 -0.0003 1.0000\nvn 0.0007 -0.0001 1.0000\nvn -0.0003 0.0002 1.0000\nvn -0.0001 -0.0000 -1.0000\nvn 0.0004 0.0001 -1.0000\nvn 0.0001 -0.0000 -1.0000\nvn 0.3608 0.9326 -0.0009\nvn 0.5342 0.8453 -0.0028\nvn 0.8160 0.5780 -0.0021\nvn 0.9178 0.3971 0.0048\nvn 0.9178 0.3971 -0.0047\nvn 0.5621 -0.8270 0.0014\nvn -0.9776 -0.2103 0.0000\nvn -1.0000 -0.0089 -0.0000\nvn -0.9276 0.3737 -0.0024\nvn 0.8875 0.3636 -0.2829\nvn 0.8871 0.3655 -0.2819\nvn 0.8880 0.3633 -0.2821\nvn -0.2099 0.9777 0.0006\nvn 0.0002 0.0001 1.0000\nvn -0.0004 -0.0001 1.0000\nvn 0.0014 -0.0009 1.0000\nvn 0.0009 0.0004 1.0000\nvn 0.0010 0.0004 1.0000\nvn 0.0016 0.0024 1.0000\nvn -0.0002 -0.0001 1.0000\nvn 0.0021 -0.0010 1.0000\nvn -0.0028 -0.0013 1.0000\nvn 0.0007 0.0005 1.0000\nvn 0.0005 0.0002 1.0000\nvn -0.0004 -0.0000 1.0000\nvn 0.0006 0.0000 1.0000\nvn 0.2135 -0.5094 0.8336\nvn 0.2113 -0.5094 0.8342\nvn 0.2134 -0.5088 0.8340\nvn 0.1893 -0.8315 0.5223\nvn 0.1887 -0.8315 0.5226\nvn 0.1895 -0.8313 0.5226\nvn -0.9982 -0.0030 0.0595\nvn -0.9982 -0.0040 0.0594\nvn -0.9982 -0.0031 0.0592\nvn 0.3209 0.7917 -0.5199\nvn 0.3153 0.7944 -0.5191\nvn 0.3208 0.7916 -0.5201\nvn 0.8121 -0.5121 0.2799\nvn 0.8088 -0.5161 0.2818\nvn 0.8120 -0.5112 0.2817\nvn -0.6398 -0.6295 0.4410\nvn -0.6378 -0.6317 0.4407\nvn -0.6398 -0.6302 0.4399\nvn -0.5215 0.7335 -0.4360\nvn -0.5174 0.7364 -0.4359\nvn -0.5211 0.7332 -0.4368\nvn 0.9647 0.1935 -0.1784\nvn 0.9663 0.1875 -0.1766\nvn 0.9650 0.1941 -0.1766\nvn 0.0191 -0.8415 0.5399\nvn 0.0222 -0.8420 0.5391\nvn 0.0189 -0.8419 0.5393\nvn -0.9811 0.1843 -0.0594\nvn -0.9821 0.1786 -0.0593\nvn -0.9811 0.1838 -0.0610\nvn 0.4832 0.7264 -0.4887\nvn 0.4861 0.7252 -0.4876\nvn 0.4831 0.7276 -0.4871\nvn 0.6773 -0.6368 0.3684\nvn 0.6767 -0.6373 0.3687\nvn 0.6773 -0.6366 0.3687\nvn -0.7728 -0.5139 0.3724\nvn -0.7747 -0.5109 0.3727\nvn -0.7734 -0.5137 0.3714\nvn -0.3600 0.7977 -0.4839\nvn -0.3626 0.7964 -0.4839\nvn -0.3605 0.7967 -0.4851\nvn 0.9978 0.0034 -0.0659\nvn 0.9980 0.0119 -0.0615\nvn 0.9981 0.0008 -0.0610\nvn -0.1531 -0.8282 0.5391\nvn -0.1540 -0.8274 0.5401\nvn -0.1522 -0.8279 0.5398\nvn -0.9160 0.3603 -0.1767\nvn 0.6352 0.6350 -0.4395\nvn 0.6339 0.6368 -0.4388\nvn 0.6355 0.6351 -0.4391\nvn 0.5249 -0.7308 0.4364\nvn 0.5276 -0.7283 0.4372\nvn 0.5245 -0.7307 0.4370\nvn -0.8889 -0.3599 0.2835\nvn -0.8861 -0.3669 0.2832\nvn -0.8892 -0.3608 0.2812\nvn -0.1876 0.8349 -0.5174\nvn 0.9810 -0.1842 0.0611\nvn -0.3227 -0.7880 0.5243\nvn -0.8124 0.5119 -0.2793\nvn -0.8112 0.5138 -0.2793\nvn -0.8120 0.5121 -0.2801\nvn 0.7728 0.5145 -0.3715\nvn 0.7772 0.5093 -0.3696\nvn 0.7733 0.5158 -0.3688\nvn 0.3618 -0.7941 0.4885\nvn -0.9642 -0.1967 0.1777\nvn -0.9664 -0.1859 0.1775\nvn -0.9655 -0.1946 0.1731\nvn 0.1531 0.8313 -0.5343\nvn -0.0204 0.8455 -0.5335\nvn 0.9166 -0.3608 0.1723\nvn 0.9187 -0.3538 0.1757\nvn 0.9153 -0.3622 0.1760\nvn -0.4807 -0.7256 0.4923\nvn -0.4828 -0.7239 0.4929\nvn -0.4809 -0.7257 0.4920\nvn -0.6742 0.6412 -0.3666\nvn -0.6782 0.6369 -0.3666\nvn -0.6742 0.6399 -0.3686\nvn 0.2939 0.4491 -0.8438\nvn 0.2889 0.4507 -0.8446\nvn 0.2912 0.4476 -0.8455\nvn -0.5455 0.4493 -0.7075\nvn 0.0443 -0.5098 0.8591\nvn 0.4598 0.4047 -0.7904\nvn 0.4583 0.4056 -0.7909\nvn 0.4590 0.4044 -0.7911\nvn -0.3862 0.4797 -0.7879\nvn -0.1239 -0.4966 0.8591\nvn -0.1253 -0.4947 0.8600\nvn -0.1222 -0.4956 0.8599\nvn 0.6115 0.3473 -0.7110\nvn 0.6126 0.3467 -0.7103\nvn 0.6118 0.3476 -0.7105\nvn -0.2161 0.4943 -0.8420\nvn -0.2914 -0.4644 0.8363\nvn -0.2898 -0.4657 0.8361\nvn -0.2919 -0.4650 0.8358\nvn 0.7542 0.2713 -0.5979\nvn -0.0472 0.4930 -0.8688\nvn -0.0461 0.4936 -0.8684\nvn -0.0480 0.4939 -0.8682\nvn -0.4564 -0.4205 0.7842\nvn -0.4574 -0.4190 0.7844\nvn -0.4552 -0.4198 0.7852\nvn 0.8702 0.1823 -0.4578\nvn 0.8719 0.1804 -0.4552\nvn 0.8708 0.1831 -0.4562\nvn -0.6120 -0.3576 0.7053\nvn 0.9555 0.0767 -0.2849\nvn -0.7536 -0.2754 0.5968\nvn -0.7497 -0.2821 0.5986\nvn -0.7556 -0.2776 0.5933\nvn 0.9945 -0.0319 -0.1002\nvn 0.9947 -0.0340 -0.0970\nvn 0.9947 -0.0311 -0.0983\nvn -0.8705 -0.1878 0.4549\nvn -0.8712 -0.1856 0.4545\nvn -0.8696 -0.1872 0.4568\nvn 0.9845 -0.1453 0.0984\nvn 0.9843 -0.1458 0.0994\nvn 0.9845 -0.1450 0.0989\nvn -0.9546 -0.0820 0.2865\nvn -0.9550 -0.0793 0.2858\nvn -0.9539 -0.0815 0.2889\nvn 0.9258 -0.2482 0.2851\nvn 0.9264 -0.2475 0.2837\nvn 0.9260 -0.2486 0.2840\nvn -0.9947 0.0356 0.0960\nvn -0.9947 0.0336 0.0969\nvn -0.9949 0.0349 0.0946\nvn 0.8250 -0.3375 0.4533\nvn 0.8259 -0.3369 0.4521\nvn 0.8254 -0.3380 0.4523\nvn -0.9850 0.1436 -0.0960\nvn 0.6970 -0.4071 0.5903\nvn 0.6935 -0.4083 0.5936\nvn 0.6965 -0.4055 0.5920\nvn -0.9253 0.2479 -0.2871\nvn -0.9257 0.2468 -0.2865\nvn -0.9252 0.2474 -0.2878\nvn 0.5433 -0.4598 0.7025\nvn 0.5405 -0.4605 0.7041\nvn 0.5428 -0.4588 0.7034\nvn -0.8272 0.3301 -0.4546\nvn -0.8256 0.3332 -0.4553\nvn -0.8284 0.3314 -0.4516\nvn 0.3809 -0.4931 0.7822\nvn 0.3838 -0.4928 0.7809\nvn 0.3822 -0.4944 0.7807\nvn 0.1237 0.4791 -0.8690\nvn 0.1255 0.4785 -0.8691\nvn 0.1240 0.4795 -0.8687\nvn -0.6967 0.4026 -0.5938\nvn -0.7005 0.3987 -0.5919\nvn -0.6959 0.4006 -0.5961\nvn -0.0762 -0.9966 -0.0308\nvn -0.1097 -0.9939 -0.0078\nvn -0.0663 -0.9972 -0.0352\nvn -0.0835 -0.9960 -0.0321\nvn -0.0822 -0.9961 -0.0316\nvn -0.0773 -0.9965 -0.0304\nvn -0.0763 -0.9966 -0.0308\nvn -0.0791 -0.9964 -0.0308\nvn -0.0767 -0.9966 -0.0302\nvn -0.0821 -0.9961 -0.0315\nvn -0.0775 -0.9965 -0.0307\nvn -0.0823 -0.9961 -0.0302\nvn -0.0754 -0.9967 -0.0311\nvn -0.0827 -0.9961 -0.0318\nvn -0.0817 -0.9962 -0.0302\nvn -0.0827 -0.9961 -0.0319\nvn -0.0819 -0.9962 -0.0307\nvn -0.0810 -0.9962 -0.0308\nvn -0.0825 -0.9961 -0.0304\nvn -0.0809 -0.9963 -0.0304\nvn 0.7664 -0.0493 -0.6405\nvn -0.0939 0.0390 -0.9948\nvn -0.4671 0.0148 0.8841\nvn 0.8777 -0.0644 -0.4749\nvn -0.6286 0.0326 0.7770\nvn 0.9522 -0.0768 -0.2956\nvn 0.9524 -0.0765 -0.2950\nvn 0.9522 -0.0767 -0.2956\nvn -0.7662 0.0492 0.6407\nvn 0.9915 -0.0862 -0.0978\nvn -0.8778 0.0643 0.4747\nvn 0.9909 -0.0922 0.0979\nvn -0.9523 0.0765 0.2955\nvn 0.9512 -0.0945 0.2937\nvn 0.9515 -0.0945 0.2928\nvn 0.9512 -0.0947 0.2937\nvn -0.9915 0.0861 0.0978\nvn 0.8733 -0.0933 0.4782\nvn -0.9909 0.0921 -0.0979\nvn 0.7649 -0.0884 0.6380\nvn -0.9514 0.0945 -0.2931\nvn 0.6247 -0.0801 0.7768\nvn -0.8732 0.0932 -0.4783\nvn 0.4616 -0.0687 0.8844\nvn 0.0988 0.0214 -0.9949\nvn 0.0992 0.0219 -0.9948\nvn -0.7649 0.0883 -0.6380\nvn 0.2837 -0.0549 0.9573\nvn 0.2881 0.0035 -0.9576\nvn -0.6247 0.0800 -0.7767\nvn 0.0932 -0.0391 0.9949\nvn 0.4658 -0.0147 -0.8848\nvn -0.4610 0.0686 -0.8848\nvn -0.0988 -0.0217 0.9949\nvn 0.6297 -0.0328 -0.7762\nvn -0.2841 0.0549 -0.9572\nvn -0.7093 0.7049 0.0018\nvn -0.9168 -0.3993 -0.0047\nvn -0.3627 -0.9319 0.0009\nvn 0.3894 -0.9211 -0.0019\nvn 0.9811 -0.1936 -0.0025\nvn 0.9168 0.3993 0.0000\nvn 0.8181 0.5751 0.0042\nvn 0.8202 0.5721 0.0021\nvn 0.6946 0.7194 -0.0018\nvn -0.8111 0.5134 0.2801\nvn -0.8124 0.5119 0.2792\nvn -0.8112 0.5138 0.2793\nvn 0.0003 0.0001 -1.0000\nvn -0.0019 -0.0021 -1.0000\nvn 0.0010 0.0004 -1.0000\nvn 0.0000 -0.0002 -1.0000\nvn -0.0002 0.0000 -1.0000\nvn 0.0002 0.0001 -1.0000\nvn -0.0003 -0.0001 -1.0000\nvn -0.0009 -0.0002 -1.0000\nvn -0.0016 0.0009 -1.0000\nvn -0.0002 -0.0001 -1.0000\nvn 0.0021 0.0000 -1.0000\nvn 0.0002 0.0000 -1.0000\nvn 0.0014 0.0006 -1.0000\nvn -0.0005 -0.0001 -1.0000\nvn -0.2919 -0.4650 -0.8358\nvn -0.2886 -0.4659 -0.8364\nvn -0.2913 -0.4642 -0.8365\nvn -0.3188 -0.7900 -0.5237\nvn -0.3272 -0.7857 -0.5251\nvn -0.3189 -0.7902 -0.5234\nvn 0.9822 -0.1779 -0.0608\nvn 0.9798 -0.1904 -0.0615\nvn 0.9821 -0.1792 -0.0573\nvn -0.1884 0.8348 0.5173\nvn -0.1867 0.8351 0.5175\nvn -0.1884 0.8347 0.5174\nvn -0.8889 -0.3610 -0.2819\nvn 0.5263 -0.7294 -0.4371\nvn 0.6344 0.6364 0.4389\nvn 0.6353 0.6354 0.4389\nvn 0.6344 0.6360 0.4394\nvn -0.9173 0.3571 0.1762\nvn -0.9167 0.3591 0.1752\nvn -0.9177 0.3566 0.1751\nvn -0.1494 -0.8286 -0.5396\nvn -0.1560 -0.8268 -0.5404\nvn -0.1528 -0.8296 -0.5371\nvn 0.9981 0.0033 0.0611\nvn 0.9981 0.0094 0.0613\nvn 0.9980 0.0047 0.0638\nvn -0.3613 0.7970 0.4839\nvn -0.7752 -0.5112 -0.3711\nvn -0.7723 -0.5146 -0.3724\nvn -0.7749 -0.5104 -0.3728\nvn 0.6765 -0.6370 -0.3695\nvn 0.6745 -0.6392 -0.3695\nvn 0.6765 -0.6377 -0.3684\nvn 0.4837 0.7273 0.4870\nvn 0.4863 0.7252 0.4875\nvn 0.4837 0.7263 0.4884\nvn -0.9805 0.1865 0.0627\nvn -0.9815 0.1814 0.0610\nvn -0.9805 0.1870 0.0612\nvn 0.0192 -0.8419 -0.5393\nvn 0.0221 -0.8419 -0.5391\nvn 0.0193 -0.8416 -0.5398\nvn 0.9656 0.1909 0.1766\nvn -0.5201 0.7344 0.4361\nvn -0.5193 0.7351 0.4358\nvn -0.5203 0.7344 0.4359\nvn -0.6385 -0.6307 -0.4410\nvn 0.8110 -0.5127 -0.2818\nvn 0.8097 -0.5147 -0.2818\nvn 0.8110 -0.5130 -0.2811\nvn 0.3169 0.7935 0.5195\nvn 0.3186 0.7927 0.5198\nvn 0.3172 0.7928 0.5204\nvn -0.9981 -0.0063 -0.0612\nvn 0.1897 -0.8312 -0.5226\nvn 0.1880 -0.8316 -0.5226\nvn 0.1892 -0.8318 -0.5219\nvn 0.8873 0.3650 0.2820\nvn 0.8878 0.3637 0.2820\nvn 0.8872 0.3648 0.2825\nvn -0.6766 0.6383 0.3672\nvn -0.6754 0.6398 0.3666\nvn -0.6769 0.6383 0.3667\nvn -0.4825 -0.7247 -0.4919\nvn -0.4810 -0.7254 -0.4924\nvn -0.4825 -0.7242 -0.4927\nvn 0.9177 -0.3570 -0.1744\nvn 0.9188 -0.3543 -0.1742\nvn 0.9181 -0.3566 -0.1732\nvn -0.0201 0.8452 0.5341\nvn -0.0208 0.8456 0.5334\nvn -0.0195 0.8455 0.5336\nvn 0.1511 0.8330 0.5323\nvn 0.1557 0.8305 0.5348\nvn 0.1498 0.8322 0.5338\nvn -0.9654 -0.1922 -0.1764\nvn -0.9656 -0.1899 -0.1776\nvn -0.9650 -0.1928 -0.1775\nvn 0.3629 -0.7937 -0.4883\nvn 0.3618 -0.7941 -0.4884\nvn 0.3626 -0.7941 -0.4878\nvn 0.7777 0.5084 0.3697\nvn 0.7726 0.5168 0.3688\nvn 0.7760 0.5090 0.3725\nvn 0.2835 -0.0549 -0.9574\nvn -0.2150 0.4942 0.8423\nvn -0.2165 0.4945 0.8418\nvn -0.2150 0.4946 0.8421\nvn 0.6138 0.3462 0.7095\nvn -0.1238 -0.4951 -0.8599\nvn -0.1256 -0.4949 -0.8598\nvn -0.1248 -0.4958 -0.8594\nvn -0.3859 0.4797 0.7880\nvn -0.3872 0.4795 0.7875\nvn -0.3861 0.4801 0.7877\nvn 0.4582 0.4044 0.7915\nvn 0.4573 0.4058 0.7914\nvn 0.4594 0.4050 0.7905\nvn 0.0448 -0.5098 -0.8591\nvn -0.5472 0.4490 0.7064\nvn -0.5446 0.4495 0.7081\nvn -0.5460 0.4479 0.7080\nvn 0.2915 0.4503 0.8440\nvn 0.2926 0.4497 0.8439\nvn 0.2913 0.4499 0.8442\nvn 0.2125 -0.5111 -0.8328\nvn 0.2146 -0.5094 -0.8333\nvn 0.2107 -0.5094 -0.8344\nvn -0.6976 0.3999 0.5945\nvn -0.6988 0.3995 0.5934\nvn -0.6978 0.4004 0.5939\nvn 0.1221 0.4805 0.8685\nvn 0.1266 0.4784 0.8690\nvn 0.1215 0.4793 0.8692\nvn 0.3796 -0.4930 -0.7828\nvn 0.3785 -0.4934 -0.7831\nvn 0.3796 -0.4934 -0.7826\nvn -0.8270 0.3323 0.4535\nvn 0.5443 -0.4595 -0.7019\nvn -0.9251 0.2475 0.2879\nvn -0.9258 0.2468 0.2864\nvn -0.9253 0.2480 0.2870\nvn 0.6955 -0.4076 -0.5917\nvn -0.9853 0.1425 0.0940\nvn -0.9846 0.1448 0.0981\nvn -0.9851 0.1416 0.0972\nvn 0.8254 -0.3373 -0.4527\nvn -0.9947 0.0331 -0.0978\nvn -0.9945 0.0322 -0.0993\nvn -0.9945 0.0336 -0.0987\nvn 0.9249 -0.2496 -0.2868\nvn 0.9252 -0.2490 -0.2865\nvn 0.9248 -0.2494 -0.2874\nvn -0.9553 -0.0788 -0.2848\nvn 0.9849 -0.1446 -0.0956\nvn 0.9850 -0.1436 -0.0953\nvn 0.9848 -0.1443 -0.0967\nvn -0.8710 -0.1858 -0.4549\nvn -0.8698 -0.1870 -0.4566\nvn -0.8705 -0.1852 -0.4560\nvn 0.9947 -0.0302 0.0982\nvn 0.9948 -0.0345 0.0963\nvn 0.9944 -0.0315 0.1010\nvn -0.7539 -0.2790 -0.5948\nvn 0.9555 0.0767 0.2849\nvn -0.6097 -0.3585 -0.7069\nvn -0.6069 -0.3601 -0.7085\nvn -0.6089 -0.3577 -0.7080\nvn 0.8709 0.1803 0.4572\nvn 0.8704 0.1821 0.4575\nvn 0.8716 0.1808 0.4556\nvn -0.4558 -0.4197 -0.7849\nvn -0.4587 -0.4185 -0.7839\nvn -0.4574 -0.4206 -0.7835\nvn -0.0481 0.4939 0.8682\nvn -0.0460 0.4937 0.8684\nvn -0.0472 0.4929 0.8688\nvn 0.7540 0.2720 0.5980\nvn 0.7546 0.2711 0.5976\nvn 0.7537 0.2717 0.5985\nvn -0.0790 -0.9964 0.0308\nvn -0.0819 -0.9962 0.0302\nvn -0.0658 -0.9977 0.0164\nvn -0.0830 -0.9960 0.0321\nvn -0.0870 -0.9957 0.0329\nvn -0.0872 -0.9958 0.0267\nvn -0.0798 -0.9963 0.0307\nvn -0.0823 -0.9961 0.0302\nvn -0.0822 -0.9962 0.0304\nvn -0.0842 -0.9959 0.0322\nvn -0.0372 -0.9986 0.0380\nvn -0.0773 -0.9965 0.0304\nvn -0.0809 -0.9963 0.0306\nvn -0.0975 -0.9950 0.0197\nvn -0.0807 -0.9963 0.0308\nvn -0.0836 -0.9960 0.0320\nvn -0.0770 -0.9966 0.0300\nvn -0.0809 -0.9962 0.0308\nvn -0.0763 -0.9966 0.0308\nvn -0.0753 -0.9967 0.0317\nvn -0.0816 -0.9962 0.0305\nvn -0.0764 -0.9966 0.0308\nvn -0.7650 0.0883 0.6380\nvn 0.0990 0.0217 0.9948\nvn 0.4621 -0.0687 -0.8842\nvn -0.8746 0.0932 0.4759\nvn 0.7636 -0.0884 -0.6396\nvn 0.8744 -0.0933 -0.4761\nvn -0.9912 0.0860 -0.1007\nvn 0.9514 -0.0946 -0.2931\nvn -0.9533 0.0767 -0.2922\nvn -0.8776 0.0643 -0.4751\nvn 0.9915 -0.0862 0.0978\nvn -0.7658 0.0492 -0.6411\nvn -0.7665 0.0492 -0.6404\nvn -0.7662 0.0487 -0.6408\nvn 0.9524 -0.0767 0.2951\nvn -0.6284 0.0326 -0.7772\nvn 0.8776 -0.0647 0.4751\nvn 0.8774 -0.0644 0.4754\nvn 0.8777 -0.0643 0.4748\nvn -0.4671 0.0148 -0.8841\nvn -0.0939 0.0390 0.9948\nvn 0.7662 -0.0493 0.6407\nvn -0.2882 -0.0035 -0.9576\nvn -0.2838 0.0549 0.9573\nvn 0.6300 -0.0329 0.7759\nvn -0.0989 -0.0217 -0.9949\nvn -0.4624 0.0687 0.8840\nvn 0.4660 -0.0148 0.8847\nvn 0.0937 -0.0390 -0.9948\nvn -0.6236 0.0800 0.7777\nvn 0.2879 0.0035 0.9576\nusemtl None\ns off\nf 2//1 4//1 1//1\nf 4//2 5//2 6//2\nf 5//3 8//3 6//3\nf 7//4 10//4 8//4\nf 9//5 12//5 10//5\nf 12//6 13//6 14//6\nf 13//7 16//7 14//7\nf 18//8 20//9 17//9\nf 19//10 22//11 20//11\nf 22//12 23//12 24//12\nf 23//13 26//13 24//13\nf 25//14 28//14 26//14\nf 27//15 30//16 28//16\nf 29//17 32//17 30//17\nf 31//18 1//18 32//18\nf 33//19 7//19 5//19\nf 16//20 33//20 34//20\nf 34//21 17//21 30//21\nf 35//22 37//22 36//22\nf 38//23 39//23 37//24\nf 42//25 39//26 40//27\nf 44//28 41//28 42//28\nf 44//29 45//29 43//30\nf 48//31 45//32 46//33\nf 50//34 47//34 48//34\nf 50//35 51//35 49//36\nf 54//37 51//37 52//37\nf 56//38 53//38 54//38\nf 56//39 57//39 55//39\nf 60//40 57//41 58//42\nf 62//43 59//43 60//44\nf 62//45 63//45 61//45\nf 66//46 63//47 64//48\nf 68//49 65//49 66//49\nf 68//50 69//51 67//52\nf 70//53 71//54 69//55\nf 74//56 71//56 72//56\nf 76//57 73//57 74//57\nf 76//58 77//58 75//58\nf 80//59 77//59 78//59\nf 82//60 79//60 80//60\nf 84//61 81//61 82//61\nf 86//62 83//63 84//64\nf 86//65 87//65 85//66\nf 90//67 87//67 88//67\nf 90//68 91//69 89//70\nf 92//71 93//71 91//71\nf 96//72 93//72 94//72\nf 47//73 97//74 45//75\nf 100//76 95//76 96//77\nf 35//78 99//78 100//78\nf 58//79 40//79 38//79\nf 104//80 102//81 101//82\nf 65//83 102//84 63//85\nf 106//86 81//87 83//88\nf 39//89 107//90 37//91\nf 57//92 109//93 55//94\nf 112//95 73//96 75//97\nf 114//98 91//99 93//100\nf 49//101 98//102 47//103\nf 67//104 101//105 65//106\nf 117//107 83//108 85//109\nf 41//110 108//111 39//112\nf 59//113 110//114 57//115\nf 120//116 75//117 77//118\nf 121//119 93//120 95//121\nf 51//122 115//123 49//124\nf 69//125 116//126 67//127\nf 124//128 85//128 87//128\nf 43//129 118//130 41//131\nf 61//132 119//133 59//134\nf 127//135 77//136 79//137\nf 128//138 95//138 99//138\nf 53//139 122//139 51//139\nf 130//140 69//140 71//140\nf 131//141 87//142 89//143\nf 45//144 125//145 43//146\nf 63//147 126//147 61//147\nf 105//148 79//149 81//150\nf 107//151 36//151 37//151\nf 132//152 99//152 36//152\nf 55//153 129//154 53//155\nf 111//156 71//157 73//158\nf 113//159 89//160 91//161\nf 133//162 135//162 134//162\nf 138//163 107//164 108//165\nf 114//166 139//166 113//166\nf 141//167 101//167 116//167\nf 142//168 108//169 118//170\nf 121//171 140//171 114//171\nf 123//172 141//173 116//174\nf 144//175 118//176 125//177\nf 128//178 143//178 121//178\nf 130//179 134//180 123//181\nf 146//182 125//182 97//182\nf 132//183 145//184 128//185\nf 111//186 133//187 130//188\nf 149//189 97//190 98//191\nf 112//192 148//192 111//192\nf 151//193 98//193 115//193\nf 120//194 150//195 112//196\nf 153//197 115//198 122//199\nf 127//200 152//201 120//202\nf 155//203 122//204 129//205\nf 105//206 154//207 127//208\nf 157//209 129//210 109//211\nf 106//212 156//213 105//214\nf 159//215 109//216 110//217\nf 117//218 158//218 106//218\nf 161//219 110//220 119//221\nf 124//222 160//223 117//224\nf 163//225 119//226 126//227\nf 131//228 162//229 124//230\nf 103//231 126//232 102//233\nf 137//234 132//235 107//236\nf 113//237 164//238 131//239\nf 180//240 167//240 166//240\nf 191//241 144//241 146//241\nf 166//242 145//242 147//242\nf 148//243 136//243 133//243\nf 190//244 146//244 149//244\nf 150//245 179//245 148//245\nf 189//246 149//247 151//248\nf 152//249 178//249 150//249\nf 188//250 151//250 153//250\nf 154//251 177//251 152//251\nf 155//252 188//252 153//252\nf 156//253 176//253 154//253\nf 157//254 187//255 155//256\nf 158//257 175//257 156//257\nf 159//258 186//258 157//258\nf 173//259 158//259 160//259\nf 161//260 185//260 159//260\nf 172//261 160//261 162//261\nf 163//262 184//262 161//262\nf 171//263 162//263 164//263\nf 103//264 183//264 163//264\nf 165//265 147//266 137//267\nf 170//268 164//268 139//268\nf 104//269 182//269 103//269\nf 194//270 137//270 138//270\nf 169//271 139//271 140//271\nf 141//272 181//273 104//274\nf 193//275 138//275 142//275\nf 168//276 140//276 143//276\nf 134//277 180//277 141//277\nf 192//278 142//278 144//278\nf 167//279 143//279 145//279\nf 195//78 197//78 196//78\nf 200//280 197//280 198//280\nf 200//72 201//72 199//72\nf 202//71 203//71 201//71\nf 204//281 205//281 203//282\nf 208//67 205//67 206//67\nf 208//283 209//283 207//283\nf 212//284 209//284 210//284\nf 212//61 213//61 211//61\nf 216//60 213//60 214//60\nf 216//285 217//286 215//287\nf 220//58 217//58 218//58\nf 222//57 219//57 220//57\nf 224//56 221//56 222//56\nf 224//288 225//288 223//289\nf 228//290 225//290 226//290\nf 230//49 227//49 228//49\nf 230//291 231//291 229//291\nf 232//292 233//293 231//294\nf 234//295 235//295 233//295\nf 238//296 235//296 236//296\nf 238//39 239//39 237//39\nf 242//38 239//38 240//38\nf 244//297 241//297 242//298\nf 244//299 245//300 243//36\nf 246//34 247//34 245//34\nf 250//301 247//301 248//301\nf 250//302 251//303 249//304\nf 254//305 251//305 252//306\nf 256//307 253//307 254//307\nf 207//308 257//309 205//310\nf 256//311 259//23 255//24\nf 195//22 259//22 260//22\nf 230//21 200//21 232//21\nf 264//312 262//313 261//314\nf 225//315 262//316 223//317\nf 266//318 241//319 243//320\nf 199//321 267//322 197//323\nf 217//324 269//324 215//324\nf 272//325 233//325 235//325\nf 274//326 251//327 253//328\nf 209//329 258//330 207//331\nf 276//332 225//333 227//334\nf 277//335 243//336 245//337\nf 201//338 268//338 199//338\nf 219//339 270//340 217//341\nf 280//342 235//343 237//344\nf 281//345 253//346 255//347\nf 211//348 275//349 209//350\nf 283//351 227//352 229//353\nf 284//354 245//354 247//354\nf 203//355 278//356 201//357\nf 221//358 279//358 219//358\nf 287//359 237//360 239//361\nf 288//362 255//363 259//364\nf 213//365 282//365 211//365\nf 290//366 229//367 231//368\nf 291//369 247//370 249//371\nf 205//372 285//373 203//374\nf 223//375 286//376 221//377\nf 265//378 239//379 241//380\nf 197//381 292//382 196//383\nf 196//384 288//385 259//386\nf 215//387 289//388 213//389\nf 271//390 231//391 233//392\nf 273//393 249//394 251//395\nf 296//396 294//396 293//396\nf 298//397 267//398 268//399\nf 274//400 299//400 273//400\nf 301//401 261//402 276//403\nf 302//404 268//405 278//406\nf 281//407 300//408 274//409\nf 283//410 301//410 276//410\nf 304//411 278//412 285//413\nf 288//414 303//415 281//416\nf 290//417 294//418 283//419\nf 306//420 285//421 257//422\nf 292//423 305//424 288//425\nf 271//426 293//427 290//428\nf 309//429 257//429 258//429\nf 272//430 308//430 271//430\nf 311//431 258//432 275//433\nf 280//434 310//434 272//434\nf 313//435 275//436 282//437\nf 287//438 312//438 280//438\nf 315//439 282//440 289//441\nf 265//442 314//443 287//444\nf 317//445 289//445 269//445\nf 266//446 316//447 265//448\nf 319//449 269//450 270//451\nf 277//452 318//453 266//454\nf 321//455 270//455 279//455\nf 284//456 320//456 277//456\nf 323//457 279//458 286//459\nf 291//460 322//461 284//462\nf 263//463 286//464 262//465\nf 297//466 292//467 267//468\nf 273//469 324//470 291//471\nf 329//472 328//472 339//472\nf 306//473 352//473 304//473\nf 307//474 327//474 305//474\nf 339//475 293//475 308//475\nf 309//476 351//476 306//476\nf 338//477 308//477 310//477\nf 311//478 350//478 309//478\nf 337//479 310//479 312//479\nf 313//480 349//480 311//480\nf 336//481 312//481 314//481\nf 347//482 313//482 315//482\nf 335//483 314//483 316//483\nf 346//484 315//484 317//484\nf 334//485 316//485 318//485\nf 345//486 317//486 319//486\nf 320//487 334//487 318//487\nf 344//488 319//489 321//490\nf 322//491 333//491 320//491\nf 343//492 321//492 323//492\nf 324//493 332//494 322//495\nf 342//496 323//496 263//496\nf 297//497 326//497 307//497\nf 299//498 331//498 324//498\nf 341//499 263//499 264//499\nf 298//500 325//500 297//500\nf 300//501 330//501 299//501\nf 340//502 264//502 301//502\nf 302//503 354//503 298//503\nf 303//504 329//504 300//504\nf 295//505 301//505 294//505\nf 304//506 353//506 302//506\nf 305//507 328//507 303//507\nf 2//1 3//1 4//1\nf 4//2 3//2 5//2\nf 5//3 7//3 8//3\nf 7//4 9//4 10//4\nf 9//5 11//5 12//5\nf 12//6 11//6 13//6\nf 13//7 15//7 16//7\nf 18//9 19//9 20//508\nf 19//11 21//11 22//509\nf 22//12 21//12 23//12\nf 23//13 25//13 26//13\nf 25//14 27//14 28//14\nf 27//510 29//510 30//511\nf 29//512 31//512 32//512\nf 31//513 2//513 1//513\nf 31//19 29//514 33//19\nf 27//514 25//19 18//515\nf 23//19 21//19 18//516\nf 19//517 18//516 21//19\nf 33//518 15//518 13//518\nf 13//519 11//519 33//519\nf 9//520 7//520 33//520\nf 5//521 3//521 33//521\nf 2//19 31//19 33//19\nf 25//19 23//19 18//522\nf 18//523 29//524 27//525\nf 11//520 9//520 33//520\nf 3//19 2//19 33//19\nf 18//526 33//19 29//527\nf 16//20 15//20 33//20\nf 32//21 1//21 34//21\nf 4//528 6//528 34//528\nf 8//21 10//21 34//21\nf 12//21 14//21 34//21\nf 16//529 34//529 14//529\nf 17//530 20//530 22//530\nf 22//528 24//528 17//528\nf 26//21 28//21 17//21\nf 30//21 32//21 34//21\nf 6//21 8//21 34//21\nf 12//21 34//21 10//21\nf 17//21 24//21 26//21\nf 28//21 30//21 17//21\nf 4//21 34//21 1//21\nf 35//22 38//22 37//22\nf 38//23 40//24 39//531\nf 42//532 41//27 39//532\nf 44//28 43//28 41//28\nf 44//29 46//30 45//533\nf 48//31 47//534 45//535\nf 50//34 49//34 47//34\nf 50//35 52//36 51//299\nf 54//37 53//37 51//37\nf 56//38 55//38 53//38\nf 56//39 58//39 57//39\nf 60//40 59//42 57//40\nf 62//536 61//44 59//43\nf 62//45 64//45 63//45\nf 66//46 65//48 63//46\nf 68//49 67//49 65//49\nf 68//51 70//52 69//51\nf 70//54 72//55 71//54\nf 74//56 73//56 71//56\nf 76//57 75//57 73//57\nf 76//58 78//58 77//58\nf 80//59 79//59 77//59\nf 82//537 81//537 79//537\nf 84//538 83//538 81//538\nf 86//62 85//64 83//62\nf 86//65 88//66 87//539\nf 90//67 89//67 87//67\nf 90//69 92//70 91//69\nf 92//71 94//71 93//71\nf 96//72 95//72 93//72\nf 47//540 98//541 97//542\nf 100//543 99//77 95//76\nf 35//78 36//78 99//78\nf 38//19 35//19 64//19\nf 100//544 96//544 64//544\nf 94//545 92//545 70//545\nf 90//546 88//546 86//546\nf 86//518 84//518 82//518\nf 82//547 80//547 78//547\nf 78//548 76//548 82//548\nf 74//549 72//549 76//549\nf 70//19 68//19 94//19\nf 66//550 64//550 96//550\nf 62//545 60//545 38//545\nf 58//551 56//551 54//551\nf 54//19 52//19 48//19\nf 50//19 48//19 52//19\nf 46//552 44//552 48//552\nf 42//553 40//553 44//553\nf 35//19 100//19 64//19\nf 92//518 90//518 70//518\nf 86//19 82//19 76//19\nf 76//19 90//19 86//19\nf 68//19 66//19 94//19\nf 60//19 58//19 38//19\nf 54//518 48//518 44//518\nf 44//554 40//554 54//554\nf 96//19 94//19 66//19\nf 76//555 72//555 90//555\nf 64//556 62//556 38//556\nf 54//521 40//521 58//521\nf 90//544 72//544 70//544\nf 104//557 103//558 102//559\nf 65//560 101//561 102//562\nf 106//563 105//564 81//565\nf 39//566 108//567 107//568\nf 57//569 110//570 109//571\nf 112//572 111//573 73//574\nf 114//575 113//576 91//577\nf 49//578 115//579 98//580\nf 67//581 116//582 101//583\nf 117//584 106//585 83//586\nf 41//587 118//588 108//589\nf 59//590 119//591 110//592\nf 120//593 112//594 75//595\nf 121//596 114//597 93//598\nf 51//599 122//600 115//601\nf 69//602 123//603 116//604\nf 124//605 117//605 85//605\nf 43//606 125//607 118//608\nf 61//609 126//610 119//611\nf 127//612 120//613 77//614\nf 128//615 121//615 95//615\nf 53//616 129//616 122//616\nf 130//617 123//617 69//617\nf 131//618 124//619 87//620\nf 45//621 97//622 125//623\nf 63//624 102//624 126//624\nf 105//625 127//626 79//627\nf 107//628 132//628 36//628\nf 132//629 128//629 99//629\nf 55//630 109//631 129//632\nf 111//633 130//634 71//635\nf 113//636 131//637 89//638\nf 133//162 136//162 135//162\nf 138//639 137//640 107//641\nf 114//642 140//642 139//642\nf 141//643 104//643 101//643\nf 142//644 138//645 108//646\nf 121//647 143//647 140//647\nf 123//648 134//649 141//650\nf 144//651 142//652 118//653\nf 128//654 145//654 143//654\nf 130//655 133//656 134//657\nf 146//658 144//658 125//658\nf 132//659 147//660 145//661\nf 111//662 148//663 133//664\nf 149//665 146//666 97//667\nf 112//668 150//668 148//668\nf 151//669 149//669 98//669\nf 120//670 152//671 150//672\nf 153//673 151//674 115//675\nf 127//676 154//677 152//678\nf 155//679 153//680 122//681\nf 105//682 156//683 154//684\nf 157//685 155//686 129//687\nf 106//688 158//689 156//690\nf 159//691 157//692 109//693\nf 117//694 160//694 158//694\nf 161//695 159//696 110//697\nf 124//698 162//699 160//700\nf 163//701 161//702 119//703\nf 131//704 164//705 162//706\nf 103//707 163//708 126//709\nf 137//710 147//711 132//712\nf 113//713 139//714 164//715\nf 166//240 165//240 181//240\nf 194//716 193//716 183//716\nf 192//717 191//717 190//717\nf 190//718 189//718 188//718\nf 188//719 187//719 185//719\nf 186//720 185//720 187//720\nf 184//721 183//721 192//721\nf 182//722 181//722 165//722\nf 180//723 135//723 167//723\nf 136//724 179//724 168//724\nf 178//717 177//717 176//717\nf 176//718 175//718 174//718\nf 174//719 173//719 171//719\nf 172//725 171//725 173//725\nf 170//726 169//726 179//726\nf 168//722 167//722 135//722\nf 165//727 194//727 182//727\nf 192//728 190//728 185//728\nf 188//729 185//729 190//729\nf 183//730 182//730 194//730\nf 135//727 136//727 168//727\nf 178//728 176//728 171//728\nf 174//731 171//731 176//731\nf 169//732 168//732 179//732\nf 193//733 192//733 183//733\nf 185//734 184//734 192//734\nf 179//735 178//735 170//735\nf 171//734 170//734 178//734\nf 166//240 181//240 180//240\nf 191//736 192//736 144//736\nf 166//737 167//737 145//737\nf 148//738 179//738 136//738\nf 190//739 191//739 146//739\nf 150//740 178//740 179//740\nf 189//741 190//742 149//743\nf 152//744 177//744 178//744\nf 188//745 189//745 151//745\nf 154//746 176//746 177//746\nf 155//747 187//747 188//747\nf 156//748 175//748 176//748\nf 157//749 186//750 187//751\nf 158//752 174//752 175//752\nf 159//753 185//753 186//753\nf 173//754 174//754 158//754\nf 161//755 184//755 185//755\nf 172//756 173//756 160//756\nf 163//757 183//757 184//757\nf 171//758 172//758 162//758\nf 103//759 182//759 183//759\nf 165//760 166//761 147//760\nf 170//762 171//762 164//762\nf 104//763 181//763 182//763\nf 194//764 165//764 137//764\nf 169//765 170//765 139//765\nf 141//766 180//274 181//272\nf 193//767 194//767 138//767\nf 168//768 169//768 140//768\nf 134//769 135//769 180//769\nf 192//770 193//770 142//770\nf 167//771 168//771 143//771\nf 195//78 198//78 197//78\nf 200//280 199//280 197//280\nf 200//72 202//72 201//72\nf 202//71 204//71 203//71\nf 204//281 206//282 205//772\nf 208//67 207//67 205//67\nf 208//283 210//283 209//283\nf 212//284 211//284 209//284\nf 212//61 214//61 213//61\nf 216//60 215//60 213//60\nf 216//773 218//287 217//773\nf 220//58 219//58 217//58\nf 222//57 221//57 219//57\nf 224//56 223//56 221//56\nf 224//288 226//289 225//774\nf 228//290 227//290 225//290\nf 230//49 229//49 227//49\nf 230//291 232//291 231//291\nf 232//775 234//294 233//775\nf 234//295 236//295 235//295\nf 238//296 237//296 235//296\nf 238//39 240//39 239//39\nf 242//38 241//38 239//38\nf 244//776 243//298 241//297\nf 244//35 246//36 245//35\nf 246//34 248//34 247//34\nf 250//777 249//777 247//777\nf 250//778 252//29 251//779\nf 254//780 253//306 251//305\nf 256//307 255//307 253//307\nf 207//781 258//782 257//783\nf 256//23 260//24 259//23\nf 195//22 196//22 259//22\nf 198//21 195//21 232//21\nf 260//784 256//784 238//784\nf 254//785 252//785 256//785\nf 250//786 248//786 252//786\nf 246//787 244//787 248//787\nf 242//788 240//788 238//788\nf 238//789 236//789 260//789\nf 234//788 232//788 260//788\nf 230//21 228//21 202//21\nf 226//790 224//790 206//790\nf 222//21 220//21 224//21\nf 218//791 216//791 214//791\nf 214//788 212//788 210//788\nf 210//792 208//792 206//792\nf 206//793 204//793 226//793\nf 202//21 200//21 230//21\nf 195//21 260//21 232//21\nf 252//530 248//530 242//530\nf 244//794 242//794 248//794\nf 236//788 234//788 260//788\nf 228//795 226//795 202//795\nf 220//796 218//796 214//796\nf 214//530 210//530 220//530\nf 204//529 202//529 226//529\nf 256//528 242//528 238//528\nf 242//797 256//797 252//797\nf 224//21 220//21 206//21\nf 210//21 206//21 220//21\nf 198//21 232//21 200//21\nf 264//798 263//799 262//800\nf 225//801 261//802 262//803\nf 266//804 265//805 241//806\nf 199//807 268//808 267//809\nf 217//810 270//810 269//810\nf 272//811 271//811 233//811\nf 274//812 273//813 251//814\nf 209//815 275//816 258//817\nf 276//818 261//819 225//820\nf 277//821 266//822 243//823\nf 201//824 278//824 268//824\nf 219//825 279//826 270//827\nf 280//828 272//829 235//830\nf 281//831 274//832 253//833\nf 211//834 282//835 275//836\nf 283//837 276//838 227//839\nf 284//840 277//840 245//840\nf 203//841 285//842 278//843\nf 221//844 286//844 279//844\nf 287//845 280//846 237//847\nf 288//848 281//849 255//850\nf 213//851 289//851 282//851\nf 290//852 283//853 229//854\nf 291//855 284//856 247//857\nf 205//858 257//859 285//860\nf 223//861 262//862 286//863\nf 265//864 287//865 239//866\nf 197//867 267//868 292//869\nf 196//870 292//871 288//872\nf 215//873 269//874 289//875\nf 271//876 290//877 231//878\nf 273//879 291//880 249//881\nf 296//882 295//882 294//882\nf 298//883 297//884 267//885\nf 274//886 300//886 299//886\nf 301//887 264//888 261//889\nf 302//890 298//891 268//892\nf 281//893 303//894 300//895\nf 283//896 294//896 301//896\nf 304//897 302//898 278//899\nf 288//900 305//901 303//902\nf 290//903 293//904 294//905\nf 306//906 304//907 285//908\nf 292//909 307//910 305//911\nf 271//912 308//913 293//914\nf 309//915 306//915 257//915\nf 272//916 310//916 308//916\nf 311//917 309//918 258//919\nf 280//920 312//920 310//920\nf 313//921 311//922 275//923\nf 287//924 314//924 312//924\nf 315//925 313//926 282//927\nf 265//928 316//929 314//930\nf 317//931 315//931 289//931\nf 266//932 318//933 316//934\nf 319//935 317//936 269//937\nf 277//938 320//939 318//940\nf 321//941 319//941 270//941\nf 284//942 322//942 320//942\nf 323//943 321//944 279//945\nf 291//946 324//947 322//948\nf 263//949 323//950 286//951\nf 297//952 307//953 292//954\nf 273//955 299//956 324//957\nf 326//958 325//958 340//958\nf 354//959 353//959 342//959\nf 352//960 351//960 353//960\nf 350//961 349//961 348//961\nf 348//962 347//962 350//962\nf 346//963 345//963 344//963\nf 344//964 353//964 351//964\nf 342//965 341//965 354//965\nf 340//958 295//958 326//958\nf 296//959 339//959 328//959\nf 338//966 337//966 330//966\nf 336//967 335//967 334//967\nf 334//968 333//968 332//968\nf 332//963 331//963 330//963\nf 330//969 339//969 338//969\nf 328//965 327//965 296//965\nf 325//958 341//958 340//958\nf 351//970 350//970 344//970\nf 347//971 346//971 344//971\nf 343//972 353//972 344//972\nf 295//958 327//958 326//958\nf 337//973 336//973 334//973\nf 334//974 332//974 337//974\nf 329//975 339//975 330//975\nf 354//976 341//976 325//976\nf 347//977 344//977 350//977\nf 296//472 327//472 295//472\nf 332//978 330//978 337//978\nf 343//979 342//979 353//979\nf 306//980 351//980 352//980\nf 307//981 326//981 327//981\nf 339//982 296//982 293//982\nf 309//983 350//983 351//983\nf 338//477 339//477 308//477\nf 311//478 349//478 350//478\nf 337//984 338//984 310//984\nf 313//480 348//480 349//480\nf 336//985 337//985 312//985\nf 347//986 348//986 313//986\nf 335//987 336//987 314//987\nf 346//988 347//988 315//988\nf 334//485 335//485 316//485\nf 345//989 346//989 317//989\nf 320//990 333//990 334//990\nf 344//991 345//992 319//993\nf 322//994 332//994 333//994\nf 343//995 344//995 321//995\nf 324//996 331//997 332//998\nf 342//999 343//999 323//999\nf 297//1000 325//1000 326//1000\nf 299//1001 330//1001 331//1001\nf 341//1002 342//1002 263//1002\nf 298//1003 354//1003 325//1003\nf 300//1004 329//1004 330//1004\nf 340//1005 341//1005 264//1005\nf 302//1006 353//1006 354//1006\nf 303//1007 328//1007 329//1007\nf 295//1008 340//1008 301//1008\nf 304//1009 352//1009 353//1009\nf 305//1010 327//1010 328//1010\n";

},{}],8:[function(require,module,exports){
module.exports = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n\t viewBox=\"0 0 250 250\" enable-background=\"new 0 0 250 250\" xml:space=\"preserve\">\r\n<g>\r\n\t<path fill=\"#00FF00\" d=\"M214.5025,68.7031c-0.0471,0.0265-0.085,0.0478-0.1122,0.0631\r\n\t\tC214.4186,68.7504,214.4569,68.7288,214.5025,68.7031z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M214.3349,68.7974C214.3284,68.8011,214.3289,68.8008,214.3349,68.7974L214.3349,68.7974z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M214.7751,68.5498c-0.1083,0.0609-0.2006,0.1129-0.2726,0.1533\r\n\t\tC214.571,68.6646,214.6608,68.6141,214.7751,68.5498z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M214.3746,68.7751c-0.0205,0.0116-0.0335,0.0189-0.0397,0.0223\r\n\t\tC214.3416,68.7936,214.3557,68.7857,214.3746,68.7751z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M214.3903,68.7663c-0.0064,0.0036-0.0103,0.0058-0.0157,0.0088\r\n\t\tC214.3797,68.7722,214.3844,68.7696,214.3903,68.7663z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M215.0107,68.4173c-0.0871,0.049-0.1666,0.0937-0.2356,0.1325\r\n\t\tC214.847,68.5094,214.9259,68.465,215.0107,68.4173z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M215.9006,67.9167c-0.0607,0.0342-0.1203,0.0676-0.177,0.0996\r\n\t\tC215.7818,67.9835,215.8408,67.9503,215.9006,67.9167z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M215.1141,68.3591c-0.0353,0.0199-0.0698,0.0393-0.1034,0.0582\r\n\t\tC215.0443,68.3984,215.0777,68.3796,215.1141,68.3591z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M216.3967,67.6376c-0.1675,0.0942-0.334,0.1879-0.4961,0.2791\r\n\t\tC216.0538,67.8305,216.2171,67.7387,216.3967,67.6376z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M215.4974,68.1435c-0.1422,0.08-0.2696,0.1516-0.3833,0.2156\r\n\t\tC215.2336,68.2919,215.3618,68.2198,215.4974,68.1435z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M215.7236,68.0163c-0.0769,0.0432-0.1526,0.0859-0.2261,0.1272\r\n\t\tC215.5687,68.1034,215.6448,68.0606,215.7236,68.0163z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M216.3967,67.6376c0.1244-0.07,0.2489-0.14,0.3723-0.2094c0,0,0,0,0,0\r\n\t\tC216.6387,67.5015,216.5151,67.571,216.3967,67.6376z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M217.0881,67.2487c-0.1008,0.0567-0.2065,0.1162-0.319,0.1794c0,0,0,0,0.0001,0\r\n\t\tC216.877,67.3675,216.9835,67.3076,217.0881,67.2487z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M218.5627,66.4193C218.6227,66.3855,218.6263,66.3835,218.5627,66.4193L218.5627,66.4193z\"/>\r\n\t<polygon fill=\"#00FF00\" points=\"216.7691,67.4282 216.769,67.4282 216.7692,67.4281 \t\"/>\r\n\t<path fill=\"#00FF00\" d=\"M218.5243,66.4409c0.015-0.0085,0.0275-0.0155,0.0384-0.0216\r\n\t\tC218.552,66.4253,218.5384,66.4329,218.5243,66.4409z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M216.769,67.4282c-9.8685,5.5511-15.5938,19.2986-16.3665,30.032\r\n\t\tc-0.8862,12.3098,5.5958,23.0173,0.1166,34.9619c-5.4096,11.793,3.8463,5.6972,10.3153,1.7689\r\n\t\tc4.4286-2.6893,8.7854-5.5164,13.341-7.9905c8.6161-4.6794,16.4035-1.5409,25.5586-2.3661c0-21.478,0-42.9559,0-64.4339\r\n\t\tc-10.4025,6.1234-23.1399,2.5013-32.9648,8.0277C216.7691,67.4281,216.7691,67.4282,216.769,67.4282z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M217.5647,66.9807c0.1181-0.0664,0.2228-0.1253,0.3189-0.1794\r\n\t\tC217.784,66.8573,217.6772,66.9174,217.5647,66.9807z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M217.3441,67.1048c0.0757-0.0426,0.1489-0.0838,0.2206-0.1241\r\n\t\tC217.4948,67.02,217.422,67.0609,217.3441,67.1048z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M218.4662,66.4736c0.0217-0.0122,0.0411-0.0231,0.0581-0.0327\r\n\t\tC218.5074,66.4504,218.4886,66.461,218.4662,66.4736z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M217.0881,67.2487c0.0895-0.0504,0.1753-0.0986,0.256-0.144\r\n\t\tC217.2608,67.1516,217.175,67.1999,217.0881,67.2487z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M218.3756,66.5245c0.0341-0.0192,0.0643-0.0361,0.0905-0.0509\r\n\t\tC218.4391,66.4888,218.4094,66.5055,218.3756,66.5245z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M217.8836,66.8012c0.198-0.1114,0.3671-0.2065,0.492-0.2767\r\n\t\tC218.2603,66.5894,218.0973,66.6811,217.8836,66.8012z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M185.907,76.1799c0,6.1906,9.174,9.3701,13.5953,11.7288c6.3383,3.3813,5.2703-5.4802,8.8986-8.2539\r\n\t\tC217.1616,71.1755,185.907,63.3071,185.907,76.1799z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M204.1386,200.0937c0.0077-0.0179,0.0151-0.0368,0.0227-0.0548\r\n\t\tC204.1037,200.1641,202.6719,203.4663,204.1386,200.0937z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M214.8545,188.6417c-7.288-1.2147-8.6034,6.4635-10.6931,11.3972\r\n\t\tc0.0054-0.0118-0.0004,0.0023-0.0227,0.0548c-1.5187,3.4922-3.9366,10.1542,1.3924,11.9305c3.9279,0,8.1104-10.8698,9.6148-13.7432\r\n\t\tC216.6168,195.4715,221.2801,189.7126,214.8545,188.6417z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M240.2509,16.4732c-0.1737,0.3686-0.3873,0.6771-0.6328,0.9336\r\n\t\tC239.2605,18.2503,239.0885,18.9402,240.2509,16.4732z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M227.7574,12.237c0.6495,3.2477,8.7978,8.3689,11.8607,5.1698c0.2591-0.6113,0.6154-1.3031,0.6328-0.9336\r\n\t\tC240.0612,12.4564,227.7574,7.1821,227.7574,12.237z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M239.618,17.4068c0.2455-0.2564,0.4592-0.565,0.6328-0.9336\r\n\t\tC240.2334,16.1037,239.8771,16.7955,239.618,17.4068z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M242.6663,126.7212c-3.2133-8.4927-16.4846-5.6392-20.6216,0.8617\r\n\t\tc-1.985,3.1192,20.6706,7.0222,20.9838,0.3089C243.0144,128.1953,242.7998,127.3431,242.6663,126.7212z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M242.6663,126.7212c0.1397,0.3692,0.2622,0.7579,0.3623,1.1706\r\n\t\tC242.4627,125.5585,242.5058,125.9732,242.6663,126.7212z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M243.0285,127.8918c-0.1001-0.4128-0.2226-0.8014-0.3623-1.1706\r\n\t\tC242.7998,127.3431,243.0144,128.1953,243.0285,127.8918z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M156.9405,191.5407c0.1347,0.3419,0.2231,0.345,0.155-0.3447c-0.0182-0.1838-0.0832-0.3493-0.1765-0.4937\r\n\t\tC156.9307,190.9823,156.9386,191.2618,156.9405,191.5407z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M156.919,190.7024c-0.0375-0.8965-0.1246-1.7978-0.2703-2.7045c-0.4173,0.0207-0.2693,1.3224-0.0334,2.3905\r\n\t\tC156.7359,190.4719,156.8386,190.578,156.919,190.7024z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M156.919,190.7024c-0.0804-0.1244-0.1832-0.2305-0.3037-0.3139c0.1051,0.4761,0.2272,0.9035,0.3252,1.1523\r\n\t\tC156.9386,191.2618,156.9307,190.9823,156.919,190.7024z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M133.9776,249.734c2.2257,0,9.2608-23.1193,10.8925-26.7336c4.4633-9.8865,12.1451-20.2845,12.0704-31.4597\r\n\t\tc-0.098-0.2487-0.22-0.6762-0.3252-1.1523c-0.2287-0.1583-0.5143-0.2366-0.8126-0.1908\r\n\t\tc-10.8676,1.6683-47.6493,18.9373-32.9336,32.3153c7.5054,6.2546-6.355,16.8012-12.9862,13.4856\r\n\t\tc-7.1428-3.5714-1.1033-17.2106,3.222-20.6665c5.4443-4.35,8.2344-10.4561,14.277-15.4948\r\n\t\tc9.2862-7.7434,20.614-10.1593,27.0396-20.0779c-9.3087-24.8358-27.8117-27.5477-47.7227-13.2492\r\n\t\tc-15.957,11.4591-18.31,24.7243-21.6482,42.9053c-2.0636,11.2394-2.2581,22.6033-0.6571,33.9218\r\n\t\tc0.8036,5.6813,1.5956,6.6607,4.2257,6.6628c1.3776,0.0011,3.2596-0.266,5.9117-0.266\r\n\t\tC107.6798,249.734,120.8287,249.734,133.9776,249.734z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.8422,227.7362c0.0138-0.0454,0.0289-0.0909,0.0429-0.1363\r\n\t\tC107.2013,226.5648,108.5687,222.0525,106.8422,227.7362z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.8337,227.7676c0.0031-0.0106,0.0053-0.0207,0.0085-0.0314\r\n\t\tC106.82,227.8109,106.819,227.8152,106.8337,227.7676z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.8422,227.7362c-0.0032,0.0107-0.0054,0.0208-0.0085,0.0314c0.0102-0.0329,0.0278-0.0905,0.0514-0.1677\r\n\t\tC106.8711,227.6453,106.856,227.6909,106.8422,227.7362z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.8851,227.5999c-0.0236,0.0772-0.0413,0.1348-0.0514,0.1677\r\n\t\tc-3.6819,12.4727,18.5444,10.5746,17.3939-4.7032C122.7304,203.181,110.496,215.9257,106.8851,227.5999z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M93.53,44.921c0.0008-0.0002-0.0036,0.0149-0.0157,0.0525c-0.5746,3.4813-1.445,6.8872-2.6111,10.2177\r\n\t\tc12.1587,6.0793,17.8323-13.4116,15.8266-20.7191C103.9429,24.3186,108.2865,5.7322,117.155,0c-10.5452,0-21.0903,0-31.6355,0\r\n\t\tC84.7044,14.1881,97.7349,31.6202,93.53,44.921z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M93.5143,44.9735c0.0056-0.0174,0.0102-0.0351,0.0157-0.0525\r\n\t\tC93.5197,44.9234,92.4789,47.9746,93.5143,44.9735z\"/>\r\n\t<path fill=\"#00FF00\" d=\"M135.8553,72.4229c1.3944-23.0076-24.1082-33.1548-38.0699-14.1003\r\n\t\tc-13.2426,13.9647-3.4569,21.1492,10.0541,27.2412c5.2187,2.3531,10.5162,3.8564,12.6842,9.7587\r\n\t\tc2.6233,7.1417-6.1641,9.9199-5.4409,15.2645c0.0173,0.1283,25.3852-1.3627,26.4471-3.2597\r\n\t\tC145.8437,99.6214,135.3064,81.48,135.8553,72.4229z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.7666,39.6629c-3.5143,11.4636,15.29,10.1,17.6945,0.4819\r\n\t\tC127.2906,28.8271,109.075,29.2048,106.7666,39.6629z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M106.7666,39.6629C108.1348,33.4644,106.5476,40.3773,106.7666,39.6629L106.7666,39.6629z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M88.9053,52.6291c-9.2383-1.2831-15.7854-1.3339-14.947,9.5635\r\n\t\tc1.299,16.8858,16.1651,23.4495,21.1109,3.4991C98.4363,55.7751,98.7249,53.9929,88.9053,52.6291z\"/>\r\n\t<path fill=\"#FF0000\" d=\"M95.0692,65.6918C93.4005,72.4229,95.2727,65.0923,95.0692,65.6918L95.0692,65.6918z\"/>\r\n\t<path d=\"M54.8333,125.7198c-0.0992-0.3315-0.1811-0.6782-0.2428-1.0422C55.3551,129.1847,55.0882,127.2024,54.8333,125.7198z\"/>\r\n\t<path d=\"M54.5905,124.6776c0.0004-0.0109,0.0025-0.0213,0.003-0.0321C54.5921,124.6535,54.591,124.6634,54.5905,124.6776z\"/>\r\n\t<path d=\"M54.5934,124.6454c-0.0005,0.0108-0.0025,0.0213-0.003,0.0321c0.0618,0.364,0.1436,0.7106,0.2428,1.0422\r\n\t\tC54.7222,125.0738,54.6136,124.5236,54.5934,124.6454z\"/>\r\n\t<path d=\"M176.0533,107.0344c-6.0199-0.0304-13.1368,1.9091-19.1118,2.315c-8.9778,1.1061-17.8058,0.1294-26.6829,1.2452\r\n\t\tc-13.8763,1.7443-23.9281-2.0619-40.4549,3.0207c-4.8044,1.4775-34.8069,2.3705-35.2103,11.03\r\n\t\tc0.0202-0.1218,0.1288,0.4284,0.2399,1.0743c2.9648,9.9069,22.1817,5.6505,29.1713,5.626\r\n\t\tc11.601,0.8568,19.6827,5.1611,31.3412,6.1811c13.694,1.1981,30.6859,7.9597,44.598,7.715\r\n\t\tc11.9032,0.4999,26.847-1.0261,32.1292-15.9026C196.3243,117.3656,187.1551,107.0906,176.0533,107.0344z\"/>\r\n\t<g id=\"Layer_2\">\r\n\t\t<path fill=\"#FF0000\" d=\"M8.2412,20.7279c-1.1986,1.7979-3.1664,6.472-1.7559,8.6393\r\n\t\t\tC7.7269,31.2751,18.2462,19.1731,8.2412,20.7279z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-width=\"14\" stroke-miterlimit=\"10\" d=\"M37.7367,169.5897\r\n\t\t\tc-6.538,0.3269-11.1875,3.5013-16.8562,6.3679c-7.5195,3.8026,0.1704,7.9965,5.9154,4.6118\r\n\t\t\tc5.5857-3.2908,11.8025-2.6296,17.1259-5.3101C49.3328,172.5349,39.1988,169.5166,37.7367,169.5897z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M51.1362,26.0309\r\n\t\t\tC51.2433,25.8357,51.2813,25.7664,51.1362,26.0309L51.1362,26.0309z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M51.1362,26.0309c-0.0135,0.0246-0.0281,0.0512-0.0435,0.0793\r\n\t\t\tc0.0001-0.0001,0.0001-0.0002,0.0002-0.0004C51.1095,26.0797,51.1229,26.0552,51.1362,26.0309z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M50.6796,26.8633c0-0.0001,0.0001-0.0002,0.0002-0.0003\r\n\t\t\tC50.5607,27.0799,50.5151,27.1632,50.6796,26.8633z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M51.0929,26.1098c-0.0094,0.0172-0.017,0.0311-0.0262,0.0477\r\n\t\t\tc-0.0054,0.0098-0.0107,0.0195-0.0162,0.0295c-0.054,0.0984-0.1025,0.1869-0.1462,0.2665\r\n\t\t\tc-0.0581,0.1058-0.1158,0.211-0.1669,0.3042c-0.0216,0.0393-0.0409,0.0747-0.0579,0.1055\r\n\t\t\tc-1.2956,2.5573-1.4124,5.2115-0.3422,7.9634c8.5967,0.158,14.3617-9.4,10.2118-16.9303\r\n\t\t\tC56.622,19.5875,53.1741,22.3161,51.0929,26.1098z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M51.0668,26.1576c-0.0057,0.0103-0.0107,0.0194-0.0162,0.0295\r\n\t\t\tC51.0561,26.177,51.0614,26.1673,51.0668,26.1576z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M50.9044,26.4535c0.0504-0.0919,0.1006-0.1834,0.1462-0.2665\r\n\t\t\tc0.0055-0.0101,0.0105-0.0192,0.0162-0.0295c0.0089-0.0162,0.0175-0.032,0.026-0.0473c-0.1505,0.2499-0.2854,0.501-0.4129,0.7527\r\n\t\t\tc0.0178-0.0325,0.0371-0.0677,0.0577-0.1052C50.7823,26.6761,50.8376,26.5753,50.9044,26.4535z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M50.9044,26.4535c-0.0668,0.1217-0.1221,0.2226-0.1669,0.3042\r\n\t\t\tC50.7886,26.6646,50.8463,26.5594,50.9044,26.4535z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M42.5922,69.1207l-0.8576,4.1985\r\n\t\t\tc-0.0096,1.5835-0.0193,3.1671-0.0289,4.7506C41.8825,77.8023,47.5097,65.3597,42.5922,69.1207z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M13.2195,105.2546\r\n\t\t\tC15.3152,105.0859,13.2136,104.9739,13.2195,105.2546L13.2195,105.2546z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M13.2195,105.2546\r\n\t\t\tC13.6286,124.486,23.8144,104.4016,13.2195,105.2546L13.2195,105.2546z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M47.1113,210.5785\r\n\t\t\tC49.7242,210.597,45.9105,208.7911,47.1113,210.5785L47.1113,210.5785z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M49.4758,202.4264c-3.0944,1.3765-4.2691,5.3172-2.3645,8.1522\r\n\t\t\tc-1.2008-1.7874,2.6129,0.0185,0,0c2.6129,0.0185,5.2259,0.037,7.8388,0.0555C54.0799,207.4029,54.6095,200.1427,49.4758,202.4264\r\n\t\t\tz\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M181.0899,157.9705\r\n\t\t\tc-7.0774,0.9471-11.8185,8.2393-9.7663,15.1045c7.439-0.5183,8.9994-8.3192,9.9412-15.1304\r\n\t\t\tC180.5498,163.1152,177.947,158.5173,181.0899,157.9705z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M181.2648,157.9447c-0.0589,0.007-0.1163,0.018-0.1749,0.0258\r\n\t\t\tC177.947,158.5173,180.5498,163.1152,181.2648,157.9447z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M181.2648,157.9447c-0.0603,0.0071-0.1183,0.016-0.1749,0.0258\r\n\t\t\tC181.1485,157.9627,181.2059,157.9516,181.2648,157.9447z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M162.1204,47.591c0.0108-0.1213,0.0241-0.2414,0.0431-0.3588\r\n\t\t\tC162.1419,47.3657,162.1292,47.4821,162.1204,47.591z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M162.1635,47.2322c-0.019,0.1174-0.0323,0.2375-0.0431,0.3588\r\n\t\t\tC161.9245,49.999,164.655,46.6245,162.1635,47.2322z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M162.1635,47.2322c2.4915-0.6077-0.239,2.7669-0.0431,0.3588\r\n\t\t\tc-0.4851,5.4546,7.1909,14.6146,10.7057,6.8443C175.8546,47.7402,166.1116,46.2692,162.1635,47.2322z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M142.8121,10.0823c0.135,7.041,11.8564,2.4465,9.0505-2.0163\r\n\t\t\tC150.2179,5.4503,142.7378,6.2102,142.8121,10.0823z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M162.397,96.8344c1.8525-0.3255,3.705-0.651,5.5574-0.9765\r\n\t\t\tC166.2472,94.6493,163.5899,95.1162,162.397,96.8344z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M201.4292,15.6364l0.7396,1.4962\r\n\t\t\tc0.2509-1.1235,0.5018-2.247,0.7528-3.3705C206.112,13.765,201.4292,12.3644,201.4292,15.6364z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M17.5883,225.6405c0.0199-0.0009,0.0398-0.0019,0.0596-0.0028\r\n\t\t\tC17.2926,225.3429,17.4036,225.4644,17.5883,225.6405z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M17.648,225.6377c0.1044,0.1039,0.1991,0.2108,0.2896,0.319\r\n\t\t\tC18.0256,226.0287,17.9959,225.984,17.648,225.6377z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M17.648,225.6377c-0.0199,0.0009-0.0398,0.0019-0.0596,0.0028\r\n\t\t\tc0.1223,0.1166,0.2762,0.2565,0.3492,0.3162C17.8471,225.8485,17.7524,225.7416,17.648,225.6377z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M17.5883,225.6405c-1.0139,0.0476-2.0279,0.0953-3.0419,0.143\r\n\t\t\tc0.314,2.3132,0.628,4.6263,0.9419,6.9395c2.9105-0.5636,4.5768-4.2209,2.4492-6.7662\r\n\t\t\tC17.8645,225.897,17.7106,225.7572,17.5883,225.6405z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M31.7847,137.7451c1.787,0.682,3.0888,0.2933,3.9056-1.1662\r\n\t\t\tc-0.3386,0.3755-0.4162-0.9415,0,0c-0.4162-0.9415-0.8324-1.8829-1.2486-2.8243\r\n\t\t\tC32.6384,134.4737,31.7527,135.8039,31.7847,137.7451z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M35.6904,136.5788\r\n\t\t\tC35.2742,135.6374,35.3517,136.9544,35.6904,136.5788L35.6904,136.5788z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M40.346,97.5289c-0.0952-0.0805-0.192-0.1672-0.2908-0.2613\r\n\t\t\tC40.14,97.4381,40.2465,97.5105,40.346,97.5289z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M40.346,97.5289c1.47,1.243,2.5067,0.8551,3.1098-1.1649\r\n\t\t\tc-1.1335,0.3012-2.2671,0.6023-3.4006,0.9035C40.9252,97.0364,40.6745,97.5896,40.346,97.5289z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M40.0552,97.2675c0.0988,0.0941,0.1956,0.1809,0.2908,0.2613\r\n\t\t\tC40.6745,97.5896,40.9252,97.0364,40.0552,97.2675z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M182.2582,204.6074c-0.041,0.0139-0.0798,0.0299-0.1222,0.0424\r\n\t\t\tC182.18,204.6368,182.2204,204.6226,182.2582,204.6074z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M182.136,204.6498c0.0424-0.0125,0.0812-0.0285,0.1222-0.0424\r\n\t\t\tC183.384,204.1557,181.8205,202.8082,182.136,204.6498z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M181.1579,198.9397c0.326,1.9034,0.6521,3.8067,0.9781,5.7101\r\n\t\t\tc-0.3155-1.8416,1.248-0.4941,0.1222-0.0424C185.3176,203.5707,184.4532,198.7672,181.1579,198.9397z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M164.9003,78.6151l-0.9938-4.4009\r\n\t\t\tC158.1505,74.3053,158.8224,80.1801,164.9003,78.6151z\"/>\r\n\t\t<path fill=\"#FF0000\" stroke=\"#FF0000\" stroke-miterlimit=\"10\" d=\"M73.3219,91.6766l1.4934-3.8265\r\n\t\t\tc-1.892,0.1142-3.7839,0.2283-5.6759,0.3425C68.5139,91.4291,69.9081,92.5905,73.3219,91.6766z\"/>\r\n\t</g>\r\n\t<path d=\"M157.1191,181.1959c-4.8638-1.4058-7.9935,0.8324-10.886,4.7172c-2.8924,3.8848-5.2722,5.1797-1.3874,6.2896\r\n\t\tc3.8848,1.1099,7.9118,2.005,9.4344,0c1.5226-2.005,3.6998-2.9402,5.3647-5.1699\r\n\t\tC161.3096,184.8031,158.1617,181.4972,157.1191,181.1959z\"/>\r\n\t<path d=\"M184.1403,60.9155c-0.2377-0.1619-0.4872-0.3113-0.7281-0.4471c-0.2382-0.131-0.4662-0.2404-0.6657-0.331\r\n\t\tc-0.1577-0.1141-0.2813-0.2047-0.3697-0.2572c-1.1454-0.1108-2.3425-0.0968-3.5265-0.0066\r\n\t\tc-0.296,0.0226-0.5911,0.0499-0.8817,0.0812c-0.935-0.2962-1.4899,0.5363-2.3224,0.2588c-0.111,0.555-0.2997,1.0433-0.5465,1.4844\r\n\t\tc-0.1234,0.2206-0.2613,0.4293-0.4114,0.6287c-0.1817,0.2049-0.3647,0.4198-0.5448,0.6431\r\n\t\tc-0.1801,0.2232-0.3574,0.4547-0.5277,0.6926c-1.8544,2.1009,0.3654,4.5982,0.3654,7.0956\r\n\t\tc1.1099-0.8324,2.2198-1.3874,3.3164-1.8378c0.228-0.0243,0.4599-0.0135,0.6984,0.0429c0.4769,0.1127,0.9799,0.4075,1.5348,0.9625\r\n\t\tc0.555,0.2775,0.8325-0.555,1.5173-0.8798c0.1738-0.1588,0.3518-0.32,0.5328-0.4776c0.1584-0.1379,0.3191-0.273,0.4814-0.407\r\n\t\tc0.1623-0.1339,0.3261-0.2667,0.4897-0.4013c0.4318-1.137,1.5495-2.3299,2.2561-3.5465c0.1413-0.2433,0.2662-0.4876,0.3658-0.7325\r\n\t\tC185.8517,62.4127,185.091,61.5633,184.1403,60.9155z\"/>\r\n\t<path d=\"M157.0481,55.7963c-0.2377-0.162-0.4872-0.3113-0.7281-0.4471c-0.2382-0.131-0.4662-0.2404-0.6657-0.331\r\n\t\tc-0.1577-0.1141-0.2813-0.2047-0.3697-0.2572c-1.1454-0.1108-2.3425-0.0968-3.5265-0.0066\r\n\t\tc-0.296,0.0226-0.5911,0.0499-0.8817,0.0812c-0.935-0.2962-4.2593-2.3588-5.0918-2.6363c-0.111,0.555-0.2997,1.0433-0.5465,1.4845\r\n\t\tc-0.1234,0.2206-0.2613,0.4293-0.4114,0.6286c-0.1817,0.2049-0.3647,0.4199-0.5448,0.6431\r\n\t\tc-0.1801,0.2232-0.3574,0.4547-0.5277,0.6926c-1.8544,2.1009,3.1348,7.4933,3.1348,9.9906\r\n\t\tc1.1099-0.8324,2.2198-1.3874,3.3164-1.8378c0.228-0.0243,0.4599-0.0135,0.6984,0.0429c0.4769,0.1127,0.9799,0.4076,1.5348,0.9625\r\n\t\tc0.555,0.2775,0.8324-0.555,1.5173-0.8798c0.1738-0.1588,0.3518-0.32,0.5328-0.4776c0.1584-0.1379,0.3191-0.273,0.4814-0.407\r\n\t\tc0.1623-0.134,0.3261-0.2667,0.4897-0.4013c0.4318-1.137,1.5495-2.3299,2.2561-3.5465c0.1413-0.2433,0.2662-0.4876,0.3658-0.7325\r\n\t\tC158.7595,57.2935,157.9988,56.4441,157.0481,55.7963z\"/>\r\n\t<path d=\"M207.7417,87.6844c0,0,0,0-3.8848,0.185c-3.8848,0.185-2.4048,0.9249-2.4048,0.9249l1.6649,2.4048c0,0,0,0,2.4048,4.4397\r\n\t\ts0,0,4.8097-0.37c4.8097-0.37,0,0,2.0349-0.0862c2.0349-0.0862-0.9249-3.6135-2.0349-5.0934\r\n\t\tC209.2216,88.6093,207.7417,87.6844,207.7417,87.6844z\"/>\r\n\t<polygon points=\"243.0285,119.25 227.0657,124.8981 218.1601,133.7545 207.1193,150.25 197.9285,153.75 189.75,173.075 \r\n\t\t184.1491,180.7735 176.0533,191.25 164.9003,204.6498 157.1191,216.25 147.5539,232.723 143.3412,240.25 143.3412,250 \r\n\t\t163.9208,250 167.9544,238.75 185.907,224.3262 185.907,215.25 198.8897,193.394 209.9501,165.5098 232.475,151.75 \r\n\t\t243.0285,153.75 250,151.4637 250,119.25 \t\"/>\r\n\t<polygon points=\"221.9215,48.3342 197.9285,34.8286 193.134,17.8964 186.4588,0 170.7837,0 164.9003,20.5896 173.4005,31.7379 \r\n\t\t173.4005,39.7754 188.75,46.965 196.25,56.3489 218.1601,65.0288 243.0285,74.2142 250,66.7747 250,45.4446 \t\"/>\r\n\t<polygon points=\"29.75,73.2414 39.17,65.0288 43.1543,56.3489 44.6029,31.7379 41.7555,25.0807 34.5294,0 23.879,0 \r\n\t\t35.6904,20.5896 35.6904,35.7321 28.75,48.3342 9.2569,56.3489 0,57.4338 0,78.0698 15.6201,74.2142 \t\"/>\r\n</g>\r\n</svg>\r\n";

},{}],9:[function(require,module,exports){
module.exports = "# Blender v2.77 (sub 0) OBJ File: 'base7.blend'\n# www.blender.org\nmtllib poles.mtl\no BEAMS_Cube.001\nv 0.131424 -11.046314 -2.311151\nv 0.131424 -6.609257 2.125911\nv 0.131424 -6.803898 2.320549\nv 0.131424 -11.240955 -2.116512\nv -0.113953 -11.058781 -2.323616\nv -0.113953 -6.615574 2.119590\nv -0.113953 -6.810215 2.314228\nv -0.113953 -11.253422 -2.128978\nv -0.113937 -11.046345 2.311156\nv -0.113937 -6.609272 -2.125904\nv -0.113937 -6.803913 -2.320544\nv -0.113937 -11.240971 2.116519\nv 0.131454 -11.058796 2.323622\nv 0.131454 -6.615589 -2.119584\nv 0.131454 -6.810230 -2.314222\nv 0.131454 -11.253437 2.128984\nv 0.131424 -19.405842 -2.311154\nv 0.131424 -14.968784 2.125909\nv 0.131424 -15.163425 2.320547\nv 0.131424 -19.600483 -2.116515\nv -0.113953 -19.418308 -2.323619\nv -0.113953 -14.975101 2.119588\nv -0.113953 -15.169743 2.314226\nv -0.113953 -19.612949 -2.128981\nv -0.113937 -19.405857 2.311153\nv -0.113937 -14.968800 -2.125906\nv -0.113937 -15.163441 -2.320546\nv -0.113937 -19.600498 2.116516\nv 0.131454 -19.418324 2.323619\nv 0.131454 -14.975117 -2.119586\nv 0.131454 -15.169758 -2.314224\nv 0.131454 -19.612965 2.128981\nv 0.131424 -27.765369 -2.311155\nv 0.131424 -23.328312 2.125907\nv 0.131424 -23.522953 2.320545\nv 0.131424 -27.960011 -2.116516\nv -0.113953 -27.777836 -2.323620\nv -0.113953 -23.334629 2.119587\nv -0.113953 -23.529270 2.314225\nv -0.113953 -27.972477 -2.128982\nv -0.113937 -27.765385 2.311152\nv -0.113937 -23.328327 -2.125908\nv -0.113937 -23.522968 -2.320548\nv -0.113937 -27.960026 2.116515\nv 0.131454 -27.777851 2.323618\nv 0.131454 -23.334644 -2.119587\nv 0.131454 -23.529285 -2.314226\nv 0.131454 -27.972492 2.128980\nv 0.131424 -36.124897 -2.311157\nv 0.131424 -31.687840 2.125906\nv 0.131424 -31.882481 2.320544\nv 0.131424 -36.319538 -2.116518\nv -0.113953 -36.137363 -2.323622\nv -0.113953 -31.694157 2.119585\nv -0.113953 -31.888798 2.314223\nv -0.113953 -36.332005 -2.128984\nv -0.113937 -36.124912 2.311151\nv -0.113937 -31.687855 -2.125910\nv -0.113937 -31.882496 -2.320549\nv -0.113937 -36.319553 2.116513\nv 0.131454 -36.137379 2.323617\nv 0.131454 -31.694172 -2.119589\nv 0.131454 -31.888813 -2.314228\nv 0.131454 -36.332020 2.128978\nv -0.185028 -39.521626 2.399997\nv -0.185028 0.114056 2.400004\nv -0.185028 0.114056 2.100004\nv -0.185028 -39.521626 2.099997\nv 0.114975 -39.761814 2.399997\nv 0.114975 -0.038105 2.400004\nv 0.114975 -0.038105 2.100004\nv 0.114975 -39.761814 2.099997\nv -0.185028 -39.521626 -2.100003\nv -0.185028 0.114056 -2.099996\nv -0.185028 0.114056 -2.399996\nv -0.185028 -39.521626 -2.400003\nv 0.114975 -39.761814 -2.100003\nv 0.114975 -0.038105 -2.099996\nv 0.114975 -0.038105 -2.399996\nv 0.114975 -39.761814 -2.400003\nusemtl None\ns off\nf 1//1 3//1 4//1\nf 6//2 1//2 5//2\nf 4//3 7//3 8//3\nf 7//4 5//4 8//4\nf 10//4 12//4 9//4\nf 14//5 9//5 13//5\nf 12//6 15//6 16//6\nf 15//1 13//1 16//1\nf 18//1 20//1 17//1\nf 22//2 17//2 21//2\nf 20//3 23//3 24//3\nf 23//4 21//4 24//4\nf 25//4 27//4 28//4\nf 30//5 25//5 29//5\nf 28//6 31//6 32//6\nf 31//1 29//1 32//1\nf 33//1 35//1 36//1\nf 38//2 33//2 37//2\nf 36//3 39//3 40//3\nf 39//4 37//4 40//4\nf 41//4 43//4 44//4\nf 46//5 41//5 45//5\nf 44//6 47//6 48//6\nf 47//1 45//1 48//1\nf 50//1 52//1 49//1\nf 54//2 49//2 53//2\nf 52//3 55//3 56//3\nf 55//4 53//4 56//4\nf 58//4 60//4 57//4\nf 62//5 57//5 61//5\nf 60//6 63//6 64//6\nf 63//1 61//1 64//1\nf 66//4 68//4 65//4\nf 70//7 65//7 69//7\nf 68//8 71//8 72//8\nf 71//1 69//1 72//1\nf 74//4 76//4 73//4\nf 78//7 73//7 77//7\nf 76//8 79//8 80//8\nf 79//1 77//1 80//1\nf 1//1 2//1 3//1\nf 6//2 2//2 1//2\nf 4//3 3//3 7//3\nf 7//4 6//4 5//4\nf 10//4 11//4 12//4\nf 14//5 10//5 9//5\nf 12//6 11//6 15//6\nf 15//1 14//1 13//1\nf 18//1 19//1 20//1\nf 22//2 18//2 17//2\nf 20//3 19//3 23//3\nf 23//4 22//4 21//4\nf 25//4 26//4 27//4\nf 30//5 26//5 25//5\nf 28//6 27//6 31//6\nf 31//1 30//1 29//1\nf 33//1 34//1 35//1\nf 38//2 34//2 33//2\nf 36//3 35//3 39//3\nf 39//4 38//4 37//4\nf 41//4 42//4 43//4\nf 46//5 42//5 41//5\nf 44//6 43//6 47//6\nf 47//1 46//1 45//1\nf 50//1 51//1 52//1\nf 54//2 50//2 49//2\nf 52//3 51//3 55//3\nf 55//4 54//4 53//4\nf 58//4 59//4 60//4\nf 62//5 58//5 57//5\nf 60//6 59//6 63//6\nf 63//1 62//1 61//1\nf 66//4 67//4 68//4\nf 70//7 66//7 65//7\nf 68//8 67//8 71//8\nf 71//1 70//1 69//1\nf 74//4 75//4 76//4\nf 78//7 74//7 73//7\nf 76//8 75//8 79//8\nf 79//1 78//1 77//1\ns 1\nf 2//9 7//10 3//11\nf 5//12 4//13 8//14\nf 10//15 15//16 11//17\nf 16//18 9//19 12//20\nf 18//9 23//10 19//11\nf 21//12 20//13 24//14\nf 26//15 31//16 27//17\nf 29//21 28//20 32//18\nf 34//9 39//10 35//11\nf 37//12 36//13 40//14\nf 42//22 47//23 43//17\nf 45//21 44//20 48//18\nf 50//9 55//10 51//11\nf 53//12 52//24 56//25\nf 58//15 63//16 59//17\nf 64//26 57//19 60//20\nf 67//27 70//28 71//29\nf 68//30 69//31 65//32\nf 79//29 74//33 78//28\nf 77//31 76//30 80//34\nf 2//9 6//35 7//10\nf 5//12 1//36 4//13\nf 10//15 14//37 15//16\nf 16//18 13//38 9//19\nf 18//9 22//35 23//10\nf 21//12 17//36 20//13\nf 26//15 30//39 31//16\nf 29//21 25//19 28//20\nf 34//9 38//35 39//10\nf 37//12 33//36 36//13\nf 42//22 46//40 47//23\nf 45//21 41//19 44//20\nf 50//9 54//35 55//10\nf 53//12 49//36 52//24\nf 58//15 62//39 63//16\nf 64//26 61//38 57//19\nf 67//27 66//33 70//28\nf 68//30 72//34 69//31\nf 79//29 75//27 74//33\nf 77//31 73//32 76//30\n";

},{}],10:[function(require,module,exports){
module.exports = "# Blender v2.77 (sub 0) OBJ File: ''\n# www.blender.org\nmtllib ski.mtl\no Cube_Cube.001\nv -0.796496 -0.005130 0.054290\nv -0.796496 0.005130 0.054290\nv -0.796496 -0.005130 -0.054290\nv -0.796496 0.005130 -0.054290\nv 0.796496 0.033049 0.028065\nv 0.796496 0.043310 0.028065\nv 0.796496 0.033049 -0.028065\nv 0.796496 0.043310 -0.028065\nv 0.722416 0.005130 -0.054290\nv 0.722416 -0.005130 -0.054290\nv 0.722416 0.005130 0.054290\nv 0.722416 -0.005130 0.054290\nv 0.761501 0.015967 -0.051165\nv 0.761501 0.005706 0.051165\nv 0.761501 0.005706 -0.051165\nv 0.761501 0.015967 0.051165\nv 0.780555 0.029280 -0.047734\nv 0.780555 0.019020 0.047734\nv 0.780555 0.019020 -0.047734\nv 0.780555 0.029280 0.047734\nv 0.742852 -0.001472 -0.053582\nv 0.742852 0.008789 0.053582\nv 0.742852 0.008789 -0.053582\nv 0.742852 -0.001472 0.053582\nvn -1.0000 0.0000 0.0000\nvn 0.7769 0.0000 -0.6296\nvn 1.0000 0.0000 0.0000\nvn 0.0000 0.0000 1.0000\nvn 0.6607 -0.7507 0.0000\nvn 0.0000 1.0000 0.0000\nvn -0.1762 0.9844 0.0000\nvn 0.0000 -1.0000 0.0000\nvn 0.0346 0.0000 0.9994\nvn 0.0000 0.0000 -1.0000\nvn 0.1772 0.0000 0.9842\nvn -0.5728 0.8197 0.0000\nvn 0.3592 -0.9333 0.0000\nvn 0.1285 0.0000 -0.9917\nvn -0.6607 0.7507 0.0000\nvn 0.7769 0.0000 0.6296\nvn 0.5728 -0.8197 0.0000\nvn 0.1772 0.0000 -0.9842\nvn 0.0346 0.0000 -0.9994\nvn 0.1762 -0.9844 0.0000\nvn 0.1285 0.0000 0.9917\nvn -0.3592 0.9333 0.0000\nusemtl None\ns off\nf 2//1 4//1 3//1 1//1\nf 17//2 8//2 7//2 19//2\nf 8//3 6//3 5//3 7//3\nf 11//4 2//4 1//4 12//4\nf 18//5 19//5 7//5 5//5\nf 11//6 9//6 4//6 2//6\nf 22//7 23//7 9//7 11//7\nf 1//8 3//8 10//8 12//8\nf 22//9 11//9 12//9 24//9\nf 4//10 9//10 10//10 3//10\nf 20//11 16//11 14//11 18//11\nf 20//12 17//12 13//12 16//12\nf 24//13 21//13 15//13 14//13\nf 23//14 13//14 15//14 21//14\nf 6//15 8//15 17//15 20//15\nf 6//16 20//16 18//16 5//16\nf 14//17 15//17 19//17 18//17\nf 13//18 17//18 19//18 15//18\nf 9//19 23//19 21//19 10//19\nf 12//20 10//20 21//20 24//20\nf 16//21 22//21 24//21 14//21\nf 16//22 13//22 23//22 22//22\n";

},{}],11:[function(require,module,exports){
window.THREE = require('three');

var Loading = require('./views/loading');
var Stage = require('./views/stage');
var Player = require('./views/player');
var Prizes = require('./views/prizes');
var Lights = require('./views/lights');
var Intro = require('./views/intro');
var Audience = require('./views/audience');

var OBJLoader = require('three-obj-loader')(THREE);
var OrbitControls = require('three-orbit-controls')(THREE);
var PointerLockControls = require('./scripts/vr/PointerLockControls');
var VRControls = require('./scripts/vr/VRControls');
var DeviceOrientationControls = require('./scripts/vr/DeviceOrientationControls');
var VREffect = require('./scripts/vr/VREffect');
var StereoEffect = require('./scripts/vr/StereoEffect');
var ViveController = require('./scripts/vr/ViveController');
var WebVR = require('./scripts/vr/WebVR');

var App = function() {

    this.onIntro = true;

    this.forceNonWebVR = false;
    this.isWebVR = (THREE.WebVR.isAvailable() === true && !this.forceNonWebVR);
    this.isCardboard = !this.isWebVR && this.isTouchDevice();
    this.isDesktop = !this.isWebVR && !this.isCardboard;
    this.isPointerLock = false;
    this.isDeviceOrientation = false;

    this.hasPointerLock = 'pointerLockElement' in document || 'webkitPointerLockElement' in document;

    this.loading = new Loading( this );

    this.isPlayer = true;
    this.isIOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );

    this.stiSleep = 0;
    this.isReseting = false;

    // props
    this.containerEl = document.getElementById('main');0

    // three stuff
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 10000 );
    this.camera.position.set( 200, 500, 0 );
    this.camera.lookAt(new THREE.Vector3( 0,0,0 ) )

    // // delete this
    this.introCamera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 10000 );
    this.introCamera.position.set( 300, 400, 0 );
    this.introCamera.lookAt(new THREE.Vector3( 0,0,0 ) )
    // this.introCamera.rotation.y = 0

    this.renderer = new THREE.WebGLRenderer({ alpha : false, antialias : true });
    this.renderer.autoClear = false;
    var maxDPR = (this.isCardboard)? window.devicePixelRatio * 1 : window.devicePixelRatio * 0.75;
    this.renderer.setPixelRatio(Math.max( 1, maxDPR ));
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    this.containerEl.appendChild( this.renderer.domElement );

    this.effect = new THREE.VREffect(this.renderer);

    this.intro = new Intro( this );
    this.prizes = new Prizes( this );
    this.stage = new Stage( this );
    this.player = new Player( this );
    this.audience = new Audience( this );
    this.lights = new Lights( this );

    this.scene.add( this.stage.group, this.player.group, this.prizes.group, this.lights.group );

    var axisHelper = new THREE.AxisHelper( 5 );
    this.scene.add( axisHelper );

    this.activeCamera = (this.isPlayer)? this.player.camera : this.camera;
    this.controls = (this.isWebVR)? new THREE.VRControls(this.activeCamera) : new OrbitControls(this.activeCamera);

    if (this.isPlayer && this.isWebVR ) {

        this.controls.standing = false;

        // Vive controllers :: TODO
        // this.viveController1 = new THREE.ViveController( 0 );
        // this.viveController1.standingMatrix = this.controls.getStandingMatrix();
        // this.scene.add( this.viveController1 );
        // this.viveController2 = new THREE.ViveController( 1 );
        // this.viveController2.standingMatrix = this.controls.getStandingMatrix();
        // this.scene.add( this.viveController2 );
        //
        // var loader = new THREE.OBJLoader();
        // loader.load( 'assets/vive-controller/vr_controller_vive_1_5.obj', function ( object ) {
        //
        //     var loader = new THREE.TextureLoader();
        //     loader.setPath( 'assets/vive-controller/' );
        //     var controller = object.children[ 0 ];
        //     controller.material.map = loader.load( 'onepointfive_texture.png' );
        //     controller.material.specularMap = loader.load( 'onepointfive_spec.png' );
        //     this.viveController1.add( object.clone() );
        //     this.viveController2.add( object.clone() );
        //
        // }.bind(this) );

        // document.body.appendChild( THREE.WebVR.getButton(this.effect) );
    }

    window.addEventListener('resize', this.onResize.bind(this), true);
    window.addEventListener('orientationchange', this.onResize.bind(this), true);

    document.addEventListener( 'pointerlockchange', this.onPointerLockChange.bind(this), false );
    document.addEventListener( 'webkitpointerlockchange', this.onPointerLockChange.bind(this), false );
    document.addEventListener( 'pointerlockerror', this.onPointerLockError.bind(this), false );
    document.addEventListener( 'webkitpointerlockerror', this.onPointerLockError.bind(this), false );

    document.addEventListener('keyup', function(e) { if (e.keyCode == 32) this.reset(); }.bind(this), false);
    // run
    this.onResize();

    if (this.isWebVR) {

        this.effect.requestAnimationFrame( this.step.bind(this) );

    } else {

        requestAnimationFrame( this.step.bind(this) );
    }
};

App.prototype.reset = function() {

    if (!this.isReseting) {

        this.isReseting = true;

        TweenMax.to( this.renderer.domElement, 1.0, {

            opacity: 0.001,
            ease: Power2.easeInOut,
            onComplete: function () {

                this.player.reset();
                this.prizes.reset();
                this.stage.score.reset();

                this.isReseting = false;

                TweenMax.to( this.renderer.domElement, 1.0, {

                    opacity: 0.999,
                    ease: Power2.easeInOut
                } );

            }.bind( this )

        } );
    }
};

App.prototype.onClickStart = function(startInCardboard) {
    this.onIntro = false;
    this.intro.onEnd();
    this.stage.countdown.drawTexture();
    if (this.isDesktop) {

        if (this.hasPointerLock) this.setupPointerLock();
        else this.setupOrbitControls();

    } else if (this.isCardboard) {

        // Controls are always the same on cardboard devices
        this.controls = new THREE.DeviceOrientationControls(this.activeCamera);
        this.controls.connect();
        this.controls.update();

        if (startInCardboard) {

            this.setupCardboad();

        } else {

            this.setupDeviceOrientation();
        }

    } else if (this.isWebVR) {

        this.effect.requestPresent();
    }
};

App.prototype.toggleControls = function() {

    if (this.isDesktop) {

        if (this.isPointerLock) this.setupOrbitControls();
        else this.setupPointerLock();

    } else if (this.isCardboard) {

        if (!this.isDeviceOrientation) this.setupDeviceOrientation();
        else this.setupCardboad();

    } else if (this.isWebVR) {

        this.effect.isPresenting ? this.effect.exitPresent() : this.effect.requestPresent();
    }
};

App.prototype.setupDeviceOrientation = function() {

    this.isDeviceOrientation = true;

    this.effect = new THREE.VREffect(this.renderer);
    this.effect.setSize(this.containerEl.offsetWidth, this.containerEl.offsetHeight);

    // if (this.isIOS) this.cancelSleep();

    this.loading.changeButton('cardboard');
};

App.prototype.setupCardboad = function() {

    this.isDeviceOrientation = false;

    this.effect = new THREE.StereoEffect(this.renderer);
    this.effect.setSize(this.containerEl.offsetWidth, this.containerEl.offsetHeight);

    this.fullscreen();
    // if (this.isIOS) this.preventSleep();

	this.loading.changeButton('phone');
};

App.prototype.setupPointerLock = function() {

    // Fullscreen and pointerLock
    this.controls = new THREE.PointerLockControls(this.activeCamera);
    this.controls.enabled = false;
    this.isPointerLock = true;

    // Ask the browser to lock the pointer
    document.body.requestPointerLock();

    this.loading.changeButton('drag');
};

App.prototype.onPointerLockAccepted = function() {

    this.controls.getObject().position.set( 0, 0, 0 );
    this.player.cameraContainer.add( this.controls.getObject() );
    this.controls.enabled = true;
    this.activeCamera = this.player.camera;
};

App.prototype.setupOrbitControls = function() {

    this.isPointerLock = false;

    this.controls = new OrbitControls(this.activeCamera);

    this.controls.enableZoom = false;
    this.controls.minPolarAngle = Math.PI / 4;
    this.controls.maxPolarAngle = Math.PI / 1.25;
    this.controls.minAzimuthAngle = -Math.PI / 4;
    this.controls.maxAzimuthAngle = Math.PI / 4;
    this.controls.target.set( 0, 0, -0.1 );
    this.controls.update();

    this.player.cameraContainer.add( this.activeCamera );
    this.activeCamera = this.player.camera;

    this.loading.changeButton('pointerlock');
};

App.prototype.onPointerLockChange = function() {

    var element = document.body;
    if ( document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ) {

        this.onPointerLockAccepted();

    } else {

        this.setupOrbitControls();
    }
};

App.prototype.onPointerLockError = function() {

    this.setupOrbitControls();
};

App.prototype.isTouchDevice = function () {

    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
};

App.prototype.preventSleep = function () {

    this.stiSleep = setInterval(function () {

        window.location.href = '/new/page';
        window.setTimeout(function () {
            window.stop();
        }, 0);

    }, 30000);
};

App.prototype.cancelSleep = function() {

    clearInterval( this.stiSleep );
};

App.prototype.fullscreen = function () {

    if (this.containerEl.requestFullscreen) {
        this.containerEl.requestFullscreen();
    } else if (this.containerEl.msRequestFullscreen) {
        this.containerEl.msRequestFullscreen();
    } else if (this.containerEl.mozRequestFullScreen) {
        this.containerEl.mozRequestFullScreen();
    } else if (this.containerEl.webkitRequestFullscreen) {
        this.containerEl.webkitRequestFullscreen();
    }
}

App.prototype.onResize = function(e) {

    this.player.onResize(e);

    this.effect.setSize(this.containerEl.offsetWidth, this.containerEl.offsetHeight);
    this.camera.aspect = this.containerEl.offsetWidth / this.containerEl.offsetHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize( this.containerEl.offsetWidth, this.containerEl.offsetHeight );
    this.renderer.domElement.setAttribute('style', 'width:' + this.containerEl.offsetWidth + 'px; height:' + this.containerEl.offsetHeight + 'px');
}

App.prototype.step = function(time) {

    if (this.isWebVR) time = time / 1000;

    if (this.onIntro){

        this.intro.step( time );
        this.introCamera.position.set( Math.sin( (time + 50000) / 50000 ) * 250, 300 + Math.cos( time / 50000 ) * 150, Math.cos( time / 50000 ) * 300 );
        this.introCamera.lookAt( new THREE.Vector3( 0, 0, 0 ) );

        // DEBUG for audience positioning
        // this.introCamera.position.set( 0, 80, -220 );
        // this.introCamera.lookAt( new THREE.Vector3( 0, 20, -220 ) );
    }

    if (this.isWebVR) {

        this.effect.requestAnimationFrame( this.step.bind(this) );

    } else {

        requestAnimationFrame( this.step.bind(this) );
    }

    this.stage.step( time );
    this.player.step( time );
    this.prizes.step( time );
    this.lights.step( time );
    this.audience.step( time );

    if (!this.isPointerLock) {

        this.controls.update();
    }

    // if ( this.isPlayer && this.isWebVR ) {
    //
    //     this.viveController1.update();
    //     this.viveController2.update();
    // }

    this.renderer.clear();

     if( !this.onIntro ) this.effect.render( this.scene, this.activeCamera );
     if( this.onIntro ) this.effect.render( this.scene, this.introCamera ); // camera to debug score, delete when done
};

var app = new App();
},{"./scripts/vr/DeviceOrientationControls":12,"./scripts/vr/PointerLockControls":13,"./scripts/vr/StereoEffect":14,"./scripts/vr/VRControls":15,"./scripts/vr/VREffect":16,"./scripts/vr/ViveController":17,"./scripts/vr/WebVR":18,"./views/audience":19,"./views/intro":21,"./views/lights":23,"./views/loading":24,"./views/player":25,"./views/prizes":27,"./views/stage":30,"three":52,"three-obj-loader":50,"three-orbit-controls":51}],12:[function(require,module,exports){
/**
 * @author richt / http://richt.me
 * @author WestLangley / http://github.com/WestLangley
 *
 * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)
 */

THREE.DeviceOrientationControls = function ( object ) {

  var scope = this;

  scope.offset = 0.0;

  this.object = object;
  this.object.rotation.reorder( "YXZ" );

  this.enabled = true;

  this.deviceOrientation = {};
  this.screenOrientation = 0;

  var onDeviceOrientationChangeEvent = function ( event ) {

    scope.deviceOrientation = event;

  };

  var onScreenOrientationChangeEvent = function () {

    scope.screenOrientation = window.orientation || 0;

  };

  // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''

  var setObjectQuaternion = function () {

    var zee = new THREE.Vector3( 0, 0, 1 );

    var euler = new THREE.Euler();

    var q0 = new THREE.Quaternion();

    var q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis

    return function ( quaternion, alpha, beta, gamma, orient ) {

      if( window.isGenericAndroid ) {
        euler.set( beta, alpha - scope.offset, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us
      } else {
        euler.set(beta, alpha, -gamma, 'YXZ');                       // 'ZXY' for the device, but 'YXZ' for us
      }

      quaternion.setFromEuler( euler );                               // orient the device

      quaternion.multiply( q1 );                                      // camera looks out the back of the device, not the top

      quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) );    // adjust for screen orientation

    }

  }();

  this.connect = function() {

    onScreenOrientationChangeEvent(); // run once on load

    if (scope.screenOrientation == 0)
    {
      scope.offset = 1.5708;
    }

    window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );
    window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );

    scope.enabled = true;

  };

  this.disconnect = function() {

    window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );
    window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );

    scope.enabled = false;

  };

  this.update = function () {

    if ( scope.enabled === false ) return;

    var alpha  = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) : 0; // Z
    var beta   = scope.deviceOrientation.beta  ? THREE.Math.degToRad( scope.deviceOrientation.beta  ) : 0; // X'
    var gamma  = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''
    var orient = scope.screenOrientation       ? THREE.Math.degToRad( scope.screenOrientation       ) : 0; // O

    setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );

  };

  this.connect();

};
},{}],13:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointerLockControls = function ( camera ) {

	var scope = this;

	camera.rotation.set( 0, 0, 0 );

	var pitchObject = new THREE.Object3D();
	pitchObject.position.set(0, 0, 0);
	pitchObject.add( camera );

	var yawObject = new THREE.Object3D();
	yawObject.position.set(0, 0, 0);
	yawObject.position.y = 10;
	yawObject.add( pitchObject );

	var PI_2 = Math.PI / 2;

	var onMouseMove = function ( event ) {

		if ( scope.enabled === false ) return;

		var movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
		var movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;

		yawObject.rotation.y -= movementX * 0.002;
		pitchObject.rotation.x -= movementY * 0.002;

		pitchObject.rotation.x = Math.max( - PI_2, Math.min( PI_2, pitchObject.rotation.x ) );

	};

	this.dispose = function() {

		document.removeEventListener( 'mousemove', onMouseMove, false );

	};

	document.addEventListener( 'mousemove', onMouseMove, false );

	this.enabled = false;

	this.getObject = function () {

		return yawObject;

	};

	this.getDirection = function() {

		// assumes the camera itself is not rotated

		var direction = new THREE.Vector3( 0, 0, - 1 );
		var rotation = new THREE.Euler( 0, 0, 0, "YXZ" );

		return function( v ) {

			rotation.set( pitchObject.rotation.x, yawObject.rotation.y, 0 );

			v.copy( direction ).applyEuler( rotation );

			return v;

		};

	}();

};

},{}],14:[function(require,module,exports){
/**
 * @author alteredq / http://alteredqualia.com/
 * @authod mrdoob / http://mrdoob.com/
 * @authod arodic / http://aleksandarrodic.com/
 * @authod fonserbc / http://fonserbc.github.io/
 *
 * Off-axis stereoscopic effect based on http://paulbourke.net/stereographics/stereorender/
 */

THREE.StereoEffect = function ( renderer ) {

	// API

	this.separation = 0.1;

	/*
	 * Distance to the non-parallax or projection plane
	 */
	this.focalLength = 15;

	// internals

	var _width, _height;

	var _position = new THREE.Vector3();
	var _quaternion = new THREE.Quaternion();
	var _scale = new THREE.Vector3();

	var _cameraL = new THREE.PerspectiveCamera();
	var _cameraR = new THREE.PerspectiveCamera();

	var _fov;
	var _outer, _inner, _top, _bottom;
	var _ndfl, _halfFocalWidth, _halfFocalHeight;
	var _innerFactor, _outerFactor;

	// initialization

	renderer.autoClear = false;

	this.setSize = function ( width, height ) {

		_width = width / 2;
		_height = height;

		renderer.setSize( width, height );

	};

	this.render = function ( scene, camera ) {

		scene.updateMatrixWorld();

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		camera.matrixWorld.decompose( _position, _quaternion, _scale );

		// Stereo frustum calculation

		// Effective fov of the camera
		_fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( camera.fov ) * 0.5 ) ) );

		_ndfl = camera.near / this.focalLength;
		_halfFocalHeight = Math.tan( THREE.Math.degToRad( _fov ) * 0.5 ) * this.focalLength;
		_halfFocalWidth = _halfFocalHeight * 0.5 * camera.aspect;

		_top = _halfFocalHeight * _ndfl;
		_bottom = -_top;
		_innerFactor = ( _halfFocalWidth + this.separation / 2.0 ) / ( _halfFocalWidth * 2.0 );
		_outerFactor = 1.0 - _innerFactor;

		_outer = _halfFocalWidth * 2.0 * _ndfl * _outerFactor;
		_inner = _halfFocalWidth * 2.0 * _ndfl * _innerFactor;

		// left

		_cameraL.projectionMatrix.makeFrustum(
			-_outer,
			_inner,
			_bottom,
			_top,
			camera.near,
			camera.far
		);

		_cameraL.position.copy( _position );
		_cameraL.quaternion.copy( _quaternion );
		_cameraL.translateX( - this.separation / 2.0 );

		// right

		_cameraR.projectionMatrix.makeFrustum(
			-_inner,
			_outer,
			_bottom,
			_top,
			camera.near,
			camera.far
		);

		_cameraR.position.copy( _position );
		_cameraR.quaternion.copy( _quaternion );
		_cameraR.translateX( this.separation / 2.0 );

		//

		renderer.setViewport( 0, 0, _width * 2, _height );
		renderer.clear();

		renderer.setViewport( 0, 0, _width, _height );
		renderer.render( scene, _cameraL );

		renderer.setViewport( _width, 0, _width, _height );
		renderer.render( scene, _cameraR );

	};

};

},{}],15:[function(require,module,exports){
/**
 * @author dmarcos / https://github.com/dmarcos
 * @author mrdoob / http://mrdoob.com
 */

THREE.VRControls = function ( object, onError ) {

	var scope = this;

	var vrDisplay, vrDisplays;

	var standingMatrix = new THREE.Matrix4();

	var frameData = null;
	if ( 'VRFrameData' in window ) {
		frameData = new VRFrameData();
	}

	function gotVRDisplays( displays ) {

		vrDisplays = displays;

		if ( displays.length > 0 ) {

			vrDisplay = displays[ 0 ];

		} else {

			if ( onError ) onError( 'VR input not available.' );

		}

	}

	if ( navigator.getVRDisplays ) {

		navigator.getVRDisplays().then( gotVRDisplays );

	}

	// the Rift SDK returns the position in meters
	// this scale factor allows the user to define how meters
	// are converted to scene units.

	this.scale = 1;

	// If true will use "standing space" coordinate system where y=0 is the
	// floor and x=0, z=0 is the center of the room.
	this.standing = false;

	// Distance from the users eyes to the floor in meters. Used when
	// standing=true but the VRDisplay doesn't provide stageParameters.
	this.userHeight = 1.6;

	this.getVRDisplay = function () {

		return vrDisplay;

	};

	this.getVRDisplays = function () {

		return vrDisplays;

	};

	this.getStandingMatrix = function () {

		return standingMatrix;

	};

	this.update = function () {

		if ( vrDisplay ) {

			var pose;

			if ( vrDisplay.getFrameData ) {

				vrDisplay.getFrameData( frameData );
				pose = frameData.pose;

			} else if ( vrDisplay.getPose ) {

				pose = vrDisplay.getPose();

			}

			if ( pose.orientation !== null ) {

				object.quaternion.fromArray( pose.orientation );

			}

			if ( pose.position !== null ) {

				object.position.fromArray( pose.position );

			} else {

				object.position.set( 0, 0, 0 );

			}

			if ( this.standing ) {

				if ( vrDisplay.stageParameters ) {

					object.updateMatrix();

					standingMatrix.fromArray( vrDisplay.stageParameters.sittingToStandingTransform );
					object.applyMatrix( standingMatrix );

				} else {

					object.position.setY( object.position.y + this.userHeight );

				}

			}

			object.position.multiplyScalar( scope.scale );

		}

	};

	this.resetPose = function () {

		if ( vrDisplay ) {

			vrDisplay.resetPose();

		}

	};

	this.resetSensor = function () {

		console.warn( 'THREE.VRControls: .resetSensor() is now .resetPose().' );
		this.resetPose();

	};

	this.zeroSensor = function () {

		console.warn( 'THREE.VRControls: .zeroSensor() is now .resetPose().' );
		this.resetPose();

	};

	this.dispose = function () {

		vrDisplay = null;

	};

};

},{}],16:[function(require,module,exports){
/**
 * @author dmarcos / https://github.com/dmarcos
 * @author mrdoob / http://mrdoob.com
 *
 * WebVR Spec: http://mozvr.github.io/webvr-spec/webvr.html
 *
 * Firefox: http://mozvr.com/downloads/
 * Chromium: https://webvr.info/get-chrome
 *
 */

THREE.VREffect = function ( renderer, onError ) {

	var vrDisplay, vrDisplays;
	var eyeTranslationL = new THREE.Vector3();
	var eyeTranslationR = new THREE.Vector3();
	var renderRectL, renderRectR;

	var frameData = null;
	if ( 'VRFrameData' in window ) {

		frameData = new VRFrameData();

	}

	function gotVRDisplays( displays ) {

		vrDisplays = displays;

		if ( displays.length > 0 ) {

			vrDisplay = displays[ 0 ];

		} else {

			if ( onError ) onError( 'HMD not available' );

		}

	}

	if ( navigator.getVRDisplays ) {

		navigator.getVRDisplays().then( gotVRDisplays );

	}

	//

	this.isPresenting = false;
	this.scale = 1;

	var scope = this;

	var rendererSize = renderer.getSize();
	var rendererUpdateStyle = false;
	var rendererPixelRatio = renderer.getPixelRatio();

	this.getVRDisplay = function () {

		return vrDisplay;

	};

	this.getVRDisplays = function () {

		return vrDisplays;

	};

	this.setSize = function ( width, height, updateStyle ) {

		rendererSize = { width: width, height: height };
		rendererUpdateStyle = updateStyle;

		if ( scope.isPresenting ) {

			var eyeParamsL = vrDisplay.getEyeParameters( 'left' );
			renderer.setPixelRatio( 1 );
			renderer.setSize( eyeParamsL.renderWidth * 2, eyeParamsL.renderHeight, false );

		} else {

			renderer.setPixelRatio( rendererPixelRatio );
			renderer.setSize( width, height, updateStyle );

		}

	};

	// fullscreen

	var canvas = renderer.domElement;
	var requestFullscreen;
	var exitFullscreen;
	var fullscreenElement;
	var leftBounds = [ 0.0, 0.0, 0.5, 1.0 ];
	var rightBounds = [ 0.5, 0.0, 0.5, 1.0 ];

	function onFullscreenChange() {

		var wasPresenting = scope.isPresenting;
		scope.isPresenting = vrDisplay !== undefined && vrDisplay.isPresenting;

		if ( scope.isPresenting ) {

			var eyeParamsL = vrDisplay.getEyeParameters( 'left' );
			var eyeWidth = eyeParamsL.renderWidth;
			var eyeHeight = eyeParamsL.renderHeight;

			var layers = vrDisplay.getLayers();
			if ( layers.length ) {

				var layer = layers[0];

				leftBounds = layer.leftBounds !== null && layer.leftBounds.length === 4 ? layer.leftBounds : [ 0.0, 0.0, 0.5, 1.0 ];
				rightBounds = layer.rightBounds !== null && layer.rightBounds.length === 4 ? layer.rightBounds : [ 0.5, 0.0, 0.5, 1.0 ];

			}

			if ( !wasPresenting ) {

				rendererPixelRatio = renderer.getPixelRatio();
				rendererSize = renderer.getSize();

				renderer.setPixelRatio( 1 );
				renderer.setSize( eyeWidth * 2, eyeHeight, false );

			}

		} else if ( wasPresenting ) {

			renderer.setPixelRatio( rendererPixelRatio );
			renderer.setSize( rendererSize.width, rendererSize.height, rendererUpdateStyle );

		}

	}

	window.addEventListener( 'vrdisplaypresentchange', onFullscreenChange, false );

	this.setFullScreen = function ( boolean ) {

		return new Promise( function ( resolve, reject ) {

			if ( vrDisplay === undefined ) {

				reject( new Error( 'No VR hardware found.' ) );
				return;

			}

			if ( scope.isPresenting === boolean ) {

				resolve();
				return;

			}

			if ( boolean ) {

				resolve( vrDisplay.requestPresent( [ { source: canvas } ] ) );

			} else {

				resolve( vrDisplay.exitPresent() );

			}

		} );

	};

	this.requestPresent = function () {

		return this.setFullScreen( true );

	};

	this.exitPresent = function () {

		return this.setFullScreen( false );

	};

	this.requestAnimationFrame = function ( f ) {

		if ( vrDisplay !== undefined ) {

			return vrDisplay.requestAnimationFrame( f );

		} else {

			return window.requestAnimationFrame( f );

		}

	};

	this.cancelAnimationFrame = function ( h ) {

		if ( vrDisplay !== undefined ) {

			vrDisplay.cancelAnimationFrame( h );

		} else {

			window.cancelAnimationFrame( h );

		}

	};

	this.submitFrame = function () {

		if ( vrDisplay !== undefined && scope.isPresenting ) {

			vrDisplay.submitFrame();

		}

	};

	this.autoSubmitFrame = true;

	// render

	var cameraL = new THREE.PerspectiveCamera();
	cameraL.layers.enable( 1 );

	var cameraR = new THREE.PerspectiveCamera();
	cameraR.layers.enable( 2 );

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( vrDisplay && scope.isPresenting ) {

			var autoUpdate = scene.autoUpdate;

			if ( autoUpdate ) {

				scene.updateMatrixWorld();
				scene.autoUpdate = false;

			}

			var eyeParamsL = vrDisplay.getEyeParameters( 'left' );
			var eyeParamsR = vrDisplay.getEyeParameters( 'right' );

			eyeTranslationL.fromArray( eyeParamsL.offset );
			eyeTranslationR.fromArray( eyeParamsR.offset );

			if ( Array.isArray( scene ) ) {

				console.warn( 'THREE.VREffect.render() no longer supports arrays. Use object.layers instead.' );
				scene = scene[ 0 ];

			}

			// When rendering we don't care what the recommended size is, only what the actual size
			// of the backbuffer is.
			var size = renderer.getSize();
			renderRectL = {
				x: Math.round( size.width * leftBounds[ 0 ] ),
				y: Math.round( size.height * leftBounds[ 1 ] ),
				width: Math.round( size.width * leftBounds[ 2 ] ),
				height:  Math.round(size.height * leftBounds[ 3 ] )
			};
			renderRectR = {
				x: Math.round( size.width * rightBounds[ 0 ] ),
				y: Math.round( size.height * rightBounds[ 1 ] ),
				width: Math.round( size.width * rightBounds[ 2 ] ),
				height:  Math.round(size.height * rightBounds[ 3 ] )
			};

			if ( renderTarget ) {

				renderer.setRenderTarget( renderTarget );
				renderTarget.scissorTest = true;

			} else  {

				renderer.setScissorTest( true );

			}

			if ( renderer.autoClear || forceClear ) renderer.clear();

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorld.decompose( cameraL.position, cameraL.quaternion, cameraL.scale );
			camera.matrixWorld.decompose( cameraR.position, cameraR.quaternion, cameraR.scale );

			var scale = this.scale;
			cameraL.translateOnAxis( eyeTranslationL, scale );
			cameraR.translateOnAxis( eyeTranslationR, scale );

			if ( vrDisplay.getFrameData ) {

				vrDisplay.depthNear = camera.near;
				vrDisplay.depthFar = camera.far;

				vrDisplay.getFrameData( frameData );

				cameraL.projectionMatrix.elements = frameData.leftProjectionMatrix;
				cameraR.projectionMatrix.elements = frameData.rightProjectionMatrix;

			} else {

				cameraL.projectionMatrix = fovToProjection( eyeParamsL.fieldOfView, true, camera.near, camera.far );
				cameraR.projectionMatrix = fovToProjection( eyeParamsR.fieldOfView, true, camera.near, camera.far );

				
			}

			// render left eye
			if ( renderTarget ) {

				renderTarget.viewport.set( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );
				renderTarget.scissor.set( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );

			} else {

				renderer.setViewport( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );
				renderer.setScissor( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );

			}
			renderer.render( scene, cameraL, renderTarget, forceClear );

			// render right eye
			if ( renderTarget ) {

				renderTarget.viewport.set( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );
				renderTarget.scissor.set( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );

			} else {

				renderer.setViewport( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );
				renderer.setScissor( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );

			}
			renderer.render( scene, cameraR, renderTarget, forceClear );

			if ( renderTarget ) {

				renderTarget.viewport.set( 0, 0, size.width, size.height );
				renderTarget.scissor.set( 0, 0, size.width, size.height );
				renderTarget.scissorTest = false;
				renderer.setRenderTarget( null );

			} else {

				renderer.setScissorTest( false );

			}

			if ( autoUpdate ) {

				scene.autoUpdate = true;

			}

			if ( scope.autoSubmitFrame ) {

				scope.submitFrame();

			}

			return;

		}

		// Regular render mode if not HMD

		renderer.render( scene, camera, renderTarget, forceClear );

	};

	//

	function fovToNDCScaleOffset( fov ) {

		var pxscale = 2.0 / ( fov.leftTan + fov.rightTan );
		var pxoffset = ( fov.leftTan - fov.rightTan ) * pxscale * 0.5;
		var pyscale = 2.0 / ( fov.upTan + fov.downTan );
		var pyoffset = ( fov.upTan - fov.downTan ) * pyscale * 0.5;
		return { scale: [ pxscale, pyscale ], offset: [ pxoffset, pyoffset ] };

	}

	function fovPortToProjection( fov, rightHanded, zNear, zFar ) {

		rightHanded = rightHanded === undefined ? true : rightHanded;
		zNear = zNear === undefined ? 0.01 : zNear;
		zFar = zFar === undefined ? 10000.0 : zFar;

		var handednessScale = rightHanded ? - 1.0 : 1.0;

		// start with an identity matrix
		var mobj = new THREE.Matrix4();
		var m = mobj.elements;

		// and with scale/offset info for normalized device coords
		var scaleAndOffset = fovToNDCScaleOffset( fov );

		// X result, map clip edges to [-w,+w]
		m[ 0 * 4 + 0 ] = scaleAndOffset.scale[ 0 ];
		m[ 0 * 4 + 1 ] = 0.0;
		m[ 0 * 4 + 2 ] = scaleAndOffset.offset[ 0 ] * handednessScale;
		m[ 0 * 4 + 3 ] = 0.0;

		// Y result, map clip edges to [-w,+w]
		// Y offset is negated because this proj matrix transforms from world coords with Y=up,
		// but the NDC scaling has Y=down (thanks D3D?)
		m[ 1 * 4 + 0 ] = 0.0;
		m[ 1 * 4 + 1 ] = scaleAndOffset.scale[ 1 ];
		m[ 1 * 4 + 2 ] = - scaleAndOffset.offset[ 1 ] * handednessScale;
		m[ 1 * 4 + 3 ] = 0.0;

		// Z result (up to the app)
		m[ 2 * 4 + 0 ] = 0.0;
		m[ 2 * 4 + 1 ] = 0.0;
		m[ 2 * 4 + 2 ] = zFar / ( zNear - zFar ) * - handednessScale;
		m[ 2 * 4 + 3 ] = ( zFar * zNear ) / ( zNear - zFar );

		// W result (= Z in)
		m[ 3 * 4 + 0 ] = 0.0;
		m[ 3 * 4 + 1 ] = 0.0;
		m[ 3 * 4 + 2 ] = handednessScale;
		m[ 3 * 4 + 3 ] = 0.0;

		mobj.transpose();

		return mobj;

	}

	function fovToProjection( fov, rightHanded, zNear, zFar ) {

		var DEG2RAD = Math.PI / 180.0;

		var fovPort = {
			upTan: Math.tan( fov.upDegrees * DEG2RAD ),
			downTan: Math.tan( fov.downDegrees * DEG2RAD ),
			leftTan: Math.tan( fov.leftDegrees * DEG2RAD ),
			rightTan: Math.tan( fov.rightDegrees * DEG2RAD )
		};

		return fovPortToProjection( fovPort, rightHanded, zNear, zFar );

	}

};

},{}],17:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com
 * @author stewdio / http://stewd.io
 */

THREE.ViveController = function ( id ) {

    THREE.Object3D.call( this );

    var scope = this;
    var gamepad;

    var axes = [ 0, 0 ];
    var thumbpadIsPressed = false;
    var triggerIsPressed = false;
    var gripsArePressed = false;
    var menuIsPressed = false;

    function findGamepad( id ) {

        // Iterate across gamepads as Vive Controllers may not be
        // in position 0 and 1.

        var gamepads = navigator.getGamepads();

        for ( var i = 0, j = 0; i < 4; i ++ ) {

            var gamepad = gamepads[ i ];

            if ( gamepad && gamepad.id === 'OpenVR Gamepad' ) {

                if ( j === id ) return gamepad;

                j ++;

            }

        }

    }

    this.matrixAutoUpdate = false;
    this.standingMatrix = new THREE.Matrix4();

    this.getGamepad = function () {

        return gamepad;

    };

    this.getButtonState = function ( button ) {

        if ( button === 'thumbpad' ) return thumbpadIsPressed;
        if ( button === 'trigger' ) return triggerIsPressed;
        if ( button === 'grips' ) return gripsArePressed;
        if ( button === 'menu' ) return menuIsPressed;

    };

    this.update = function () {

        gamepad = findGamepad( id );

        if ( gamepad !== undefined && gamepad.pose !== undefined ) {

            if ( gamepad.pose === null ) return; // No user action yet

            //  Position and orientation.

            var pose = gamepad.pose;

            if ( pose.position !== null ) scope.position.fromArray( pose.position );
            if ( pose.orientation !== null ) scope.quaternion.fromArray( pose.orientation );
            scope.matrix.compose( scope.position, scope.quaternion, scope.scale );
            scope.matrix.multiplyMatrices( scope.standingMatrix, scope.matrix );
            scope.matrixWorldNeedsUpdate = true;
            scope.visible = true;

            //  Thumbpad and Buttons.

            if ( axes[ 0 ] !== gamepad.axes[ 0 ] || axes[ 1 ] !== gamepad.axes[ 1 ] ) {

                axes[ 0 ] = gamepad.axes[ 0 ]; //  X axis: -1 = Left, +1 = Right.
                axes[ 1 ] = gamepad.axes[ 1 ]; //  Y axis: -1 = Bottom, +1 = Top.
                scope.dispatchEvent( { type: 'axischanged', axes: axes } );

            }

            if ( thumbpadIsPressed !== gamepad.buttons[ 0 ].pressed ) {

                thumbpadIsPressed = gamepad.buttons[ 0 ].pressed;
                scope.dispatchEvent( { type: thumbpadIsPressed ? 'thumbpaddown' : 'thumbpadup' } );

            }

            if ( triggerIsPressed !== gamepad.buttons[ 1 ].pressed ) {

                triggerIsPressed = gamepad.buttons[ 1 ].pressed;
                scope.dispatchEvent( { type: triggerIsPressed ? 'triggerdown' : 'triggerup' } );

            }

            if ( gripsArePressed !== gamepad.buttons[ 2 ].pressed ) {

                gripsArePressed = gamepad.buttons[ 2 ].pressed;
                scope.dispatchEvent( { type: gripsArePressed ? 'gripsdown' : 'gripsup' } );

            }

            if ( menuIsPressed !== gamepad.buttons[ 3 ].pressed ) {

                menuIsPressed = gamepad.buttons[ 3 ].pressed;
                scope.dispatchEvent( { type: menuIsPressed ? 'menudown' : 'menuup' } );

            }

        } else {

            scope.visible = false;

        }

    };

};

THREE.ViveController.prototype = Object.create( THREE.Object3D.prototype );
THREE.ViveController.prototype.constructor = THREE.ViveController;
},{}],18:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com
 * Based on @tojiro's vr-samples-utils.js
 */

THREE.WebVR = {

    isLatestAvailable: function () {

        console.warn( 'WEBVR: isLatestAvailable() is being deprecated. Use .isAvailable() instead.' );
        return this.isAvailable();

    },

    isAvailable: function () {

        return navigator.getVRDisplays !== undefined;

    },

    getMessage: function () {

        var message;

        if ( navigator.getVRDisplays ) {

            navigator.getVRDisplays().then( function ( displays ) {

                if ( displays.length === 0 ) message = 'WebVR supported, but no VRDisplays found.';

            } );

        } else {

            message = 'Your browser does not support WebVR. See <a href="http://webvr.info">webvr.info</a> for assistance.';

        }

        if ( message !== undefined ) {

            var container = document.createElement( 'div' );
            container.style.position = 'absolute';
            container.style.left = '0';
            container.style.top = '0';
            container.style.right = '0';
            container.style.zIndex = '999';
            container.align = 'center';

            var error = document.createElement( 'div' );
            error.style.fontFamily = 'sans-serif';
            error.style.fontSize = '16px';
            error.style.fontStyle = 'normal';
            error.style.lineHeight = '26px';
            error.style.backgroundColor = '#fff';
            error.style.color = '#000';
            error.style.padding = '10px 20px';
            error.style.margin = '50px';
            error.style.display = 'inline-block';
            error.innerHTML = message;
            container.appendChild( error );

            return container;

        }

    },

    getButton: function ( effect ) {

        var button = document.createElement( 'button' );
        button.style.position = 'absolute';
        button.style.left = 'calc(50% - 50px)';
        button.style.bottom = '20px';
        button.style.width = '100px';
        button.style.border = '0';
        button.style.padding = '8px';
        button.style.cursor = 'pointer';
        button.style.backgroundColor = '#000';
        button.style.color = '#fff';
        button.style.fontFamily = 'sans-serif';
        button.style.fontSize = '13px';
        button.style.fontStyle = 'normal';
        button.style.textAlign = 'center';
        button.style.zIndex = '999';
        button.textContent = 'ENTER VR';
        button.onclick = function() {

            effect.isPresenting ? effect.exitPresent() : effect.requestPresent();

        };

        window.addEventListener( 'vrdisplaypresentchange', function ( event ) {

            button.textContent = effect.isPresenting ? 'EXIT VR' : 'ENTER VR';

        }, false );

        return button;

    }

};
},{}],19:[function(require,module,exports){
var SimplexNoise = require('simplex-noise');

var Audience = function( parent ){

	this.parent = parent;
	this.simplex = new SimplexNoise( Math.random );
	this.simplexInc = 0.0;
	this.isAnimated = false;


	var vs = '' +
		'	attribute float size;\n' +
		'	attribute vec3 customColor;\n' +
		'	varying vec3 vColor;\n' +
		'	void main() {\n' +
		'		vColor = customColor;\n' +
		'		vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n' +
		'		gl_PointSize = size * ( 300.0 / -mvPosition.z );\n' +
		'		gl_Position = projectionMatrix * mvPosition;\n' +
		'	}\n';

	var fs = '' +

	// THREE.ShaderChunk[ "common" ] + '\n' +
	// THREE.ShaderChunk[ "fog_pars_fragment" ] + '\n' +

		'	uniform vec3 color;\n' +
		'	uniform sampler2D texture;\n' +
		'	varying vec3 vColor;\n' +


		'	void main() {' +
		'		gl_FragColor = vec4( color * vColor, 1.0 );\n' +
		'		gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );\n' +

        		// THREE.ShaderChunk[ "fog_fragment" ] + '\n' +
		'	}\n';

	var uniforms = {

		color	: { value : new THREE.Color( 0xffffff ) },
		texture	: { value : new THREE.TextureLoader().load( "assets/particle.png" ) }
	};

	var shaderMaterial = new THREE.ShaderMaterial( {

		uniforms		: uniforms,
		vertexShader	: vs,
		fragmentShader	: fs,
		// blending		: THREE.AdditiveBlending,
		// depthTest		: true,
		transparent		: true
	});

	this.geometry = new THREE.BufferGeometry();


	this.numParticlesPerRow = 24;
	this.numParticlesRows = 12;
	this.numParticles = this.numParticlesRows * this.numParticlesPerRow;

	for ( var j = 0; j < this.numParticlesRows; j++ ) {
		this.numParticles += j;
	}

	var radiusX = 14.2;
	var radiusZ = 11.6;
	var positions = new Float32Array( this.numParticles * 3 );
	var colors = new Float32Array( this.numParticles * 3 );
	var sizes = new Float32Array( this.numParticles );
	var color = new THREE.Color();
	this.positionsY = [];

	var index = 0;
	var incRadiusX = 1.7;
	var incRadiusZ = 1.39;
	var incY = 1.0;
	var incZ = -0.3;
	var posY = 6.1;
	var posZ = -221;
	for ( var j = 0; j < this.numParticlesRows; j++ ) {

		for ( var i = 0, i3 = (index * 3); i < (this.numParticlesPerRow + j); i ++, i3 += 3 ) {

			if (i < 7) {

				positions[ i3 + 0 ] = 0 + radiusX;
				positions[ i3 + 1 ] = posY;
				positions[ i3 + 2 ] = posZ + (4 * i);

			} else if (i >= 7 && i < (17 + j)) {

				positions[ i3 + 0 ] = 0 + radiusX * Math.cos( Math.PI * (i - 7) / ((17 + j - 7) - 1) );
				positions[ i3 + 1 ] = posY;
				positions[ i3 + 2 ] = posZ - radiusZ * Math.sin( Math.PI * (i - 7) / ((17 + j - 7) - 1) );

			} else {

				positions[ i3 + 0 ] = 0 - radiusX;
				positions[ i3 + 1 ] = posY;
				positions[ i3 + 2 ] = posZ + (4 * (i - (17 + j)));
			}

			this.positionsY[ index ] = positions[ i3 + 1];


			color.setHSL( index / this.numParticles, 1.0, 0.5 );
			colors[ i3 + 0 ] = color.r;
			colors[ i3 + 1 ] = color.g;
			colors[ i3 + 2 ] = color.b;

			sizes[ index ] = (this.parent.isWebVR)? 1 : 5;

			index++;
		}


		if (j !== 7) {

			radiusX += incRadiusX;
			radiusZ += incRadiusZ;
			posY += incY;
			posZ += incZ;

		} else {

			radiusX += incRadiusX * 2.5;
			radiusZ += incRadiusZ * 2.5;
			posY += incY * 2.5;
			posZ += incZ * 2.5;

		}
	}

	this.geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
	this.geometry.addAttribute( 'customColor', new THREE.BufferAttribute( colors, 3 ) );
	this.geometry.addAttribute( 'size', new THREE.BufferAttribute( sizes, 1 ) );

	this.particleSystem = new THREE.Points( this.geometry, shaderMaterial );
	this.parent.scene.add( this.particleSystem );
};

Audience.prototype.updateColor = function(color1, color2) {

	var colors = this.geometry.attributes.customColor.array;
	for ( var i = 0, i3 = 0; i < this.numParticles; i ++, i3 += 3 ) {

		colors[ i3 + 0 ] = color2[ 0 ];
		colors[ i3 + 1 ] = color2[ 1 ];
		colors[ i3 + 2 ] = color2[ 2 ];
	}
	this.geometry.attributes.customColor.needsUpdate = true;
};

Audience.prototype.step = function( time ) {

	if (this.isAnimated) {

		this.simplexInc += 0.01;

		var positions = this.geometry.attributes.position.array;
		for ( var i = 0, i3 = 0; i < this.numParticles; i ++, i3 += 3 ) {

			var noisePosition = this.simplex.noise2D( 0.1 * i, this.simplexInc );
			positions[ i3 + 1 ] = this.positionsY[ i ] + Math.abs( noisePosition );
		}
		this.geometry.attributes.position.needsUpdate = true;
	}
};

module.exports = Audience;

},{"simplex-noise":36}],20:[function(require,module,exports){
var SimplexNoise = require('simplex-noise');

var Countdown = function( parent ) {

	this.parent = parent;
	this.value = 0;

	this.plane = new THREE.PlaneBufferGeometry( 5.9, 3.6 );

	this.canvas = document.createElement('canvas');
	this.canvas.width = 512;
	this.canvas.height = 256;
	this.context = this.canvas.getContext('2d');

	this.texture = new THREE.Texture( this.canvas );
	var material = new THREE.MeshBasicMaterial( { color : 0xffffff, map : this.texture } );

	this.mesh = new THREE.Mesh( this.plane,  material );
	this.mesh.rotation.y = -Math.PI / 2;
	this.mesh.position.set( -235, 193, 0 );

	this.secondsLeft = 3;
	this.secondsTotal = 3;

	this.drawTexture();
};

Countdown.prototype.step = function( time ) {

};

Countdown.prototype.updateSeconds = function(numSeconds) {

	var secondsBefore = this.secondsLeft;
	var secondsNow = Math.ceil(this.secondsTotal - numSeconds);

	if (secondsBefore != secondsNow) {

		this.secondsLeft = secondsNow;
		this.drawTexture();
	}
};

Countdown.prototype.drawTexture = function() {

	var col1 = '#000000';
	var col2 = '#ffdaa0';
	this.context.fillStyle = col1;
	this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);


	this.context.fillStyle = col2;
	this.context.fillRect( 10, 10, this.canvas.width - 20, 40 );
	this.context.fill();
    this.context.fillStyle = col1;
    this.context.textAlign = 'center';
    this.context.font = "30px matrix";
    this.context.fillText('GAZE HERE TO BEGIN', this.canvas.width / 2, 40);

	this.context.fillStyle = col2;
    this.context.fillRect( 10, 60, this.canvas.width - 20, this.canvas.height - 60 - 10 );

    this.context.fillStyle = col1;
    this.context.textAlign = 'center';
    this.context.font = "180px matrix";
    this.context.fillText(this.secondsLeft, this.canvas.width / 2, 210);

    // this.context.font = "20px matrix";
    // this.context.fillText('TOP SPEED: ' + this.speed.toFixed(2) + 'km/h', this.canvas.width / 2, 140);

    // this.context.fillRect( 10, 150, this.canvas.width - 20, 2 );

    // this.context.font = "20px matrix";
    // this.context.fillText('TOP ALTITUDE: ' + this.altitude.toFixed(2) + 'm', this.canvas.width / 2, 175);

    // this.context.fillRect( 10, 185, this.canvas.width - 20, 2 );

    this.texture.needsUpdate = true;
};

module.exports = Countdown;
},{"simplex-noise":36}],21:[function(require,module,exports){
var SimplexNoise = require('simplex-noise');

var Intro = function( parent ) {
	this.parent = parent;

	this.simplex = new SimplexNoise( Math.random );

	this.introEl = document.getElementById('intro');
	this.targetEl = document.getElementById('target');
	this.gazeEl = document.getElementById('gaze');
	this.skipButEl = document.getElementById('skipbut');

	this.targetInc = 0;

	this.currentScreen = 0;
	this.screens = document.getElementsByClassName('screenHolder')

	this.skipButEl.addEventListener( 'click', function(){
		this.currentScreen = 3;
		this.swapScreen();
		this.skipButEl.style.display = 'none';
		clearInterval( this.swapInterval );
		clearTimeout( this.swapTimeout );
	}.bind(this), false );

	this.swapScreen();

	this.loading = document.querySelector('.loading');
	this.swapInterval = setInterval( function(){
		if( this.loading.classList.length == 1 ) this.loading.classList.add('active');
		else this.loading.classList.remove('active');
	}.bind(this), 1000 );
};

Intro.prototype.swapScreen = function( ) {
	if( this.currentScreen == 3 ) this.skipButEl.style.display = 'none';
	for( var i = 0 ; i < this.screens.length ; i++ ) this.screens[ i ].classList.remove('active');
	this.screens[ this.currentScreen ].classList.add('active');
	if( this.currentScreen < this.screens.length - 1 ) this.swapTimeout = setTimeout( this.swapScreen.bind(this), 5000 );
	this.currentScreen++;
}

Intro.prototype.step = function( time ) {
	if( this.currentScreen == 2 ){
		this.targetInc += 0.006;
		var val = this.simplex.noise2D( 0.55, this.targetInc );
		var val2 = this.simplex.noise2D( 0.82, this.targetInc );
		this.targetEl.style.transform = 'translate3D( 0px, ' + ( val * 10 ) + 'px, 0px )';
		this.gazeEl.style.transform = 'translate3D( 0px, ' + ( val * 10 + val2 * 20 ) + 'px, 0px )'
	}
};

Intro.prototype.onEnd = function() {
	this.introEl.style.display = 'none';
}

module.exports = Intro;
},{"simplex-noise":36}],22:[function(require,module,exports){
var WebWorker = require('webworkify');

var Landscape = function( parent ){
	this.parent = parent;

	var landscapemap = require('./../../assets/landscapemap3.svg');
	var encodedData = window.btoa(landscapemap);

	var textureSize = 1000;
	var myImage = new Image(textureSize, textureSize);
	myImage.src = 'data:image/svg+xml;base64,' + encodedData;
	this.canvas = document.createElement('canvas');
	this.canvas.width = textureSize;
	this.canvas.height = textureSize;
	this.context = this.canvas.getContext('2d');
	this.context.drawImage(myImage, 0, 0, textureSize, textureSize);
	var imgData = this.context.getImageData( 0, 0, textureSize, textureSize );

	this.group = new THREE.Object3D();

	var geoWorker = WebWorker( require( './ww/treemesh' ) );
	geoWorker.onmessage = this.treeGeometryReady.bind(this);
	geoWorker.postMessage( JSON.stringify( { treeCount : 3000, imgData : imgData.data.toString() } ) );

	if (!this.parent.parent.isCardboard) {

		var geoWorker = WebWorker( require( './ww/houseMesh' ) );
		geoWorker.onmessage = this.houseGeometryReady.bind(this);
		geoWorker.postMessage( JSON.stringify( { treeCount : 1200, imgData : imgData.data.toString() } ) );
	}
}
Landscape.prototype.houseGeometryReady = function( msg ){
	var data = JSON.parse( msg.data );

	this.houseCoords = data.coords;
	this.houseVertices = data.vertices.length / data.coords.length;

	var geometry = new THREE.BufferGeometry();
	geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( data.vertices ), 3 ) );

	var material = new THREE.MeshPhongMaterial( { shading: THREE.FlatShading, vertexColors: THREE.VertexColors } );

	this.housesMesh = new THREE.Mesh( geometry, material );
	this.group.add(this.housesMesh)

	this.housesMesh.castShadow = true;

	geometry.addAttribute( 'color', new THREE.BufferAttribute(  new Float32Array( data.colors ), 3 ) );

	this.placedHouses = 0;
}

Landscape.prototype.treeGeometryReady = function( msg ){
	var data = JSON.parse( msg.data );

	this.treeCoords = data.coords;
	this.treesVertices = data.vertices.length / data.coords.length;

	var geometry = new THREE.BufferGeometry();
	geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( data.vertices ), 3 ) );

	var material = new THREE.MeshPhongMaterial( { shading: THREE.FlatShading, vertexColors: THREE.VertexColors, side : THREE.DoubleSide } );

	this.treeMesh = new THREE.Mesh( geometry, material );
	this.group.add(this.treeMesh)

	this.treeMesh.castShadow = true;

	geometry.addAttribute( 'color', new THREE.BufferAttribute(  new Float32Array( data.colors ), 3 ) );

	this.placedTrees = 0;

}
Landscape.prototype.step = function( time ){

	var raycastAmount = 100;
	if( this.placedHouses !== null && this.houseCoords && this.placedHouses < this.houseCoords.length ){
		for( var j = this.placedHouses ; j < this.placedHouses + raycastAmount ; j++ ){
			var raycaster = new THREE.Raycaster( new THREE.Vector3( this.houseCoords[j][1], -200, -this.houseCoords[j][0] ), new THREE.Vector3( 0, 1, 0 ), 0.1, 1000 );
			var intersects = raycaster.intersectObject( this.parent.mountainMesh );
			if( intersects ) {
				for( var i = this.houseVertices * j ; i < this.houseVertices * (j+1) ; i+= 3){
					if( intersects[ 0 ] ) this.housesMesh.geometry.attributes.position.array[ i + 1 ] += intersects[ 0 ].distance + 0.1;
				}
			}
		}
		this.housesMesh.geometry.attributes.position.needsUpdate = true;
		this.housesMesh.geometry.attributes.color.needsUpdate = true;
		this.placedHouses += raycastAmount;
	}

	if( this.placedTrees !== null && this.treeCoords && this.placedTrees < this.treeCoords.length ){
		for( var j = this.placedTrees ; j < this.placedTrees + raycastAmount ; j++ ){
			var raycaster = new THREE.Raycaster( new THREE.Vector3( this.treeCoords[j][1], -200, -this.treeCoords[j][0] ), new THREE.Vector3( 0, 1, 0 ), 0.1, 1000 );
			var intersects = raycaster.intersectObject( this.parent.mountainMesh );
			if( intersects ) {
				for( var i = this.treesVertices * j ; i < this.treesVertices * (j+1) ; i+= 3){
					if( intersects[ 0 ] ) this.treeMesh.geometry.attributes.position.array[ i + 1 ] += intersects[ 0 ].distance + 0.1;
				}
			}
		}
		this.treeMesh.geometry.attributes.position.needsUpdate = true;
		this.treeMesh.geometry.attributes.color.needsUpdate = true;
		this.placedTrees += raycastAmount;
	}
}

module.exports = Landscape
},{"./../../assets/landscapemap3.svg":8,"./ww/houseMesh":33,"./ww/treemesh":34,"webworkify":53}],23:[function(require,module,exports){
var SunCalc = require('suncalc');
var TweenMax = require('gsap');

var Lights = function( parent ){
	this.parent = parent;

	this.group = new THREE.Object3D();

	this.fog = this.parent.scene.fog = new THREE.FogExp2( 0xffffff, 0.002 );

	this.sunGroup = this.makeSun();
	this.moonGroup = this.makeMoon();

	this.ambientLight = new THREE.AmbientLight( 0xffffff , 0.6);
	this.group.add( this.ambientLight );
	// setTimeout( function(){
	// 	if( !this.dateRanges ) console.log( 'too late for geo ');
	// }, 2000 );

	this.timeOffset = 0;
	// setInterval( fun.ction(){
	// 	this.update();
	// }.bind(this), 10 );
	this.incDebug = 0.0;

	var vl =  Math.random() * 180 - 90;
	var vl2 = Math.random() * 360 - 180;

	this.latlon = [ vl, vl2 ];
	this.intiLatlon = [ vl, vl2 ];
	this.update();

	this.getLocation();
}
Lights.prototype.makeMoon = function(){
	this.moonGroup = new THREE.Object3D();
	this.moonAltitudeGroup = new THREE.Object3D();
	this.moonAzimuthGroup = new THREE.Object3D();

	this.moonDirectionalLightDistance = 500;
	this.moonDirectionalLight = new THREE.PointLight( 0xffffff, 1, 400 );
	this.moonDirectionalLight.lookAt( 0, 0, 0 );
	this.moonDirectionalLight.position.set(0, 0, this.moonDirectionalLightDistance);

	var geometry = new THREE.SphereBufferGeometry( 1.8, 16, 16 );
	var material = new THREE.MeshBasicMaterial( {color: 0xffffff} );
	this.sunSphere = new THREE.Mesh( geometry, material );
	this.sunSphere.position.z = this.moonDirectionalLightDistance;
	this.moonAzimuthGroup.add( this.sunSphere );

	this.moonAzimuthGroup.add( this.moonDirectionalLight )
	this.moonAltitudeGroup.add( this.moonAzimuthGroup );
	this.moonGroup.add( this.moonAltitudeGroup )
	this.moonGroup.rotation.x = -Math.PI / 2;
	this.group.add( this.moonGroup );
}
Lights.prototype.makeSun = function(){
	this.sunGroup = new THREE.Object3D();
	this.altitudeGroup = new THREE.Object3D();
	this.azimuthGroup = new THREE.Object3D();

	this.directionalLightDistance = 500;
	this.directionalLight = new THREE.PointLight( 0xffffff, 1, 1000 );
	this.directionalLight.lookAt( 0, 0, 0 );
	this.directionalLight.shadow.mapSize.width = 2048;
	this.directionalLight.shadow.mapSize.height = 2048;
	this.directionalLight.castShadow = true;
	this.directionalLight.position.set(0, 0, this.directionalLightDistance);

	var geometry = new THREE.SphereBufferGeometry( 20, 32, 32 );
	var material = new THREE.MeshBasicMaterial( {color: 0xffff00} );
	this.sunSphere = new THREE.Mesh( geometry, material );
	this.sunSphere.position.z = this.directionalLightDistance;
	this.azimuthGroup.add( this.sunSphere );

	this.azimuthGroup.add( this.directionalLight )
	this.altitudeGroup.add( this.azimuthGroup );
	this.sunGroup.add( this.altitudeGroup )
	this.sunGroup.rotation.x = -Math.PI / 2;
	this.sunGroup.position.y = -100
	this.group.add( this.sunGroup );
}

Lights.prototype.update = function( ){
	var stages = [
		{
			'stage' : 'nightEnd',
			'data' : {
				clear : [ 0, 0, 0, 0.002 ],
				fog : [ 0, 0, 0, 0.002 ],
				ambient : [ 0, 0, 0, 0 ],
				directional : [ 0, 0, 0, 0 ],
				gazeColor1 : [ .1, .1, .1 ],
				gazeColor2 : [ 0.3, 0.4, 0.2 ]
			}
		},
		{ 'stage' : 'sunrise',
			'data' : {
				clear : [ 1, 0.3, 0.1, 0.002 ],
				fog : [ 1, 0.3, 0.1, 0.002 ],
				ambient : [ 1, 1, 1, 0.5 ],
				directional : [ 1, 0, 0, 0.5 ],
				gazeColor1 : [ .1, .1, .1 ],
				gazeColor2 : [ 0.3, 0.4, 0.2 ]
			}
		},
		{
			'stage' : 'solarNoon',
			'data' : {
				clear : [ 0.82, 0.93, 0.94, 0.002 ],
				fog : [ 1, 1, 1, 0.002 ],
				ambient : [ 0.9, 0.9, 0.9, 1 ],
				directional : [ 0.9, 0.9, 0.9, 1 ],
				gazeColor1 : [ .1, .1, .1 ],
				gazeColor2 : [ 0.3, 0.4, 0.2 ]
			}
		},
		{
			'stage' : 'sunset',
			'data' : {
				clear : [ 1, 0.2, 0.3, 0.002 ],
				fog : [ 1, 0.2, 0.3, 0.002 ],
				ambient : [ 1, 0.3, 0, 0.3 ],
				directional : [ 1, 0.8, 0.5, 0.8 ],
				gazeColor1 : [ .8, .8, .8 ],
				gazeColor2 : [ .9, .9, .9 ]
			}
		},
		{
			'stage' : 'night',
			'data' : {
				clear : [ 0, 0, 0, 0.002 ],
				fog : [ 0, 0, 0, 0.002 ],
				ambient : [ 0, 0, 0, 0 ],
				directional : [ 0, 0, 0, 0 ],
				gazeColor1 : [ .1, .1, .1 ],
				gazeColor2 : [ 0.3, 0.4, 0.2 ]
			}
		}
	];

	Date.prototype.addHours = function(h) {
 		this.setTime( this.getTime() + ( h*60*60*1000 ) );
 		return this;
	};


	this.timeOffset+=this.incDebug;
	// console.log(new Date().addHours(this.timeOffset));
	var sunPsition = SunCalc.getPosition( new Date().addHours(this.timeOffset), this.latlon[0], this.latlon[1] );

	this.azimuthGroup.rotation.y = -sunPsition.azimuth;
	this.altitudeGroup.rotation.x = sunPsition.altitude;

	// console.log(sunPsition.altitude);

	var moonPosition = SunCalc.getMoonPosition( new Date().addHours(this.timeOffset), this.latlon[0], this.latlon[1] );
	this.moonAzimuthGroup.rotation.y = -moonPosition.azimuth;
	this.moonAltitudeGroup.rotation.x = moonPosition.altitude;

	var moonIllumination = SunCalc.getMoonIllumination( new Date().addHours(this.timeOffset) );
	this.moonDirectionalLight.intensity = 1 - Math.abs(moonIllumination.phase-0.5) / 0.5;

	var getTimes = SunCalc.getTimes( new Date().addHours(this.timeOffset), this.latlon[0], this.latlon[1] );

	var phase = 4;
	var now = new Date().addHours(this.timeOffset).getTime();
	if( now > getTimes[stages[0].stage] && now < getTimes[stages[1].stage] ) phase = 0;
	else if( now > new Date( getTimes[stages[1].stage] ).getTime() && now < new Date( getTimes[stages[2].stage] ).getTime() ) phase = 1;
	else if( now > new Date( getTimes[stages[2].stage]).getTime() && now < new Date( getTimes[stages[3].stage]).getTime() ) phase = 2;
	else if( now > new Date( getTimes[stages[3].stage]).getTime() && now < new Date( getTimes[stages[4].stage]).getTime() ) phase = 3;
	else phase = 4;

	var frac;
	var directionalColor = [];
	var ambientColor = [];
	var fogColor = [];
	var clearColor = [];
	this.gazeColor1 = [];
	this.gazeColor2 = [];
	if( phase < 4 ){
		frac = ( new Date().addHours(this.timeOffset).getTime() - new Date( getTimes[stages[phase].stage] ).getTime() ) / ( new Date( getTimes[stages[parseInt(phase)+1].stage] ).getTime() - new Date( getTimes[stages[phase].stage] ).getTime() );
		for( var i = 0 ; i < stages[phase].data.directional.length ; i++ ) directionalColor[i] = stages[phase].data.directional[i] + ( stages[phase + 1].data.directional[i] - stages[phase].data.directional[i] ) * frac;
		for( var i = 0 ; i < stages[phase].data.ambient.length ; i++ ) ambientColor[i] = stages[phase].data.ambient[i] + ( stages[phase + 1].data.ambient[i] - stages[phase].data.ambient[i] ) * frac;
		for( var i = 0 ; i < stages[phase].data.fog.length ; i++ ) fogColor[i] = stages[phase].data.fog[i] + ( stages[phase + 1].data.fog[i] - stages[phase].data.fog[i] ) * frac;
		for( var i = 0 ; i < stages[phase].data.clear.length ; i++ ) clearColor[i] = stages[phase].data.clear[i] + ( stages[phase + 1].data.clear[i] - stages[phase].data.clear[i] ) * frac;
		for( var i = 0 ; i < stages[phase].data.gazeColor1.length ; i++ ) this.gazeColor1[i] = stages[phase].data.gazeColor1[i] + ( stages[phase + 1].data.gazeColor1[i] - stages[phase].data.gazeColor1[i] ) * frac;
		for( var i = 0 ; i < stages[phase].data.gazeColor2.length ; i++ ) this.gazeColor2[i] = stages[phase].data.gazeColor2[i] + ( stages[phase + 1].data.gazeColor2[i] - stages[phase].data.gazeColor2[i] ) * frac;


		this.fog.color = new THREE.Color( fogColor[0], fogColor[1], fogColor[2] );

		this.ambientLight.color = new THREE.Color( ambientColor[0], ambientColor[1], ambientColor[2] );
		this.ambientLight.intensity = ambientColor[3];

		this.directionalLight.color = new THREE.Color( directionalColor[0], directionalColor[1], directionalColor[2] );
		this.directionalLight.intensity = directionalColor[3];

		this.parent.renderer.setClearColor(new THREE.Color( clearColor[0], clearColor[1], clearColor[2] ), 1 );

		this.sunSphere.material.color = this.directionalLight.color;

		this.wireframeColor = 0x444444;
	} else {
		var t1 = new Date().addHours(this.timeOffset).getTime() - new Date( getTimes.night ).getTime();
		if( t1 < 0 ) t1 = new Date().addHours(parseInt(this.timeOffset) + 24).getTime() - new Date( getTimes.night ).getTime();
		frac = t1 / ( new Date( getTimes[stages[0].stage] ).addHours(24).getTime() - new Date( getTimes[stages[phase].stage] ).getTime() );

		this.fog.color = new THREE.Color( 0, 0, 0 );

		this.directionalLight.color = new THREE.Color( 0, 0, 0 );
		this.directionalLight.intensity = 0;

		this.ambientLight.color = new THREE.Color( 1, 1, 1 );
		this.ambientLight.intensity = 0.2;

		this.gazeColor1 = [ 1, 0.85490196078431, 0.62745098039216 ];
		this.gazeColor2 = [ 1, 0.62745098039216, 0.62745098039216 ];

		this.wireframeColor = 0xcccccc;

		this.parent.renderer.setClearColor( this.fog.color, 1 );
	}

	this.parent.player.targetCamera.updateColor( this.gazeColor1, this.gazeColor2 );
	this.parent.player.target.updateColor( this.gazeColor1, this.gazeColor2 );
	this.parent.audience.updateColor( this.gazeColor1, this.gazeColor2 );
	this.parent.stage.updateWireframeColor( this.wireframeColor );
	this.parent.prizes.updateWireframeColor( this.wireframeColor );
};

Lights.prototype.getDayNightData = function( lat, lon ){
	this.latlonDest = [lat,lon];
	this.latlonInc = 0;
	TweenMax.to( this, 6, { latlonInc : 1000, ease : Power2.easeOut, onUpdate : function( val ){

		this.latlon[0] = this.intiLatlon[0] + ( this.latlonDest[0] - this.intiLatlon[0] ) * this.latlonInc / 1000;
		this.latlon[1] = this.intiLatlon[1] + ( this.latlonDest[1] - this.intiLatlon[1] ) * this.latlonInc / 1000;
		this.update();

	}.bind(this), onUpdateParams : [ this.latlonInc ] });
};

Lights.prototype.getLocation = function(){
	var _this = this;
	var xhttp = new XMLHttpRequest();
	xhttp.onreadystatechange = function() {
		if (this.readyState == 4 && this.status == 200){
			var data = JSON.parse(this.responseText)
			_this.getDayNightData( data.latitude, data.longitude );
		}
	};
	xhttp.open("GET", "//freegeoip.net/json/", true);
	xhttp.send();
};

Lights.prototype.step = function( time ){

	var now = new Date().getSeconds();
	if( ( now == 30 || now == 0 ) && now !== this.lastNow ) this.update();
	this.lastNow = now;
};

module.exports = Lights;
},{"gsap":35,"suncalc":37}],24:[function(require,module,exports){

var Loading = function( parent ){

	this.parent = parent;

	this.buttonEl1 = document.querySelector('#start-button1');
	this.buttonEl2 = document.querySelector('#start-button2');
	this.buttonEl3 = document.querySelector('#start-button3');
	this.buttonModeEl = document.querySelector('#mode-button');
	this.buttonAudioEl = document.querySelector('#audio-toggle');
	this.loadingBgEl = document.querySelector('#intro');
	// this.introColorEl = document.querySelector('#bg');
	this.introEl = document.getElementById('intro');

	this.isAudioPlaying = true;

	if (this.parent.isWebVR) {
		// this.buttonEl.innerText = "GO WEBVR";
		this.introEl.classList.add('webvr');

	} else if (this.parent.isCardboard) {

		// this.buttonEl.innerText = "GO CARDBOARD";
		this.introEl.classList.add('cardboard');

	} else {

		// this.buttonEl.innerText = "GO DESKTOP";
		this.introEl.classList.add('desktop');
	}

	if (this.parent.isCardboard) {

		this.audio = document.createElement('audio');
		this.audio.src = 'assets/pickPrize.m4a';
		this.audioWind = document.createElement('audio');
		this.audioWind.src = 'assets/wind.m4a';
	}


	this.addEventListeners();
};

Loading.prototype.addEventListeners = function(){

	this.buttonEl1.addEventListener( 'click', this.onClickButton.bind(this), false );
	this.buttonEl2.addEventListener( 'click', this.onClickButton.bind(this), false );
	this.buttonEl3.addEventListener( 'click', this.onClickButton.bind(this), false );
	this.buttonModeEl.addEventListener( 'click', this.onClickButtonMode.bind(this), false );
	this.buttonAudioEl.addEventListener( 'click', this.onClickButtonAudio.bind(this), false );
};

Loading.prototype.changeButton = function(buttonType) {

	this.buttonModeEl.className = "";
	this.buttonModeEl.classList.add(buttonType);
};

Loading.prototype.onClickButton = function(e) {

	e.preventDefault();

	TweenMax.to( this.loadingBgEl, 1.5, {

		opacity: 0.001,
		ease: Power2.easeInOut,
		onComplete: function () {
			this.loadingBgEl.style.display = 'none';
			// this.introColorEl.style.display = 'none';
		}.bind( this )
	} );

	TweenMax.to( this.buttonEl1, 1.0, {

		opacity: 0.001,
		ease: Power2.easeInOut,
		onComplete: function () {
			this.buttonEl1.style.display = 'none';
			this.buttonEl2.style.display = 'none';
			this.buttonEl3.style.display = 'none';
		}.bind( this )
	} );

	this.buttonModeEl.style.display = 'block';
	TweenMax.to( this.buttonModeEl, 1.0, {

		opacity: 0.999,
		ease: Power2.easeInOut,
		delay: 1.0
	} );

	this.buttonAudioEl.style.display = 'block';
	TweenMax.to( this.buttonAudioEl, 1.0, {

		opacity: 0.999,
		ease: Power2.easeInOut,
		delay: 1.0
	} );

	this.parent.onClickStart((e.currentTarget.id == "start-button2"));

	if (this.parent.isCardboard) {

		this.audio.play();
		this.audioWind.play();
	}
};

Loading.prototype.onClickButtonMode = function(e) {

	e.preventDefault();

	this.parent.toggleControls();
};

Loading.prototype.onClickButtonAudio = function(e) {

	e.preventDefault();

	this.isAudioPlaying = !this.isAudioPlaying;
	this.buttonAudioEl.classList.toggle('playing');

	if (!this.parent.isCardboard) {

		if (this.isAudioPlaying) this.parent.player.noise.play();
		else this.parent.player.noise.pause();
	}
};

module.exports = Loading;
},{}],25:[function(require,module,exports){
var skiModel = require('../../assets/ski.obj');
var OBJLoader = require('three-obj-loader')(THREE);
var svgIntersections = require('svg-intersections');
var intersect = svgIntersections.intersect;
intersect.plugin( require('svg-intersections/lib/functions/bezier') )
var shape = svgIntersections.shape;

var Target = require('./target'); // Target object for the player
var TargetCamera = require('./targetcamera'); // Point where the camera is targeting

var TweenMax = require('gsap');

var Player = function( parent ) {

	this.parent = parent;
	this.gravity = 0.98;
	this.currentStatus = 'waiting';

	this.fps = (this.parent.isWebVR)? 90 : 60;

	if (!this.parent.isCardboard) {

		this.noise = timbre("noise", { mul:0.15 } ).play();

		var src = "assets/wind.wav";
		this.wind = timbre("audio", { mul: 0.0 }).loadthis(src, function () { });
	}


	this.slopePosition = 0;
	this.rotation = -1.6286101308328111 + Math.PI / 2; // trust me on this one...
	this.speed = 0;
	this.motionSpeed = 1;
	this.group = new THREE.Object3D();

	this.minFriction = 0.005;
	this.maxFriction = 0.01;
	this.difFriction = this.maxFriction - this.minFriction;

	this.descendingSpeed = 0.0;
	this.maxDescendingSpeed = 1.0;
	this.maxSpeed = 0;
	this.maxAltitude = 0;
	this.points = 0;

	this.cameraContainer = new THREE.Object3D();
	this.cameraContainer.position.y = (this.parent.isWebVR)? 1 : 1.75;
	this.camera = new THREE.PerspectiveCamera( 24, this.parent.containerEl.offsetWidth / this.parent.containerEl.offsetHeight, 0.1, 10000 );
	this.camera.position.y = 0.01;
	this.cameraContainer.add( this.camera );
	this.group.add( this.cameraContainer );

	this.target = new Target( this );
	this.group.add( this.target.mesh );
	this.targetCamera = new TargetCamera( this, this.parent.prizes.prizes );
	this.camera.add( this.targetCamera.mesh );

	this.skiMesh = new THREE.OBJLoader().parse(skiModel);
	this.skiMesh.traverse( function ( child ) {
		if( child instanceof THREE.Mesh ) child.material.color.setRGB(0.6,0.3,0.3)
	})
	this.skiMesh.rotation.y = Math.PI / 2;
	this.skiMesh.position.y = 0.05;
	this.skiMesh.position.x = 0.1;
	this.skiMesh2 = this.skiMesh.clone();
	this.skiMesh2.position.x = -0.1;

	this.group.add( this.skiMesh, this.skiMesh2 );

	var pp = this.parent.stage.slope.getPointAtLength( this.slopePosition );
	this.position = new THREE.Vector3( 0 , this.parent.stage.slopeOrigin.y - pp.y, this.parent.stage.slopeOrigin.x - pp.x );

	// console.log('Player waiting to start');


}

Player.prototype.reset = function() {

	this.currentStatus = 'waiting';

	this.descendingSpeed = 0.0;
	this.maxDescendingSpeed = 1.0;
	this.maxSpeed = 0;
	this.maxAltitude = 0;
	this.points = 0;

	this.slopePosition = 0;
	this.rotation = -1.6286101308328111 + Math.PI / 2; // trust me on this one...
	this.speed = 0;
	this.motionSpeed = 1;
	var pp = this.parent.stage.slope.getPointAtLength( this.slopePosition );
	this.position = new THREE.Vector3( 0 , this.parent.stage.slopeOrigin.y - pp.y, this.parent.stage.slopeOrigin.x - pp.x );

	this.camera.fov = 24;
	this.camera.updateProjectionMatrix();

	this.target.reset();
	this.targetCamera.reset();

	this.parent.audience.isAnimated = false;
};

Player.prototype.onGazeEndIntro = function() {

	this.onStart();
};

Player.prototype.waiting = function(){
	this.rotation = 0;// Math.PI / 24
}

Player.prototype.onStart = function(){

	this.speed = (this.parent.isCardboard)? 0.3 : 0.1;
	this.currentStatus = 'descending';
	this.target.show();

	// console.log('Player start');
}

Player.prototype.updateSpeedDescend = function(speedDescend) {

	this.descendingSpeed = speedDescend;

};

Player.prototype.incrementPoints = function( points, prizeIndex ) {

	this.points += points;

	this.parent.stage.score.updatePoints( this.points );
    this.parent.prizes.removePrizeWithIndex( prizeIndex );
};

Player.prototype.updateScoreSpeed = function(){
	this.maxSpeed = Math.max( this.maxSpeed, this.speed );
	this.parent.stage.score.updateSpeed( this.maxSpeed  );
}
Player.prototype.updateScoreAltitude = function(){
	this.maxAltitude = Math.max( this.maxAltitude, this.altitude );
	this.parent.stage.score.updateAltitude( this.maxAltitude  );
}
Player.prototype.bonusPoints = function( points, bonus ) {

	this.points += points;
	this.parent.stage.score.updatePoints( this.points );
	this.parent.stage.score.showBonus( bonus );

};

Player.prototype.descending = function( time ){

	var mass = 75;

	this.pos = new THREE.Vector3(0,0,0);
	var angleRadians = Math.atan2( this.parent.stage.slope.getPointAtLength( this.slopePosition + 1 ).y - this.parent.stage.slope.getPointAtLength( this.slopePosition ).y, this.parent.stage.slope.getPointAtLength( this.slopePosition + 1 ).x - this.parent.stage.slope.getPointAtLength( this.slopePosition ).x );
	var friction = this.minFriction + (this.descendingSpeed * this.difFriction);
	var P = mass * this.gravity;
	var Px = P * Math.sin(angleRadians);
	var Py = P * Math.cos(angleRadians);
	var Fr = friction * Py;
	var Ef = Px * Fr;
	var a = Ef / mass;

	this.speed += a / this.fps;
	this.slopePosition += this.speed;

	this.incrementPoints( this.speed * 100 );
	this.updateScoreSpeed();

	var pp = this.parent.stage.slope.getPointAtLength( this.slopePosition );
	this.position = new THREE.Vector3( 0 , this.parent.stage.slopeOrigin.y - pp.y, this.parent.stage.slopeOrigin.x - pp.x );
	var angle = Math.atan2(  this.position.z - this.oldPosition.z,  this.position.y - this.oldPosition.y );
	this.rotation += ( angle + Math.PI / 2 - this.rotation ) * 0.3;

	if ( this.slopePosition > this.parent.stage.slope.getTotalLength() ) this.onJump();
}

Player.prototype.onJump = function(){

	if( this.speed * 100 > 130 ) {
		this.bonusPoints( this.speed * 10000, 'jump' );
	}

	this.minFriction = 0.005;
	this.maxFriction = 0.01;


	this.jumpOrigin = this.group.position;
	this.speedUp = Math.sin( this.parent.stage.slopeAngle * Math.PI / 180 ) * this.speed;
	this.speedForward = Math.cos( this.parent.stage.slopeAngle * Math.PI / 180 ) * this.speed;

	TweenMax.to( this, 0.2, { speed : 0, ease : Power2.easeOut });
	if (!this.parent.isCardboard) TweenMax.to( this.wind, 0.2, { mul : 0.2, ease : Power2.easeOut });


	TweenMax.to( this, 2, { motionSpeed : (this.parent.isCardboard)? 0.1 : 0.01, ease : Power2.easeOut });
	TweenMax.to( this.camera, 2, { fov : 40, ease : Power2.easeOut, onUpdate : this.updateCamera.bind(this) });

	this.currentStatus = 'ascending'
	this.target.hide();
	this.targetCamera.onJump();

	if (this.parent.loading.isAudioPlaying) {

		if (this.parent.isCardboard) this.parent.loading.audioWind.play();
		else this.wind.play();
	}

	// console.log('Player jumps');
}

Player.prototype.updateCamera = function(){

	this.camera.updateProjectionMatrix();
}

Player.prototype.getGroundIntersection = function( playerData ){
	var xsect;
	var intersections = intersect(
		shape("path", { d: this.parent.stage.landingPath }),
		shape("line", playerData)
	);
	if( intersections.points.length ) xsect = -intersections.points[0].y;
	else xsect = null;
	return xsect;
}

Player.prototype.getAltitude = function(){
	return this.getGroundIntersection( { x1: -this.position.z, y1: -this.position.y, x2: -this.position.z, y2: 1000 } );
}

Player.prototype.ascending = function( time ){
	this.speedUp -= this.gravity / this.fps * this.motionSpeed;
	this.position = new THREE.Vector3( this.jumpOrigin.x, ( this.jumpOrigin.y + this.speedUp ), ( this.jumpOrigin.z - this.speedForward * this.motionSpeed ) );
	this.rotation += ( -this.rotation ) * 0.3;
	this.altitude = this.getAltitude();

	// document.getElementById('debug').innerText = this.originalSpeedUp + ' --> ' + this.speedUp.toFixed(3) + ' --> ' + this.fps;

	if( this.speedUp < 0 ) this.onPeak();
	this.updateScoreAltitude();


	// console.log((this.speed * 100).toFixed(2) + 'kmh', this.points + 'points', this.altitude + 'meters');
}

Player.prototype.onPeak = function(){
	// TweenMax.to( this, 2, { motionSpeed : 1, ease : Power2.easeOut });
	this.peakAltitude = this.altitude;
	this.currentStatus = 'hovering';
	// console.log('Player reached max height ( ' + this.peakAltitude + ' )' );
}

Player.prototype.onEndHover = function(){
	TweenMax.to( this, 2, { motionSpeed : 1, ease : Power2.easeOut });
	this.currentStatus = 'landing';
	// console.log( 'Player ended hovering' );
}

Player.prototype.hovering = function( time ){
	this.speedUp -= this.gravity / this.fps * this.motionSpeed;
	this.position = new THREE.Vector3( this.jumpOrigin.x, ( this.jumpOrigin.y + this.speedUp ), ( this.jumpOrigin.z - this.speedForward * this.motionSpeed ) );

	this.altitude = this.getAltitude();
	if( this.altitude < this.peakAltitude - 3 ) this.onEndHover();
}

Player.prototype.landing = function( time ){
	this.speedUp -= this.gravity / this.fps * this.motionSpeed;
	this.position = new THREE.Vector3( this.jumpOrigin.x, ( this.jumpOrigin.y + this.speedUp ), ( this.jumpOrigin.z - this.speedForward * this.motionSpeed ) );
	this.rotation += ( 0 - this.rotation ) * 0.1

	this.altitude = this.getAltitude();
	if( !this.altitude ) this.onLand();
}

Player.prototype.onLand = function(){
	this.position.y = this.getGroundIntersection( { x1: -this.position.z, y1: -this.position.y, x2: -this.position.z, y2: -100 } );
	TweenMax.to( this.camera, 3, { fov : 32, ease : Power2.easeOut, onUpdate : this.updateCamera.bind(this) });

	// console.log( 'Player touched the ground' );
	this.currentStatus = 'breaking'
	this.parent.audience.isAnimated = true;
}

Player.prototype.onEnd = function(){
	this.currentStatus = 'ending';
	// console.log( 'Player has stopped completely' );
}

Player.prototype.breaking = function( time ){
	var friction = 0.987;
	this.speedForward *= friction;
	this.position.y = this.getGroundIntersection( { x1: -this.position.z, y1: 1000, x2: -this.position.z, y2: -100 } );
	this.position.z += -this.speedForward;
	this.speed = this.speedForward;
	// Bounce fitipaldi!!
	if( this.position.z < -230 ) this.speedForward *= -1;
	this.position.z -= this.speedForward;
	if( Math.abs( this.speedForward ) < 0.01 ) this.onEnd();
}

Player.prototype.ending = function( time ){
	// console.log(time);
}

Player.prototype.step = function( time ){

	if (!this.parent.isCardboard) this.noise.mul = this.speed / 10;

	this[this.currentStatus]( time );

	this.group.position.set( this.position.x, this.position.y, this.position.z );
	this.group.rotation.x = this.rotation;

	// store values for physics
	this.oldAltitude = this.altitude;
	this.oldRotation = this.rotation;
	this.oldPosition = this.group.position.clone();

	this.target.step();
	this.targetCamera.step();
}

Player.prototype.onResize = function(e) {

    this.camera.aspect = this.parent.containerEl.offsetWidth / this.parent.containerEl.offsetHeight;
    this.camera.updateProjectionMatrix();
}

module.exports = Player;
},{"../../assets/ski.obj":10,"./target":31,"./targetcamera":32,"gsap":35,"svg-intersections":38,"svg-intersections/lib/functions/bezier":41,"three-obj-loader":50}],26:[function(require,module,exports){
var PrizePoints = function( parent, points ){

	this.parent = parent;

	this.points = points;
	this.available = true;

	if (!this.parent.parent.isCardboard) {

		var audioFile = 'assets/pickPrize.ogg';
		this.audio = new Audio(audioFile);
	}


	this.createMesh();
	this.drawTexture();
}

PrizePoints.prototype.createMesh = function() {

    this.plane = new THREE.PlaneBufferGeometry( 12, 12 );

    this.canvas = document.createElement('canvas');
    this.canvas.width = 256;
    this.canvas.height = 256;
    this.context = this.canvas.getContext('2d');

    this.texture = new THREE.Texture( this.canvas );
    var material = new THREE.MeshBasicMaterial( {
        color : 0xffffff,
        map: this.texture,
        side : THREE.DoubleSide,
        transparent : true,
        opacity : 0.0,
        depthTest : false
    } );

    this.mesh = new THREE.Mesh( this.plane, material );
    this.mesh.position.set(0, 0, 0);
};

PrizePoints.prototype.drawTexture = function() {

	this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
	this.context.font = "Bold 60px matrix";
	this.context.textAlign = "center";
	this.context.fillStyle = "#ffffff";
    this.context.fillText(this.points, 128, 128);

    this.texture.needsUpdate = true;
};

PrizePoints.prototype.updatePoints = function(points) {

	if (this.points !== points) {

		this.points = points;
		this.drawTexture();
	}
};

PrizePoints.prototype.animate = function() {

	this.available = false;
	this.mesh.visible = true;
	// make the points look at the player
	this.mesh.lookAt(this.parent.parent.player.group.position);

	if (this.parent.parent.loading.isAudioPlaying) {

		if (this.parent.parent.isCardboard) this.parent.parent.loading.audio.play();
		else this.audio.play();
	}

	TweenMax.to( this.mesh.position, 1.5, {

        y : this.mesh.position.y + 10.0,
        ease : Power2.easeOut
    } );

	TweenMax.to( this.mesh.material, 0.5, {

        opacity : 1.0,
        ease : Linear.none,
        onComplete : function () {

			TweenMax.to( this.mesh.material, 0.5, {

		        opacity : 0.0,
		        delay: 0.5,
		        ease : Power2.easeOut,
		        onComplete : function () {

		        	this.available = true;
		        	this.mesh.material.opacity = 0.0;
					this.mesh.position.set( 0, 0, 0 );
					this.mesh.visible = false;

					if (!this.parent.parent.isCardboard) {

						this.audio.pause();
						this.audio.currentTime = 0;
					}

		        }.bind( this )
		    } );

        }.bind( this )
    } );
};

module.exports = PrizePoints;
},{}],27:[function(require,module,exports){
var SimplexNoise = require('simplex-noise');
var boxModel = require('../../assets/box.obj');
var caneModel = require('../../assets/cane.obj');
var ballModel = require('../../assets/ball.obj');
var bookModel = require('../../assets/book.obj');
var OBJLoader = require('three-obj-loader')(THREE);

var PrizesPointsPool = require('./prizespointspool');

var Prizes = function( parent ){

	this.parent = parent;

	this.simplex = new SimplexNoise( Math.random );
	this.pointsPool = new PrizesPointsPool( this.parent );

	this.i1 = 0;
	this.i2 = 0;
	this.totalPrizes = (this.parent.isCardboard)? 80 : 100;
	this.prizes = [];
	this.minDistance = 20;
	this.maxDistance = (this.parent.isCardboard)? 250 : 300;
	this.minHeight = 100;
	this.maxHeight = 140;
	this.group = new THREE.Object3D();

	this.meshes = [
		{
			id : 'box',
			points : 10000,
			scale : 10.0 + 10.0,
			model : boxModel,
			mesh : null,
			color : 0xffdedf
		},
		{
			id : 'cane',
			points : 2000,
			scale : 10.0 + 10.0,
			model : caneModel,
			mesh : null,
			color : 0xe75656
		},
		{
			id : 'ball',
			points : 5000,
			scale : 15.0 + 10.0,
			model : ballModel,
			mesh : null,
			color : 0xdeffed
		},
		{
			id : 'book',
			points : 8000,
			scale : 20.0 + 10.0,
			model : bookModel,
			mesh : null,
			color : 0xfeffde
		}
	]
	this.loadMeshes();
	this.positionPrizes();

};

Prizes.prototype.reset = function() {

	for( var i = 0 ; i < this.totalPrizes ; i++ ){

		var prize = this.prizes[ i ];
		prize.userData.explosion = 0;
		prize.userData.active = true;
		prize.children[0].material.opacity = 1.0;
		prize.children[1].material.opacity = 1.0;
		prize.visible = true;

		this.resetWireframe( prize.children[1].geometry, prize.userData.originalPositions );
	}
};

Prizes.prototype.resetWireframe = function( wireframeGeometry, originalPositions) {

	for ( var j = 0; j < wireframeGeometry.attributes.position.array.length; j += 3 ) {

		wireframeGeometry.attributes.position.array[ j + 0 ] = originalPositions[ j + 0 ];
		wireframeGeometry.attributes.position.array[ j + 1 ] = originalPositions[ j + 1 ];
		wireframeGeometry.attributes.position.array[ j + 2 ] = originalPositions[ j + 2 ];
	}

	wireframeGeometry.attributes.position.needsUpdate = true;
};

Prizes.prototype.loadMeshes = function() {

	for (var i = 0; i < this.meshes.length; i++) {

		this.meshes[ i ].mesh = new THREE.Object3D();
		var model = new THREE.OBJLoader().parse(this.meshes[ i ].model);
		var firstChild = true;
		model.traverse( function ( child ) {

			if (firstChild) {

				firstChild = false;

			} else {

				child.material = new THREE.MeshPhongMaterial( { side: THREE.DoubleSide, color: this.meshes[ i ].color, transparent: true, opacity: 1.0 } );
				var wireframe = new THREE.LineSegments( new THREE.WireframeGeometry( child.geometry ), new THREE.LineBasicMaterial( { color: 0x444444, linewidth: .5, fog: true, transparent: true, opacity: 1.0  } ) );

				this.meshes[ i ].mesh.add( child );
				this.meshes[ i ].mesh.add( wireframe );

				this.meshes[ i ].model = child;
				this.meshes[ i ].wireframeGeometry = child.geometry;
				this.meshes[ i ].material = new THREE.MeshPhongMaterial( { side: THREE.DoubleSide, color: this.meshes[ i ].color, transparent: true, opacity: 1.0 } );
				this.meshes[ i ].wireframeMaterial = new THREE.LineBasicMaterial( { color: 0x444444, linewidth: .5, fog: true, transparent: true, opacity: 1.0  } );

				var wireframePositionsStart = [];
				var wireframePositionsEnd = [];
				for ( var j = 0; j < wireframe.geometry.attributes.position.array.length; j += 3 ) {

					var originalPosition = new THREE.Vector3(wireframe.geometry.attributes.position.array[ j + 0 ], wireframe.geometry.attributes.position.array[ j + 1 ], wireframe.geometry.attributes.position.array[ j + 2 ]);
					var direction = originalPosition.clone();
					var incPosition = direction.multiplyScalar( Math.random() * 1 );

					wireframePositionsStart[ j + 0 ] = originalPosition.x;
					wireframePositionsStart[ j + 1 ] = originalPosition.y;
					wireframePositionsStart[ j + 2 ] = originalPosition.z;

					wireframePositionsEnd[ j + 0 ] = incPosition.x;
					wireframePositionsEnd[ j + 1 ] = incPosition.y;
					wireframePositionsEnd[ j + 2 ] = incPosition.z;
				}

				this.meshes[ i ].originalPositions = wireframePositionsStart;
				this.meshes[ i ].explodePositions = wireframePositionsEnd;
			}

		}.bind(this) );

	}
};

Prizes.prototype.positionPrizes = function() {

	for( var i = 0 ; i < this.totalPrizes ; i++ ){

		var prizeGroup = new THREE.Object3D();
		prizeGroup.inity = prizeGroup.position.y = Math.random() * ( this.maxHeight - this.minHeight ) + this.minHeight;
		prizeGroup.rotation.y = Math.random() * Math.PI * 2;
		var size = Math.random() * 1 + 0.5;
		var prizeIndex = this.getRandomInt( 0, this.meshes.length - 1 );
		var prize = new THREE.Object3D();
		var priceChild = this.meshes[ prizeIndex ].model.clone( true );
		priceChild.material = this.meshes[ prizeIndex ].material.clone();
		prize.add( priceChild );
		prize.add( new THREE.LineSegments( new THREE.WireframeGeometry( this.meshes[ prizeIndex ].wireframeGeometry.clone() ), this.meshes[ prizeIndex ].wireframeMaterial.clone() ) );

		prize.position.set( 0, 0, Math.random() * ( this.maxDistance - this.minDistance ) + this.minDistance );
		prize.scale.set(this.meshes[ prizeIndex ].scale, this.meshes[ prizeIndex ].scale, this.meshes[ prizeIndex ].scale);
		prize.userData = {

			points : this.meshes[ prizeIndex ].points,
			index : i,
			explosion : 0,
			active : true,
			originalPositions : this.meshes[ prizeIndex ].originalPositions,
			explodePositions : this.meshes[ prizeIndex ].explodePositions
		};

		prizeGroup.add( prize );
		this.group.add( prizeGroup );
		this.prizes.push( prize );
	}
};

Prizes.prototype.getRandomInt = function(min, max) {

    return Math.floor(Math.random() * (max - min + 1)) + min;
};

Prizes.prototype.removePrizeWithIndex = function(index) {

	var prizeMesh = this.prizes[index];
	/////////////////////////////////////////////////////////////////////////////
	if( !prizeMesh ) return; // had to add this to solve conflct... no idea why tho
	/////////////////////////////////////////////////////////////////////////////

	prizeMesh.updateMatrixWorld();
	var points = this.pointsPool.getPrizePointsInstance(prizeMesh.userData.points);
	var pointsPosition = new THREE.Vector3();
	pointsPosition.setFromMatrixPosition( prizeMesh.matrixWorld );
	points.mesh.position.set( pointsPosition.x, pointsPosition.y, pointsPosition.z );
	this.parent.scene.add( points.mesh );
	points.animate();

	prizeMesh.userData.active = false;

    TweenMax.to( prizeMesh.children[0].material, 0.7, {

        opacity : 0.0,
        ease : Power2.easeInOut
    });

    TweenMax.to( prizeMesh.children[1].material, 1.0, {

        opacity : 0.0,
        ease : Power2.easeInOut,
        onComplete : function () {

			prizeMesh.visible = false;
        }
    });

    if (!this.parent.isCardboard) {

	    TweenMax.to( prizeMesh.userData, 1.0, {

	        explosion : 1.0,
	        ease : Power2.easeInOut,
	        onUpdate : function () {

	        	this.removeWireframe( prizeMesh.children[1].geometry, prizeMesh.userData.explosion, prizeMesh.userData.originalPositions, prizeMesh.userData.explodePositions );

	        }.bind( this )
	    });
    }
};

Prizes.prototype.updateWireframeColor = function( color ){
	for(var i = 0 ; i < this.group.children.length ; i++ ) for( var j = 0 ; j < this.group.children[i].children[0].children.length ; j++ ) if( this.group.children[i].children[0].children[j] instanceof THREE.LineSegments ) this.group.children[i].children[0].children[j].material.color.setHex( color );
}

Prizes.prototype.removeWireframe = function( wireframeGeometry, percentage, originalPositions, incPositions) {

	for ( var j = 0; j < wireframeGeometry.attributes.position.array.length; j += 3 ) {

		wireframeGeometry.attributes.position.array[ j + 0 ] = originalPositions[ j + 0 ] + (incPositions[ j + 0 ] * percentage);
		wireframeGeometry.attributes.position.array[ j + 1 ] = originalPositions[ j + 1 ] + (incPositions[ j + 1 ] * percentage);
		wireframeGeometry.attributes.position.array[ j + 2 ] = originalPositions[ j + 2 ] + (incPositions[ j + 2 ] * percentage);
	}

	wireframeGeometry.attributes.position.needsUpdate = true;
};

Prizes.prototype.step = function( time ){

	this.i1 += 0.0001;
	this.i2 += 0.001;

	for ( var i = 0 ; i < this.group.children.length ; i++ ) {

		if ( this.group.children[i].children[0].userData.explosion < 1.0 ) {

			var rotationMultiplier = ( this.group.children[i].rotationSense ) ? 1 : -1 ;
			var position = this.simplex.noise2D( i / this.group.children.length + this.i1, i / this.group.children.length );
			var rotation = this.simplex.noise2D( i / this.group.children.length + this.i2, i / this.group.children.length );

			this.group.children[i].position.y = this.group.children[i].inity + position * 20;
			this.group.children[i].rotation.y += 0.005 * rotation;
			this.group.children[i].children[0].rotation.x += 0.01 * position;
			this.group.children[i].children[0].rotation.y += 0.01 * rotation;
		}
	}
}

module.exports = Prizes;
},{"../../assets/ball.obj":2,"../../assets/book.obj":4,"../../assets/box.obj":5,"../../assets/cane.obj":6,"./prizespointspool":28,"simplex-noise":36,"three-obj-loader":50}],28:[function(require,module,exports){

var PrizePoints = require('./prizepoints');

var PrizesPointsPool = function( parent ){

	this.parent = parent;
	this.pool = [];

	this.initializePool();
};

PrizesPointsPool.prototype.initializePool = function() {

	var initialNumOfPrizesInPool = 4;
	for (var i = 0; i < initialNumOfPrizesInPool; i++) {

		var prizePoints = this.createPrizePointsInstance( 10 );
		this.pool.push( prizePoints );
	}
};

PrizesPointsPool.prototype.getPrizePointsInstance = function(points) {

	var availableInstance = null;
	for (var i = 0; i < this.pool.length; i++) {

		if (this.pool[ i ].available === true) {

			this.pool[i].updatePoints( points );
			return this.pool[ i ];
		}
	}

	// If we are here, there are no instances available, create one
	var prizePoints = this.createPrizePointsInstance( points );
	// Add it to the pool
	this.pool.push( prizePoints );

	return prizePoints;
};

PrizesPointsPool.prototype.createPrizePointsInstance = function(points) {

	var prizePoints = new PrizePoints(this, points);
	return prizePoints;
};

module.exports = PrizesPointsPool;
},{"./prizepoints":26}],29:[function(require,module,exports){
var TweenMax = require('gsap');

var Score = function( parent ){

	this.parent = parent;

	this.speed = 0.1;
	this.points = 0;
	this.altitude = 0;

	this.phaseinc = 0;
	this.plane = new THREE.PlaneBufferGeometry( 30, 20 );

	this.canvas = document.createElement('canvas');
	this.canvas.width = 512;
	this.canvas.height = 256;
	this.context = this.canvas.getContext('2d');

	this.texture = new THREE.Texture( this.canvas );
	var material = new THREE.MeshBasicMaterial( { color : 0xffffff, map : this.texture } );

	this.mesh = new THREE.Mesh( this.plane,  material );
	this.mesh.rotation.y = -Math.PI / 2;

	this.mesh.position.y = 37;
	this.mesh.position.x = 262.5;
	this.mesh.position.z = 0;

	this.speeedIcon = new Image();
	this.speeedIcon.src = 'assets/speed.png';

	this.isOver = false;

	this.timeTicker = 0;

	this.drawTexture();
};

Score.prototype.reset = function() {

	this.speed = 0.1;
	this.points = 0;
	this.altitude = 0;
	this.bonus = false;
	this.isOver = false;

	this.drawTexture();
};

Score.prototype.drawTexture = function() {

	// if( this.bonus ) return;

	var col1 = '#000000';
	var col2 = '#ffdaa0';
	this.context.fillStyle = col1;
	this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);


	this.context.fillStyle = col2;
	this.context.fillRect( 10, 10, this.canvas.width - 20, 40 );
	this.context.fill();
    this.context.fillStyle = col1;
    this.context.textAlign = 'center';
    this.context.font = "30px matrix";
    this.context.fillText('TOTAL SCORE', this.canvas.width / 2, 40);
    this.context.fillStyle = col2;
    this.context.font = "50px matrix";
    this.context.fillText( Math.floor(this.points).toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."),  this.canvas.width / 2, 100);

    this.context.fillRect( 10, 115, this.canvas.width - 20, 2 );

    this.context.font = "20px matrix";
    this.context.fillText('TOP SPEED: ' + this.speed.toFixed(2) + 'km/h', this.canvas.width / 2, 140);

    this.context.fillRect( 10, 150, this.canvas.width - 20, 2 );

    this.context.font = "20px matrix";
    this.context.fillText('TOP ALTITUDE: ' + this.altitude.toFixed(2) + 'm', this.canvas.width / 2, 175);

    this.context.fillRect( 10, 185, this.canvas.width - 20, 2 );

    // Play again button

    if (this.isOver) {

    	this.context.fillStyle = col2;
    	this.context.fillRect( 10, 205, this.canvas.width - 20, 40 );

    } else {

    	this.context.strokeStyle = col2;
    	this.context.lineWidth = 2;
    	this.context.strokeRect( 10, 205, this.canvas.width - 20, 40 );
    }
    this.context.fillStyle = (this.isOver)? col1 : col2;
    this.context.font = "30px matrix";
    this.context.fillText('PLAY AGAIN', this.canvas.width / 2, 235);

    this.texture.needsUpdate = true;
};

Score.prototype.updateSpeed = function(speed) {
	this.speed = speed * 100;
	this.drawTexture();
};


Score.prototype.updateAltitude = function(altitude) {
	this.altitude = altitude;
	this.drawTexture();
};

Score.prototype.updatePoints = function(points) {
	this.points = points;
	this.drawTexture();
};

Score.prototype.showBonus = function(bonus) {
	this.bonus = true;


	// var col1 = '#000000';
	// var col2 = '#ffdaa0';
	// this.context.fillStyle = col1;
	// this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
	// this.context.fillStyle = col2;
 //    this.context.font = "20px matrix";
 //    this.context.fillText('BONUS!!! ', this.canvas.width / 2, 175);

	// this.context.fillRect(0,0,this.canvas.width,this.canvas.height);
	// this.context.globalCompositeOperation = "source-atop";
	// this.context.drawImage(this.speeedIcon,0,0, 100, 100);

 //    this.texture.needsUpdate = true;

	console.log('bonus : ' + bonus);
};

Score.prototype.onOverReset = function() {

	this.isOver = true;
	this.drawTexture();
};

Score.prototype.onOutReset = function() {

	this.isOver = false;
	this.drawTexture();
};

Score.prototype.drawIdleScreen = function( time ) {

	var col1 = '#000000';
	var col2 = '#ffdaa0';
	if( this.phaseinc ){
		this.context.fillStyle = col1;
		this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
		this.context.fillStyle = col2;
	} else {
		this.context.fillStyle = col2;
		this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
		this.context.fillStyle = col1;
	}
	this.context.textAlign = 'left';
	this.context.font = "20px blck";
	for( var i = 0; i < 50 ; i++ ) this.context.fillText('*', Math.random() * this.canvas.width, Math.random() * this.canvas.height );

	this.context.font = "80px blck";
	this.context.fillText('SKI', 10, 140);
	this.context.fillText('JUMP', 210, 196);

	this.texture.needsUpdate = true;
};



Score.prototype.step = function( time ){
	this.timeTicker++;

	if( this.points == 0 ){
		if(this.timeTicker % 60 == 0 ) {
			this.phaseinc = !this.phaseinc;
			this.drawIdleScreen( time );
		}
	}
}
module.exports = Score;
},{"gsap":35}],30:[function(require,module,exports){
var model = require('../../assets/base9.obj');
var lamp = require('../../assets/lamp.obj');
var pole = require('../../assets/pole.obj');
var arrow = require('../../assets/arrow.obj');

// var Skybox = require('./skybox'); // Scoreboard
var Score = require('./score'); // Scoreboard
var Countdown = require('./countdown'); // Introboard
var Landscape = require('./landscape'); // Trees, village and decoration on stage

var OBJLoader = require('three-obj-loader')(THREE);
var Stage = function( parent ){

	this.parent = parent;

	this.slopeOrigin = new THREE.Vector2( 0,0 );
	this.landingPath = 'M-291.324-174.0877c47.978-0.2317,71.3112,17.3651,108.8553,46.0455c43.1519,32.9643,96.7334,40.8891,144.6539,63.8938C2.5818-44.7557,39.0152-15.6982,84.4878-9.421C140.7772-1.6506,200.2027,0,258.4094,0';
	this.slopePath = 'M-255.3108-189.054c64.3267,3.6638,76.9902,20.1856,97.4599,47.2444c21.762,28.7673,54.0503,52.0614,86.3552,52.0614c4.2467,0,6.6649-0.3817,6.6649-0.3817';
	this.slope = new DOMParser().parseFromString('<svg xmlns="http://www.w3.org/2000/svg"><path d="' + this.slopePath + '" /></svg>', "application/xml").querySelector('svg').querySelectorAll('path')[0];

	this.slopeAngle = 30;

	this.group = new THREE.Object3D();
	this.wireframe = new THREE.Object3D();

	// var texture = require('./../../assets/texture.svg');
	// var textureData = window.btoa(texture);
	// var myImage = new Image();
	// myImage.src = 'data:image/svg+xml;base64,' + textureData;

	this.mesh = new THREE.OBJLoader().parse(model);
	this.mesh.traverse( function ( child ) {
		// console.log(child.name);
		if( child.name == 'SNOW_MOUNTAIN_Mesh.026' ) this.mountainMesh = child;


		child.material = new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0xefefef } );

		if( child.name == 'WATER_MOUNTAIN_Mesh.000' ) child.material = new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0x0000ff } );
		if( child.name == 'STONE_MOUNTAIN_Mesh.001' ) child.material = new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0xABABAB } );

		child.castShadow = true;
		child.receiveShadow = (child.name == 'RAMP_Mesh.017')? false : true;
		var wireframe = new THREE.LineSegments( new THREE.WireframeGeometry( child.geometry ), new THREE.LineBasicMaterial( { color: 0x444444, linewidth: .5, fog : true  } ) );
		this.wireframe.add( wireframe );

	}.bind(this) );

	this.score = new Score( this );
	this.countdown = new Countdown( this );
	this.landscape = new Landscape( this );
	// this.skybox = new Skybox( this );

	this.landingMesh = this.makeLandingMesh();
	this.lamps = this.addLamps();
	this.poles = this.addPoles();

	var wireframeLanding = new THREE.LineSegments( new THREE.WireframeGeometry( this.landingMesh.geometry ), new THREE.LineBasicMaterial( { color: 0x444444, linewidth: .5, fog : true  } ) );
	this.wireframe.add( wireframeLanding );

	this.group.add(
		this.mesh,
		this.wireframe,
		this.landingMesh,
		this.lamps,
		this.poles,
		this.score.mesh,
		this.countdown.mesh,
		this.landscape.group
		// this.skybox.mesh
	);
	this.group.rotation.y = Math.PI / 2;

	this.arrowGroup = new THREE.Object3D();
	this.arrowMesh = new THREE.Object3D();

	var arrowObj = new THREE.OBJLoader().parse(arrow);
		arrowObj.children[0].material = new THREE.MeshBasicMaterial( { side : THREE.DoubleSide, color : 0xffdaa0 } );
	var arrowWireframe = new THREE.LineSegments( new THREE.WireframeGeometry( arrowObj.children[0].geometry ), new THREE.LineBasicMaterial( { color: 0x00000, linewidth: .5, fog: true, transparent: true, opacity: 1.0  } ) );

	this.arrowMesh.add(arrowObj);
	this.arrowMesh.add(arrowWireframe);
	this.arrowMesh.scale.set( 0.005, 0.005, 0.005 );
	// this.arrowMesh.castShadow = true;
	this.parent.scene.add( this.arrowGroup );

	setTimeout(function () {

		var pos = this.parent.player.group.position.clone();
		this.arrowGroup.position.set(pos.x, pos.y + 2, pos.z);

		// Around player
		var radiusX = 2;
		var radiusZ = 3;
		var rots = [ 0, -30, -60, 60, 30, 0 ];
		for (var i = 0; i <= 5; i++) {

			var arrow = this.arrowMesh.clone();
			arrow.position.set(radiusX * Math.cos( Math.PI * i / 5 ), 0, radiusZ * Math.sin( Math.PI * i / 5 ));
			arrow.rotation.z = THREE.Math.degToRad( 90 );
			arrow.rotation.y = THREE.Math.degToRad( rots[i] );
			this.arrowGroup.add( arrow );
		}

		var arrowTop = this.arrowMesh.clone();
		arrowTop.position.set(0, 1, -2);
		arrowTop.rotation.x = THREE.Math.degToRad( -30 );
		this.arrowGroup.add( arrowTop );

		var arrowBottom = this.arrowMesh.clone();
		arrowBottom.position.set(0, -1, -2);
		arrowBottom.rotation.x = THREE.Math.degToRad( 30 );
		this.arrowGroup.add( arrowBottom );


	}.bind( this ), 1000);



};


Stage.prototype.addPoles = function(){
	var poleCount = 80
	var group = new THREE.Object3D();
	var mesh = new THREE.OBJLoader().parse(pole).children[0];
	mesh.material = new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0x9C704E } );
	for( var i = 0 ; i < poleCount ; i++ ){
		var m = mesh.clone();
		m.position.set( this.slope.getPointAtLength( i / ( poleCount - 1) * this.slope.getTotalLength() ).x, -this.slope.getPointAtLength( i / ( poleCount - 1) * this.slope.getTotalLength() ).y - 0.2, 0 );
		var wireframe = new THREE.LineSegments( new THREE.WireframeGeometry( m.geometry ), new THREE.LineBasicMaterial( { color: 0x444444, linewidth: 0.5, fog : true  } ) );
		wireframe.position.set( m.position.x, m.position.y, m.position.z);
		group.add(m, wireframe);
	}
	return group;
}

Stage.prototype.addLamps = function(){
	var lampCount = 60
	var group = new THREE.Object3D();
	var mesh = new THREE.OBJLoader().parse(lamp).children[0];

	mesh.material = new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0xefefef } );
	mesh.castShadow = true;
	for( var i = 7 ; i < lampCount - 3 ; i++ ){
		var m = mesh.clone()
		m.position.y = 2;
		var lampGroup = new THREE.Object3D();
		lampGroup.position.set( this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() ).x, -this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() ).y, 0 );
		var wireframe = new THREE.LineSegments( new THREE.WireframeGeometry( m.geometry ), new THREE.LineBasicMaterial( { color: 0x444444, linewidth: .5, fog : true  } ) );
		wireframe.position.y = m.position.y;
		lampGroup.add(m, wireframe);
		var angle = Math.atan2( (-this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() + 1 ).y) - ( - this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() ).y), this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() + 1 ).x - this.slope.getPointAtLength( i / ( lampCount - 1) * this.slope.getTotalLength() ).x );
		lampGroup.rotation.z = angle;
		group.add( lampGroup );
	}
	mesh.remove()
	return group;
}

Stage.prototype.updateWireframeColor = function(color){
	for(var i = 0 ; i < this.wireframe.children.length ; i++ ){
		this.wireframe.children[i].material.color.setHex( color );
	}
}
Stage.prototype.makeLandingMesh = function(){
	var path = new DOMParser().parseFromString('<svg xmlns="http://www.w3.org/2000/svg"><path d="' + this.landingPath + '" /></svg>', "application/xml").querySelector('svg').querySelectorAll('path')[0];
	var segments = 100;
	var geometry = new THREE.Geometry();
	var width = 200;
	var ovs = [];
	for( var i = 0 ; i < segments ; i++ ){
		var nvs = [];
		var pp = path.getPointAtLength( i / (segments - 1) * path.getTotalLength() );
		for( var j = 0 ; j < 2 ; j++ ){
			nvs.push( geometry.vertices.push( new THREE.Vector3( pp.x, -pp.y, -width / 2 + width * j ) ) - 1 );
			if( i > 0 && j > 0 ) geometry.faces.push( new THREE.Face3( ovs[j-1], ovs[j], nvs[j-1] ), new THREE.Face3( nvs[j], nvs[j-1], ovs[j] ) );
		}
		var ovs = nvs;
	}

	var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { side : THREE.DoubleSide, color : 0xefefef } ) );
	// mesh.castShadow = true;
	// mesh.receiveShadow = true;
	return mesh;
}
Stage.prototype.step = function( time ){
	this.landscape.step( time );
	this.score.step( time );
}

module.exports = Stage;
},{"../../assets/arrow.obj":1,"../../assets/base9.obj":3,"../../assets/lamp.obj":7,"../../assets/pole.obj":9,"./countdown":20,"./landscape":22,"./score":29,"three-obj-loader":50}],31:[function(require,module,exports){
var SimplexNoise = require('simplex-noise');

var Target = function( parent ){

    this.parent = parent;
    this.position = new THREE.Vector3(0, 1.5, -5);
    this.colorNoHit = "#666666";
    this.colorHit = "#00cc00";
    this.colorDescend = "#ffffff";
    this.color = this.colorNoHit;
    this.scale = 4.5;
    this.sto = 0;
    this.sti = 0;

    this.simplex = new SimplexNoise( Math.random );
    this.simplexInc = 0.0;
    this.useNoise = false;

    var sizePlane = (this.parent.parent.isWebVR)? 0.3 : 0.1;
    this.plane = new THREE.PlaneBufferGeometry( sizePlane, sizePlane );

    this.canvas = document.createElement('canvas');
    this.canvas.width = 256;
    this.canvas.height = 256;
    this.context = this.canvas.getContext('2d');

    this.texture = new THREE.Texture( this.canvas );
    var material = new THREE.MeshBasicMaterial( {
        color : 0xffffff,
        map: this.texture,
        side : THREE.DoubleSide,
        transparent : true,
        opacity : 0,
        depthTest : false
    } );

    this.mesh = new THREE.Mesh( this.plane, material );
    this.mesh.position.set(0, 1.5, -5);

    var materialLine = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2.0, opacity: 0.0, transparent: true, depthTest: false });
    var geometryLine = new THREE.Geometry();
        geometryLine.vertices.push(new THREE.Vector3(-5, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(-0.02, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(0.02, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(5, 0, 0));
    this.line = new THREE.LineSegments(geometryLine, materialLine);

    this.mesh.add( this.line );
    this.mesh.visible = false;

    this.tween;
    this.alpha = 1.0;
    this.drawTarget();
};

Target.prototype.updateColor = function( col1, col2 ){
    this.col1 = col1;
    this.col2 = col2;
    
    this.line.material.color.setRGB( col2[0], col2[1], col2[2] );
    this.line.material.needsUpdate = true;

    this.mesh.material.color.setRGB( col2[0], col2[1], col2[2] );
    this.mesh.material.needsUpdate = true;
}
Target.prototype.reset = function() {

    this.color = this.colorNoHit;
    this.scale = 4.5;
    this.alpha = 1.0;

    this.line.visible = false;
    this.line.material.alpha = 0.0;

    this.mesh.visible = false;
    this.mesh.material.alpha = 0.0;
    this.mesh.position.set(0, 1.5, -5);

    this.position.set(0, 1.5, -5);

    this.useNoise = false;

    this.drawTarget();
};

Target.prototype.step = function() {

    // Move randomly using a simple noise
    if (this.useNoise) {

        this.simplexInc += 0.01;
        var noisePosition = this.simplex.noise2D( 0.1, this.simplexInc );
        this.position.y = 1.2 + (noisePosition * 0.1);
    }

    // Ease to the random position
    this.mesh.position.x += (this.position.x - this.mesh.position.x) / 20;
    this.mesh.position.y += (this.position.y - this.mesh.position.y) / 20;
    this.mesh.position.z += (this.position.z - this.mesh.position.z) / 20;
};

Target.prototype.show = function() {

    this.mesh.visible = true;
    this.line.visible = true;
    this.color = this.colorDescend;

    TweenMax.to( this.mesh.material, 2.0, {

        opacity : 1.0,
        ease : Linear.none
    });

    TweenMax.to( this.line.material, 2.0, {

        opacity : 1.0,
        ease : Linear.none
    });

    TweenMax.to( this, 1.0, {

        scale : 0.5,
        ease : Power2.easeInOut,
        onUpdate: this.drawTarget.bind(this)
    });

    this.useNoise = true;
};

Target.prototype.hide = function() {

    TweenMax.to( this, 1.0, {

        alpha : 0.0,
        ease : Power2.easeOut,
        onUpdate: this.drawTarget.bind(this),
        onComplete : this.hideEnd.bind(this)
    });

    TweenMax.to( this.line.material, 1.0, {

        opacity : 0.0,
        ease : Power2.easeOut,
        onUpdate: this.drawTarget.bind(this),
        onComplete : this.hideEnd.bind(this)
    });

    this.useNoise = false;
    this.position = new THREE.Vector3(0, 1, -10);
};

Target.prototype.hideEnd = function() {

    this.mesh.visible = false;
    this.line.visible = false;
};

Target.prototype.drawHit = function() {

    this.color = this.colorHit;
    this.drawTarget();

    clearTimeout( this.sto );
    this.sto = setTimeout( function () {

        this.color = this.colorNoHit;
        this.drawTarget();

    }.bind(this), 250 );
};

Target.prototype.drawTarget = function () {

    var halfSize = this.canvas.width * 0.5;

    this.context.globalAlpha = this.alpha;
    this.context.strokeStyle = this.color;
    this.context.lineWidth = 15;
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.context.beginPath();
    this.context.arc(halfSize, halfSize, (25 * this.scale), 0, 2 * Math.PI);
    this.context.stroke();

    this.texture.needsUpdate = true;
};

module.exports = Target;
},{"simplex-noise":36}],32:[function(require,module,exports){

var TargetCamera = function( parent, prizes ){

    this.parent = parent;
    this.prizes = prizes.slice();
    this.speedTarget = this.parent.target;
    this.speedLineMultiplier = 1.0;

    this.isGazeIntro = false;
    this.gazeIntroTime = 0;
    this.gazeIntroStartTime = 0;
    this.gazeIntroTotalTime = 3;

    this.isGazeReset = false;
    this.gazeResetTime = 0;
    this.gazeResetStartTime = 0;
    this.gazeResetTotalTime = 2;

    this.percentageTime = 0;
    this.isOver = false;
    this.stoOver = 0;

    this.showTime = true;
    this.showSpeed = false;

    var sizePlane = (this.parent.parent.isWebVR)? 0.3 : 0.1;
    this.plane = new THREE.PlaneBufferGeometry( sizePlane, sizePlane );

    this.canvas = document.createElement('canvas');
    this.canvas.width = 256;
    this.canvas.height = 256;
    this.context = this.canvas.getContext('2d');

    this.texture = new THREE.Texture( this.canvas );
    var material = new THREE.MeshBasicMaterial( {
        color : 0xffffff,
        map: this.texture,
        side : THREE.DoubleSide,
        transparent : true,
        depthTest : false
    } );

    this.mesh = new THREE.Mesh( this.plane, material );
    this.mesh.position.set( 0, 0, -5 );

    var lineDistance = (this.parent.parent.isWebVR)? 0.06 : 0.02;
    var materialLine = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2.0, opacity: 0.0, transparent: true, depthTest: false });
    var geometryLine = new THREE.Geometry();
        geometryLine.vertices.push(new THREE.Vector3(-5, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(-1 * lineDistance, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(lineDistance, 0, 0));
        geometryLine.vertices.push(new THREE.Vector3(5, 0, 0));
    this.line = new THREE.LineSegments(geometryLine, materialLine);

    this.mesh.add( this.line );

    this.drawTargetCamera();

    this.raycaster = new THREE.Raycaster();
};
TargetCamera.prototype.updateColor = function( col1, col2 ) {

    this.col1 = col1;
    this.col2 = col2;

    this.line.material.color.setRGB( col1[0], col1[1], col1[2] );
    this.line.material.needsUpdate = true;

    this.drawTargetCamera();
}
TargetCamera.prototype.reset = function() {

    this.speedLineMultiplier = 1.0;

    this.isGazeIntro = false;
    this.gazeIntroTime = 0;
    this.gazeIntroStartTime = 0;
    this.gazeIntroTotalTime = 3.25;
    this.percentageTime = 0;
    this.isOver = false;

    this.mesh.position.set( 0, 0, -5 );

    this.showTime = true;
    this.showSpeed = false;

    this.drawTargetCamera();
};

TargetCamera.prototype.drawTargetCamera = function () {
    var halfSize = this.canvas.width * 0.5;
    if(this.col1) this.context.strokeStyle = 'rgb('+Math.floor(this.col1[0]*255)+','+Math.floor(this.col1[1]*255)+','+Math.floor(this.col1[2]*255)+')';
    else this.context.strokeStyle = '#000000';
    this.context.lineWidth = 15;
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.context.beginPath();
    this.context.arc(halfSize, halfSize, (this.isOver)? 60 : 50, 0, 2 * Math.PI);
    this.context.stroke();

    if (this.showSpeed) {

        // 3 lines depending on the percentage
        var speedPercent = this.parent.descendingSpeed / this.parent.maxDescendingSpeed;


        if (speedPercent > 0.4) {

            this.context.beginPath();
            this.context.arc(halfSize, halfSize, 90, Math.PI + 0.3, 2 * Math.PI - 0.3);
            this.context.stroke();

            this.context.beginPath();
            this.context.arc(halfSize, halfSize, 90, 0.3, Math.PI - 0.3);
            this.context.stroke();
        }

        if (speedPercent > 0.8) {

            this.context.beginPath();
            this.context.arc(halfSize, halfSize, 120, Math.PI + 0.3, 2 * Math.PI - 0.3);
            this.context.stroke();

            this.context.beginPath();
            this.context.arc(halfSize, halfSize, 120, 0.3, Math.PI - 0.3);
            this.context.stroke();
        }
    }

    if (this.showTime && this.percentageTime > 0) {

        if(this.col2) this.context.strokeStyle = 'rgb('+Math.floor(this.col2[0]*255)+','+Math.floor(this.col2[1]*255)+','+Math.floor(this.col2[2]*255)+')';
        else this.context.strokeStyle = '#000000';
        this.context.lineWidth = 20;
        this.context.lineCap = 'round';

        this.context.beginPath();
        this.context.arc(halfSize, halfSize, (this.isOver)? 95 : 85, Math.PI + 0.1, Math.PI + 0.1 + ((Math.PI - 0.2) * this.percentageTime));
        this.context.stroke();

        this.context.beginPath();
        this.context.arc(halfSize, halfSize, (this.isOver)? 95 : 85, 0.1, 0.1 + ((Math.PI - 0.2) * this.percentageTime));
        this.context.stroke();
    }

    this.texture.needsUpdate = true;
};

TargetCamera.prototype.hideSpeed = function() {

    TweenMax.to( this, 1.0, {

        speedLineMultiplier : 0.0,
        ease : Power2.easeOut,
        onUpdate: this.drawTargetCamera.bind(this)
    });

    clearInterval( this.sti );
    this.position = new THREE.Vector3(0, 1, -10);
};

TargetCamera.prototype.getCoordinates = function( element, camera, renderer ) {

    var screenVector = new THREE.Vector3();
    element.localToWorld( screenVector );

    screenVector.project( camera );

    var posx = Math.round(( screenVector.x + 1 ) * renderer.domElement.offsetWidth / 2 );
    var posy = Math.round(( 1 - screenVector.y ) * renderer.domElement.offsetHeight / 2 );

    return new THREE.Vector2( posx, posy );
};

TargetCamera.prototype.step = function() {

    if (this.parent.currentStatus === 'descending') {

        // Calc distance from this point to the target point
        var renderer = this.parent.parent.renderer;
        var maxDistance = 60;
        var positionRay = new THREE.Vector2( window.innerWidth * 0.5, window.innerHeight * 0.5);// this.getCoordinates( this.mesh, this.parent.camera, renderer);
        var positionTarget = this.getCoordinates( this.speedTarget.mesh, this.parent.camera, renderer);
        var distance = Math.min( maxDistance, Math.max( 0, positionRay.distanceTo( positionTarget ) ) );
        var distancePercentage = 1.0 - (distance / maxDistance);

        this.isOver = (distancePercentage > 0);
        this.updateSpeedDescend( distancePercentage );

    } else if ( this.parent.currentStatus == 'waiting' || this.parent.currentStatus == 'ascending' || this.parent.currentStatus == 'hovering' || this.parent.currentStatus == 'breaking' || this.parent.currentStatus == 'ending' ) {

        // Throw a ray to check if it intersects with something
        var cameraDirection = new THREE.Vector3();
        this.parent.camera.getWorldDirection( cameraDirection );

        this.raycaster.ray.origin.setFromMatrixPosition( this.parent.camera.matrixWorld );
        this.raycaster.ray.direction = cameraDirection.normalize();

        if (this.parent.currentStatus == 'waiting') {

            var intersects = this.raycaster.intersectObject( this.parent.parent.stage.countdown.mesh );
            if (intersects.length > 0) {

                if (intersects[0].object == this.parent.parent.stage.countdown.mesh) {

                    this.onGazeOverIntro();
                }
            } else {

                this.onGazeOutIntro();
                this.parent.parent.stage.countdown.updateSeconds( 0 );
            }

            if (this.isGazeIntro) {

                this.gazeIntroTime = (new Date() - this.gazeIntroStartTime) / 1000;
                this.percentageTime = this.gazeIntroTime / this.gazeIntroTotalTime;
                this.drawTargetCamera();

                this.parent.parent.stage.countdown.updateSeconds( this.gazeIntroTime );

                if (this.gazeIntroTime > this.gazeIntroTotalTime) {

                    this.onGazeEndIntro();
                }
            }

        } else if (this.parent.currentStatus == 'ascending' || this.parent.currentStatus == 'hovering') {

            var intersects = this.raycaster.intersectObjects( this.prizes, true );
            if (intersects.length > 0) {

                var intersectMesh = intersects[0].object;
                if (!intersectMesh.userData.points) {

                    if (intersectMesh.parent.userData.active === true) {

                        this.incrementPoints( intersectMesh.parent.userData.index, intersectMesh.parent.userData.points );
                    }
                } else {

                    if (intersectMesh.userData.active === true) {

                        this.incrementPoints( intersectMesh.userData.index, intersectMesh.userData.points );
                    }
                }
            }

        } else if (this.parent.currentStatus == 'breaking' || this.parent.currentStatus == 'ending') {


            var intersects = this.raycaster.intersectObject( this.parent.parent.stage.score.mesh );
            if (intersects.length > 0) {

                if (intersects[0].object == this.parent.parent.stage.score.mesh) {

                    this.onGazeOverReset();
                }
            } else {

                this.onGazeOutReset();
            }

            if (this.isGazeReset) {

                this.gazeResetTime = (new Date() - this.gazeResetStartTime) / 1000;
                this.percentageTime = this.gazeResetTime / this.gazeResetTotalTime;
                this.drawTargetCamera();

                if (this.gazeResetTime > this.gazeResetTotalTime) {

                    this.onGazeEndReset();
                }
            }
        }
    }
};

TargetCamera.prototype.onGazeOverIntro = function() {

    if (!this.isGazeIntro) {

        this.isOver = true;
        this.isGazeIntro = true;
        this.gazeIntroStartTime = new Date();
        if (this.tweenGaze) this.tweenGaze.kill();
    }
};

TargetCamera.prototype.onGazeOutIntro = function() {

    if (this.isGazeIntro) {

        this.isOver = false;
        this.isGazeIntro = false;
        this.gazeIntroTime = 0;

        if (this.tweenGaze) this.tweenGaze.kill();
        this.tweenGaze = TweenMax.to( this, 0.5, {
            percentageTime : 0,
            ease : Power2.easeInOut,
            onUpdate : this.drawTargetCamera.bind(this)
        });

        this.drawTargetCamera();
    }
};

TargetCamera.prototype.onGazeEndIntro = function() {

    this.isOver = false;
    this.showTime = false;
    this.showSpeed = true;
    this.parent.onGazeEndIntro();

    TweenMax.to( this.line.material, 2.0, {

        opacity : 1.0,
        ease : Linear.none
    });
};

TargetCamera.prototype.onGazeOverReset = function() {

    this.showTime = true;
    this.showSpeed = false;

    if (!this.isGazeReset) {

        this.isOver = true;
        this.isGazeReset = true;
        this.gazeResetStartTime = new Date();
        if (this.tweenGaze) this.tweenGaze.kill();

        this.parent.parent.stage.score.onOverReset();
    }
};

TargetCamera.prototype.onGazeOutReset = function() {

    if (this.isGazeReset) {

        this.isOver = false;
        this.isGazeReset = false;
        this.gazeResetTime = 0;

        if (this.tweenGaze) this.tweenGaze.kill();
        this.tweenGaze = TweenMax.to( this, 0.5, {
            percentageTime : 0,
            ease : Power2.easeInOut,
            onUpdate : this.drawTargetCamera.bind(this)
        });

        this.parent.parent.stage.score.onOutReset();
    }
};

TargetCamera.prototype.onGazeEndReset = function() {

    this.isOver = false;
    this.parent.parent.reset();
};

TargetCamera.prototype.onJump = function() {

    this.hideSpeed();

    this.showSpeed = false;
    this.drawTargetCamera();

    TweenMax.to( this.line.material, 1.0, {

        opacity : 0.0,
        ease : Linear.none
    });
};

TargetCamera.prototype.updateSpeedDescend = function(speedDescend) {

    this.parent.updateSpeedDescend(speedDescend);
    this.drawTargetCamera();
};

TargetCamera.prototype.incrementPoints = function( index, points ) {

    this.isOver = true;
    this.drawTargetCamera();
    clearTimeout( this.stoOver );
    this.stoOver = setTimeout( function () {

        this.isOver = false;
        this.drawTargetCamera();
    }.bind(this), 250 );

    this.parent.incrementPoints( points, index );
};

module.exports = TargetCamera;
},{}],33:[function(require,module,exports){
module.exports = function( self ){
	self.addEventListener('message',function (msg){
		var data = JSON.parse( msg.data );
		data.imgData = data.imgData.split(',');
		
		var vertices = [];
		var colors = [];
		var coords = [];

		var verts = [
			-0.5, 0, -0.5, 
			-0.5, 1, -0.5,
			0.5, 0, -0.5,

			0.5, 0, -0.5,
			-0.5, 1, -0.5,
			0.5, 1, -0.5,


			0.5, 1, -0.5, 
			-0.5, 1, -0.5, 
			0, 1.3, -0.5,


			0.5, 0, -0.5, 
			0.5, 1, -0.5,
			0.5, 0, 0.5,

			0.5, 0, 0.5, 
			0.5, 1, -0.5,
			0.5, 1, 0.5,

			0.5, 0, 0.5, 
			0.5, 1, 0.5,
			-0.5, 0, 0.5,

			-0.5, 0, 0.5, 
			0.5, 1, 0.5,
			-0.5, 1, 0.5,

			-0.5, 1, 0.5, 
			0.5, 1, 0.5, 
			0, 1.3, 0.5,

			-0.5, 0, 0.5, 
			-0.5, 1, 0.5,
			-0.5, 0, -0.5,

			-0.5, 0, -0.5, 
			-0.5, 1, 0.5,
			-0.5, 1, -0.5,
			
			// roof
			0, 1.3, 0.7, 
			-0.6, 0.95, -0.7, 
			-0.6, 0.95, 0.7,

			0, 1.3, 0.7, 
			0, 1.3, -0.7, 
			-0.6, 0.95, -0.7,

			0, 1.3, 0.7, 
			0.6, 0.95, -0.7,
			0, 1.3, -0.7, 

			0, 1.3, 0.7, 
			0.6, 0.95, 0.7,
			0.6, 0.95, -0.7, 

		];

		var colsroof = [[145,73,75],[156,89,78],[133,90,73]];
		var colsdark = [[140,114,138],[133,120,106],[133,117,99],[110,88,69],[133,91,87]];
		var cols = [[140,114,138],[133,120,106],[133,117,99],[110,88,69],[133,91,87]];

		var c1 = 0;
		var c2 = 1

		
		// var cols = [ c2,0,0,c2,0,0,c2,0,0,c2,0,0,c2,0,0,c2,0,0,c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, c2,0,0,c2,0,0,c2,0,0, 0,0,c2,0,0,c2,0,0,c2, 0,0,c2,0,0,c2,0,0,c2, 0,0,c2,0,0,c2,0,0,c2, 0,0,c2,0,0,c2,0,0,c2 ];

		var added = 0;
		var addVs = function(){
			
			data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 ] = 0;
			var cls = [];
			var colPic = Math.floor( Math.random() * cols.length );
			var colRoof = Math.floor( Math.random() * colsroof.length );
			for( var i = 0; i < verts.length ; i+=3 ){
				if( i < verts.length - 39 ){
					if( verts[ i + 1 ] == 0 ) cls.push( colsdark[colPic][0] / 255, colsdark[colPic][1] / 255, colsdark[colPic][2] / 255 );
					else cls.push( cols[colPic][0] / 255, cols[colPic][1] / 255, cols[colPic][2] / 255 );
				}else{
					cls.push( colsroof[colRoof][0] / 255, colsroof[colRoof][1] / 255, colsroof[colRoof][2] / 255 );
				}		
			}

			for( var j = 0 ; j < verts.length ; j+=3 ){
				vertices.push( verts[ j ] * scale + px, verts[ j + 1 ] * scale - 200, verts[ j + 2 ] * scale + py  );
				colors.push( cls[ j ], cls[ j + 1 ], cls[ j + 2 ] );
			}
			coords.push( [ px, py ] );
			added++;
		}
		while( added < data.treeCount ){
			var px = Math.random() * 998 - 499;
			var py = Math.random() * 998 - 499;
			
			var scale = Math.random() * 1 + 1;
			var scaleHeight = Math.random() * 1 + 1;

			var r = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 ];
			var g = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 1 ];
			var b = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 2 ];
			var a = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 3 ];

			if( r > 0 ){
				addVs();
			} else if( Math.random() > 0.995 && r == 0 && g == 0 && b == 0 && a == 0 ) {
				addVs();
			}
			
		}
		var data = {
			'vertices' : vertices,
			'colors' : colors,
			'coords' : coords
		}
		self.postMessage( JSON.stringify( data ) );
	});
}
},{}],34:[function(require,module,exports){
module.exports = function( self ){
	self.addEventListener('message',function (msg){
		// var data = {}
		var data = JSON.parse( msg.data );
		data.imgData = data.imgData.split(',');

		var vertices = [];
		var colors = [];
		var coords = [];

	

		var verts = [ -0.5, 0, -0.5, 0, 1, 0, 0.5, 0, -0.5, 0.5, 0, -0.5, 0, 1, 0, 0.5, 0, 0.5, 0.5, 0, 0.5,0, 1, 0, -0.5, 0, 0.5, -0.5, 0, 0.5, 0, 1, 0,-0.5, 0, -0.5 ];

		var c2 = 0.64705882352941;
		var c1 = 0.82352941176471

		var cols = [ 0,c2,0,0,c1,0,0,c2,0,0,c2,0,0,c1,0,0,c2,0,0,c2,0,0,c1,0,0,c2,0,0,c2,0,0,c1,0,0,c2,0 ];

		var added = 0;

		var addVs = function(){
			for( var j = 0 ; j < verts.length ; j+=3 ){
				vertices.push( verts[ j ] * scale + px, verts[ j + 1 ] * scaleHeight - 200, verts[ j + 2 ] * scale + py  );
				colors.push( cols[ j ], cols[ j + 1 ], cols[ j + 2 ] );
			}
			coords.push( [ px, py ] );
			added++;
		}
		while( added < data.treeCount ){
			var px = Math.random() * 998 - 499;
			var py = Math.random() * 998 - 499;
			
			var scale = Math.random() * 2 + 1;
			var scaleHeight = Math.random() * 4 + 4;

			var r = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 ];
			var g = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 1 ];
			var b = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 2 ];
			var a = data.imgData[ ( ( ( Math.floor( py ) + 500 - 1) * 1000 +  Math.floor( px ) + 500 ) - 1 ) * 4 + 3 ];

			if( g > 0 ){
				addVs();
			} else if( Math.random() > 0.95 && r == 0 && g == 0 && b == 0 && a == 0 ) {
				addVs();
			}
			
		}
		var data = {
			'vertices' : vertices,
			'colors' : colors,
			'coords' : coords
		}
		self.postMessage( JSON.stringify( data ) );
	});
}
},{}],35:[function(require,module,exports){
(function (global){
/*!
 * VERSION: 1.19.0
 * DATE: 2016-07-14
 * UPDATES AND DOCS AT: http://greensock.com
 * 
 * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
 *
 * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {

	"use strict";

	_gsScope._gsDefine("TweenMax", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

		var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++]));
				return b;
			},
			_applyCycle = function(vars, targets, i) {
				var alt = vars.cycle,
					p, val;
				for (p in alt) {
					val = alt[p];
					vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
				}
				delete vars.cycle;
			},
			TweenMax = function(target, duration, vars) {
				TweenLite.call(this, target, duration, vars);
				this._cycle = 0;
				this._yoyo = (this.vars.yoyo === true);
				this._repeat = this.vars.repeat || 0;
				this._repeatDelay = this.vars.repeatDelay || 0;
				this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
				this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_isSelector = TweenLiteInternals.isSelector,
			_isArray = TweenLiteInternals.isArray,
			p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
			_blankArray = [];

		TweenMax.version = "1.19.0";
		p.constructor = TweenMax;
		p.kill()._gc = false;
		TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
		TweenMax.getTweensOf = TweenLite.getTweensOf;
		TweenMax.lagSmoothing = TweenLite.lagSmoothing;
		TweenMax.ticker = TweenLite.ticker;
		TweenMax.render = TweenLite.render;

		p.invalidate = function() {
			this._yoyo = (this.vars.yoyo === true);
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._uncache(true);
			return TweenLite.prototype.invalidate.call(this);
		};
		
		p.updateTo = function(vars, resetDuration) {
			var curRatio = this.ratio,
				immediate = this.vars.immediateRender || vars.immediateRender,
				p;
			if (resetDuration && this._startTime < this._timeline._time) {
				this._startTime = this._timeline._time;
				this._uncache(false);
				if (this._gc) {
					this._enabled(true, false);
				} else {
					this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			for (p in vars) {
				this.vars[p] = vars[p];
			}
			if (this._initted || immediate) {
				if (resetDuration) {
					this._initted = false;
					if (immediate) {
						this.render(0, true, true);
					}
				} else {
					if (this._gc) {
						this._enabled(true, false);
					}
					if (this._notifyPluginsOfEnabled && this._firstPT) {
						TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
					}
					if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
						var prevTime = this._totalTime;
						this.render(0, true, false);
						this._initted = false;
						this.render(prevTime, true, false);
					} else {
						this._initted = false;
						this._init();
						if (this._time > 0 || immediate) {
							var inv = 1 / (1 - curRatio),
								pt = this._firstPT, endValue;
							while (pt) {
								endValue = pt.s + pt.c;
								pt.c *= inv;
								pt.s = endValue - pt.c;
								pt = pt._next;
							}
						}
					}
				}
			}
			return this;
		};
				
		p.render = function(time, suppressEvents, force) {
			if (!this._initted) if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
				this.invalidate();
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				prevTime = this._time,
				prevTotalTime = this._totalTime, 
				prevCycle = this._cycle,
				duration = this._duration,
				prevRawPrevTime = this._rawPrevTime,
				isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = totalDur;
				this._cycle = this._repeat;
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = 0;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				} else {
					this._time = duration;
					this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				}
				if (!this._reversed) {
					isComplete = true;
					callback = "onComplete";
					force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}
				
			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = this._cycle = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;
				if (this._repeat !== 0) {
					cycleDuration = duration + this._repeatDelay;
					this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
					if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
						this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
					}
					this._time = this._totalTime - (this._cycle * cycleDuration);
					if (this._yoyo) if ((this._cycle & 1) !== 0) {
						this._time = duration - this._time;
					}
					if (this._time > duration) {
						this._time = duration;
					} else if (this._time < 0) {
						this._time = 0;
					}
				}

				if (this._easeType) {
					r = this._time / duration;
					type = this._easeType;
					pow = this._easePower;
					if (type === 1 || (type === 3 && r >= 0.5)) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (this._time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - (r / 2);
					}

				} else {
					this.ratio = this._ease.getRatio(this._time / duration);
				}
				
			}
				
			if (prevTime === this._time && !force && prevCycle === this._cycle) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
					this._time = prevTime;
					this._totalTime = prevTotalTime;
					this._rawPrevTime = prevRawPrevTime;
					this._cycle = prevCycle;
					TweenLiteInternals.lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd) {
					this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
				}
			}
			if (this._lazy !== false) {
				this._lazy = false;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTotalTime === 0) {
				if (this._initted === 2 && time > 0) {
					//this.invalidate();
					this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
				}
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}
			
			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}
			
			if (this._onUpdate) {
				if (time < 0) if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._totalTime !== prevTotalTime || callback) {
					this._callback("onUpdate");
				}
			}
			if (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {
				this._callback("onRepeat");
			}
			if (callback) if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};
		
//---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------
		
		TweenMax.to = function(target, duration, vars) {
			return new TweenMax(target, duration, vars);
		};
		
		TweenMax.from = function(target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return new TweenMax(target, duration, vars);
		};
		
		TweenMax.fromTo = function(target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return new TweenMax(target, duration, toVars);
		};
		
		TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			stagger = stagger || 0;
			var delay = 0,
				a = [],
				finalComplete = function() {
					if (vars.onComplete) {
						vars.onComplete.apply(vars.onCompleteScope || this, arguments);
					}
					onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
				},
				cycle = vars.cycle,
				fromCycle = (vars.startAt && vars.startAt.cycle),
				l, copy, i, p;
			if (!_isArray(targets)) {
				if (typeof(targets) === "string") {
					targets = TweenLite.selector(targets) || targets;
				}
				if (_isSelector(targets)) {
					targets = _slice(targets);
				}
			}
			targets = targets || [];
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			l = targets.length - 1;
			for (i = 0; i <= l; i++) {
				copy = {};
				for (p in vars) {
					copy[p] = vars[p];
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				if (fromCycle) {
					fromCycle = copy.startAt = {};
					for (p in vars.startAt) {
						fromCycle[p] = vars.startAt[p];
					}
					_applyCycle(copy.startAt, targets, i);
				}
				copy.delay = delay + (copy.delay || 0);
				if (i === l && onCompleteAll) {
					copy.onComplete = finalComplete;
				}
				a[i] = new TweenMax(targets[i], duration, copy);
				delay += stagger;
			}
			return a;
		};
		
		TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};
		
		TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};
				
		TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
			return new TweenMax(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, useFrames:useFrames, overwrite:0});
		};
		
		TweenMax.set = function(target, vars) {
			return new TweenMax(target, 0, vars);
		};
		
		TweenMax.isTweening = function(target) {
			return (TweenLite.getTweensOf(target, true).length > 0);
		};
		
		var _getChildrenOf = function(timeline, includeTimelines) {
				var a = [],
					cnt = 0,
					tween = timeline._first;
				while (tween) {
					if (tween instanceof TweenLite) {
						a[cnt++] = tween;
					} else {
						if (includeTimelines) {
							a[cnt++] = tween;
						}
						a = a.concat(_getChildrenOf(tween, includeTimelines));
						cnt = a.length;
					}
					tween = tween._next;
				}
				return a;
			}, 
			getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
				return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat( _getChildrenOf(Animation._rootFramesTimeline, includeTimelines) );
			};
		
		TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
			if (tweens == null) {
				tweens = true;
			}
			if (delayedCalls == null) {
				delayedCalls = true;
			}
			var a = getAllTweens((timelines != false)),
				l = a.length,
				allTrue = (tweens && delayedCalls && timelines),
				isDC, tween, i;
			for (i = 0; i < l; i++) {
				tween = a[i];
				if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
					if (complete) {
						tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
					} else {
						tween._enabled(false, false);
					}
				}
			}
		};
		
		TweenMax.killChildTweensOf = function(parent, complete) {
			if (parent == null) {
				return;
			}
			var tl = TweenLiteInternals.tweenLookup,
				a, curParent, p, i, l;
			if (typeof(parent) === "string") {
				parent = TweenLite.selector(parent) || parent;
			}
			if (_isSelector(parent)) {
				parent = _slice(parent);
			}
			if (_isArray(parent)) {
				i = parent.length;
				while (--i > -1) {
					TweenMax.killChildTweensOf(parent[i], complete);
				}
				return;
			}
			a = [];
			for (p in tl) {
				curParent = tl[p].target.parentNode;
				while (curParent) {
					if (curParent === parent) {
						a = a.concat(tl[p].tweens);
					}
					curParent = curParent.parentNode;
				}
			}
			l = a.length;
			for (i = 0; i < l; i++) {
				if (complete) {
					a[i].totalTime(a[i].totalDuration());
				}
				a[i]._enabled(false, false);
			}
		};

		var _changePause = function(pause, tweens, delayedCalls, timelines) {
			tweens = (tweens !== false);
			delayedCalls = (delayedCalls !== false);
			timelines = (timelines !== false);
			var a = getAllTweens(timelines),
				allTrue = (tweens && delayedCalls && timelines),
				i = a.length,
				isDC, tween;
			while (--i > -1) {
				tween = a[i];
				if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
					tween.paused(pause);
				}
			}
		};
		
		TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
			_changePause(true, tweens, delayedCalls, timelines);
		};
		
		TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
			_changePause(false, tweens, delayedCalls, timelines);
		};

		TweenMax.globalTimeScale = function(value) {
			var tl = Animation._rootTimeline,
				t = TweenLite.ticker.time;
			if (!arguments.length) {
				return tl._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
			tl = Animation._rootFramesTimeline;
			t = TweenLite.ticker.frame;
			tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
			tl._timeScale = Animation._rootTimeline._timeScale = value;
			return value;
		};
		
	
//---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------
		
		p.progress = function(value, suppressEvents) {
			return (!arguments.length) ? this._time / this.duration() : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
		};
		
		p.totalProgress = function(value, suppressEvents) {
			return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);
		};
		
		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.duration = function(value) {
			if (!arguments.length) {
				return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
			}
			return Animation.prototype.duration.call(this, value);
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					//instead of Infinity, we use 999999999999 so that we can accommodate reverses
					this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return (this._repeat === -1) ? this : this.duration( (value - (this._repeat * this._repeatDelay)) / (this._repeat + 1) );
		};
		
		p.repeat = function(value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};
		
		p.repeatDelay = function(value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};
		
		p.yoyo = function(value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};
		
		
		return TweenMax;
		
	}, true);








/*
 * ----------------------------------------------------------------
 * TimelineLite
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("TimelineLite", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

		var TimelineLite = function(vars) {
				SimpleTimeline.call(this, vars);
				this._labels = {};
				this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
				this.smoothChildTiming = (this.vars.smoothChildTiming === true);
				this._sortChildren = true;
				this._onUpdate = this.vars.onUpdate;
				var v = this.vars,
					val, p;
				for (p in v) {
					val = v[p];
					if (_isArray(val)) if (val.join("").indexOf("{self}") !== -1) {
						v[p] = this._swapSelfInParams(val);
					}
				}
				if (_isArray(v.tweens)) {
					this.add(v.tweens, 0, v.align, v.stagger);
				}
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_internals = TimelineLite._internals = {},
			_isSelector = TweenLiteInternals.isSelector,
			_isArray = TweenLiteInternals.isArray,
			_lazyTweens = TweenLiteInternals.lazyTweens,
			_lazyRender = TweenLiteInternals.lazyRender,
			_globals = _gsScope._gsDefine.globals,
			_copy = function(vars) {
				var copy = {}, p;
				for (p in vars) {
					copy[p] = vars[p];
				}
				return copy;
			},
			_applyCycle = function(vars, targets, i) {
				var alt = vars.cycle,
					p, val;
				for (p in alt) {
					val = alt[p];
					vars[p] = (typeof(val) === "function") ? val.call(targets[i], i) : val[i % val.length];
				}
				delete vars.cycle;
			},
			_pauseCallback = _internals.pauseCallback = function() {},
			_slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++]));
				return b;
			},
			p = TimelineLite.prototype = new SimpleTimeline();

		TimelineLite.version = "1.19.0";
		p.constructor = TimelineLite;
		p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

		/* might use later...
		//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
		function localToGlobal(time, animation) {
			while (animation) {
				time = (time / animation._timeScale) + animation._startTime;
				animation = animation.timeline;
			}
			return time;
		}

		//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
		function globalToLocal(time, animation) {
			var scale = 1;
			time -= localToGlobal(0, animation);
			while (animation) {
				scale *= animation._timeScale;
				animation = animation.timeline;
			}
			return time * scale;
		}
		*/

		p.to = function(target, duration, vars, position) {
			var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
			return duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);
		};

		p.from = function(target, duration, vars, position) {
			return this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
		};

		p.fromTo = function(target, duration, fromVars, toVars, position) {
			var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
			return duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
		};

		p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			var tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),
				cycle = vars.cycle,
				copy, i;
			if (typeof(targets) === "string") {
				targets = TweenLite.selector(targets) || targets;
			}
			targets = targets || [];
			if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
				targets = _slice(targets);
			}
			stagger = stagger || 0;
			if (stagger < 0) {
				targets = _slice(targets);
				targets.reverse();
				stagger *= -1;
			}
			for (i = 0; i < targets.length; i++) {
				copy = _copy(vars);
				if (copy.startAt) {
					copy.startAt = _copy(copy.startAt);
					if (copy.startAt.cycle) {
						_applyCycle(copy.startAt, targets, i);
					}
				}
				if (cycle) {
					_applyCycle(copy, targets, i);
					if (copy.duration != null) {
						duration = copy.duration;
						delete copy.duration;
					}
				}
				tl.to(targets[i], duration, copy, i * stagger);
			}
			return this.add(tl, position);
		};

		p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			vars.immediateRender = (vars.immediateRender != false);
			vars.runBackwards = true;
			return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
		};

		p.call = function(callback, params, scope, position) {
			return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.set = function(target, vars, position) {
			position = this._parseTimeOrLabel(position, 0, true);
			if (vars.immediateRender == null) {
				vars.immediateRender = (position === this._time && !this._paused);
			}
			return this.add( new TweenLite(target, 0, vars), position);
		};

		TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
			vars = vars || {};
			if (vars.smoothChildTiming == null) {
				vars.smoothChildTiming = true;
			}
			var tl = new TimelineLite(vars),
				root = tl._timeline,
				tween, next;
			if (ignoreDelayedCalls == null) {
				ignoreDelayedCalls = true;
			}
			root._remove(tl, true);
			tl._startTime = 0;
			tl._rawPrevTime = tl._time = tl._totalTime = root._time;
			tween = root._first;
			while (tween) {
				next = tween._next;
				if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
					tl.add(tween, tween._startTime - tween._delay);
				}
				tween = next;
			}
			root.add(tl, 0);
			return tl;
		};

		p.add = function(value, position, align, stagger) {
			var curTime, l, i, child, tl, beforeRawTime;
			if (typeof(position) !== "number") {
				position = this._parseTimeOrLabel(position, 0, true, value);
			}
			if (!(value instanceof Animation)) {
				if ((value instanceof Array) || (value && value.push && _isArray(value))) {
					align = align || "normal";
					stagger = stagger || 0;
					curTime = position;
					l = value.length;
					for (i = 0; i < l; i++) {
						if (_isArray(child = value[i])) {
							child = new TimelineLite({tweens:child});
						}
						this.add(child, curTime);
						if (typeof(child) !== "string" && typeof(child) !== "function") {
							if (align === "sequence") {
								curTime = child._startTime + (child.totalDuration() / child._timeScale);
							} else if (align === "start") {
								child._startTime -= child.delay();
							}
						}
						curTime += stagger;
					}
					return this._uncache(true);
				} else if (typeof(value) === "string") {
					return this.addLabel(value, position);
				} else if (typeof(value) === "function") {
					value = TweenLite.delayedCall(0, value);
				} else {
					throw("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
				}
			}

			SimpleTimeline.prototype.add.call(this, value, position);

			//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
			if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {
				//in case any of the ancestors had completed but should now be enabled...
				tl = this;
				beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
				while (tl._timeline) {
					if (beforeRawTime && tl._timeline.smoothChildTiming) {
						tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
					} else if (tl._gc) {
						tl._enabled(true, false);
					}
					tl = tl._timeline;
				}
			}

			return this;
		};

		p.remove = function(value) {
			if (value instanceof Animation) {
				this._remove(value, false);
				var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
				value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
				return this;
			} else if (value instanceof Array || (value && value.push && _isArray(value))) {
				var i = value.length;
				while (--i > -1) {
					this.remove(value[i]);
				}
				return this;
			} else if (typeof(value) === "string") {
				return this.removeLabel(value);
			}
			return this.kill(null, value);
		};

		p._remove = function(tween, skipDisable) {
			SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
			var last = this._last;
			if (!last) {
				this._time = this._totalTime = this._duration = this._totalDuration = 0;
			} else if (this._time > last._startTime + last._totalDuration / last._timeScale) {
				this._time = this.duration();
				this._totalTime = this._totalDuration;
			}
			return this;
		};

		p.append = function(value, offsetOrLabel) {
			return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
		};

		p.insert = p.insertMultiple = function(value, position, align, stagger) {
			return this.add(value, position || 0, align, stagger);
		};

		p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
			return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
		};

		p.addLabel = function(label, position) {
			this._labels[label] = this._parseTimeOrLabel(position);
			return this;
		};

		p.addPause = function(position, callback, params, scope) {
			var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
			t.vars.onComplete = t.vars.onReverseComplete = callback;
			t.data = "isPause";
			this._hasPause = true;
			return this.add(t, position);
		};

		p.removeLabel = function(label) {
			delete this._labels[label];
			return this;
		};

		p.getLabelTime = function(label) {
			return (this._labels[label] != null) ? this._labels[label] : -1;
		};

		p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
			var i;
			//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
			if (ignore instanceof Animation && ignore.timeline === this) {
				this.remove(ignore);
			} else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
				i = ignore.length;
				while (--i > -1) {
					if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
						this.remove(ignore[i]);
					}
				}
			}
			if (typeof(offsetOrLabel) === "string") {
				return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - this.duration() : 0, appendIfAbsent);
			}
			offsetOrLabel = offsetOrLabel || 0;
			if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
				i = timeOrLabel.indexOf("=");
				if (i === -1) {
					if (this._labels[timeOrLabel] == null) {
						return appendIfAbsent ? (this._labels[timeOrLabel] = this.duration() + offsetOrLabel) : offsetOrLabel;
					}
					return this._labels[timeOrLabel] + offsetOrLabel;
				}
				offsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + "1", 10) * Number(timeOrLabel.substr(i+1));
				timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : this.duration();
			} else if (timeOrLabel == null) {
				timeOrLabel = this.duration();
			}
			return Number(timeOrLabel) + offsetOrLabel;
		};

		p.seek = function(position, suppressEvents) {
			return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
		};

		p.stop = function() {
			return this.paused(true);
		};

		p.gotoAndPlay = function(position, suppressEvents) {
			return this.play(position, suppressEvents);
		};

		p.gotoAndStop = function(position, suppressEvents) {
			return this.pause(position, suppressEvents);
		};

		p.render = function(time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				prevTime = this._time,
				prevStart = this._startTime,
				prevTimeScale = this._timeScale,
				prevPaused = this._paused,
				tween, isComplete, next, callback, internalForce, pauseTween, curTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = this._time = totalDur;
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {
						internalForce = true;
						if (this._rawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}

			} else {

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					if (time >= prevTime) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
					}
				}

				this._totalTime = this._time = this._rawPrevTime = time;
			}
			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {
				this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}

			if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p._hasPausedChild = function() {
			var tween = this._first;
			while (tween) {
				if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
					return true;
				}
				tween = tween._next;
			}
			return false;
		};

		p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || -9999999999;
			var a = [],
				tween = this._first,
				cnt = 0;
			while (tween) {
				if (tween._startTime < ignoreBeforeTime) {
					//do nothing
				} else if (tween instanceof TweenLite) {
					if (tweens !== false) {
						a[cnt++] = tween;
					}
				} else {
					if (timelines !== false) {
						a[cnt++] = tween;
					}
					if (nested !== false) {
						a = a.concat(tween.getChildren(true, tweens, timelines));
						cnt = a.length;
					}
				}
				tween = tween._next;
			}
			return a;
		};

		p.getTweensOf = function(target, nested) {
			var disabled = this._gc,
				a = [],
				cnt = 0,
				tweens, i;
			if (disabled) {
				this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
			}
			tweens = TweenLite.getTweensOf(target);
			i = tweens.length;
			while (--i > -1) {
				if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
					a[cnt++] = tweens[i];
				}
			}
			if (disabled) {
				this._enabled(false, true);
			}
			return a;
		};

		p.recent = function() {
			return this._recent;
		};

		p._contains = function(tween) {
			var tl = tween.timeline;
			while (tl) {
				if (tl === this) {
					return true;
				}
				tl = tl.timeline;
			}
			return false;
		};

		p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
			ignoreBeforeTime = ignoreBeforeTime || 0;
			var tween = this._first,
				labels = this._labels,
				p;
			while (tween) {
				if (tween._startTime >= ignoreBeforeTime) {
					tween._startTime += amount;
				}
				tween = tween._next;
			}
			if (adjustLabels) {
				for (p in labels) {
					if (labels[p] >= ignoreBeforeTime) {
						labels[p] += amount;
					}
				}
			}
			return this._uncache(true);
		};

		p._kill = function(vars, target) {
			if (!vars && !target) {
				return this._enabled(false, false);
			}
			var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
				i = tweens.length,
				changed = false;
			while (--i > -1) {
				if (tweens[i]._kill(vars, target)) {
					changed = true;
				}
			}
			return changed;
		};

		p.clear = function(labels) {
			var tweens = this.getChildren(false, true, true),
				i = tweens.length;
			this._time = this._totalTime = 0;
			while (--i > -1) {
				tweens[i]._enabled(false, false);
			}
			if (labels !== false) {
				this._labels = {};
			}
			return this._uncache(true);
		};

		p.invalidate = function() {
			var tween = this._first;
			while (tween) {
				tween.invalidate();
				tween = tween._next;
			}
			return Animation.prototype.invalidate.call(this);;
		};

		p._enabled = function(enabled, ignoreTimeline) {
			if (enabled === this._gc) {
				var tween = this._first;
				while (tween) {
					tween._enabled(enabled, true);
					tween = tween._next;
				}
			}
			return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
		};

		p.totalTime = function(time, suppressEvents, uncapped) {
			this._forcingPlayhead = true;
			var val = Animation.prototype.totalTime.apply(this, arguments);
			this._forcingPlayhead = false;
			return val;
		};

		p.duration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					this.totalDuration(); //just triggers recalculation
				}
				return this._duration;
			}
			if (this.duration() !== 0 && value !== 0) {
				this.timeScale(this._duration / value);
			}
			return this;
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					var max = 0,
						tween = this._last,
						prevStart = 999999999999,
						prev, end;
					while (tween) {
						prev = tween._prev; //record it here in case the tween changes position in the sequence...
						if (tween._dirty) {
							tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
						}
						if (tween._startTime > prevStart && this._sortChildren && !tween._paused) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
							this.add(tween, tween._startTime - tween._delay);
						} else {
							prevStart = tween._startTime;
						}
						if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
							max -= tween._startTime;
							if (this._timeline.smoothChildTiming) {
								this._startTime += tween._startTime / this._timeScale;
							}
							this.shiftChildren(-tween._startTime, false, -9999999999);
							prevStart = 0;
						}
						end = tween._startTime + (tween._totalDuration / tween._timeScale);
						if (end > max) {
							max = end;
						}
						tween = prev;
					}
					this._duration = this._totalDuration = max;
					this._dirty = false;
				}
				return this._totalDuration;
			}
			return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
		};

		p.paused = function(value) {
			if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
				var tween = this._first,
					time = this._time;
				while (tween) {
					if (tween._startTime === time && tween.data === "isPause") {
						tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
					}
					tween = tween._next;
				}
			}
			return Animation.prototype.paused.apply(this, arguments);
		};

		p.usesFrames = function() {
			var tl = this._timeline;
			while (tl._timeline) {
				tl = tl._timeline;
			}
			return (tl === Animation._rootFramesTimeline);
		};

		p.rawTime = function() {
			return this._paused ? this._totalTime : (this._timeline.rawTime() - this._startTime) * this._timeScale;
		};

		return TimelineLite;

	}, true);








	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * TimelineMax
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("TimelineMax", ["TimelineLite","TweenLite","easing.Ease"], function(TimelineLite, TweenLite, Ease) {

		var TimelineMax = function(vars) {
				TimelineLite.call(this, vars);
				this._repeat = this.vars.repeat || 0;
				this._repeatDelay = this.vars.repeatDelay || 0;
				this._cycle = 0;
				this._yoyo = (this.vars.yoyo === true);
				this._dirty = true;
			},
			_tinyNum = 0.0000000001,
			TweenLiteInternals = TweenLite._internals,
			_lazyTweens = TweenLiteInternals.lazyTweens,
			_lazyRender = TweenLiteInternals.lazyRender,
			_globals = _gsScope._gsDefine.globals,
			_easeNone = new Ease(null, null, 1, 0),
			p = TimelineMax.prototype = new TimelineLite();

		p.constructor = TimelineMax;
		p.kill()._gc = false;
		TimelineMax.version = "1.19.0";

		p.invalidate = function() {
			this._yoyo = (this.vars.yoyo === true);
			this._repeat = this.vars.repeat || 0;
			this._repeatDelay = this.vars.repeatDelay || 0;
			this._uncache(true);
			return TimelineLite.prototype.invalidate.call(this);
		};

		p.addCallback = function(callback, position, params, scope) {
			return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
		};

		p.removeCallback = function(callback, position) {
			if (callback) {
				if (position == null) {
					this._kill(null, callback);
				} else {
					var a = this.getTweensOf(callback, false),
						i = a.length,
						time = this._parseTimeOrLabel(position);
					while (--i > -1) {
						if (a[i]._startTime === time) {
							a[i]._enabled(false, false);
						}
					}
				}
			}
			return this;
		};

		p.removePause = function(position) {
			return this.removeCallback(TimelineLite._internals.pauseCallback, position);
		};

		p.tweenTo = function(position, vars) {
			vars = vars || {};
			var copy = {ease:_easeNone, useFrames:this.usesFrames(), immediateRender:false},
				Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
				duration, p, t;
			for (p in vars) {
				copy[p] = vars[p];
			}
			copy.time = this._parseTimeOrLabel(position);
			duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
			t = new Engine(this, duration, copy);
			copy.onStart = function() {
				t.target.paused(true);
				if (t.vars.time !== t.target.time() && duration === t.duration()) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
					t.duration( Math.abs( t.vars.time - t.target.time()) / t.target._timeScale );
				}
				if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
					t._callback("onStart");
				}
			};
			return t;
		};

		p.tweenFromTo = function(fromPosition, toPosition, vars) {
			vars = vars || {};
			fromPosition = this._parseTimeOrLabel(fromPosition);
			vars.startAt = {onComplete:this.seek, onCompleteParams:[fromPosition], callbackScope:this};
			vars.immediateRender = (vars.immediateRender !== false);
			var t = this.tweenTo(toPosition, vars);
			return t.duration((Math.abs( t.vars.time - fromPosition) / this._timeScale) || 0.001);
		};

		p.render = function(time, suppressEvents, force) {
			if (this._gc) {
				this._enabled(true, false);
			}
			var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
				dur = this._duration,
				prevTime = this._time,
				prevTotalTime = this._totalTime,
				prevStart = this._startTime,
				prevTimeScale = this._timeScale,
				prevRawPrevTime = this._rawPrevTime,
				prevPaused = this._paused,
				prevCycle = this._cycle,
				tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
			if (time >= totalDur - 0.0000001) { //to work around occasional floating point math artifacts.
				if (!this._locked) {
					this._totalTime = totalDur;
					this._cycle = this._repeat;
				}
				if (!this._reversed) if (!this._hasPausedChild()) {
					isComplete = true;
					callback = "onComplete";
					internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
					if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {
						internalForce = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
				}
				this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				if (this._yoyo && (this._cycle & 1) !== 0) {
					this._time = time = 0;
				} else {
					this._time = dur;
					time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
				}

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				if (!this._locked) {
					this._totalTime = this._cycle = 0;
				}
				this._time = 0;
				if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (this._timeline.autoRemoveChildren && this._reversed) {
						internalForce = isComplete = true;
						callback = "onReverseComplete";
					} else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
						internalForce = true;
					}
					this._rawPrevTime = time;
				} else {
					this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
						tween = this._first;
						while (tween && tween._startTime === 0) {
							if (!tween._duration) {
								isComplete = false;
							}
							tween = tween._next;
						}
					}
					time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
					if (!this._initted) {
						internalForce = true;
					}
				}

			} else {
				if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
					internalForce = true;
				}
				this._time = this._rawPrevTime = time;
				if (!this._locked) {
					this._totalTime = time;
					if (this._repeat !== 0) {
						cycleDuration = dur + this._repeatDelay;
						this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
						if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
							this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
						}
						this._time = this._totalTime - (this._cycle * cycleDuration);
						if (this._yoyo) if ((this._cycle & 1) !== 0) {
							this._time = dur - this._time;
						}
						if (this._time > dur) {
							this._time = dur;
							time = dur + 0.0001; //to avoid occasional floating point rounding error
						} else if (this._time < 0) {
							this._time = time = 0;
						} else {
							time = this._time;
						}
					}
				}

				if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
					time = this._time;
					if (time >= prevTime) {
						tween = this._first;
						while (tween && tween._startTime <= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
								pauseTween = tween;
							}
							tween = tween._next;
						}
					} else {
						tween = this._last;
						while (tween && tween._startTime >= time && !pauseTween) {
							if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
								pauseTween = tween;
							}
							tween = tween._prev;
						}
					}
					if (pauseTween) {
						this._time = time = pauseTween._startTime;
						this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
					}
				}

			}

			if (this._cycle !== prevCycle) if (!this._locked) {
				/*
				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
				would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
				ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
				*/
				var backwards = (this._yoyo && (prevCycle & 1) !== 0),
					wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
					recTotalTime = this._totalTime,
					recCycle = this._cycle,
					recRawPrevTime = this._rawPrevTime,
					recTime = this._time;

				this._totalTime = prevCycle * dur;
				if (this._cycle < prevCycle) {
					backwards = !backwards;
				} else {
					this._totalTime += dur;
				}
				this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

				this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
				this._cycle = prevCycle;
				this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
				prevTime = (backwards) ? 0 : dur;
				this.render(prevTime, suppressEvents, (dur === 0));
				if (!suppressEvents) if (!this._gc) {
					if (this.vars.onRepeat) {
						this._callback("onRepeat");
					}
				}
				if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
					return;
				}
				if (wrap) {
					prevTime = (backwards) ? dur + 0.0001 : -0.0001;
					this.render(prevTime, true, false);
				}
				this._locked = false;
				if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
					return;
				}
				this._time = recTime;
				this._totalTime = recTotalTime;
				this._cycle = recCycle;
				this._rawPrevTime = recRawPrevTime;
			}

			if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
				if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
					this._callback("onUpdate");
				}
				return;
			} else if (!this._initted) {
				this._initted = true;
			}

			if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
				this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
			}

			if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {
				this._callback("onStart");
			}

			curTime = this._time;
			if (curTime >= prevTime) {
				tween = this._first;
				while (tween) {
					next = tween._next; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			} else {
				tween = this._last;
				while (tween) {
					next = tween._prev; //record it here because the value could change after rendering...
					if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
						break;
					} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
						if (pauseTween === tween) {
							pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
							while (pauseTween && pauseTween.endTime() > this._time) {
								pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
								pauseTween = pauseTween._prev;
							}
							pauseTween = null;
							this.pause();
						}
						if (!tween._reversed) {
							tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
						} else {
							tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
						}
					}
					tween = next;
				}
			}

			if (this._onUpdate) if (!suppressEvents) {
				if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
					_lazyRender();
				}
				this._callback("onUpdate");
			}
			if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
				if (isComplete) {
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
						_lazyRender();
					}
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
			}
		};

		p.getActive = function(nested, tweens, timelines) {
			if (nested == null) {
				nested = true;
			}
			if (tweens == null) {
				tweens = true;
			}
			if (timelines == null) {
				timelines = false;
			}
			var a = [],
				all = this.getChildren(nested, tweens, timelines),
				cnt = 0,
				l = all.length,
				i, tween;
			for (i = 0; i < l; i++) {
				tween = all[i];
				if (tween.isActive()) {
					a[cnt++] = tween;
				}
			}
			return a;
		};


		p.getLabelAfter = function(time) {
			if (!time) if (time !== 0) { //faster than isNan()
				time = this._time;
			}
			var labels = this.getLabelsArray(),
				l = labels.length,
				i;
			for (i = 0; i < l; i++) {
				if (labels[i].time > time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelBefore = function(time) {
			if (time == null) {
				time = this._time;
			}
			var labels = this.getLabelsArray(),
				i = labels.length;
			while (--i > -1) {
				if (labels[i].time < time) {
					return labels[i].name;
				}
			}
			return null;
		};

		p.getLabelsArray = function() {
			var a = [],
				cnt = 0,
				p;
			for (p in this._labels) {
				a[cnt++] = {time:this._labels[p], name:p};
			}
			a.sort(function(a,b) {
				return a.time - b.time;
			});
			return a;
		};


//---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

		p.progress = function(value, suppressEvents) {
			return (!arguments.length) ? this._time / this.duration() : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
		};

		p.totalProgress = function(value, suppressEvents) {
			return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);
		};

		p.totalDuration = function(value) {
			if (!arguments.length) {
				if (this._dirty) {
					TimelineLite.prototype.totalDuration.call(this); //just forces refresh
					//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
					this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
				}
				return this._totalDuration;
			}
			return (this._repeat === -1 || !value) ? this : this.timeScale( this.totalDuration() / value );
		};

		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			if (value > this._duration) {
				value = this._duration;
			}
			if (this._yoyo && (this._cycle & 1) !== 0) {
				value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
			} else if (this._repeat !== 0) {
				value += this._cycle * (this._duration + this._repeatDelay);
			}
			return this.totalTime(value, suppressEvents);
		};

		p.repeat = function(value) {
			if (!arguments.length) {
				return this._repeat;
			}
			this._repeat = value;
			return this._uncache(true);
		};

		p.repeatDelay = function(value) {
			if (!arguments.length) {
				return this._repeatDelay;
			}
			this._repeatDelay = value;
			return this._uncache(true);
		};

		p.yoyo = function(value) {
			if (!arguments.length) {
				return this._yoyo;
			}
			this._yoyo = value;
			return this;
		};

		p.currentLabel = function(value) {
			if (!arguments.length) {
				return this.getLabelBefore(this._time + 0.00000001);
			}
			return this.seek(value, true);
		};

		return TimelineMax;

	}, true);
	




	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * BezierPlugin
 * ----------------------------------------------------------------
 */
	(function() {

		var _RAD2DEG = 180 / Math.PI,
			_r1 = [],
			_r2 = [],
			_r3 = [],
			_corProps = {},
			_globals = _gsScope._gsDefine.globals,
			Segment = function(a, b, c, d) {
				if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
					c = d - (d - b) / 1000000;
				}
				if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
					b = a + (c - a) / 1000000;
				}
				this.a = a;
				this.b = b;
				this.c = c;
				this.d = d;
				this.da = d - a;
				this.ca = c - a;
				this.ba = b - a;
			},
			_correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
			cubicToQuadratic = function(a, b, c, d) {
				var q1 = {a:a},
					q2 = {},
					q3 = {},
					q4 = {c:d},
					mab = (a + b) / 2,
					mbc = (b + c) / 2,
					mcd = (c + d) / 2,
					mabc = (mab + mbc) / 2,
					mbcd = (mbc + mcd) / 2,
					m8 = (mbcd - mabc) / 8;
				q1.b = mab + (a - mab) / 4;
				q2.b = mabc + m8;
				q1.c = q2.a = (q1.b + q2.b) / 2;
				q2.c = q3.a = (mabc + mbcd) / 2;
				q3.b = mbcd - m8;
				q4.b = mcd + (d - mcd) / 4;
				q3.c = q4.a = (q3.b + q4.b) / 2;
				return [q1, q2, q3, q4];
			},
			_calculateControlPoints = function(a, curviness, quad, basic, correlate) {
				var l = a.length - 1,
					ii = 0,
					cp1 = a[0].a,
					i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
				for (i = 0; i < l; i++) {
					seg = a[ii];
					p1 = seg.a;
					p2 = seg.d;
					p3 = a[ii+1].d;

					if (correlate) {
						r1 = _r1[i];
						r2 = _r2[i];
						tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
						m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
						m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
						mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
					} else {
						m1 = p2 - (p2 - p1) * curviness * 0.5;
						m2 = p2 + (p3 - p2) * curviness * 0.5;
						mm = p2 - (m1 + m2) / 2;
					}
					m1 += mm;
					m2 += mm;

					seg.c = cp2 = m1;
					if (i !== 0) {
						seg.b = cp1;
					} else {
						seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
					}

					seg.da = p2 - p1;
					seg.ca = cp2 - p1;
					seg.ba = cp1 - p1;

					if (quad) {
						qb = cubicToQuadratic(p1, cp1, cp2, p2);
						a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
						ii += 4;
					} else {
						ii++;
					}

					cp1 = m2;
				}
				seg = a[ii];
				seg.b = cp1;
				seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
				seg.da = seg.d - seg.a;
				seg.ca = seg.c - seg.a;
				seg.ba = cp1 - seg.a;
				if (quad) {
					qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
					a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
				}
			},
			_parseAnchors = function(values, p, correlate, prepend) {
				var a = [],
					l, i, p1, p2, p3, tmp;
				if (prepend) {
					values = [prepend].concat(values);
					i = values.length;
					while (--i > -1) {
						if (typeof( (tmp = values[i][p]) ) === "string") if (tmp.charAt(1) === "=") {
							values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
						}
					}
				}
				l = values.length - 2;
				if (l < 0) {
					a[0] = new Segment(values[0][p], 0, 0, values[(l < -1) ? 0 : 1][p]);
					return a;
				}
				for (i = 0; i < l; i++) {
					p1 = values[i][p];
					p2 = values[i+1][p];
					a[i] = new Segment(p1, 0, 0, p2);
					if (correlate) {
						p3 = values[i+2][p];
						_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
						_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
					}
				}
				a[i] = new Segment(values[i][p], 0, 0, values[i+1][p]);
				return a;
			},
			bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
				var obj = {},
					props = [],
					first = prepend || values[0],
					i, p, a, j, r, l, seamless, last;
				correlate = (typeof(correlate) === "string") ? ","+correlate+"," : _correlate;
				if (curviness == null) {
					curviness = 1;
				}
				for (p in values[0]) {
					props.push(p);
				}
				//check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
				if (values.length > 1) {
					last = values[values.length - 1];
					seamless = true;
					i = props.length;
					while (--i > -1) {
						p = props[i];
						if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
							seamless = false;
							break;
						}
					}
					if (seamless) {
						values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
						if (prepend) {
							values.unshift(prepend);
						}
						values.push(values[1]);
						prepend = values[values.length - 3];
					}
				}
				_r1.length = _r2.length = _r3.length = 0;
				i = props.length;
				while (--i > -1) {
					p = props[i];
					_corProps[p] = (correlate.indexOf(","+p+",") !== -1);
					obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
				}
				i = _r1.length;
				while (--i > -1) {
					_r1[i] = Math.sqrt(_r1[i]);
					_r2[i] = Math.sqrt(_r2[i]);
				}
				if (!basic) {
					i = props.length;
					while (--i > -1) {
						if (_corProps[p]) {
							a = obj[props[i]];
							l = a.length - 1;
							for (j = 0; j < l; j++) {
								r = (a[j+1].da / _r2[j] + a[j].da / _r1[j]) || 0;
								_r3[j] = (_r3[j] || 0) + r * r;
							}
						}
					}
					i = _r3.length;
					while (--i > -1) {
						_r3[i] = Math.sqrt(_r3[i]);
					}
				}
				i = props.length;
				j = quadratic ? 4 : 1;
				while (--i > -1) {
					p = props[i];
					a = obj[p];
					_calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
					if (seamless) {
						a.splice(0, j);
						a.splice(a.length - j, j);
					}
				}
				return obj;
			},
			_parseBezierData = function(values, type, prepend) {
				type = type || "soft";
				var obj = {},
					inc = (type === "cubic") ? 3 : 2,
					soft = (type === "soft"),
					props = [],
					a, b, c, d, cur, i, j, l, p, cnt, tmp;
				if (soft && prepend) {
					values = [prepend].concat(values);
				}
				if (values == null || values.length < inc + 1) { throw "invalid Bezier data"; }
				for (p in values[0]) {
					props.push(p);
				}
				i = props.length;
				while (--i > -1) {
					p = props[i];
					obj[p] = cur = [];
					cnt = 0;
					l = values.length;
					for (j = 0; j < l; j++) {
						a = (prepend == null) ? values[j][p] : (typeof( (tmp = values[j][p]) ) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
						if (soft) if (j > 1) if (j < l - 1) {
							cur[cnt++] = (a + cur[cnt-2]) / 2;
						}
						cur[cnt++] = a;
					}
					l = cnt - inc + 1;
					cnt = 0;
					for (j = 0; j < l; j += inc) {
						a = cur[j];
						b = cur[j+1];
						c = cur[j+2];
						d = (inc === 2) ? 0 : cur[j+3];
						cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
					}
					cur.length = cnt;
				}
				return obj;
			},
			_addCubicLengths = function(a, steps, resolution) {
				var inc = 1 / resolution,
					j = a.length,
					d, d1, s, da, ca, ba, p, i, inv, bez, index;
				while (--j > -1) {
					bez = a[j];
					s = bez.a;
					da = bez.d - s;
					ca = bez.c - s;
					ba = bez.b - s;
					d = d1 = 0;
					for (i = 1; i <= resolution; i++) {
						p = inc * i;
						inv = 1 - p;
						d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
						index = j * resolution + i - 1;
						steps[index] = (steps[index] || 0) + d * d;
					}
				}
			},
			_parseLengthData = function(obj, resolution) {
				resolution = resolution >> 0 || 6;
				var a = [],
					lengths = [],
					d = 0,
					total = 0,
					threshold = resolution - 1,
					segments = [],
					curLS = [], //current length segments array
					p, i, l, index;
				for (p in obj) {
					_addCubicLengths(obj[p], a, resolution);
				}
				l = a.length;
				for (i = 0; i < l; i++) {
					d += Math.sqrt(a[i]);
					index = i % resolution;
					curLS[index] = d;
					if (index === threshold) {
						total += d;
						index = (i / resolution) >> 0;
						segments[index] = curLS;
						lengths[index] = total;
						d = 0;
						curLS = [];
					}
				}
				return {length:total, lengths:lengths, segments:segments};
			},



			BezierPlugin = _gsScope._gsDefine.plugin({
					propName: "bezier",
					priority: -1,
					version: "1.3.7",
					API: 2,
					global:true,

					//gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
					init: function(target, vars, tween) {
						this._target = target;
						if (vars instanceof Array) {
							vars = {values:vars};
						}
						this._func = {};
						this._mod = {};
						this._props = [];
						this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
						var values = vars.values || [],
							first = {},
							second = values[0],
							autoRotate = vars.autoRotate || tween.vars.orientToBezier,
							p, isFunc, i, j, prepend;

						this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [["x","y","rotation",((autoRotate === true) ? 0 : Number(autoRotate) || 0)]] : null;
						for (p in second) {
							this._props.push(p);
						}

						i = this._props.length;
						while (--i > -1) {
							p = this._props[i];

							this._overwriteProps.push(p);
							isFunc = this._func[p] = (typeof(target[p]) === "function");
							first[p] = (!isFunc) ? parseFloat(target[p]) : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]();
							if (!prepend) if (first[p] !== values[0][p]) {
								prepend = first;
							}
						}
						this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
						this._segCount = this._beziers[p].length;

						if (this._timeRes) {
							var ld = _parseLengthData(this._beziers, this._timeRes);
							this._length = ld.length;
							this._lengths = ld.lengths;
							this._segments = ld.segments;
							this._l1 = this._li = this._s1 = this._si = 0;
							this._l2 = this._lengths[0];
							this._curSeg = this._segments[0];
							this._s2 = this._curSeg[0];
							this._prec = 1 / this._curSeg.length;
						}

						if ((autoRotate = this._autoRotate)) {
							this._initialRotations = [];
							if (!(autoRotate[0] instanceof Array)) {
								this._autoRotate = autoRotate = [autoRotate];
							}
							i = autoRotate.length;
							while (--i > -1) {
								for (j = 0; j < 3; j++) {
									p = autoRotate[i][j];
									this._func[p] = (typeof(target[p]) === "function") ? target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ] : false;
								}
								p = autoRotate[i][2];
								this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
								this._overwriteProps.push(p);
							}
						}
						this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
						return true;
					},

					//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
					set: function(v) {
						var segments = this._segCount,
							func = this._func,
							target = this._target,
							notStart = (v !== this._startRatio),
							curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
						if (!this._timeRes) {
							curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
							t = (v - (curIndex * (1 / segments))) * segments;
						} else {
							lengths = this._lengths;
							curSeg = this._curSeg;
							v *= this._length;
							i = this._li;
							//find the appropriate segment (if the currently cached one isn't correct)
							if (v > this._l2 && i < segments - 1) {
								l = segments - 1;
								while (i < l && (this._l2 = lengths[++i]) <= v) {	}
								this._l1 = lengths[i-1];
								this._li = i;
								this._curSeg = curSeg = this._segments[i];
								this._s2 = curSeg[(this._s1 = this._si = 0)];
							} else if (v < this._l1 && i > 0) {
								while (i > 0 && (this._l1 = lengths[--i]) >= v) { }
								if (i === 0 && v < this._l1) {
									this._l1 = 0;
								} else {
									i++;
								}
								this._l2 = lengths[i];
								this._li = i;
								this._curSeg = curSeg = this._segments[i];
								this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
								this._s2 = curSeg[this._si];
							}
							curIndex = i;
							//now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
							v -= this._l1;
							i = this._si;
							if (v > this._s2 && i < curSeg.length - 1) {
								l = curSeg.length - 1;
								while (i < l && (this._s2 = curSeg[++i]) <= v) {	}
								this._s1 = curSeg[i-1];
								this._si = i;
							} else if (v < this._s1 && i > 0) {
								while (i > 0 && (this._s1 = curSeg[--i]) >= v) {	}
								if (i === 0 && v < this._s1) {
									this._s1 = 0;
								} else {
									i++;
								}
								this._s2 = curSeg[i];
								this._si = i;
							}
							t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
						}
						inv = 1 - t;

						i = this._props.length;
						while (--i > -1) {
							p = this._props[i];
							b = this._beziers[p][curIndex];
							val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
							if (this._mod[p]) {
								val = this._mod[p](val, target);
							}
							if (func[p]) {
								target[p](val);
							} else {
								target[p] = val;
							}
						}

						if (this._autoRotate) {
							var ar = this._autoRotate,
								b2, x1, y1, x2, y2, add, conv;
							i = ar.length;
							while (--i > -1) {
								p = ar[i][2];
								add = ar[i][3] || 0;
								conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
								b = this._beziers[ar[i][0]];
								b2 = this._beziers[ar[i][1]];

								if (b && b2) { //in case one of the properties got overwritten.
									b = b[curIndex];
									b2 = b2[curIndex];

									x1 = b.a + (b.b - b.a) * t;
									x2 = b.b + (b.c - b.b) * t;
									x1 += (x2 - x1) * t;
									x2 += ((b.c + (b.d - b.c) * t) - x2) * t;

									y1 = b2.a + (b2.b - b2.a) * t;
									y2 = b2.b + (b2.c - b2.b) * t;
									y1 += (y2 - y1) * t;
									y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;

									val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

									if (this._mod[p]) {
										val = this._mod[p](val, target); //for modProps
									}

									if (func[p]) {
										target[p](val);
									} else {
										target[p] = val;
									}
								}
							}
						}
					}
			}),
			p = BezierPlugin.prototype;


		BezierPlugin.bezierThrough = bezierThrough;
		BezierPlugin.cubicToQuadratic = cubicToQuadratic;
		BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
		BezierPlugin.quadraticToCubic = function(a, b, c) {
			return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
		};

		BezierPlugin._cssRegister = function() {
			var CSSPlugin = _globals.CSSPlugin;
			if (!CSSPlugin) {
				return;
			}
			var _internals = CSSPlugin._internals,
				_parseToProxy = _internals._parseToProxy,
				_setPluginRatio = _internals._setPluginRatio,
				CSSPropTween = _internals.CSSPropTween;
			_internals._registerComplexSpecialProp("bezier", {parser:function(t, e, prop, cssp, pt, plugin) {
				if (e instanceof Array) {
					e = {values:e};
				}
				plugin = new BezierPlugin();
				var values = e.values,
					l = values.length - 1,
					pluginValues = [],
					v = {},
					i, p, data;
				if (l < 0) {
					return pt;
				}
				for (i = 0; i <= l; i++) {
					data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
					pluginValues[i] = data.end;
				}
				for (p in e) {
					v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
				}
				v.values = pluginValues;
				pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
				pt.data = data;
				pt.plugin = plugin;
				pt.setRatio = _setPluginRatio;
				if (v.autoRotate === 0) {
					v.autoRotate = true;
				}
				if (v.autoRotate && !(v.autoRotate instanceof Array)) {
					i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
					v.autoRotate = (data.end.left != null) ? [["left","top","rotation",i,false]] : (data.end.x != null) ? [["x","y","rotation",i,false]] : false;
				}
				if (v.autoRotate) {
					if (!cssp._transform) {
						cssp._enableTransforms(false);
					}
					data.autoRotate = cssp._target._gsTransform;
					data.proxy.rotation = data.autoRotate.rotation || 0;
					cssp._overwriteProps.push("rotation");
				}
				plugin._onInitTween(data.proxy, v, cssp._tween);
				return pt;
			}});
		};

		p._mod = function(lookup) {
			var op = this._overwriteProps,
				i = op.length,
				val;
			while (--i > -1) {
				val = lookup[op[i]];
				if (val && typeof(val) === "function") {
					this._mod[op[i]] = val;
				}
			}
		};

		p._kill = function(lookup) {
			var a = this._props,
				p, i;
			for (p in this._beziers) {
				if (p in lookup) {
					delete this._beziers[p];
					delete this._func[p];
					i = a.length;
					while (--i > -1) {
						if (a[i] === p) {
							a.splice(i, 1);
						}
					}
				}
			}
			a = this._autoRotate;
			if (a) {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i][2]]) {
						a.splice(i, 1);
					}
				}
			}
			return this._super._kill.call(this, lookup);
		};

	}());






	
	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * CSSPlugin
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin","TweenLite"], function(TweenPlugin, TweenLite) {

		/** @constructor **/
		var CSSPlugin = function() {
				TweenPlugin.call(this, "css");
				this._overwriteProps.length = 0;
				this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
			},
			_globals = _gsScope._gsDefine.globals,
			_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
			_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
			_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
			_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
			_specialProps = {},
			p = CSSPlugin.prototype = new TweenPlugin("css");

		p.constructor = CSSPlugin;
		CSSPlugin.version = "1.19.0";
		CSSPlugin.API = 2;
		CSSPlugin.defaultTransformPerspective = 0;
		CSSPlugin.defaultSkewType = "compensated";
		CSSPlugin.defaultSmoothOrigin = true;
		p = "px"; //we'll reuse the "p" variable to keep file size down
		CSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:""};


		var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
			_relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
			_valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
			_NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
			_suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
			_opacityExp = /opacity *= *([^)]*)/i,
			_opacityValExp = /opacity:([^;]*)/i,
			_alphaFilterExp = /alpha\(opacity *=.+?\)/i,
			_rgbhslExp = /^(rgb|hsl)/,
			_capsExp = /([A-Z])/g,
			_camelExp = /-([a-z])/gi,
			_urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
			_camelFunc = function(s, g) { return g.toUpperCase(); },
			_horizExp = /(?:Left|Right|Width)/i,
			_ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
			_ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
			_commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
			_complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
			_DEG2RAD = Math.PI / 180,
			_RAD2DEG = 180 / Math.PI,
			_forcePT = {},
			_doc = document,
			_createElement = function(type) {
				return _doc.createElementNS ? _doc.createElementNS("http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
			},
			_tempDiv = _createElement("div"),
			_tempImg = _createElement("img"),
			_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins
			_agent = navigator.userAgent,
			_autoRound,
			_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

			_isSafari,
			_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
			_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
			_ieVers,
			_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
				var i = _agent.indexOf("Android"),
					a = _createElement("a");
				_isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || Number(_agent.substr(i+8, 1)) > 3));
				_isSafariLT6 = (_isSafari && (Number(_agent.substr(_agent.indexOf("Version/")+8, 1)) < 6));
				_isFirefox = (_agent.indexOf("Firefox") !== -1);
				if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
					_ieVers = parseFloat( RegExp.$1 );
				}
				if (!a) {
					return false;
				}
				a.style.cssText = "top:1px;opacity:.55;";
				return /^0.55/.test(a.style.opacity);
			}()),
			_getIEOpacity = function(v) {
				return (_opacityExp.test( ((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);
			},
			_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.
				if (window.console) {
					console.log(s);
				}
			},
			_target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
			_index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

			_prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
			_prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

			// @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
			_checkPropPrefix = function(p, e) {
				e = e || _tempDiv;
				var s = e.style,
					a, i;
				if (s[p] !== undefined) {
					return p;
				}
				p = p.charAt(0).toUpperCase() + p.substr(1);
				a = ["O","Moz","ms","Ms","Webkit"];
				i = 5;
				while (--i > -1 && s[a[i]+p] === undefined) { }
				if (i >= 0) {
					_prefix = (i === 3) ? "ms" : a[i];
					_prefixCSS = "-" + _prefix.toLowerCase() + "-";
					return _prefix + p;
				}
				return null;
			},

			_getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},

			/**
			 * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
			 * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
			 *
			 * @param {!Object} t Target element whose style property you want to query
			 * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
			 * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
			 * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
			 * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
			 * @return {?string} The current property value
			 */
			_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
				var rv;
				if (!_supportsOpacity) if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
					return _getIEOpacity(t);
				}
				if (!calc && t.style[p]) {
					rv = t.style[p];
				} else if ((cs = cs || _getComputedStyle(t))) {
					rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
				} else if (t.currentStyle) {
					rv = t.currentStyle[p];
				}
				return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
			},

			/**
			 * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
			 * @param {!Object} t Target element
			 * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
			 * @param {!number} v Value
			 * @param {string=} sfx Suffix (like "px" or "%" or "em")
			 * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
			 * @return {number} value in pixels
			 */
			_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
				if (sfx === "px" || !sfx) { return v; }
				if (sfx === "auto" || !v) { return 0; }
				var horiz = _horizExp.test(p),
					node = t,
					style = _tempDiv.style,
					neg = (v < 0),
					precise = (v === 1),
					pix, cache, time;
				if (neg) {
					v = -v;
				}
				if (precise) {
					v *= 100;
				}
				if (sfx === "%" && p.indexOf("border") !== -1) {
					pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
				} else {
					style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
					if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
						node = t.parentNode || _doc.body;
						cache = node._gsCache;
						time = TweenLite.ticker.frame;
						if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
							return cache.width * v / 100;
						}
						style[(horiz ? "width" : "height")] = v + sfx;
					} else {
						style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
					}
					node.appendChild(_tempDiv);
					pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
					node.removeChild(_tempDiv);
					if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
						cache = node._gsCache = node._gsCache || {};
						cache.time = time;
						cache.width = pix / v * 100;
					}
					if (pix === 0 && !recurse) {
						pix = _convertToPixels(t, p, v, sfx, true);
					}
				}
				if (precise) {
					pix /= 100;
				}
				return neg ? -pix : pix;
			},
			_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
				if (_getStyle(t, "position", cs) !== "absolute") { return 0; }
				var dim = ((p === "left") ? "Left" : "Top"),
					v = _getStyle(t, "margin" + dim, cs);
				return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
			},

			// @private returns at object containing ALL of the style properties in camelCase and their associated values.
			_getAllStyles = function(t, cs) {
				var s = {},
					i, tr, p;
				if ((cs = cs || _getComputedStyle(t, null))) {
					if ((i = cs.length)) {
						while (--i > -1) {
							p = cs[i];
							if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
							}
						}
					} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
						for (i in cs) {
							if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[i] = cs[i];
							}
						}
					}
				} else if ((cs = t.currentStyle || t.style)) {
					for (i in cs) {
						if (typeof(i) === "string" && s[i] === undefined) {
							s[i.replace(_camelExp, _camelFunc)] = cs[i];
						}
					}
				}
				if (!_supportsOpacity) {
					s.opacity = _getIEOpacity(t);
				}
				tr = _getTransform(t, cs, false);
				s.rotation = tr.rotation;
				s.skewX = tr.skewX;
				s.scaleX = tr.scaleX;
				s.scaleY = tr.scaleY;
				s.x = tr.x;
				s.y = tr.y;
				if (_supports3D) {
					s.z = tr.z;
					s.rotationX = tr.rotationX;
					s.rotationY = tr.rotationY;
					s.scaleZ = tr.scaleZ;
				}
				if (s.filters) {
					delete s.filters;
				}
				return s;
			},

			// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
			_cssDif = function(t, s1, s2, vars, forceLookup) {
				var difs = {},
					style = t.style,
					val, p, mpt;
				for (p in s2) {
					if (p !== "cssText") if (p !== "length") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf("Origin") === -1) if (typeof(val) === "number" || typeof(val) === "string") {
						difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
						if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
							mpt = new MiniPropTween(style, p, style[p], mpt);
						}
					}
				}
				if (vars) {
					for (p in vars) { //copy properties (except className)
						if (p !== "className") {
							difs[p] = vars[p];
						}
					}
				}
				return {difs:difs, firstMPT:mpt};
			},
			_dimensions = {width:["Left","Right"], height:["Top","Bottom"]},
			_margins = ["marginLeft","marginRight","marginTop","marginBottom"],

			/**
			 * @private Gets the width or height of an element
			 * @param {!Object} t Target element
			 * @param {!string} p Property name ("width" or "height")
			 * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
			 * @return {number} Dimension (in pixels)
			 */
			_getDimension = function(t, p, cs) {
				if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
					return (cs || _getComputedStyle(t))[p] || 0;
				} else if (t.getBBox && _isSVG(t)) {
					return t.getBBox()[p] || 0;
				}
				var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
					a = _dimensions[p],
					i = a.length;
				cs = cs || _getComputedStyle(t, null);
				while (--i > -1) {
					v -= parseFloat( _getStyle(t, "padding" + a[i], cs, true) ) || 0;
					v -= parseFloat( _getStyle(t, "border" + a[i] + "Width", cs, true) ) || 0;
				}
				return v;
			},

			// @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
			_parsePosition = function(v, recObj) {
				if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
					return v + " ";
				}
				if (v == null || v === "") {
					v = "0 0";
				}
				var a = v.split(" "),
					x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
					y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
					i;
				if (a.length > 3 && !recObj) { //multiple positions
					a = v.split(", ").join(",").split(",");
					v = [];
					for (i = 0; i < a.length; i++) {
						v.push(_parsePosition(a[i]));
					}
					return v.join(",");
				}
				if (y == null) {
					y = (x === "center") ? "50%" : "0";
				} else if (y === "center") {
					y = "50%";
				}
				if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
					x = "50%";
				}
				v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
				if (recObj) {
					recObj.oxp = (x.indexOf("%") !== -1);
					recObj.oyp = (y.indexOf("%") !== -1);
					recObj.oxr = (x.charAt(1) === "=");
					recObj.oyr = (y.charAt(1) === "=");
					recObj.ox = parseFloat(x.replace(_NaNExp, ""));
					recObj.oy = parseFloat(y.replace(_NaNExp, ""));
					recObj.v = v;
				}
				return recObj || v;
			},

			/**
			 * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
			 * @param {(number|string)} e End value which is typically a string, but could be a number
			 * @param {(number|string)} b Beginning value which is typically a string but could be a number
			 * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
			 */
			_parseChange = function(e, b) {
				if (typeof(e) === "function") {
					e = e(_index, _target);
				}
				return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
			},

			/**
			 * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @return {number} Parsed value
			 */
			_parseVal = function(v, d) {
				if (typeof(v) === "function") {
					v = v(_index, _target);
				}
				return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
			},

			/**
			 * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
			 * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
			 * @return {number} parsed angle in radians
			 */
			_parseAngle = function(v, d, p, directionalEnd) {
				var min = 0.000001,
					cap, split, dif, result, isRelative;
				if (typeof(v) === "function") {
					v = v(_index, _target);
				}
				if (v == null) {
					result = d;
				} else if (typeof(v) === "number") {
					result = v;
				} else {
					cap = 360;
					split = v.split("_");
					isRelative = (v.charAt(1) === "=");
					dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
					if (split.length) {
						if (directionalEnd) {
							directionalEnd[p] = d + dif;
						}
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = (dif < 0) ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						}
					}
					result = d + dif;
				}
				if (result < min && result > -min) {
					result = 0;
				}
				return result;
			},

			_colorLookup = {aqua:[0,255,255],
				lime:[0,255,0],
				silver:[192,192,192],
				black:[0,0,0],
				maroon:[128,0,0],
				teal:[0,128,128],
				blue:[0,0,255],
				navy:[0,0,128],
				white:[255,255,255],
				fuchsia:[255,0,255],
				olive:[128,128,0],
				yellow:[255,255,0],
				orange:[255,165,0],
				gray:[128,128,128],
				purple:[128,0,128],
				green:[0,128,0],
				red:[255,0,0],
				pink:[255,192,203],
				cyan:[0,255,255],
				transparent:[255,255,255,0]},

			_hue = function(h, m1, m2) {
				h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
				return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
			},

			/**
			 * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
			 * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
			 * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
			 * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
			 */
			_parseColor = CSSPlugin.parseColor = function(v, toHSL) {
				var a, r, g, b, h, s, l, max, min, d, wasHSL;
				if (!v) {
					a = _colorLookup.black;
				} else if (typeof(v) === "number") {
					a = [v >> 16, (v >> 8) & 255, v & 255];
				} else {
					if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
						v = v.substr(0, v.length - 1);
					}
					if (_colorLookup[v]) {
						a = _colorLookup[v];
					} else if (v.charAt(0) === "#") {
						if (v.length === 4) { //for shorthand like #9F0
							r = v.charAt(1);
							g = v.charAt(2);
							b = v.charAt(3);
							v = "#" + r + r + g + g + b + b;
						}
						v = parseInt(v.substr(1), 16);
						a = [v >> 16, (v >> 8) & 255, v & 255];
					} else if (v.substr(0, 3) === "hsl") {
						a = wasHSL = v.match(_numExp);
						if (!toHSL) {
							h = (Number(a[0]) % 360) / 360;
							s = Number(a[1]) / 100;
							l = Number(a[2]) / 100;
							g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
							r = l * 2 - g;
							if (a.length > 3) {
								a[3] = Number(v[3]);
							}
							a[0] = _hue(h + 1 / 3, r, g);
							a[1] = _hue(h, r, g);
							a[2] = _hue(h - 1 / 3, r, g);
						} else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
							return v.match(_relNumExp);
						}
					} else {
						a = v.match(_numExp) || _colorLookup.transparent;
					}
					a[0] = Number(a[0]);
					a[1] = Number(a[1]);
					a[2] = Number(a[2]);
					if (a.length > 3) {
						a[3] = Number(a[3]);
					}
				}
				if (toHSL && !wasHSL) {
					r = a[0] / 255;
					g = a[1] / 255;
					b = a[2] / 255;
					max = Math.max(r, g, b);
					min = Math.min(r, g, b);
					l = (max + min) / 2;
					if (max === min) {
						h = s = 0;
					} else {
						d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
						h *= 60;
					}
					a[0] = (h + 0.5) | 0;
					a[1] = (s * 100 + 0.5) | 0;
					a[2] = (l * 100 + 0.5) | 0;
				}
				return a;
			},
			_formatColors = function(s, toHSL) {
				var colors = s.match(_colorExp) || [],
					charIndex = 0,
					parsed = colors.length ? "" : s,
					i, color, temp;
				for (i = 0; i < colors.length; i++) {
					color = colors[i];
					temp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);
					charIndex += temp.length + color.length;
					color = _parseColor(color, toHSL);
					if (color.length === 3) {
						color.push(1);
					}
					parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
				}
				return parsed + s.substr(charIndex);
			},
			_colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

		for (p in _colorLookup) {
			_colorExp += "|" + p + "\\b";
		}
		_colorExp = new RegExp(_colorExp+")", "gi");

		CSSPlugin.colorStringFilter = function(a) {
			var combined = a[0] + a[1],
				toHSL;
			if (_colorExp.test(combined)) {
				toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
				a[0] = _formatColors(a[0], toHSL);
				a[1] = _formatColors(a[1], toHSL);
			}
			_colorExp.lastIndex = 0;
		};

		if (!TweenLite.defaultStringFilter) {
			TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
		}

		/**
		 * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
		 * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
		 * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
		 * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
		 * @return {Function} formatter function
		 */
		var _getFormatter = function(dflt, clr, collapsible, multi) {
				if (dflt == null) {
					return function(v) {return v;};
				}
				var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
					dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
					pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
					sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
					delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
					numVals = dVals.length,
					dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
					formatter;
				if (!numVals) {
					return function(v) {return v;};
				}
				if (clr) {
					formatter = function(v) {
						var color, vals, i, a;
						if (typeof(v) === "number") {
							v += dSfx;
						} else if (multi && _commasOutsideParenExp.test(v)) {
							a = v.replace(_commasOutsideParenExp, "|").split("|");
							for (i = 0; i < a.length; i++) {
								a[i] = formatter(a[i]);
							}
							return a.join(",");
						}
						color = (v.match(_colorExp) || [dColor])[0];
						vals = v.split(color).join("").match(_valuesExp) || [];
						i = vals.length;
						if (numVals > i--) {
							while (++i < numVals) {
								vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
							}
						}
						return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
					};
					return formatter;

				}
				formatter = function(v) {
					var vals, a, i;
					if (typeof(v) === "number") {
						v += dSfx;
					} else if (multi && _commasOutsideParenExp.test(v)) {
						a = v.replace(_commasOutsideParenExp, "|").split("|");
						for (i = 0; i < a.length; i++) {
							a[i] = formatter(a[i]);
						}
						return a.join(",");
					}
					vals = v.match(_valuesExp) || [];
					i = vals.length;
					if (numVals > i--) {
						while (++i < numVals) {
							vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
						}
					}
					return pfx + vals.join(delim) + sfx;
				};
				return formatter;
			},

			/**
			 * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
			 * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
			 * @return {Function} a formatter function
			 */
			_getEdgeParser = function(props) {
				props = props.split(",");
				return function(t, e, p, cssp, pt, plugin, vars) {
					var a = (e + "").split(" "),
						i;
					vars = {};
					for (i = 0; i < 4; i++) {
						vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
					}
					return cssp.parse(t, vars, pt, plugin);
				};
			},

			// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
			_setPluginRatio = _internals._setPluginRatio = function(v) {
				this.plugin.setRatio(v);
				var d = this.data,
					proxy = d.proxy,
					mpt = d.firstMPT,
					min = 0.000001,
					val, pt, i, str, p;
				while (mpt) {
					val = proxy[mpt.v];
					if (mpt.r) {
						val = Math.round(val);
					} else if (val < min && val > -min) {
						val = 0;
					}
					mpt.t[mpt.p] = val;
					mpt = mpt._next;
				}
				if (d.autoRotate) {
					d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
				}
				//at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
				if (v === 1 || v === 0) {
					mpt = d.firstMPT;
					p = (v === 1) ? "e" : "b";
					while (mpt) {
						pt = mpt.t;
						if (!pt.type) {
							pt[p] = pt.s + pt.xs0;
						} else if (pt.type === 1) {
							str = pt.xs0 + pt.s + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt[p] = str;
						}
						mpt = mpt._next;
					}
				}
			},

			/**
			 * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
			 * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
			 * @param {!string} p property name
			 * @param {(number|string|object)} v value
			 * @param {MiniPropTween=} next next MiniPropTween in the linked list
			 * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
			 */
			MiniPropTween = function(t, p, v, next, r) {
				this.t = t;
				this.p = p;
				this.v = v;
				this.r = r;
				if (next) {
					next._prev = this;
					this._next = next;
				}
			},

			/**
			 * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
			 * This method returns an object that has the following properties:
			 *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
			 *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
			 *  - firstMPT: the first MiniPropTween in the linked list
			 *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
			 * @param {!Object} t target object to be tweened
			 * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
			 * @param {!CSSPlugin} cssp The CSSPlugin instance
			 * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
			 * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
			 * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
			 * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
			 */
			_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
				var bpt = pt,
					start = {},
					end = {},
					transform = cssp._transform,
					oldForce = _forcePT,
					i, p, xp, mpt, firstPT;
				cssp._transform = null;
				_forcePT = vars;
				pt = firstPT = cssp.parse(t, vars, pt, plugin);
				_forcePT = oldForce;
				//break off from the linked list so the new ones are isolated.
				if (shallow) {
					cssp._transform = transform;
					if (bpt) {
						bpt._prev = null;
						if (bpt._prev) {
							bpt._prev._next = null;
						}
					}
				}
				while (pt && pt !== bpt) {
					if (pt.type <= 1) {
						p = pt.p;
						end[p] = pt.s + pt.c;
						start[p] = pt.s;
						if (!shallow) {
							mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
							pt.c = 0;
						}
						if (pt.type === 1) {
							i = pt.l;
							while (--i > 0) {
								xp = "xn" + i;
								p = pt.p + "_" + xp;
								end[p] = pt.data[xp];
								start[p] = pt[xp];
								if (!shallow) {
									mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
								}
							}
						}
					}
					pt = pt._next;
				}
				return {proxy:start, end:end, firstMPT:mpt, pt:firstPT};
			},



			/**
			 * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
			 * CSSPropTweens have the following optional properties as well (not defined through the constructor):
			 *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
			 *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
			 *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
			 *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
			 *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
			 * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
			 * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
			 * @param {number} s Starting numeric value
			 * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
			 * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
			 * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
			 * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
			 * @param {boolean=} r If true, the value(s) should be rounded
			 * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
			 * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
			 * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
			 */
			CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
				this.t = t; //target
				this.p = p; //property
				this.s = s; //starting value
				this.c = c; //change value
				this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
				if (!(t instanceof CSSPropTween)) {
					_overwriteProps.push(this.n);
				}
				this.r = r; //round (boolean)
				this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
				if (pr) {
					this.pr = pr;
					_hasPriority = true;
				}
				this.b = (b === undefined) ? s : b;
				this.e = (e === undefined) ? s + c : e;
				if (next) {
					this._next = next;
					next._prev = this;
				}
			},

			_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
				var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
				pt.b = start;
				pt.e = pt.xs0 = end;
				return pt;
			},

			/**
			 * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
			 * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
			 * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
			 * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
			 *
			 * @param {!Object} t Target whose property will be tweened
			 * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
			 * @param {string} b Beginning value
			 * @param {string} e Ending value
			 * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
			 * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
			 * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
			 * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
			 * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
			 * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
			 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
			 */
			_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
				//DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
				b = b || dflt || "";
				if (typeof(e) === "function") {
					e = e(_index, _target);
				}
				pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
				e += ""; //ensures it's a string
				if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
					e = [b, e];
					CSSPlugin.colorStringFilter(e);
					b = e[0];
					e = e[1];
				}
				var ba = b.split(", ").join(",").split(" "), //beginning array
					ea = e.split(", ").join(",").split(" "), //ending array
					l = ba.length,
					autoRound = (_autoRound !== false),
					i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
				if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
					ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					l = ba.length;
				}
				if (l !== ea.length) {
					//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
					ba = (dflt || "").split(" ");
					l = ba.length;
				}
				pt.plugin = plugin;
				pt.setRatio = setRatio;
				_colorExp.lastIndex = 0;
				for (i = 0; i < l; i++) {
					bv = ba[i];
					ev = ea[i];
					bn = parseFloat(bv);
					//if the value begins with a number (most common). It's fine if it has a suffix like px
					if (bn || bn === 0) {
						pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1), true);

					//if the value is a color
					} else if (clrs && _colorExp.test(bv)) {
						str = ev.indexOf(")") + 1;
						str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
						useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
						bv = _parseColor(bv, useHSL);
						ev = _parseColor(ev, useHSL);
						hasAlpha = (bv.length + ev.length > 6);
						if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
							pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
							pt.e = pt.e.split(ea[i]).join("transparent");
						} else {
							if (!_supportsOpacity) { //old versions of IE don't support rgba().
								hasAlpha = false;
							}
							if (useHSL) {
								pt.appendXtra((hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
									.appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
									.appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
							} else {
								pt.appendXtra((hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true)
									.appendXtra("", bv[1], ev[1] - bv[1], ",", true)
									.appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), true);
							}

							if (hasAlpha) {
								bv = (bv.length < 4) ? 1 : bv[3];
								pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
							}
						}
						_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

					} else {
						bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

						//if no number is found, treat it as a non-tweening value and just append the string to the current xs.
						if (!bnums) {
							pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;

						//loop through all the numbers that are found and construct the extra values on the pt.
						} else {
							enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
							if (!enums || enums.length !== bnums.length) {
								//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
								return pt;
							}
							ni = 0;
							for (xi = 0; xi < bnums.length; xi++) {
								cv = bnums[xi];
								temp = bv.indexOf(cv, ni);
								pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px"), (xi === 0));
								ni = temp + cv.length;
							}
							pt["xs" + pt.l] += bv.substr(ni);
						}
					}
				}
				//if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
				if (e.indexOf("=") !== -1) if (pt.data) {
					str = pt.xs0 + pt.data.s;
					for (i = 1; i < pt.l; i++) {
						str += pt["xs" + i] + pt.data["xn" + i];
					}
					pt.e = str + pt["xs" + i];
				}
				if (!pt.l) {
					pt.type = -1;
					pt.xs0 = pt.e;
				}
				return pt.xfirst || pt;
			},
			i = 9;


		p = CSSPropTween.prototype;
		p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
		while (--i > 0) {
			p["xn" + i] = 0;
			p["xs" + i] = "";
		}
		p.xs0 = "";
		p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


		/**
		 * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
		 * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
		 * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
		 * @param {string=} pfx Prefix (if any)
		 * @param {!number} s Starting value
		 * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
		 * @param {string=} sfx Suffix (if any)
		 * @param {boolean=} r Round (if true).
		 * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
		 * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
		 */
		p.appendXtra = function(pfx, s, c, sfx, r, pad) {
			var pt = this,
				l = pt.l;
			pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
			if (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
				pt["xs" + l] += s + (sfx || "");
				return pt;
			}
			pt.l++;
			pt.type = pt.setRatio ? 2 : 1;
			pt["xs" + pt.l] = sfx || "";
			if (l > 0) {
				pt.data["xn" + l] = s + c;
				pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
				pt["xn" + l] = s;
				if (!pt.plugin) {
					pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
					pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
				}
				return pt;
			}
			pt.data = {s:s + c};
			pt.rxp = {};
			pt.s = s;
			pt.c = c;
			pt.r = r;
			return pt;
		};

		/**
		 * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
		 * @param {!string} p Property name (like "boxShadow" or "throwProps")
		 * @param {Object=} options An object containing any of the following configuration options:
		 *                      - defaultValue: the default value
		 *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
		 *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
		 *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
		 *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
		 *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
		 *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
		 *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
		 *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
		 */
		var SpecialProp = function(p, options) {
				options = options || {};
				this.p = options.prefix ? _checkPropPrefix(p) || p : p;
				_specialProps[p] = _specialProps[this.p] = this;
				this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
				if (options.parser) {
					this.parse = options.parser;
				}
				this.clrs = options.color;
				this.multi = options.multi;
				this.keyword = options.keyword;
				this.dflt = options.defaultValue;
				this.pr = options.priority || 0;
			},

			//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
			_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
				if (typeof(options) !== "object") {
					options = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
				}
				var a = p.split(","),
					d = options.defaultValue,
					i, temp;
				defaults = defaults || [d];
				for (i = 0; i < a.length; i++) {
					options.prefix = (i === 0 && options.prefix);
					options.defaultValue = defaults[i] || d;
					temp = new SpecialProp(a[i], options);
				}
			},

			//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
			_registerPluginProp = _internals._registerPluginProp = function(p) {
				if (!_specialProps[p]) {
					var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
					_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {
						var pluginClass = _globals.com.greensock.plugins[pluginName];
						if (!pluginClass) {
							_log("Error: " + pluginName + " js file not loaded.");
							return pt;
						}
						pluginClass._cssRegister();
						return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
					}});
				}
			};


		p = SpecialProp.prototype;

		/**
		 * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
		 * @param {!Object} t target element
		 * @param {(string|number|object)} b beginning value
		 * @param {(string|number|object)} e ending (destination) value
		 * @param {CSSPropTween=} pt next CSSPropTween in the linked list
		 * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
		 * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
		 * @return {CSSPropTween=} First CSSPropTween in the linked list
		 */
		p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
			var kwd = this.keyword,
				i, ba, ea, l, bi, ei;
			//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
			if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
				ba = b.replace(_commasOutsideParenExp, "|").split("|");
				ea = e.replace(_commasOutsideParenExp, "|").split("|");
			} else if (kwd) {
				ba = [b];
				ea = [e];
			}
			if (ea) {
				l = (ea.length > ba.length) ? ea.length : ba.length;
				for (i = 0; i < l; i++) {
					b = ba[i] = ba[i] || this.dflt;
					e = ea[i] = ea[i] || this.dflt;
					if (kwd) {
						bi = b.indexOf(kwd);
						ei = e.indexOf(kwd);
						if (bi !== ei) {
							if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
								ba[i] = ba[i].split(kwd).join("");
							} else if (bi === -1) { //if the keyword isn't in the beginning, add it.
								ba[i] += " " + kwd;
							}
						}
					}
				}
				b = ba.join(", ");
				e = ea.join(", ");
			}
			return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
		};

		/**
		 * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
		 * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
		 * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
		 * @param {!Object} t Target object whose property is being tweened
		 * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
		 * @param {!string} p Property name
		 * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
		 * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
		 * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
		 * @param {Object=} vars Original vars object that contains the data for parsing.
		 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
		 */
		p.parse = function(t, e, p, cssp, pt, plugin, vars) {
			return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
		};

		/**
		 * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
		 *  1) Target object whose property should be tweened (typically a DOM element)
		 *  2) The end/destination value (could be a string, number, object, or whatever you want)
		 *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
		 *
		 * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
		 *
		 * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
		 *      var start = target.style.width;
		 *      return function(ratio) {
		 *              target.style.width = (start + value * ratio) + "px";
		 *              console.log("set width to " + target.style.width);
		 *          }
		 * }, 0);
		 *
		 * Then, when I do this tween, it will trigger my special property:
		 *
		 * TweenLite.to(element, 1, {css:{myCustomProp:100}});
		 *
		 * In the example, of course, we're just changing the width, but you can do anything you want.
		 *
		 * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
		 * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
		 * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
		 */
		CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
			_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {
				var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
				rv.plugin = plugin;
				rv.setRatio = onInitTween(t, e, cssp._tween, p);
				return rv;
			}, priority:priority});
		};






		//transform-related methods and properties
		CSSPlugin.useSVGTransformAttr = _isSafari || _isFirefox; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
		var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
			_transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
			_transformPropCSS = _prefixCSS + "transform",
			_transformOriginProp = _checkPropPrefix("transformOrigin"),
			_supports3D = (_checkPropPrefix("perspective") !== null),
			Transform = _internals.Transform = function() {
				this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
				this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
			},
			_SVGElement = window.SVGElement,
			_useSVGTransformAttr,
			//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

			_createSVG = function(type, container, attributes) {
				var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
					reg = /([a-z])([A-Z])/g,
					p;
				for (p in attributes) {
					element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
				}
				container.appendChild(element);
				return element;
			},
			_docElement = _doc.documentElement,
			_forceSVGTransformAttr = (function() {
				//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
				var force = _ieVers || (/Android/i.test(_agent) && !window.chrome),
					svg, rect, width;
				if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
					svg = _createSVG("svg", _docElement);
					rect = _createSVG("rect", svg, {width:100, height:50, x:100});
					width = rect.getBoundingClientRect().width;
					rect.style[_transformOriginProp] = "50% 50%";
					rect.style[_transformProp] = "scaleX(0.5)";
					force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
					_docElement.removeChild(svg);
				}
				return force;
			})(),
			_parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
				var tm = e._gsTransform,
					m = _getMatrix(e, true),
					v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
				if (tm) {
					xOriginOld = tm.xOrigin; //record the original values before we alter them.
					yOriginOld = tm.yOrigin;
				}
				if (!absolute || (v = absolute.split(" ")).length < 2) {
					b = e.getBBox();
					local = _parsePosition(local).split(" ");
					v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
						 (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];
				}
				decoratee.xOrigin = xOrigin = parseFloat(v[0]);
				decoratee.yOrigin = yOrigin = parseFloat(v[1]);
				if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
					a = m[0];
					b = m[1];
					c = m[2];
					d = m[3];
					tx = m[4];
					ty = m[5];
					determinant = (a * d - b * c);
					x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
					y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
					xOrigin = decoratee.xOrigin = v[0] = x;
					yOrigin = decoratee.yOrigin = v[1] = y;
				}
				if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
					if (skipRecord) {
						decoratee.xOffset = tm.xOffset;
						decoratee.yOffset = tm.yOffset;
						tm = decoratee;
					}
					if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
						x = xOrigin - xOriginOld;
						y = yOrigin - yOriginOld;
						//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
						//tm.x -= x - (x * m[0] + y * m[2]);
						//tm.y -= y - (x * m[1] + y * m[3]);
						tm.xOffset += (x * m[0] + y * m[2]) - x;
						tm.yOffset += (x * m[1] + y * m[3]) - y;
					} else {
						tm.xOffset = tm.yOffset = 0;
					}
				}
				if (!skipRecord) {
					e.setAttribute("data-svg-origin", v.join(" "));
				}
			},
			_canGetBBox = function(e) {
				try {
					return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
				} catch (e) {}
			},
			_isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
				return !!(_SVGElement && e.getBBox && e.getCTM && _canGetBBox(e) && (!e.parentNode || (e.parentNode.getBBox && e.parentNode.getCTM)));
			},
			_identity2DMatrix = [1,0,0,1,0,0],
			_getMatrix = function(e, force2D) {
				var tm = e._gsTransform || new Transform(),
					rnd = 100000,
					style = e.style,
					isDefault, s, m, n, dec, none;
				if (_transformProp) {
					s = _getStyle(e, _transformPropCSS, null, true);
				} else if (e.currentStyle) {
					//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
					s = e.currentStyle.filter.match(_ieGetMatrixExp);
					s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
				}
				isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
				if (isDefault && _transformProp && ((none = (_getComputedStyle(e).display === "none")) || !e.parentNode)) {
					if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none".
						n = style.display;
						style.display = "block";
					}
					if (!e.parentNode) {
						dec = 1; //flag
						_docElement.appendChild(e);
					}
					s = _getStyle(e, _transformPropCSS, null, true);
					isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
					if (n) {
						style.display = n;
					} else if (none) {
						_removeProp(style, "display");
					}
					if (dec) {
						_docElement.removeChild(e);
					}
				}
				if (tm.svg || (e.getBBox && _isSVG(e))) {
					if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
						s = style[_transformProp];
						isDefault = 0;
					}
					m = e.getAttribute("transform");
					if (isDefault && m) {
						if (m.indexOf("matrix") !== -1) { //just in case there's a "transform" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.
							s = m;
							isDefault = 0;
						} else if (m.indexOf("translate") !== -1) {
							s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
							isDefault = 0;
						}
					}
				}
				if (isDefault) {
					return _identity2DMatrix;
				}
				//split the matrix values out into an array (m for matrix)
				m = (s || "").match(_numExp) || [];
				i = m.length;
				while (--i > -1) {
					n = Number(m[i]);
					m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
				}
				return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
			},

			/**
			 * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
			 * @param {!Object} t target element
			 * @param {Object=} cs computed style object (optional)
			 * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
			 * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
			 * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
			 */
			_getTransform = _internals.getTransform = function(t, cs, rec, parse) {
				if (t._gsTransform && rec && !parse) {
					return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
				}
				var tm = rec ? t._gsTransform || new Transform() : new Transform(),
					invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
					min = 0.00002,
					rnd = 100000,
					zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin  || 0 : 0,
					defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
					m, i, scaleX, scaleY, rotation, skewX;

				tm.svg = !!(t.getBBox && _isSVG(t));
				if (tm.svg) {
					_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
					_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
				}
				m = _getMatrix(t);
				if (m !== _identity2DMatrix) {

					if (m.length === 16) {
						//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
						var a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],
							a12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],
							a13 = m[8], a23 = m[9], a33 = m[10],
							a14 = m[12], a24 = m[13], a34 = m[14],
							a43 = m[11],
							angle = Math.atan2(a32, a33),
							t1, t2, t3, t4, cos, sin;

						//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
						if (tm.zOrigin) {
							a34 = -tm.zOrigin;
							a14 = a13*a34-m[12];
							a24 = a23*a34-m[13];
							a34 = a33*a34+tm.zOrigin-m[14];
						}
						tm.rotationX = angle * _RAD2DEG;
						//rotationX
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							t1 = a12*cos+a13*sin;
							t2 = a22*cos+a23*sin;
							t3 = a32*cos+a33*sin;
							a13 = a12*-sin+a13*cos;
							a23 = a22*-sin+a23*cos;
							a33 = a32*-sin+a33*cos;
							a43 = a42*-sin+a43*cos;
							a12 = t1;
							a22 = t2;
							a32 = t3;
						}
						//rotationY
						angle = Math.atan2(-a31, a33);
						tm.rotationY = angle * _RAD2DEG;
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							t1 = a11*cos-a13*sin;
							t2 = a21*cos-a23*sin;
							t3 = a31*cos-a33*sin;
							a23 = a21*sin+a23*cos;
							a33 = a31*sin+a33*cos;
							a43 = a41*sin+a43*cos;
							a11 = t1;
							a21 = t2;
							a31 = t3;
						}
						//rotationZ
						angle = Math.atan2(a21, a11);
						tm.rotation = angle * _RAD2DEG;
						if (angle) {
							cos = Math.cos(-angle);
							sin = Math.sin(-angle);
							a11 = a11*cos+a12*sin;
							t2 = a21*cos+a22*sin;
							a22 = a21*-sin+a22*cos;
							a32 = a31*-sin+a32*cos;
							a21 = t2;
						}

						if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
							tm.rotationX = tm.rotation = 0;
							tm.rotationY = 180 - tm.rotationY;
						}

						tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21) * rnd + 0.5) | 0) / rnd;
						tm.scaleY = ((Math.sqrt(a22 * a22 + a23 * a23) * rnd + 0.5) | 0) / rnd;
						tm.scaleZ = ((Math.sqrt(a32 * a32 + a33 * a33) * rnd + 0.5) | 0) / rnd;
						if (tm.rotationX || tm.rotationY) {
							tm.skewX = 0;
						} else {
							tm.skewX = (a12 || a22) ? Math.atan2(a12, a22) * _RAD2DEG + tm.rotation : tm.skewX || 0;
							if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
								if (invX) {
									tm.scaleX *= -1;
									tm.skewX += (tm.rotation <= 0) ? 180 : -180;
									tm.rotation += (tm.rotation <= 0) ? 180 : -180;
								} else {
									tm.scaleY *= -1;
									tm.skewX += (tm.skewX <= 0) ? 180 : -180;
								}
							}
						}
						tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
						tm.x = a14;
						tm.y = a24;
						tm.z = a34;
						if (tm.svg) {
							tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
							tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
						}

					} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
						var k = (m.length >= 6),
							a = k ? m[0] : 1,
							b = m[1] || 0,
							c = m[2] || 0,
							d = k ? m[3] : 1;
						tm.x = m[4] || 0;
						tm.y = m[5] || 0;
						scaleX = Math.sqrt(a * a + b * b);
						scaleY = Math.sqrt(d * d + c * c);
						rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
						skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
						if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
							if (invX) {
								scaleX *= -1;
								skewX += (rotation <= 0) ? 180 : -180;
								rotation += (rotation <= 0) ? 180 : -180;
							} else {
								scaleY *= -1;
								skewX += (skewX <= 0) ? 180 : -180;
							}
						}
						tm.scaleX = scaleX;
						tm.scaleY = scaleY;
						tm.rotation = rotation;
						tm.skewX = skewX;
						if (_supports3D) {
							tm.rotationX = tm.rotationY = tm.z = 0;
							tm.perspective = defaultTransformPerspective;
							tm.scaleZ = 1;
						}
						if (tm.svg) {
							tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
							tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
						}
					}
					tm.zOrigin = zOrigin;
					//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
					for (i in tm) {
						if (tm[i] < min) if (tm[i] > -min) {
							tm[i] = 0;
						}
					}
				}
				//DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
				if (rec) {
					t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
					if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
						if (_useSVGTransformAttr && t.style[_transformProp]) {
							TweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
								_removeProp(t.style, _transformProp);
							});
						} else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
							TweenLite.delayedCall(0.001, function(){
								t.removeAttribute("transform");
							});
						}
					}
				}
				return tm;
			},

			//for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
			_setIETransformRatio = function(v) {
				var t = this.data, //refers to the element's _gsTransform object
					ang = -t.rotation * _DEG2RAD,
					skew = ang + t.skewX * _DEG2RAD,
					rnd = 100000,
					a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
					b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
					c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
					d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
					style = this.t.style,
					cs = this.t.currentStyle,
					filters, val;
				if (!cs) {
					return;
				}
				val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
				b = -c;
				c = -val;
				filters = cs.filter;
				style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
				var w = this.t.offsetWidth,
					h = this.t.offsetHeight,
					clip = (cs.position !== "absolute"),
					m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
					ox = t.x + (w * t.xPercent / 100),
					oy = t.y + (h * t.yPercent / 100),
					dx, dy;

				//if transformOrigin is being used, adjust the offset x and y
				if (t.ox != null) {
					dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
					dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
					ox += dx - (dx * a + dy * b);
					oy += dy - (dx * c + dy * d);
				}

				if (!clip) {
					m += ", sizingMethod='auto expand')";
				} else {
					dx = (w / 2);
					dy = (h / 2);
					//translate to ensure that transformations occur around the correct origin (default is center).
					m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
				}
				if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
					style.filter = filters.replace(_ieSetMatrixExp, m);
				} else {
					style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
				}

				//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
				if (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf("Dx=0, Dy=0") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
					style.removeAttribute("filter");
				}

				//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
				if (!clip) {
					var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
						marg, prop, dif;
					dx = t.ieOffsetX || 0;
					dy = t.ieOffsetY || 0;
					t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
					t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
					for (i = 0; i < 4; i++) {
						prop = _margins[i];
						marg = cs[prop];
						//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
						val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
						if (val !== t[prop]) {
							dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
						} else {
							dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
						}
						style[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + "px";
					}
				}
			},

			/* translates a super small decimal to a string WITHOUT scientific notation
			_safeDecimal = function(n) {
				var s = (n < 0 ? -n : n) + "",
					a = s.split("e-");
				return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
			},
			*/

			_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
				var t = this.data, //refers to the element's _gsTransform object
					style = this.t.style,
					angle = t.rotation,
					rotationX = t.rotationX,
					rotationY = t.rotationY,
					sx = t.scaleX,
					sy = t.scaleY,
					sz = t.scaleZ,
					x = t.x,
					y = t.y,
					z = t.z,
					isSVG = t.svg,
					perspective = t.perspective,
					force3D = t.force3D,
					a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
					zOrigin, min, cos, sin, t1, t2, transform, comma, zero, skew, rnd;
				//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
				if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

					//2D
					if (angle || t.skewX || isSVG) {
						angle *= _DEG2RAD;
						skew = t.skewX * _DEG2RAD;
						rnd = 100000;
						a11 = Math.cos(angle) * sx;
						a21 = Math.sin(angle) * sx;
						a12 = Math.sin(angle - skew) * -sy;
						a22 = Math.cos(angle - skew) * sy;
						if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
							t1 = Math.tan(skew - t.skewY * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							a12 *= t1;
							a22 *= t1;
							if (t.skewY) {
								t1 = Math.tan(t.skewY * _DEG2RAD);
								t1 = Math.sqrt(1 + t1 * t1);
								a11 *= t1;
								a21 *= t1;
							}
						}
						if (isSVG) {
							x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
							y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
							if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
								min = this.t.getBBox();
								x += t.xPercent * 0.01 * min.width;
								y += t.yPercent * 0.01 * min.height;
							}
							min = 0.000001;
							if (x < min) if (x > -min) {
								x = 0;
							}
							if (y < min) if (y > -min) {
								y = 0;
							}
						}
						transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
						if (isSVG && _useSVGTransformAttr) {
							this.t.setAttribute("transform", "matrix(" + transform);
						} else {
							//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
							style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
						}
					} else {
						style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
					}
					return;

				}
				if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
					min = 0.0001;
					if (sx < min && sx > -min) {
						sx = sz = 0.00002;
					}
					if (sy < min && sy > -min) {
						sy = sz = 0.00002;
					}
					if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
						perspective = 0;
					}
				}
				if (angle || t.skewX) {
					angle *= _DEG2RAD;
					cos = a11 = Math.cos(angle);
					sin = a21 = Math.sin(angle);
					if (t.skewX) {
						angle -= t.skewX * _DEG2RAD;
						cos = Math.cos(angle);
						sin = Math.sin(angle);
						if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
							t1 = Math.tan((t.skewX - t.skewY) * _DEG2RAD);
							t1 = Math.sqrt(1 + t1 * t1);
							cos *= t1;
							sin *= t1;
							if (t.skewY) {
								t1 = Math.tan(t.skewY * _DEG2RAD);
								t1 = Math.sqrt(1 + t1 * t1);
								a11 *= t1;
								a21 *= t1;
							}
						}
					}
					a12 = -sin;
					a22 = cos;

				} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
					style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z +"px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
					return;
				} else {
					a11 = a22 = 1;
					a12 = a21 = 0;
				}
				// KEY  INDEX   AFFECTS
				// a11  0       rotation, rotationY, scaleX
				// a21  1       rotation, rotationY, scaleX
				// a31  2       rotationY, scaleX
				// a41  3       rotationY, scaleX
				// a12  4       rotation, skewX, rotationX, scaleY
				// a22  5       rotation, skewX, rotationX, scaleY
				// a32  6       rotationX, scaleY
				// a42  7       rotationX, scaleY
				// a13  8       rotationY, rotationX, scaleZ
				// a23  9       rotationY, rotationX, scaleZ
				// a33  10      rotationY, rotationX, scaleZ
				// a43  11      rotationY, rotationX, perspective, scaleZ
				// a14  12      x, zOrigin, svgOrigin
				// a24  13      y, zOrigin, svgOrigin
				// a34  14      z, zOrigin
				// a44  15
				// rotation: Math.atan2(a21, a11)
				// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
				// rotationX: Math.atan2(a32, a33)
				a33 = 1;
				a13 = a23 = a31 = a32 = a41 = a42 = 0;
				a43 = (perspective) ? -1 / perspective : 0;
				zOrigin = t.zOrigin;
				min = 0.000001; //threshold below which browsers use scientific notation which won't work.
				comma = ",";
				zero = "0";
				angle = rotationY * _DEG2RAD;
				if (angle) {
					cos = Math.cos(angle);
					sin = Math.sin(angle);
					a31 = -sin;
					a41 = a43*-sin;
					a13 = a11*sin;
					a23 = a21*sin;
					a33 = cos;
					a43 *= cos;
					a11 *= cos;
					a21 *= cos;
				}
				angle = rotationX * _DEG2RAD;
				if (angle) {
					cos = Math.cos(angle);
					sin = Math.sin(angle);
					t1 = a12*cos+a13*sin;
					t2 = a22*cos+a23*sin;
					a32 = a33*sin;
					a42 = a43*sin;
					a13 = a12*-sin+a13*cos;
					a23 = a22*-sin+a23*cos;
					a33 = a33*cos;
					a43 = a43*cos;
					a12 = t1;
					a22 = t2;
				}
				if (sz !== 1) {
					a13*=sz;
					a23*=sz;
					a33*=sz;
					a43*=sz;
				}
				if (sy !== 1) {
					a12*=sy;
					a22*=sy;
					a32*=sy;
					a42*=sy;
				}
				if (sx !== 1) {
					a11*=sx;
					a21*=sx;
					a31*=sx;
					a41*=sx;
				}

				if (zOrigin || isSVG) {
					if (zOrigin) {
						x += a13*-zOrigin;
						y += a23*-zOrigin;
						z += a33*-zOrigin+zOrigin;
					}
					if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
						x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
						y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
					}
					if (x < min && x > -min) {
						x = zero;
					}
					if (y < min && y > -min) {
						y = zero;
					}
					if (z < min && z > -min) {
						z = 0; //don't use string because we calculate perspective later and need the number.
					}
				}

				//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
				transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
				transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
				transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
				if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
					transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
					transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
				} else {
					transform += ",0,0,0,0,1,0,";
				}
				transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";

				style[_transformProp] = transform;
			};

		p = Transform.prototype;
		p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
		p.scaleX = p.scaleY = p.scaleZ = 1;

		_registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {
			if (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.
			cssp._lastParsedTransform = vars;
			var swapFunc;
			if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
				swapFunc = vars[parsingProp];
				vars[parsingProp] = e;
			}
			var originalGSTransform = t._gsTransform,
				style = t.style,
				min = 0.000001,
				i = _transformProps.length,
				v = vars,
				endRotations = {},
				transformOriginString = "transformOrigin",
				m1 = _getTransform(t, _cs, true, v.parseTransform),
				orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
				m2, copy, has3D, hasChange, dr, x, y, matrix, p;
			cssp._transform = m1;
			if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
				copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
				copy[_transformProp] = orig;
				copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
				copy.position = "absolute";
				_doc.body.appendChild(_tempDiv);
				m2 = _getTransform(_tempDiv, null, false);
				if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
					x = m1.xOrigin;
					y = m1.yOrigin;
					m2.x -= m1.xOffset;
					m2.y -= m1.yOffset;
					if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
						orig = {};
						_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
						x = orig.xOrigin;
						y = orig.yOrigin;
						m2.x -= orig.xOffset - m1.xOffset;
						m2.y -= orig.yOffset - m1.yOffset;
					}
					if (x || y) {
						matrix = _getMatrix(_tempDiv, true);
						m2.x -= x - (x * matrix[0] + y * matrix[2]);
						m2.y -= y - (x * matrix[1] + y * matrix[3]);
					}
				}
				_doc.body.removeChild(_tempDiv);
				if (!m2.perspective) {
					m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
				}
				if (v.xPercent != null) {
					m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
				}
				if (v.yPercent != null) {
					m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
				}
			} else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
				m2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
					scaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
					scaleZ:_parseVal(v.scaleZ, m1.scaleZ),
					x:_parseVal(v.x, m1.x),
					y:_parseVal(v.y, m1.y),
					z:_parseVal(v.z, m1.z),
					xPercent:_parseVal(v.xPercent, m1.xPercent),
					yPercent:_parseVal(v.yPercent, m1.yPercent),
					perspective:_parseVal(v.transformPerspective, m1.perspective)};
				dr = v.directionalRotation;
				if (dr != null) {
					if (typeof(dr) === "object") {
						for (copy in dr) {
							v[copy] = dr[copy];
						}
					} else {
						v.rotation = dr;
					}
				}
				if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
					m2.x = 0;
					m2.xPercent = _parseVal(v.x, m1.xPercent);
				}
				if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
					m2.y = 0;
					m2.yPercent = _parseVal(v.y, m1.yPercent);
				}

				m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation - m1.skewY, m1.rotation - m1.skewY, "rotation", endRotations); //see notes below about skewY for why we subtract it from rotation here
				if (_supports3D) {
					m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
					m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
				}
				m2.skewX = _parseAngle(v.skewX, m1.skewX - m1.skewY); //see notes below about skewY and why we subtract it from skewX here

				//note: for performance reasons, we combine all skewing into the skewX and rotation values, ignoring skewY but we must still record it so that we can discern how much of the overall skew is attributed to skewX vs. skewY. Otherwise, if the skewY would always act relative (tween skewY to 10deg, for example, multiple times and if we always combine things into skewX, we can't remember that skewY was 10 from last time). Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of -10 degrees.
				if ((m2.skewY = _parseAngle(v.skewY, m1.skewY))) {
					m2.skewX += m2.skewY;
					m2.rotation += m2.skewY;
				}
			}
			if (_supports3D && v.force3D != null) {
				m1.force3D = v.force3D;
				hasChange = true;
			}

			m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;

			has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
			if (!has3D && v.scale != null) {
				m2.scaleZ = 1; //no need to tween scaleZ.
			}

			while (--i > -1) {
				p = _transformProps[i];
				orig = m2[p] - m1[p];
				if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
					hasChange = true;
					pt = new CSSPropTween(m1, p, m1[p], orig, pt);
					if (p in endRotations) {
						pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
					}
					pt.xs0 = 0; //ensures the value stays numeric in setRatio()
					pt.plugin = plugin;
					cssp._overwriteProps.push(pt.n);
				}
			}

			orig = v.transformOrigin;
			if (m1.svg && (orig || v.svgOrigin)) {
				x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
				y = m1.yOffset;
				_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
				pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
				pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
				if (x !== m1.xOffset || y !== m1.yOffset) {
					pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
					pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
				}
				orig = _useSVGTransformAttr ? null : "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
			}
			if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
				if (_transformProp) {
					hasChange = true;
					p = _transformOriginProp;
					orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
					pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
					pt.b = style[p];
					pt.plugin = plugin;
					if (_supports3D) {
						copy = m1.zOrigin;
						orig = orig.split(" ");
						m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
						pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
						pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
						pt.b = copy;
						pt.xs0 = pt.e = m1.zOrigin;
					} else {
						pt.xs0 = pt.e = orig;
					}

					//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
				} else {
					_parsePosition(orig + "", m1);
				}
			}
			if (hasChange) {
				cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
			}
			if (swapFunc) {
				vars[parsingProp] = swapFunc;
			}
			return pt;
		}, prefix:true});

		_registerComplexSpecialProp("boxShadow", {defaultValue:"0px 0px 0px 0px #999", prefix:true, color:true, multi:true, keyword:"inset"});

		_registerComplexSpecialProp("borderRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
			e = this.format(e);
			var props = ["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],
				style = t.style,
				ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
			w = parseFloat(t.offsetWidth);
			h = parseFloat(t.offsetHeight);
			ea1 = e.split(" ");
			for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
				if (this.p.indexOf("border")) { //older browsers used a prefix
					props[i] = _checkPropPrefix(props[i]);
				}
				bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
				if (bs.indexOf(" ") !== -1) {
					bs2 = bs.split(" ");
					bs = bs2[0];
					bs2 = bs2[1];
				}
				es = es2 = ea1[i];
				bn = parseFloat(bs);
				bsfx = bs.substr((bn + "").length);
				rel = (es.charAt(1) === "=");
				if (rel) {
					en = parseInt(es.charAt(0)+"1", 10);
					es = es.substr(2);
					en *= parseFloat(es);
					esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
				} else {
					en = parseFloat(es);
					esfx = es.substr((en + "").length);
				}
				if (esfx === "") {
					esfx = _suffixMap[p] || bsfx;
				}
				if (esfx !== bsfx) {
					hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
					vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
					if (esfx === "%") {
						bs = (hn / w * 100) + "%";
						bs2 = (vn / h * 100) + "%";
					} else if (esfx === "em") {
						em = _convertToPixels(t, "borderLeft", 1, "em");
						bs = (hn / em) + "em";
						bs2 = (vn / em) + "em";
					} else {
						bs = hn + "px";
						bs2 = vn + "px";
					}
					if (rel) {
						es = (parseFloat(bs) + en) + esfx;
						es2 = (parseFloat(bs2) + en) + esfx;
					}
				}
				pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
			}
			return pt;
		}, prefix:true, formatter:_getFormatter("0px 0px 0px 0px", false, true)});
		_registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
			return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
		}, prefix:true, formatter:_getFormatter("0px 0px", false, true)});
		_registerComplexSpecialProp("backgroundPosition", {defaultValue:"0 0", parser:function(t, e, p, cssp, pt, plugin) {
			var bp = "background-position",
				cs = (_cs || _getComputedStyle(t, null)),
				bs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
				es = this.format(e),
				ba, ea, i, pct, overlap, src;
			if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
				src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
				if (src && src !== "none") {
					ba = bs.split(" ");
					ea = es.split(" ");
					_tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
					i = 2;
					while (--i > -1) {
						bs = ba[i];
						pct = (bs.indexOf("%") !== -1);
						if (pct !== (ea[i].indexOf("%") !== -1)) {
							overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
							ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
						}
					}
					bs = ba.join(" ");
				}
			}
			return this.parseComplex(t.style, bs, es, pt, plugin);
		}, formatter:_parsePosition});
		_registerComplexSpecialProp("backgroundSize", {defaultValue:"0 0", formatter:function(v) {
			v += ""; //ensure it's a string
			return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong).
		}});
		_registerComplexSpecialProp("perspective", {defaultValue:"0px", prefix:true});
		_registerComplexSpecialProp("perspectiveOrigin", {defaultValue:"50% 50%", prefix:true});
		_registerComplexSpecialProp("transformStyle", {prefix:true});
		_registerComplexSpecialProp("backfaceVisibility", {prefix:true});
		_registerComplexSpecialProp("userSelect", {prefix:true});
		_registerComplexSpecialProp("margin", {parser:_getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")});
		_registerComplexSpecialProp("padding", {parser:_getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")});
		_registerComplexSpecialProp("clip", {defaultValue:"rect(0px,0px,0px,0px)", parser:function(t, e, p, cssp, pt, plugin){
			var b, cs, delim;
			if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
				cs = t.currentStyle;
				delim = _ieVers < 8 ? " " : ",";
				b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
				e = this.format(e).split(",").join(delim);
			} else {
				b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
				e = this.format(e);
			}
			return this.parseComplex(t.style, b, e, pt, plugin);
		}});
		_registerComplexSpecialProp("textShadow", {defaultValue:"0px 0px 0px #999", color:true, multi:true});
		_registerComplexSpecialProp("autoRound,strictUnits", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)
		_registerComplexSpecialProp("border", {defaultValue:"0px solid #000", parser:function(t, e, p, cssp, pt, plugin) {
			var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
				end = this.format(e).split(" "),
				esfx = end[0].replace(_suffixExp, "");
			if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
				bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
			}
			return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
			}, color:true, formatter:function(v) {
				var a = v.split(" ");
				return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
			}});
		_registerComplexSpecialProp("borderWidth", {parser:_getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
		_registerComplexSpecialProp("float,cssFloat,styleFloat", {parser:function(t, e, p, cssp, pt, plugin) {
			var s = t.style,
				prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
			return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
		}});

		//opacity-related
		var _setIEOpacityRatio = function(v) {
				var t = this.t, //refers to the element's style property
					filters = t.filter || _getStyle(this.data, "filter") || "",
					val = (this.s + this.c * v) | 0,
					skip;
				if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
					if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
						t.removeAttribute("filter");
						skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
					} else {
						t.filter = filters.replace(_alphaFilterExp, "");
						skip = true;
					}
				}
				if (!skip) {
					if (this.xn1) {
						t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
					}
					if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
						if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
							t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
						}
					} else {
						t.filter = filters.replace(_opacityExp, "opacity=" + val);
					}
				}
			};
		_registerComplexSpecialProp("opacity,alpha,autoAlpha", {defaultValue:"1", parser:function(t, e, p, cssp, pt, plugin) {
			var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
				style = t.style,
				isAutoAlpha = (p === "autoAlpha");
			if (typeof(e) === "string" && e.charAt(1) === "=") {
				e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
			}
			if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
				b = 0;
			}
			if (_supportsOpacity) {
				pt = new CSSPropTween(style, "opacity", b, e - b, pt);
			} else {
				pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
				pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
				style.zoom = 1; //helps correct an IE issue.
				pt.type = 2;
				pt.b = "alpha(opacity=" + pt.s + ")";
				pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
				pt.data = t;
				pt.plugin = plugin;
				pt.setRatio = _setIEOpacityRatio;
			}
			if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
				pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
				pt.xs0 = "inherit";
				cssp._overwriteProps.push(pt.n);
				cssp._overwriteProps.push(p);
			}
			return pt;
		}});


		var _removeProp = function(s, p) {
				if (p) {
					if (s.removeProperty) {
						if (p.substr(0,2) === "ms" || p.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
							p = "-" + p;
						}
						s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
					} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
						s.removeAttribute(p);
					}
				}
			},
			_setClassNameRatio = function(v) {
				this.t._gsClassPT = this;
				if (v === 1 || v === 0) {
					this.t.setAttribute("class", (v === 0) ? this.b : this.e);
					var mpt = this.data, //first MiniPropTween
						s = this.t.style;
					while (mpt) {
						if (!mpt.v) {
							_removeProp(s, mpt.p);
						} else {
							s[mpt.p] = mpt.v;
						}
						mpt = mpt._next;
					}
					if (v === 1 && this.t._gsClassPT === this) {
						this.t._gsClassPT = null;
					}
				} else if (this.t.getAttribute("class") !== this.e) {
					this.t.setAttribute("class", this.e);
				}
			};
		_registerComplexSpecialProp("className", {parser:function(t, e, p, cssp, pt, plugin, vars) {
			var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
				cssText = t.style.cssText,
				difData, bs, cnpt, cnptLookup, mpt;
			pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClassNameRatio;
			pt.pr = -11;
			_hasPriority = true;
			pt.b = b;
			bs = _getAllStyles(t, _cs);
			//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
			cnpt = t._gsClassPT;
			if (cnpt) {
				cnptLookup = {};
				mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
				while (mpt) {
					cnptLookup[mpt.p] = 1;
					mpt = mpt._next;
				}
				cnpt.setRatio(1);
			}
			t._gsClassPT = pt;
			pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
			t.setAttribute("class", pt.e);
			difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
			t.setAttribute("class", b);
			pt.data = difData.firstMPT;
			t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
			pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
			return pt;
		}});


		var _setClearPropsRatio = function(v) {
			if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
				var s = this.t.style,
					transformParse = _specialProps.transform.parse,
					a, p, i, clearTransform, transform;
				if (this.e === "all") {
					s.cssText = "";
					clearTransform = true;
				} else {
					a = this.e.split(" ").join("").split(",");
					i = a.length;
					while (--i > -1) {
						p = a[i];
						if (_specialProps[p]) {
							if (_specialProps[p].parse === transformParse) {
								clearTransform = true;
							} else {
								p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
							}
						}
						_removeProp(s, p);
					}
				}
				if (clearTransform) {
					_removeProp(s, _transformProp);
					transform = this.t._gsTransform;
					if (transform) {
						if (transform.svg) {
							this.t.removeAttribute("data-svg-origin");
							this.t.removeAttribute("transform");
						}
						delete this.t._gsTransform;
					}
				}

			}
		};
		_registerComplexSpecialProp("clearProps", {parser:function(t, e, p, cssp, pt) {
			pt = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClearPropsRatio;
			pt.e = e;
			pt.pr = -10;
			pt.data = cssp._tween;
			_hasPriority = true;
			return pt;
		}});

		p = "bezier,throwProps,physicsProps,physics2D".split(",");
		i = p.length;
		while (i--) {
			_registerPluginProp(p[i]);
		}








		p = CSSPlugin.prototype;
		p._firstPT = p._lastParsedTransform = p._transform = null;

		//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
		p._onInitTween = function(target, vars, tween, index) {
			if (!target.nodeType) { //css is only for dom elements
				return false;
			}
			this._target = _target = target;
			this._tween = tween;
			this._vars = vars;
			_index = index;
			_autoRound = vars.autoRound;
			_hasPriority = false;
			_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
			_cs = _getComputedStyle(target, "");
			_overwriteProps = this._overwriteProps;
			var style = target.style,
				v, pt, pt2, first, last, next, zIndex, tpt, threeD;
			if (_reqSafariFix) if (style.zIndex === "") {
				v = _getStyle(target, "zIndex", _cs);
				if (v === "auto" || v === "") {
					//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
					this._addLazySet(style, "zIndex", 0);
				}
			}

			if (typeof(vars) === "string") {
				first = style.cssText;
				v = _getAllStyles(target, _cs);
				style.cssText = first + ";" + vars;
				v = _cssDif(target, v, _getAllStyles(target)).difs;
				if (!_supportsOpacity && _opacityValExp.test(vars)) {
					v.opacity = parseFloat( RegExp.$1 );
				}
				vars = v;
				style.cssText = first;
			}

			if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
				this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
			} else {
				this._firstPT = pt = this.parse(target, vars, null);
			}

			if (this._transformType) {
				threeD = (this._transformType === 3);
				if (!_transformProp) {
					style.zoom = 1; //helps correct an IE issue.
				} else if (_isSafari) {
					_reqSafariFix = true;
					//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
					if (style.zIndex === "") {
						zIndex = _getStyle(target, "zIndex", _cs);
						if (zIndex === "auto" || zIndex === "") {
							this._addLazySet(style, "zIndex", 0);
						}
					}
					//Setting WebkitBackfaceVisibility corrects 3 bugs:
					// 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
					// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
					// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
					//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
					if (_isSafariLT6) {
						this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
					}
				}
				pt2 = pt;
				while (pt2 && pt2._next) {
					pt2 = pt2._next;
				}
				tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
				this._linkCSSP(tpt, null, pt2);
				tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
				tpt.data = this._transform || _getTransform(target, _cs, true);
				tpt.tween = tween;
				tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
				_overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
			}

			if (_hasPriority) {
				//reorders the linked list in order of pr (priority)
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				this._firstPT = first;
			}
			return true;
		};


		p.parse = function(target, vars, pt, plugin) {
			var style = target.style,
				p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
			for (p in vars) {
				es = vars[p]; //ending value string
				if (typeof(es) === "function") {
					es = es(_index, _target);
				}
				sp = _specialProps[p]; //SpecialProp lookup.
				if (sp) {
					pt = sp.parse(target, es, p, this, pt, plugin, vars);

				} else {
					bs = _getStyle(target, p, _cs) + "";
					isStr = (typeof(es) === "string");
					if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
						if (!isStr) {
							es = _parseColor(es);
							es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
						}
						pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

					} else if (isStr && _complexExp.test(es)) {
						pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

					} else {
						bn = parseFloat(bs);
						bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

						if (bs === "" || bs === "auto") {
							if (p === "width" || p === "height") {
								bn = _getDimension(target, p, _cs);
								bsfx = "px";
							} else if (p === "left" || p === "top") {
								bn = _calculateOffset(target, p, _cs);
								bsfx = "px";
							} else {
								bn = (p !== "opacity") ? 0 : 1;
								bsfx = "";
							}
						}

						rel = (isStr && es.charAt(1) === "=");
						if (rel) {
							en = parseInt(es.charAt(0) + "1", 10);
							es = es.substr(2);
							en *= parseFloat(es);
							esfx = es.replace(_suffixExp, "");
						} else {
							en = parseFloat(es);
							esfx = isStr ? es.replace(_suffixExp, "") : "";
						}

						if (esfx === "") {
							esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
						}

						es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.

						//if the beginning/ending suffixes don't match, normalize them...
						if (bsfx !== esfx) if (esfx !== "") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
							bn = _convertToPixels(target, p, bn, bsfx);
							if (esfx === "%") {
								bn /= _convertToPixels(target, p, 100, "%") / 100;
								if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
									bs = bn + "%";
								}

							} else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
								bn /= _convertToPixels(target, p, 1, esfx);

							//otherwise convert to pixels.
							} else if (esfx !== "px") {
								en = _convertToPixels(target, p, en, esfx);
								esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
							}
							if (rel) if (en || en === 0) {
								es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
							}
						}

						if (rel) {
							en += bn;
						}

						if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
							pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
							pt.xs0 = esfx;
							//DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
						} else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
							_log("invalid " + p + " tween value: " + vars[p]);
						} else {
							pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
							pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
							//DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
						}
					}
				}
				if (plugin) if (pt && !pt.plugin) {
					pt.plugin = plugin;
				}
			}
			return pt;
		};


		//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
		p.setRatio = function(v) {
			var pt = this._firstPT,
				min = 0.000001,
				val, str, i;
			//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
			if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
				while (pt) {
					if (pt.type !== 2) {
						if (pt.r && pt.type !== -1) {
							val = Math.round(pt.s + pt.c);
							if (!pt.type) {
								pt.t[pt.p] = val + pt.xs0;
							} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
								i = pt.l;
								str = pt.xs0 + val + pt.xs1;
								for (i = 1; i < pt.l; i++) {
									str += pt["xn"+i] + pt["xs"+(i+1)];
								}
								pt.t[pt.p] = str;
							}
						} else {
							pt.t[pt.p] = pt.e;
						}
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
				while (pt) {
					val = pt.c * v + pt.s;
					if (pt.r) {
						val = Math.round(val);
					} else if (val < min) if (val > -min) {
						val = 0;
					}
					if (!pt.type) {
						pt.t[pt.p] = val + pt.xs0;
					} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
						i = pt.l;
						if (i === 2) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
						} else if (i === 3) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
						} else if (i === 4) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
						} else if (i === 5) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
						} else {
							str = pt.xs0 + val + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt.t[pt.p] = str;
						}

					} else if (pt.type === -1) { //non-tweening value
						pt.t[pt.p] = pt.xs0;

					} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
			} else {
				while (pt) {
					if (pt.type !== 2) {
						pt.t[pt.p] = pt.b;
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}
			}
		};

		/**
		 * @private
		 * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
		 * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
		 * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
		 * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
		 * doesn't have any transform-related properties of its own. You can call this method as many times as you
		 * want and it won't create duplicate CSSPropTweens.
		 *
		 * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
		 */
		p._enableTransforms = function(threeD) {
			this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
			this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
		};

		var lazySet = function(v) {
			this.t[this.p] = this.e;
			this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
		};
		/** @private Gives us a way to set a value on the first render (and only the first render). **/
		p._addLazySet = function(t, p, v) {
			var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
			pt.e = v;
			pt.setRatio = lazySet;
			pt.data = this;
		};

		/** @private **/
		p._linkCSSP = function(pt, next, prev, remove) {
			if (pt) {
				if (next) {
					next._prev = pt;
				}
				if (pt._next) {
					pt._next._prev = pt._prev;
				}
				if (pt._prev) {
					pt._prev._next = pt._next;
				} else if (this._firstPT === pt) {
					this._firstPT = pt._next;
					remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
				}
				if (prev) {
					prev._next = pt;
				} else if (!remove && this._firstPT === null) {
					this._firstPT = pt;
				}
				pt._next = next;
				pt._prev = prev;
			}
			return pt;
		};

		p._mod = function(lookup) {
			var pt = this._firstPT;
			while (pt) {
				if (typeof(lookup[pt.p]) === "function" && lookup[pt.p] === Math.round) { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally..
					pt.r = 1;
				}
				pt = pt._next;
			}
		};

		//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
		p._kill = function(lookup) {
			var copy = lookup,
				pt, p, xfirst;
			if (lookup.autoAlpha || lookup.alpha) {
				copy = {};
				for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
					copy[p] = lookup[p];
				}
				copy.opacity = 1;
				if (copy.autoAlpha) {
					copy.visibility = 1;
				}
			}
			if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
				xfirst = pt.xfirst;
				if (xfirst && xfirst._prev) {
					this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
				} else if (xfirst === this._firstPT) {
					this._firstPT = pt._next;
				}
				if (pt._next) {
					this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
				}
				this._classNamePT = null;
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
					pt.plugin._kill(lookup);
					p = pt.plugin;
				}
				pt = pt._next;
			}
			return TweenPlugin.prototype._kill.call(this, copy);
		};



		//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
		var _getChildStyles = function(e, props, targets) {
				var children, i, child, type;
				if (e.slice) {
					i = e.length;
					while (--i > -1) {
						_getChildStyles(e[i], props, targets);
					}
					return;
				}
				children = e.childNodes;
				i = children.length;
				while (--i > -1) {
					child = children[i];
					type = child.type;
					if (child.style) {
						props.push(_getAllStyles(child));
						if (targets) {
							targets.push(child);
						}
					}
					if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
						_getChildStyles(child, props, targets);
					}
				}
			};

		/**
		 * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
		 * and then compares the style properties of all the target's child elements at the tween's start and end, and
		 * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
		 * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
		 * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
		 * is because it creates entirely new tweens that may have completely different targets than the original tween,
		 * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
		 * and it would create other problems. For example:
		 *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
		 *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
		 *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
		 *
		 * @param {Object} target object to be tweened
		 * @param {number} Duration in seconds (or frames for frames-based tweens)
		 * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
		 * @return {Array} An array of TweenLite instances
		 */
		CSSPlugin.cascadeTo = function(target, duration, vars) {
			var tween = TweenLite.to(target, duration, vars),
				results = [tween],
				b = [],
				e = [],
				targets = [],
				_reservedProps = TweenLite._internals.reservedProps,
				i, difs, p, from;
			target = tween._targets || tween.target;
			_getChildStyles(target, b, targets);
			tween.render(duration, true, true);
			_getChildStyles(target, e);
			tween.render(0, true, true);
			tween._enabled(true);
			i = targets.length;
			while (--i > -1) {
				difs = _cssDif(targets[i], b[i], e[i]);
				if (difs.firstMPT) {
					difs = difs.difs;
					for (p in vars) {
						if (_reservedProps[p]) {
							difs[p] = vars[p];
						}
					}
					from = {};
					for (p in difs) {
						from[p] = b[i][p];
					}
					results.push(TweenLite.fromTo(targets[i], duration, from, difs));
				}
			}
			return results;
		};

		TweenPlugin.activate([CSSPlugin]);
		return CSSPlugin;

	}, true);

	
	
	
	
	
	
	
	
	
	
/*
 * ----------------------------------------------------------------
 * RoundPropsPlugin
 * ----------------------------------------------------------------
 */
	(function() {

		var RoundPropsPlugin = _gsScope._gsDefine.plugin({
				propName: "roundProps",
				version: "1.6.0",
				priority: -1,
				API: 2,

				//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
				init: function(target, value, tween) {
					this._tween = tween;
					return true;
				}

			}),
			_roundLinkedList = function(node) {
				while (node) {
					if (!node.f && !node.blob) {
						node.m = Math.round;
					}
					node = node._next;
				}
			},
			p = RoundPropsPlugin.prototype;

		p._onInitAllProps = function() {
			var tween = this._tween,
				rp = (tween.vars.roundProps.join) ? tween.vars.roundProps : tween.vars.roundProps.split(","),
				i = rp.length,
				lookup = {},
				rpt = tween._propLookup.roundProps,
				prop, pt, next;
			while (--i > -1) {
				lookup[rp[i]] = Math.round;
			}
			i = rp.length;
			while (--i > -1) {
				prop = rp[i];
				pt = tween._firstPT;
				while (pt) {
					next = pt._next; //record here, because it may get removed
					if (pt.pg) {
						pt.t._mod(lookup);
					} else if (pt.n === prop) {
						if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
							_roundLinkedList(pt.t._firstPT);
						} else {
							this._add(pt.t, prop, pt.s, pt.c);
							//remove from linked list
							if (next) {
								next._prev = pt._prev;
							}
							if (pt._prev) {
								pt._prev._next = next;
							} else if (tween._firstPT === pt) {
								tween._firstPT = next;
							}
							pt._next = pt._prev = null;
							tween._propLookup[prop] = rpt;
						}
					}
					pt = next;
				}
			}
			return false;
		};

		p._add = function(target, p, s, c) {
			this._addTween(target, p, s, s + c, p, Math.round);
			this._overwriteProps.push(p);
		};

	}());










/*
 * ----------------------------------------------------------------
 * AttrPlugin
 * ----------------------------------------------------------------
 */

	(function() {

		_gsScope._gsDefine.plugin({
			propName: "attr",
			API: 2,
			version: "0.6.0",

			//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
			init: function(target, value, tween, index) {
				var p, end;
				if (typeof(target.setAttribute) !== "function") {
					return false;
				}
				for (p in value) {
					end = value[p];
					if (typeof(end) === "function") {
						end = end(index, target);
					}
					this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
					this._overwriteProps.push(p);
				}
				return true;
			}

		});

	}());










/*
 * ----------------------------------------------------------------
 * DirectionalRotationPlugin
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine.plugin({
		propName: "directionalRotation",
		version: "0.3.0",
		API: 2,

		//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
		init: function(target, value, tween, index) {
			if (typeof(value) !== "object") {
				value = {rotation:value};
			}
			this.finals = {};
			var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
				min = 0.000001,
				p, v, start, end, dif, split;
			for (p in value) {
				if (p !== "useRadians") {
					end = value[p];
					if (typeof(end) === "function") {
						end = end(index, target);
					}
					split = (end + "").split("_");
					v = split[0];
					start = parseFloat( (typeof(target[p]) !== "function") ? target[p] : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]() );
					end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
					dif = end - start;
					if (split.length) {
						v = split.join("_");
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = (dif < 0) ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						}
					}
					if (dif > min || dif < -min) {
						this._addTween(target, p, start, start + dif, p);
						this._overwriteProps.push(p);
					}
				}
			}
			return true;
		},

		//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
		set: function(ratio) {
			var pt;
			if (ratio !== 1) {
				this._super.setRatio.call(this, ratio);
			} else {
				pt = this._firstPT;
				while (pt) {
					if (pt.f) {
						pt.t[pt.p](this.finals[pt.p]);
					} else {
						pt.t[pt.p] = this.finals[pt.p];
					}
					pt = pt._next;
				}
			}
		}

	})._autoCSS = true;







	
	
	
	
/*
 * ----------------------------------------------------------------
 * EasePack
 * ----------------------------------------------------------------
 */
	_gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {
		
		var w = (_gsScope.GreenSockGlobals || _gsScope),
			gs = w.com.greensock,
			_2PI = Math.PI * 2,
			_HALF_PI = Math.PI / 2,
			_class = gs._class,
			_create = function(n, f) {
				var C = _class("easing." + n, function(){}, true),
					p = C.prototype = new Ease();
				p.constructor = C;
				p.getRatio = f;
				return C;
			},
			_easeReg = Ease.register || function(){}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
			_wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
				var C = _class("easing."+name, {
					easeOut:new EaseOut(),
					easeIn:new EaseIn(),
					easeInOut:new EaseInOut()
				}, true);
				_easeReg(C, name);
				return C;
			},
			EasePoint = function(time, value, next) {
				this.t = time;
				this.v = value;
				if (next) {
					this.next = next;
					next.prev = this;
					this.c = next.v - value;
					this.gap = next.t - time;
				}
			},

			//Back
			_createBack = function(n, f) {
				var C = _class("easing." + n, function(overshoot) {
						this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
						this._p2 = this._p1 * 1.525;
					}, true),
					p = C.prototype = new Ease();
				p.constructor = C;
				p.getRatio = f;
				p.config = function(overshoot) {
					return new C(overshoot);
				};
				return C;
			},

			Back = _wrap("Back",
				_createBack("BackOut", function(p) {
					return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
				}),
				_createBack("BackIn", function(p) {
					return p * p * ((this._p1 + 1) * p - this._p1);
				}),
				_createBack("BackInOut", function(p) {
					return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
				})
			),


			//SlowMo
			SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
				power = (power || power === 0) ? power : 0.7;
				if (linearRatio == null) {
					linearRatio = 0.7;
				} else if (linearRatio > 1) {
					linearRatio = 1;
				}
				this._p = (linearRatio !== 1) ? power : 0;
				this._p1 = (1 - linearRatio) / 2;
				this._p2 = linearRatio;
				this._p3 = this._p1 + this._p2;
				this._calcEnd = (yoyoMode === true);
			}, true),
			p = SlowMo.prototype = new Ease(),
			SteppedEase, RoughEase, _createElastic;

		p.constructor = SlowMo;
		p.getRatio = function(p) {
			var r = p + (0.5 - p) * this._p;
			if (p < this._p1) {
				return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
			} else if (p > this._p3) {
				return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p);
			}
			return this._calcEnd ? 1 : r;
		};
		SlowMo.ease = new SlowMo(0.7, 0.7);

		p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
			return new SlowMo(linearRatio, power, yoyoMode);
		};


		//SteppedEase
		SteppedEase = _class("easing.SteppedEase", function(steps) {
				steps = steps || 1;
				this._p1 = 1 / steps;
				this._p2 = steps + 1;
			}, true);
		p = SteppedEase.prototype = new Ease();
		p.constructor = SteppedEase;
		p.getRatio = function(p) {
			if (p < 0) {
				p = 0;
			} else if (p >= 1) {
				p = 0.999999999;
			}
			return ((this._p2 * p) >> 0) * this._p1;
		};
		p.config = SteppedEase.config = function(steps) {
			return new SteppedEase(steps);
		};


		//RoughEase
		RoughEase = _class("easing.RoughEase", function(vars) {
			vars = vars || {};
			var taper = vars.taper || "none",
				a = [],
				cnt = 0,
				points = (vars.points || 20) | 0,
				i = points,
				randomize = (vars.randomize !== false),
				clamp = (vars.clamp === true),
				template = (vars.template instanceof Ease) ? vars.template : null,
				strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
				x, y, bump, invX, obj, pnt;
			while (--i > -1) {
				x = randomize ? Math.random() : (1 / points) * i;
				y = template ? template.getRatio(x) : x;
				if (taper === "none") {
					bump = strength;
				} else if (taper === "out") {
					invX = 1 - x;
					bump = invX * invX * strength;
				} else if (taper === "in") {
					bump = x * x * strength;
				} else if (x < 0.5) {  //"both" (start)
					invX = x * 2;
					bump = invX * invX * 0.5 * strength;
				} else {				//"both" (end)
					invX = (1 - x) * 2;
					bump = invX * invX * 0.5 * strength;
				}
				if (randomize) {
					y += (Math.random() * bump) - (bump * 0.5);
				} else if (i % 2) {
					y += bump * 0.5;
				} else {
					y -= bump * 0.5;
				}
				if (clamp) {
					if (y > 1) {
						y = 1;
					} else if (y < 0) {
						y = 0;
					}
				}
				a[cnt++] = {x:x, y:y};
			}
			a.sort(function(a, b) {
				return a.x - b.x;
			});

			pnt = new EasePoint(1, 1, null);
			i = points;
			while (--i > -1) {
				obj = a[i];
				pnt = new EasePoint(obj.x, obj.y, pnt);
			}

			this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
		}, true);
		p = RoughEase.prototype = new Ease();
		p.constructor = RoughEase;
		p.getRatio = function(p) {
			var pnt = this._prev;
			if (p > pnt.t) {
				while (pnt.next && p >= pnt.t) {
					pnt = pnt.next;
				}
				pnt = pnt.prev;
			} else {
				while (pnt.prev && p <= pnt.t) {
					pnt = pnt.prev;
				}
			}
			this._prev = pnt;
			return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
		};
		p.config = function(vars) {
			return new RoughEase(vars);
		};
		RoughEase.ease = new RoughEase();


		//Bounce
		_wrap("Bounce",
			_create("BounceOut", function(p) {
				if (p < 1 / 2.75) {
					return 7.5625 * p * p;
				} else if (p < 2 / 2.75) {
					return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
				} else if (p < 2.5 / 2.75) {
					return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
				}
				return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
			}),
			_create("BounceIn", function(p) {
				if ((p = 1 - p) < 1 / 2.75) {
					return 1 - (7.5625 * p * p);
				} else if (p < 2 / 2.75) {
					return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
				} else if (p < 2.5 / 2.75) {
					return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
				}
				return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
			}),
			_create("BounceInOut", function(p) {
				var invert = (p < 0.5);
				if (invert) {
					p = 1 - (p * 2);
				} else {
					p = (p * 2) - 1;
				}
				if (p < 1 / 2.75) {
					p = 7.5625 * p * p;
				} else if (p < 2 / 2.75) {
					p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
				} else if (p < 2.5 / 2.75) {
					p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
				} else {
					p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
				}
				return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
			})
		);


		//CIRC
		_wrap("Circ",
			_create("CircOut", function(p) {
				return Math.sqrt(1 - (p = p - 1) * p);
			}),
			_create("CircIn", function(p) {
				return -(Math.sqrt(1 - (p * p)) - 1);
			}),
			_create("CircInOut", function(p) {
				return ((p*=2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
			})
		);


		//Elastic
		_createElastic = function(n, f, def) {
			var C = _class("easing." + n, function(amplitude, period) {
					this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
					this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
					this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
					this._p2 = _2PI / this._p2; //precalculate to optimize
				}, true),
				p = C.prototype = new Ease();
			p.constructor = C;
			p.getRatio = f;
			p.config = function(amplitude, period) {
				return new C(amplitude, period);
			};
			return C;
		};
		_wrap("Elastic",
			_createElastic("ElasticOut", function(p) {
				return this._p1 * Math.pow(2, -10 * p) * Math.sin( (p - this._p3) * this._p2 ) + 1;
			}, 0.3),
			_createElastic("ElasticIn", function(p) {
				return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2 ));
			}, 0.3),
			_createElastic("ElasticInOut", function(p) {
				return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 *(p -= 1)) * Math.sin( (p - this._p3) * this._p2 ) * 0.5 + 1;
			}, 0.45)
		);


		//Expo
		_wrap("Expo",
			_create("ExpoOut", function(p) {
				return 1 - Math.pow(2, -10 * p);
			}),
			_create("ExpoIn", function(p) {
				return Math.pow(2, 10 * (p - 1)) - 0.001;
			}),
			_create("ExpoInOut", function(p) {
				return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
			})
		);


		//Sine
		_wrap("Sine",
			_create("SineOut", function(p) {
				return Math.sin(p * _HALF_PI);
			}),
			_create("SineIn", function(p) {
				return -Math.cos(p * _HALF_PI) + 1;
			}),
			_create("SineInOut", function(p) {
				return -0.5 * (Math.cos(Math.PI * p) - 1);
			})
		);

		_class("easing.EaseLookup", {
				find:function(s) {
					return Ease.map[s];
				}
			}, true);

		//register the non-standard eases
		_easeReg(w.SlowMo, "SlowMo", "ease,");
		_easeReg(RoughEase, "RoughEase", "ease,");
		_easeReg(SteppedEase, "SteppedEase", "ease,");

		return Back;
		
	}, true);


});

if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); } //necessary in case TweenLite was already loaded separately.











/*
 * ----------------------------------------------------------------
 * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
 * ----------------------------------------------------------------
 */
(function(window, moduleName) {

		"use strict";
		var _exports = {},
			_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
		if (_globals.TweenLite) {
			return; //in case the core set of classes is already loaded, don't instantiate twice.
		}
		var _namespace = function(ns) {
				var a = ns.split("."),
					p = _globals, i;
				for (i = 0; i < a.length; i++) {
					p[a[i]] = p = p[a[i]] || {};
				}
				return p;
			},
			gs = _namespace("com.greensock"),
			_tinyNum = 0.0000000001,
			_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++])) {}
				return b;
			},
			_emptyFunc = function() {},
			_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
				var toString = Object.prototype.toString,
					array = toString.call([]);
				return function(obj) {
					return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
				};
			}()),
			a, i, p, _ticker, _tickerActive,
			_defLookup = {},

			/**
			 * @constructor
			 * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
			 * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
			 * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
			 * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
			 *
			 * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
			 * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
			 * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
			 * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
			 * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
			 * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
			 * sandbox the banner one like:
			 *
			 * <script>
			 *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
			 * </script>
			 * <script src="js/greensock/v1.7/TweenMax.js"></script>
			 * <script>
			 *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
			 * </script>
			 * <script src="js/greensock/v1.6/TweenMax.js"></script>
			 * <script>
			 *     gs.TweenLite.to(...); //would use v1.7
			 *     TweenLite.to(...); //would use v1.6
			 * </script>
			 *
			 * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
			 * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
			 * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
			 * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
			 */
			Definition = function(ns, dependencies, func, global) {
				this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
				_defLookup[ns] = this;
				this.gsClass = null;
				this.func = func;
				var _classes = [];
				this.check = function(init) {
					var i = dependencies.length,
						missing = i,
						cur, a, n, cl, hasModule;
					while (--i > -1) {
						if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
							_classes[i] = cur.gsClass;
							missing--;
						} else if (init) {
							cur.sc.push(this);
						}
					}
					if (missing === 0 && func) {
						a = ("com.greensock." + ns).split(".");
						n = a.pop();
						cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

						//exports to multiple environments
						if (global) {
							_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
							hasModule = (typeof(module) !== "undefined" && module.exports);
							if (!hasModule && typeof(define) === "function" && define.amd){ //AMD
								define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() { return cl; });
							} else if (hasModule){ //node
								if (ns === moduleName) {
									module.exports = _exports[moduleName] = cl;
									for (i in _exports) {
										cl[i] = _exports[i];
									}
								} else if (_exports[moduleName]) {
									_exports[moduleName][n] = cl;
								}
							}
						}
						for (i = 0; i < this.sc.length; i++) {
							this.sc[i].check();
						}
					}
				};
				this.check(true);
			},

			//used to create Definition instances (which basically registers a class that has dependencies).
			_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
				return new Definition(ns, dependencies, func, global);
			},

			//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
			_class = gs._class = function(ns, func, global) {
				func = func || function() {};
				_gsDefine(ns, [], function(){ return func; }, global);
				return func;
			};

		_gsDefine.globals = _globals;



/*
 * ----------------------------------------------------------------
 * Ease
 * ----------------------------------------------------------------
 */
		var _baseParams = [0, 0, 1, 1],
			_blankArray = [],
			Ease = _class("easing.Ease", function(func, extraParams, type, power) {
				this._func = func;
				this._type = type || 0;
				this._power = power || 0;
				this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
			}, true),
			_easeMap = Ease.map = {},
			_easeReg = Ease.register = function(ease, names, types, create) {
				var na = names.split(","),
					i = na.length,
					ta = (types || "easeIn,easeOut,easeInOut").split(","),
					e, name, j, type;
				while (--i > -1) {
					name = na[i];
					e = create ? _class("easing."+name, null, true) : gs.easing[name] || {};
					j = ta.length;
					while (--j > -1) {
						type = ta[j];
						_easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
					}
				}
			};

		p = Ease.prototype;
		p._calcEnd = false;
		p.getRatio = function(p) {
			if (this._func) {
				this._params[0] = p;
				return this._func.apply(null, this._params);
			}
			var t = this._type,
				pw = this._power,
				r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
			if (pw === 1) {
				r *= r;
			} else if (pw === 2) {
				r *= r * r;
			} else if (pw === 3) {
				r *= r * r * r;
			} else if (pw === 4) {
				r *= r * r * r * r;
			}
			return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
		};

		//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
		a = ["Linear","Quad","Cubic","Quart","Quint,Strong"];
		i = a.length;
		while (--i > -1) {
			p = a[i]+",Power"+i;
			_easeReg(new Ease(null,null,1,i), p, "easeOut", true);
			_easeReg(new Ease(null,null,2,i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
			_easeReg(new Ease(null,null,3,i), p, "easeInOut");
		}
		_easeMap.linear = gs.easing.Linear.easeIn;
		_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


/*
 * ----------------------------------------------------------------
 * EventDispatcher
 * ----------------------------------------------------------------
 */
		var EventDispatcher = _class("events.EventDispatcher", function(target) {
			this._listeners = {};
			this._eventTarget = target || this;
		});
		p = EventDispatcher.prototype;

		p.addEventListener = function(type, callback, scope, useParam, priority) {
			priority = priority || 0;
			var list = this._listeners[type],
				index = 0,
				listener, i;
			if (this === _ticker && !_tickerActive) {
				_ticker.wake();
			}
			if (list == null) {
				this._listeners[type] = list = [];
			}
			i = list.length;
			while (--i > -1) {
				listener = list[i];
				if (listener.c === callback && listener.s === scope) {
					list.splice(i, 1);
				} else if (index === 0 && listener.pr < priority) {
					index = i + 1;
				}
			}
			list.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});
		};

		p.removeEventListener = function(type, callback) {
			var list = this._listeners[type], i;
			if (list) {
				i = list.length;
				while (--i > -1) {
					if (list[i].c === callback) {
						list.splice(i, 1);
						return;
					}
				}
			}
		};

		p.dispatchEvent = function(type) {
			var list = this._listeners[type],
				i, t, listener;
			if (list) {
				i = list.length;
				if (i > 1) {
					list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
				}
				t = this._eventTarget;
				while (--i > -1) {
					listener = list[i];
					if (listener) {
						if (listener.up) {
							listener.c.call(listener.s || t, {type:type, target:t});
						} else {
							listener.c.call(listener.s || t);
						}
					}
				}
			}
		};


/*
 * ----------------------------------------------------------------
 * Ticker
 * ----------------------------------------------------------------
 */
 		var _reqAnimFrame = window.requestAnimationFrame,
			_cancelAnimFrame = window.cancelAnimationFrame,
			_getTime = Date.now || function() {return new Date().getTime();},
			_lastUpdate = _getTime();

		//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
		a = ["ms","moz","webkit","o"];
		i = a.length;
		while (--i > -1 && !_reqAnimFrame) {
			_reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
			_cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
		}

		_class("Ticker", function(fps, useRAF) {
			var _self = this,
				_startTime = _getTime(),
				_useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
				_lagThreshold = 500,
				_adjustedLag = 33,
				_tickWord = "tick", //helps reduce gc burden
				_fps, _req, _id, _gap, _nextTime,
				_tick = function(manual) {
					var elapsed = _getTime() - _lastUpdate,
						overlap, dispatch;
					if (elapsed > _lagThreshold) {
						_startTime += elapsed - _adjustedLag;
					}
					_lastUpdate += elapsed;
					_self.time = (_lastUpdate - _startTime) / 1000;
					overlap = _self.time - _nextTime;
					if (!_fps || overlap > 0 || manual === true) {
						_self.frame++;
						_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
						dispatch = true;
					}
					if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
						_id = _req(_tick);
					}
					if (dispatch) {
						_self.dispatchEvent(_tickWord);
					}
				};

			EventDispatcher.call(_self);
			_self.time = _self.frame = 0;
			_self.tick = function() {
				_tick(true);
			};

			_self.lagSmoothing = function(threshold, adjustedLag) {
				_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
				_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
			};

			_self.sleep = function() {
				if (_id == null) {
					return;
				}
				if (!_useRAF || !_cancelAnimFrame) {
					clearTimeout(_id);
				} else {
					_cancelAnimFrame(_id);
				}
				_req = _emptyFunc;
				_id = null;
				if (_self === _ticker) {
					_tickerActive = false;
				}
			};

			_self.wake = function(seamless) {
				if (_id !== null) {
					_self.sleep();
				} else if (seamless) {
					_startTime += -_lastUpdate + (_lastUpdate = _getTime());
				} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
					_lastUpdate = _getTime() - _lagThreshold + 5;
				}
				_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
				if (_self === _ticker) {
					_tickerActive = true;
				}
				_tick(2);
			};

			_self.fps = function(value) {
				if (!arguments.length) {
					return _fps;
				}
				_fps = value;
				_gap = 1 / (_fps || 60);
				_nextTime = this.time + _gap;
				_self.wake();
			};

			_self.useRAF = function(value) {
				if (!arguments.length) {
					return _useRAF;
				}
				_self.sleep();
				_useRAF = value;
				_self.fps(_fps);
			};
			_self.fps(fps);

			//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
			setTimeout(function() {
				if (_useRAF === "auto" && _self.frame < 5 && document.visibilityState !== "hidden") {
					_self.useRAF(false);
				}
			}, 1500);
		});

		p = gs.Ticker.prototype = new gs.events.EventDispatcher();
		p.constructor = gs.Ticker;


/*
 * ----------------------------------------------------------------
 * Animation
 * ----------------------------------------------------------------
 */
		var Animation = _class("core.Animation", function(duration, vars) {
				this.vars = vars = vars || {};
				this._duration = this._totalDuration = duration || 0;
				this._delay = Number(vars.delay) || 0;
				this._timeScale = 1;
				this._active = (vars.immediateRender === true);
				this.data = vars.data;
				this._reversed = (vars.reversed === true);

				if (!_rootTimeline) {
					return;
				}
				if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
					_ticker.wake();
				}

				var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
				tl.add(this, tl._time);

				if (this.vars.paused) {
					this.paused(true);
				}
			});

		_ticker = Animation.ticker = new gs.Ticker();
		p = Animation.prototype;
		p._dirty = p._gc = p._initted = p._paused = false;
		p._totalTime = p._time = 0;
		p._rawPrevTime = -1;
		p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
		p._paused = false;


		//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
		var _checkTimeout = function() {
				if (_tickerActive && _getTime() - _lastUpdate > 2000) {
					_ticker.wake();
				}
				setTimeout(_checkTimeout, 2000);
			};
		_checkTimeout();


		p.play = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.reversed(false).paused(false);
		};

		p.pause = function(atTime, suppressEvents) {
			if (atTime != null) {
				this.seek(atTime, suppressEvents);
			}
			return this.paused(true);
		};

		p.resume = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.paused(false);
		};

		p.seek = function(time, suppressEvents) {
			return this.totalTime(Number(time), suppressEvents !== false);
		};

		p.restart = function(includeDelay, suppressEvents) {
			return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
		};

		p.reverse = function(from, suppressEvents) {
			if (from != null) {
				this.seek((from || this.totalDuration()), suppressEvents);
			}
			return this.reversed(true).paused(false);
		};

		p.render = function(time, suppressEvents, force) {
			//stub - we override this method in subclasses.
		};

		p.invalidate = function() {
			this._time = this._totalTime = 0;
			this._initted = this._gc = false;
			this._rawPrevTime = -1;
			if (this._gc || !this.timeline) {
				this._enabled(true);
			}
			return this;
		};

		p.isActive = function() {
			var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
				startTime = this._startTime,
				rawTime;
			return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale));
		};

		p._enabled = function (enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			this._gc = !enabled;
			this._active = this.isActive();
			if (ignoreTimeline !== true) {
				if (enabled && !this.timeline) {
					this._timeline.add(this, this._startTime - this._delay);
				} else if (!enabled && this.timeline) {
					this._timeline._remove(this, true);
				}
			}
			return false;
		};


		p._kill = function(vars, target) {
			return this._enabled(false, false);
		};

		p.kill = function(vars, target) {
			this._kill(vars, target);
			return this;
		};

		p._uncache = function(includeSelf) {
			var tween = includeSelf ? this : this.timeline;
			while (tween) {
				tween._dirty = true;
				tween = tween.timeline;
			}
			return this;
		};

		p._swapSelfInParams = function(params) {
			var i = params.length,
				copy = params.concat();
			while (--i > -1) {
				if (params[i] === "{self}") {
					copy[i] = this;
				}
			}
			return copy;
		};

		p._callback = function(type) {
			var v = this.vars,
				callback = v[type],
				params = v[type + "Params"],
				scope = v[type + "Scope"] || v.callbackScope || this,
				l = params ? params.length : 0;
			switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
				case 0: callback.call(scope); break;
				case 1: callback.call(scope, params[0]); break;
				case 2: callback.call(scope, params[0], params[1]); break;
				default: callback.apply(scope, params);
			}
		};

//----Animation getters/setters --------------------------------------------------------

		p.eventCallback = function(type, callback, params, scope) {
			if ((type || "").substr(0,2) === "on") {
				var v = this.vars;
				if (arguments.length === 1) {
					return v[type];
				}
				if (callback == null) {
					delete v[type];
				} else {
					v[type] = callback;
					v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
					v[type + "Scope"] = scope;
				}
				if (type === "onUpdate") {
					this._onUpdate = callback;
				}
			}
			return this;
		};

		p.delay = function(value) {
			if (!arguments.length) {
				return this._delay;
			}
			if (this._timeline.smoothChildTiming) {
				this.startTime( this._startTime + value - this._delay );
			}
			this._delay = value;
			return this;
		};

		p.duration = function(value) {
			if (!arguments.length) {
				this._dirty = false;
				return this._duration;
			}
			this._duration = this._totalDuration = value;
			this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
			if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
				this.totalTime(this._totalTime * (value / this._duration), true);
			}
			return this;
		};

		p.totalDuration = function(value) {
			this._dirty = false;
			return (!arguments.length) ? this._totalDuration : this.duration(value);
		};

		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
		};

		p.totalTime = function(time, suppressEvents, uncapped) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (!arguments.length) {
				return this._totalTime;
			}
			if (this._timeline) {
				if (time < 0 && !uncapped) {
					time += this.totalDuration();
				}
				if (this._timeline.smoothChildTiming) {
					if (this._dirty) {
						this.totalDuration();
					}
					var totalDuration = this._totalDuration,
						tl = this._timeline;
					if (time > totalDuration && !uncapped) {
						time = totalDuration;
					}
					this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
					if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
						this._uncache(false);
					}
					//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
					if (tl._timeline) {
						while (tl._timeline) {
							if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
								tl.totalTime(tl._totalTime, true);
							}
							tl = tl._timeline;
						}
					}
				}
				if (this._gc) {
					this._enabled(true, false);
				}
				if (this._totalTime !== time || this._duration === 0) {
					if (_lazyTweens.length) {
						_lazyRender();
					}
					this.render(time, suppressEvents, false);
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
						_lazyRender();
					}
				}
			}
			return this;
		};

		p.progress = p.totalProgress = function(value, suppressEvents) {
			var duration = this.duration();
			return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
		};

		p.startTime = function(value) {
			if (!arguments.length) {
				return this._startTime;
			}
			if (value !== this._startTime) {
				this._startTime = value;
				if (this.timeline) if (this.timeline._sortChildren) {
					this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			return this;
		};

		p.endTime = function(includeRepeats) {
			return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
		};

		p.timeScale = function(value) {
			if (!arguments.length) {
				return this._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			if (this._timeline && this._timeline.smoothChildTiming) {
				var pauseTime = this._pauseTime,
					t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
				this._startTime = t - ((t - this._startTime) * this._timeScale / value);
			}
			this._timeScale = value;
			return this._uncache(false);
		};

		p.reversed = function(value) {
			if (!arguments.length) {
				return this._reversed;
			}
			if (value != this._reversed) {
				this._reversed = value;
				this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
			}
			return this;
		};

		p.paused = function(value) {
			if (!arguments.length) {
				return this._paused;
			}
			var tl = this._timeline,
				raw, elapsed;
			if (value != this._paused) if (tl) {
				if (!_tickerActive && !value) {
					_ticker.wake();
				}
				raw = tl.rawTime();
				elapsed = raw - this._pauseTime;
				if (!value && tl.smoothChildTiming) {
					this._startTime += elapsed;
					this._uncache(false);
				}
				this._pauseTime = value ? raw : null;
				this._paused = value;
				this._active = this.isActive();
				if (!value && elapsed !== 0 && this._initted && this.duration()) {
					raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
					this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
				}
			}
			if (this._gc && !value) {
				this._enabled(true, false);
			}
			return this;
		};


/*
 * ----------------------------------------------------------------
 * SimpleTimeline
 * ----------------------------------------------------------------
 */
		var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
			Animation.call(this, 0, vars);
			this.autoRemoveChildren = this.smoothChildTiming = true;
		});

		p = SimpleTimeline.prototype = new Animation();
		p.constructor = SimpleTimeline;
		p.kill()._gc = false;
		p._first = p._last = p._recent = null;
		p._sortChildren = false;

		p.add = p.insert = function(child, position, align, stagger) {
			var prevTween, st;
			child._startTime = Number(position || 0) + child._delay;
			if (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
				child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
			}
			if (child.timeline) {
				child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
			}
			child.timeline = child._timeline = this;
			if (child._gc) {
				child._enabled(true, true);
			}
			prevTween = this._last;
			if (this._sortChildren) {
				st = child._startTime;
				while (prevTween && prevTween._startTime > st) {
					prevTween = prevTween._prev;
				}
			}
			if (prevTween) {
				child._next = prevTween._next;
				prevTween._next = child;
			} else {
				child._next = this._first;
				this._first = child;
			}
			if (child._next) {
				child._next._prev = child;
			} else {
				this._last = child;
			}
			child._prev = prevTween;
			this._recent = child;
			if (this._timeline) {
				this._uncache(true);
			}
			return this;
		};

		p._remove = function(tween, skipDisable) {
			if (tween.timeline === this) {
				if (!skipDisable) {
					tween._enabled(false, true);
				}

				if (tween._prev) {
					tween._prev._next = tween._next;
				} else if (this._first === tween) {
					this._first = tween._next;
				}
				if (tween._next) {
					tween._next._prev = tween._prev;
				} else if (this._last === tween) {
					this._last = tween._prev;
				}
				tween._next = tween._prev = tween.timeline = null;
				if (tween === this._recent) {
					this._recent = this._last;
				}

				if (this._timeline) {
					this._uncache(true);
				}
			}
			return this;
		};

		p.render = function(time, suppressEvents, force) {
			var tween = this._first,
				next;
			this._totalTime = this._time = this._rawPrevTime = time;
			while (tween) {
				next = tween._next; //record it here because the value could change after rendering...
				if (tween._active || (time >= tween._startTime && !tween._paused)) {
					if (!tween._reversed) {
						tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
					} else {
						tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
					}
				}
				tween = next;
			}
		};

		p.rawTime = function() {
			if (!_tickerActive) {
				_ticker.wake();
			}
			return this._totalTime;
		};

/*
 * ----------------------------------------------------------------
 * TweenLite
 * ----------------------------------------------------------------
 */
		var TweenLite = _class("TweenLite", function(target, duration, vars) {
				Animation.call(this, duration, vars);
				this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

				if (target == null) {
					throw "Cannot tween a null target.";
				}

				this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

				var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
					overwrite = this.vars.overwrite,
					i, targ, targets;

				this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

				if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
					this._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
					this._propLookup = [];
					this._siblings = [];
					for (i = 0; i < targets.length; i++) {
						targ = targets[i];
						if (!targ) {
							targets.splice(i--, 1);
							continue;
						} else if (typeof(targ) === "string") {
							targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
							if (typeof(targ) === "string") {
								targets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
							}
							continue;
						} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
							targets.splice(i--, 1);
							this._targets = targets = targets.concat(_slice(targ));
							continue;
						}
						this._siblings[i] = _register(targ, this, false);
						if (overwrite === 1) if (this._siblings[i].length > 1) {
							_applyOverwrite(targ, this, null, 1, this._siblings[i]);
						}
					}

				} else {
					this._propLookup = {};
					this._siblings = _register(target, this, false);
					if (overwrite === 1) if (this._siblings.length > 1) {
						_applyOverwrite(target, this, null, 1, this._siblings);
					}
				}
				if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
					this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
					this.render(Math.min(0, -this._delay)); //in case delay is negative
				}
			}, true),
			_isSelector = function(v) {
				return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
			},
			_autoCSS = function(vars, target) {
				var css = {},
					p;
				for (p in vars) {
					if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
						css[p] = vars[p];
						delete vars[p];
					}
				}
				vars.css = css;
			};

		p = TweenLite.prototype = new Animation();
		p.constructor = TweenLite;
		p.kill()._gc = false;

//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

		p.ratio = 0;
		p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
		p._notifyPluginsOfEnabled = p._lazy = false;

		TweenLite.version = "1.19.0";
		TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
		TweenLite.defaultOverwrite = "auto";
		TweenLite.ticker = _ticker;
		TweenLite.autoSleep = 120;
		TweenLite.lagSmoothing = function(threshold, adjustedLag) {
			_ticker.lagSmoothing(threshold, adjustedLag);
		};

		TweenLite.selector = window.$ || window.jQuery || function(e) {
			var selector = window.$ || window.jQuery;
			if (selector) {
				TweenLite.selector = selector;
				return selector(e);
			}
			return (typeof(document) === "undefined") ? e : (document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
		};

		var _lazyTweens = [],
			_lazyLookup = {},
			_numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
			//_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
			_setRatio = function(v) {
				var pt = this._firstPT,
					min = 0.000001,
					val;
				while (pt) {
					val = !pt.blob ? pt.c * v + pt.s : v ? this.join("") : this.start;
					if (pt.m) {
						val = pt.m(val, this._target || pt.t);
					} else if (val < min) if (val > -min) { //prevents issues with converting very small numbers to strings in the browser
						val = 0;
					}
					if (!pt.f) {
						pt.t[pt.p] = val;
					} else if (pt.fp) {
						pt.t[pt.p](pt.fp, val);
					} else {
						pt.t[pt.p](val);
					}
					pt = pt._next;
				}
			},
			//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
			_blobDif = function(start, end, filter, pt) {
				var a = [start, end],
					charIndex = 0,
					s = "",
					color = 0,
					startNums, endNums, num, i, l, nonNumbers, currentNum;
				a.start = start;
				if (filter) {
					filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
					start = a[0];
					end = a[1];
				}
				a.length = 0;
				startNums = start.match(_numbersExp) || [];
				endNums = end.match(_numbersExp) || [];
				if (pt) {
					pt._next = null;
					pt.blob = 1;
					a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
				}
				l = endNums.length;
				for (i = 0; i < l; i++) {
					currentNum = endNums[i];
					nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);
					s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
					charIndex += nonNumbers.length;
					if (color) { //sense rgba() values and round them.
						color = (color + 1) % 5;
					} else if (nonNumbers.substr(-5) === "rgba(") {
						color = 1;
					}
					if (currentNum === startNums[i] || startNums.length <= i) {
						s += currentNum;
					} else {
						if (s) {
							a.push(s);
							s = "";
						}
						num = parseFloat(startNums[i]);
						a.push(num);
						a._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};
						//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
					}
					charIndex += currentNum.length;
				}
				s += end.substr(charIndex);
				if (s) {
					a.push(s);
				}
				a.setRatio = _setRatio;
				return a;
			},
			//note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
			_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
				if (typeof(end) === "function") {
					end = end(index || 0, target);
				}
				var s = (start === "get") ? target[prop] : start,
					type = typeof(target[prop]),
					isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
					pt = {t:target, p:prop, s:s, f:(type === "function"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},
					blob, getterName;
				if (type !== "number") {
					if (type === "function" && start === "get") {
						getterName = ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3));
						pt.s = s = funcParam ? target[getterName](funcParam) : target[getterName]();
					}
					if (typeof(s) === "string" && (funcParam || isNaN(s))) {
						//a blob (string that has multiple numbers in it)
						pt.fp = funcParam;
						blob = _blobDif(s, end, stringFilter || TweenLite.defaultStringFilter, pt);
						pt = {t:blob, p:"setRatio", s:0, c:1, f:2, pg:0, n:overwriteProp || prop, pr:0, m:0}; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
					} else if (!isRelative) {
						pt.s = parseFloat(s);
						pt.c = (parseFloat(end) - pt.s) || 0;
					}
				}
				if (pt.c) { //only add it to the linked list if there's a change.
					if ((pt._next = this._firstPT)) {
						pt._next._prev = pt;
					}
					this._firstPT = pt;
					return pt;
				}
			},
			_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
			_plugins = TweenLite._plugins = {},
			_tweenLookup = _internals.tweenLookup = {},
			_tweenLookupNum = 0,
			_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1},
			_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, "true":1, "false":0},
			_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
			_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
			_nextGCFrame = 30,
			_lazyRender = _internals.lazyRender = function() {
				var i = _lazyTweens.length,
					tween;
				_lazyLookup = {};
				while (--i > -1) {
					tween = _lazyTweens[i];
					if (tween && tween._lazy !== false) {
						tween.render(tween._lazy[0], tween._lazy[1], true);
						tween._lazy = false;
					}
				}
				_lazyTweens.length = 0;
			};

		_rootTimeline._startTime = _ticker.time;
		_rootFramesTimeline._startTime = _ticker.frame;
		_rootTimeline._active = _rootFramesTimeline._active = true;
		setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

		Animation._updateRoot = TweenLite.render = function() {
				var i, a, p;
				if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
					_lazyRender();
				}
				_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
				_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
				if (_lazyTweens.length) {
					_lazyRender();
				}
				if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
					_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
					for (p in _tweenLookup) {
						a = _tweenLookup[p].tweens;
						i = a.length;
						while (--i > -1) {
							if (a[i]._gc) {
								a.splice(i, 1);
							}
						}
						if (a.length === 0) {
							delete _tweenLookup[p];
						}
					}
					//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
					p = _rootTimeline._first;
					if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
						while (p && p._paused) {
							p = p._next;
						}
						if (!p) {
							_ticker.sleep();
						}
					}
				}
			};

		_ticker.addEventListener("tick", Animation._updateRoot);

		var _register = function(target, tween, scrub) {
				var id = target._gsTweenID, a, i;
				if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
					_tweenLookup[id] = {target:target, tweens:[]};
				}
				if (tween) {
					a = _tweenLookup[id].tweens;
					a[(i = a.length)] = tween;
					if (scrub) {
						while (--i > -1) {
							if (a[i] === tween) {
								a.splice(i, 1);
							}
						}
					}
				}
				return _tweenLookup[id].tweens;
			},
			_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
				var func = overwrittenTween.vars.onOverwrite, r1, r2;
				if (func) {
					r1 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				func = TweenLite.onOverwrite;
				if (func) {
					r2 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				return (r1 !== false && r2 !== false);
			},
			_applyOverwrite = function(target, tween, props, mode, siblings) {
				var i, changed, curTween, l;
				if (mode === 1 || mode >= 4) {
					l = siblings.length;
					for (i = 0; i < l; i++) {
						if ((curTween = siblings[i]) !== tween) {
							if (!curTween._gc) {
								if (curTween._kill(null, target, tween)) {
									changed = true;
								}
							}
						} else if (mode === 5) {
							break;
						}
					}
					return changed;
				}
				//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
				var startTime = tween._startTime + _tinyNum,
					overlaps = [],
					oCount = 0,
					zeroDur = (tween._duration === 0),
					globalStart;
				i = siblings.length;
				while (--i > -1) {
					if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
						//ignore
					} else if (curTween._timeline !== tween._timeline) {
						globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
						if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
							overlaps[oCount++] = curTween;
						}
					} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
						overlaps[oCount++] = curTween;
					}
				}

				i = oCount;
				while (--i > -1) {
					curTween = overlaps[i];
					if (mode === 2) if (curTween._kill(props, target, tween)) {
						changed = true;
					}
					if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
						if (mode !== 2 && !_onOverwrite(curTween, tween)) {
							continue;
						}
						if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
							changed = true;
						}
					}
				}
				return changed;
			},
			_checkOverlap = function(tween, reference, zeroDur) {
				var tl = tween._timeline,
					ts = tl._timeScale,
					t = tween._startTime;
				while (tl._timeline) {
					t += tl._startTime;
					ts *= tl._timeScale;
					if (tl._paused) {
						return -100;
					}
					tl = tl._timeline;
				}
				t /= ts;
				return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
			};


//---- TweenLite instance methods -----------------------------------------------------------------------------

		p._init = function() {
			var v = this.vars,
				op = this._overwrittenProps,
				dur = this._duration,
				immediate = !!v.immediateRender,
				ease = v.ease,
				i, initPlugins, pt, p, startVars, l;
			if (v.startAt) {
				if (this._startAt) {
					this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
					this._startAt.kill();
				}
				startVars = {};
				for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
					startVars[p] = v.startAt[p];
				}
				startVars.overwrite = false;
				startVars.immediateRender = true;
				startVars.lazy = (immediate && v.lazy !== false);
				startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
				this._startAt = TweenLite.to(this.target, 0, startVars);
				if (immediate) {
					if (this._time > 0) {
						this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
					} else if (dur !== 0) {
						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
					}
				}
			} else if (v.runBackwards && dur !== 0) {
				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
				if (this._startAt) {
					this._startAt.render(-1, true);
					this._startAt.kill();
					this._startAt = null;
				} else {
					if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
						immediate = false;
					}
					pt = {};
					for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
						if (!_reservedProps[p] || p === "autoCSS") {
							pt[p] = v[p];
						}
					}
					pt.overwrite = 0;
					pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
					pt.lazy = (immediate && v.lazy !== false);
					pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
					this._startAt = TweenLite.to(this.target, 0, pt);
					if (!immediate) {
						this._startAt._init(); //ensures that the initial values are recorded
						this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
						if (this.vars.immediateRender) {
							this._startAt = null;
						}
					} else if (this._time === 0) {
						return;
					}
				}
			}
			this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
			if (v.easeParams instanceof Array && ease.config) {
				this._ease = ease.config.apply(ease, v.easeParams);
			}
			this._easeType = this._ease._type;
			this._easePower = this._ease._power;
			this._firstPT = null;

			if (this._targets) {
				l = this._targets.length;
				for (i = 0; i < l; i++) {
					if ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {
						initPlugins = true;
					}
				}
			} else {
				initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
			}

			if (initPlugins) {
				TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
			}
			if (op) if (!this._firstPT) if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
				this._enabled(false, false);
			}
			if (v.runBackwards) {
				pt = this._firstPT;
				while (pt) {
					pt.s += pt.c;
					pt.c = -pt.c;
					pt = pt._next;
				}
			}
			this._onUpdate = v.onUpdate;
			this._initted = true;
		};

		p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
			var p, i, initPlugins, plugin, pt, v;
			if (target == null) {
				return false;
			}

			if (_lazyLookup[target._gsTweenID]) {
				_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
			}

			if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
				_autoCSS(this.vars, target);
			}
			for (p in this.vars) {
				v = this.vars[p];
				if (_reservedProps[p]) {
					if (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join("").indexOf("{self}") !== -1) {
						this.vars[p] = v = this._swapSelfInParams(v, this);
					}

				} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

					//t - target 		[object]
					//p - property 		[string]
					//s - start			[number]
					//c - change		[number]
					//f - isFunction	[boolean]
					//n - name			[string]
					//pg - isPlugin 	[boolean]
					//pr - priority		[number]
					//m - mod           [function | 0]
					this._firstPT = pt = {_next:this._firstPT, t:plugin, p:"setRatio", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};
					i = plugin._overwriteProps.length;
					while (--i > -1) {
						propLookup[plugin._overwriteProps[i]] = this._firstPT;
					}
					if (plugin._priority || plugin._onInitAllProps) {
						initPlugins = true;
					}
					if (plugin._onDisable || plugin._onEnable) {
						this._notifyPluginsOfEnabled = true;
					}
					if (pt._next) {
						pt._next._prev = pt;
					}

				} else {
					propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
				}
			}

			if (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
				return this._initProps(target, propLookup, siblings, overwrittenProps, index);
			}
			if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
				this._kill(propLookup, target);
				return this._initProps(target, propLookup, siblings, overwrittenProps, index);
			}
			if (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
				_lazyLookup[target._gsTweenID] = true;
			}
			return initPlugins;
		};

		p.render = function(time, suppressEvents, force) {
			var prevTime = this._time,
				duration = this._duration,
				prevRawPrevTime = this._rawPrevTime,
				isComplete, callback, pt, rawPrevTime;
			if (time >= duration - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = this._time = duration;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				if (!this._reversed ) {
					isComplete = true;
					callback = "onComplete";
					force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;

				if (this._easeType) {
					var r = time / duration, type = this._easeType, pow = this._easePower;
					if (type === 1 || (type === 3 && r >= 0.5)) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - (r / 2);
					}

				} else {
					this.ratio = this._ease.getRatio(time / duration);
				}
			}

			if (this._time === prevTime && !force) {
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
					this._time = this._totalTime = prevTime;
					this._rawPrevTime = prevRawPrevTime;
					_lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd) {
					this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
				}
			}
			if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
				this._lazy = false;
			}
			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTime === 0) {
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}

			if (this._onUpdate) {
				if (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {
					this._callback("onUpdate");
				}
			}
			if (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};

		p._kill = function(vars, target, overwritingTween) {
			if (vars === "all") {
				vars = null;
			}
			if (vars == null) if (target == null || target === this.target) {
				this._lazy = false;
				return this._enabled(false, false);
			}
			target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
			var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
				i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				while (--i > -1) {
					if (this._kill(vars, target[i], overwritingTween)) {
						changed = true;
					}
				}
			} else {
				if (this._targets) {
					i = this._targets.length;
					while (--i > -1) {
						if (target === this._targets[i]) {
							propLookup = this._propLookup[i] || {};
							this._overwrittenProps = this._overwrittenProps || [];
							overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
							break;
						}
					}
				} else if (target !== this.target) {
					return false;
				} else {
					propLookup = this._propLookup;
					overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
				}

				if (propLookup) {
					killProps = vars || propLookup;
					record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
					if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
						for (p in killProps) {
							if (propLookup[p]) {
								if (!killed) {
									killed = [];
								}
								killed.push(p);
							}
						}
						if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
							return false;
						}
					}

					for (p in killProps) {
						if ((pt = propLookup[p])) {
							if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
								if (pt.f) {
									pt.t[pt.p](pt.s);
								} else {
									pt.t[pt.p] = pt.s;
								}
								changed = true;
							}
							if (pt.pg && pt.t._kill(killProps)) {
								changed = true; //some plugins need to be notified so they can perform cleanup tasks first
							}
							if (!pt.pg || pt.t._overwriteProps.length === 0) {
								if (pt._prev) {
									pt._prev._next = pt._next;
								} else if (pt === this._firstPT) {
									this._firstPT = pt._next;
								}
								if (pt._next) {
									pt._next._prev = pt._prev;
								}
								pt._next = pt._prev = null;
							}
							delete propLookup[p];
						}
						if (record) {
							overwrittenProps[p] = 1;
						}
					}
					if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
						this._enabled(false, false);
					}
				}
			}
			return changed;
		};

		p.invalidate = function() {
			if (this._notifyPluginsOfEnabled) {
				TweenLite._onPluginEvent("_onDisable", this);
			}
			this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
			this._notifyPluginsOfEnabled = this._active = this._lazy = false;
			this._propLookup = (this._targets) ? {} : [];
			Animation.prototype.invalidate.call(this);
			if (this.vars.immediateRender) {
				this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
				this.render(Math.min(0, -this._delay)); //in case delay is negative.
			}
			return this;
		};

		p._enabled = function(enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (enabled && this._gc) {
				var targets = this._targets,
					i;
				if (targets) {
					i = targets.length;
					while (--i > -1) {
						this._siblings[i] = _register(targets[i], this, true);
					}
				} else {
					this._siblings = _register(this.target, this, true);
				}
			}
			Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
			if (this._notifyPluginsOfEnabled) if (this._firstPT) {
				return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
			}
			return false;
		};


//----TweenLite static methods -----------------------------------------------------

		TweenLite.to = function(target, duration, vars) {
			return new TweenLite(target, duration, vars);
		};

		TweenLite.from = function(target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return new TweenLite(target, duration, vars);
		};

		TweenLite.fromTo = function(target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return new TweenLite(target, duration, toVars);
		};

		TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
			return new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});
		};

		TweenLite.set = function(target, vars) {
			return new TweenLite(target, 0, vars);
		};

		TweenLite.getTweensOf = function(target, onlyActive) {
			if (target == null) { return []; }
			target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
			var i, a, j, t;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				a = [];
				while (--i > -1) {
					a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
				}
				i = a.length;
				//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
				while (--i > -1) {
					t = a[i];
					j = i;
					while (--j > -1) {
						if (t === a[j]) {
							a.splice(i, 1);
						}
					}
				}
			} else {
				a = _register(target).concat();
				i = a.length;
				while (--i > -1) {
					if (a[i]._gc || (onlyActive && !a[i].isActive())) {
						a.splice(i, 1);
					}
				}
			}
			return a;
		};

		TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
			if (typeof(onlyActive) === "object") {
				vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
				onlyActive = false;
			}
			var a = TweenLite.getTweensOf(target, onlyActive),
				i = a.length;
			while (--i > -1) {
				a[i]._kill(vars, target);
			}
		};



/*
 * ----------------------------------------------------------------
 * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
 * ----------------------------------------------------------------
 */
		var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
					this._overwriteProps = (props || "").split(",");
					this._propName = this._overwriteProps[0];
					this._priority = priority || 0;
					this._super = TweenPlugin.prototype;
				}, true);

		p = TweenPlugin.prototype;
		TweenPlugin.version = "1.19.0";
		TweenPlugin.API = 2;
		p._firstPT = null;
		p._addTween = _addPropTween;
		p.setRatio = _setRatio;

		p._kill = function(lookup) {
			var a = this._overwriteProps,
				pt = this._firstPT,
				i;
			if (lookup[this._propName] != null) {
				this._overwriteProps = [];
			} else {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i]] != null) {
						a.splice(i, 1);
					}
				}
			}
			while (pt) {
				if (lookup[pt.n] != null) {
					if (pt._next) {
						pt._next._prev = pt._prev;
					}
					if (pt._prev) {
						pt._prev._next = pt._next;
						pt._prev = null;
					} else if (this._firstPT === pt) {
						this._firstPT = pt._next;
					}
				}
				pt = pt._next;
			}
			return false;
		};

		p._mod = p._roundProps = function(lookup) {
			var pt = this._firstPT,
				val;
			while (pt) {
				val = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + "_").join("") ]);
				if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
					if (pt.f === 2) {
						pt.t._applyPT.m = val;
					} else {
						pt.m = val;
					}
				}
				pt = pt._next;
			}
		};

		TweenLite._onPluginEvent = function(type, tween) {
			var pt = tween._firstPT,
				changed, pt2, first, last, next;
			if (type === "_onInitAllProps") {
				//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				pt = tween._firstPT = first;
			}
			while (pt) {
				if (pt.pg) if (typeof(pt.t[type]) === "function") if (pt.t[type]()) {
					changed = true;
				}
				pt = pt._next;
			}
			return changed;
		};

		TweenPlugin.activate = function(plugins) {
			var i = plugins.length;
			while (--i > -1) {
				if (plugins[i].API === TweenPlugin.API) {
					_plugins[(new plugins[i]())._propName] = plugins[i];
				}
			}
			return true;
		};

		//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
		_gsDefine.plugin = function(config) {
			if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
			var propName = config.propName,
				priority = config.priority || 0,
				overwriteProps = config.overwriteProps,
				map = {init:"_onInitTween", set:"setRatio", kill:"_kill", round:"_mod", mod:"_mod", initAll:"_onInitAllProps"},
				Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
					function() {
						TweenPlugin.call(this, propName, priority);
						this._overwriteProps = overwriteProps || [];
					}, (config.global === true)),
				p = Plugin.prototype = new TweenPlugin(propName),
				prop;
			p.constructor = Plugin;
			Plugin.API = config.API;
			for (prop in map) {
				if (typeof(config[prop]) === "function") {
					p[map[prop]] = config[prop];
				}
			}
			Plugin.version = config.version;
			TweenPlugin.activate([Plugin]);
			return Plugin;
		};


		//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
		a = window._gsQueue;
		if (a) {
			for (i = 0; i < a.length; i++) {
				a[i]();
			}
			for (p in _defLookup) {
				if (!_defLookup[p].func) {
					window.console.log("GSAP encountered missing dependency: " + p);
				}
			}
		}

		_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

})((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenMax");
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],36:[function(require,module,exports){
/*
 * A fast javascript implementation of simplex noise by Jonas Wagner
 *
 * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
 * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 *
 *
 * Copyright (C) 2012 Jonas Wagner
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
(function () {
"use strict";

var F2 = 0.5 * (Math.sqrt(3.0) - 1.0),
    G2 = (3.0 - Math.sqrt(3.0)) / 6.0,
    F3 = 1.0 / 3.0,
    G3 = 1.0 / 6.0,
    F4 = (Math.sqrt(5.0) - 1.0) / 4.0,
    G4 = (5.0 - Math.sqrt(5.0)) / 20.0;


function SimplexNoise(random) {
    if (!random) random = Math.random;
    this.p = new Uint8Array(256);
    this.perm = new Uint8Array(512);
    this.permMod12 = new Uint8Array(512);
    for (var i = 0; i < 256; i++) {
        this.p[i] = random() * 256;
    }
    for (i = 0; i < 512; i++) {
        this.perm[i] = this.p[i & 255];
        this.permMod12[i] = this.perm[i] % 12;
    }

}
SimplexNoise.prototype = {
    grad3: new Float32Array([1, 1, 0,
                            - 1, 1, 0,
                            1, - 1, 0,

                            - 1, - 1, 0,
                            1, 0, 1,
                            - 1, 0, 1,

                            1, 0, - 1,
                            - 1, 0, - 1,
                            0, 1, 1,

                            0, - 1, 1,
                            0, 1, - 1,
                            0, - 1, - 1]),
    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, - 1, 0, 1, - 1, 1, 0, 1, - 1, - 1,
                            0, - 1, 1, 1, 0, - 1, 1, - 1, 0, - 1, - 1, 1, 0, - 1, - 1, - 1,
                            1, 0, 1, 1, 1, 0, 1, - 1, 1, 0, - 1, 1, 1, 0, - 1, - 1,
                            - 1, 0, 1, 1, - 1, 0, 1, - 1, - 1, 0, - 1, 1, - 1, 0, - 1, - 1,
                            1, 1, 0, 1, 1, 1, 0, - 1, 1, - 1, 0, 1, 1, - 1, 0, - 1,
                            - 1, 1, 0, 1, - 1, 1, 0, - 1, - 1, - 1, 0, 1, - 1, - 1, 0, - 1,
                            1, 1, 1, 0, 1, 1, - 1, 0, 1, - 1, 1, 0, 1, - 1, - 1, 0,
                            - 1, 1, 1, 0, - 1, 1, - 1, 0, - 1, - 1, 1, 0, - 1, - 1, - 1, 0]),
    noise2D: function (xin, yin) {
        var permMod12 = this.permMod12,
            perm = this.perm,
            grad3 = this.grad3;
        var n0=0, n1=0, n2=0; // Noise contributions from the three corners
        // Skew the input space to determine which simplex cell we're in
        var s = (xin + yin) * F2; // Hairy factor for 2D
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var t = (i + j) * G2;
        var X0 = i - t; // Unskew the cell origin back to (x,y) space
        var Y0 = j - t;
        var x0 = xin - X0; // The x,y distances from the cell origin
        var y0 = yin - Y0;
        // For the 2D case, the simplex shape is an equilateral triangle.
        // Determine which simplex we are in.
        var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
        if (x0 > y0) {
            i1 = 1;
            j1 = 0;
        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
        else {
            i1 = 0;
            j1 = 1;
        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
        // c = (3-sqrt(3))/6
        var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
        var y1 = y0 - j1 + G2;
        var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
        var y2 = y0 - 1.0 + 2.0 * G2;
        // Work out the hashed gradient indices of the three simplex corners
        var ii = i & 255;
        var jj = j & 255;
        // Calculate the contribution from the three corners
        var t0 = 0.5 - x0 * x0 - y0 * y0;
        if (t0 >= 0) {
            var gi0 = permMod12[ii + perm[jj]] * 3;
            t0 *= t0;
            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient
        }
        var t1 = 0.5 - x1 * x1 - y1 * y1;
        if (t1 >= 0) {
            var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;
            t1 *= t1;
            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);
        }
        var t2 = 0.5 - x2 * x2 - y2 * y2;
        if (t2 >= 0) {
            var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;
            t2 *= t2;
            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to return values in the interval [-1,1].
        return 70.0 * (n0 + n1 + n2);
    },
    // 3D simplex noise
    noise3D: function (xin, yin, zin) {
        var permMod12 = this.permMod12,
            perm = this.perm,
            grad3 = this.grad3;
        var n0, n1, n2, n3; // Noise contributions from the four corners
        // Skew the input space to determine which simplex cell we're in
        var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var k = Math.floor(zin + s);
        var t = (i + j + k) * G3;
        var X0 = i - t; // Unskew the cell origin back to (x,y,z) space
        var Y0 = j - t;
        var Z0 = k - t;
        var x0 = xin - X0; // The x,y,z distances from the cell origin
        var y0 = yin - Y0;
        var z0 = zin - Z0;
        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
        // Determine which simplex we are in.
        var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
        var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
        if (x0 >= y0) {
            if (y0 >= z0) {
                i1 = 1;
                j1 = 0;
                k1 = 0;
                i2 = 1;
                j2 = 1;
                k2 = 0;
            } // X Y Z order
            else if (x0 >= z0) {
                i1 = 1;
                j1 = 0;
                k1 = 0;
                i2 = 1;
                j2 = 0;
                k2 = 1;
            } // X Z Y order
            else {
                i1 = 0;
                j1 = 0;
                k1 = 1;
                i2 = 1;
                j2 = 0;
                k2 = 1;
            } // Z X Y order
        }
        else { // x0<y0
            if (y0 < z0) {
                i1 = 0;
                j1 = 0;
                k1 = 1;
                i2 = 0;
                j2 = 1;
                k2 = 1;
            } // Z Y X order
            else if (x0 < z0) {
                i1 = 0;
                j1 = 1;
                k1 = 0;
                i2 = 0;
                j2 = 1;
                k2 = 1;
            } // Y Z X order
            else {
                i1 = 0;
                j1 = 1;
                k1 = 0;
                i2 = 1;
                j2 = 1;
                k2 = 0;
            } // Y X Z order
        }
        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
        // c = 1/6.
        var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
        var y1 = y0 - j1 + G3;
        var z1 = z0 - k1 + G3;
        var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
        var y2 = y0 - j2 + 2.0 * G3;
        var z2 = z0 - k2 + 2.0 * G3;
        var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
        var y3 = y0 - 1.0 + 3.0 * G3;
        var z3 = z0 - 1.0 + 3.0 * G3;
        // Work out the hashed gradient indices of the four simplex corners
        var ii = i & 255;
        var jj = j & 255;
        var kk = k & 255;
        // Calculate the contribution from the four corners
        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
        if (t0 < 0) n0 = 0.0;
        else {
            var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;
            t0 *= t0;
            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);
        }
        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
        if (t1 < 0) n1 = 0.0;
        else {
            var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;
            t1 *= t1;
            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);
        }
        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
        if (t2 < 0) n2 = 0.0;
        else {
            var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;
            t2 *= t2;
            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);
        }
        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
        if (t3 < 0) n3 = 0.0;
        else {
            var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;
            t3 *= t3;
            n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to stay just inside [-1,1]
        return 32.0 * (n0 + n1 + n2 + n3);
    },
    // 4D simplex noise, better simplex rank ordering method 2012-03-09
    noise4D: function (x, y, z, w) {
        var permMod12 = this.permMod12,
            perm = this.perm,
            grad4 = this.grad4;

        var n0, n1, n2, n3, n4; // Noise contributions from the five corners
        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
        var s = (x + y + z + w) * F4; // Factor for 4D skewing
        var i = Math.floor(x + s);
        var j = Math.floor(y + s);
        var k = Math.floor(z + s);
        var l = Math.floor(w + s);
        var t = (i + j + k + l) * G4; // Factor for 4D unskewing
        var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
        var Y0 = j - t;
        var Z0 = k - t;
        var W0 = l - t;
        var x0 = x - X0; // The x,y,z,w distances from the cell origin
        var y0 = y - Y0;
        var z0 = z - Z0;
        var w0 = w - W0;
        // For the 4D case, the simplex is a 4D shape I won't even try to describe.
        // To find out which of the 24 possible simplices we're in, we need to
        // determine the magnitude ordering of x0, y0, z0 and w0.
        // Six pair-wise comparisons are performed between each possible pair
        // of the four coordinates, and the results are used to rank the numbers.
        var rankx = 0;
        var ranky = 0;
        var rankz = 0;
        var rankw = 0;
        if (x0 > y0) rankx++;
        else ranky++;
        if (x0 > z0) rankx++;
        else rankz++;
        if (x0 > w0) rankx++;
        else rankw++;
        if (y0 > z0) ranky++;
        else rankz++;
        if (y0 > w0) ranky++;
        else rankw++;
        if (z0 > w0) rankz++;
        else rankw++;
        var i1, j1, k1, l1; // The integer offsets for the second simplex corner
        var i2, j2, k2, l2; // The integer offsets for the third simplex corner
        var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
        // impossible. Only the 24 indices which have non-zero entries make any sense.
        // We use a thresholding to set the coordinates in turn from the largest magnitude.
        // Rank 3 denotes the largest coordinate.
        i1 = rankx >= 3 ? 1 : 0;
        j1 = ranky >= 3 ? 1 : 0;
        k1 = rankz >= 3 ? 1 : 0;
        l1 = rankw >= 3 ? 1 : 0;
        // Rank 2 denotes the second largest coordinate.
        i2 = rankx >= 2 ? 1 : 0;
        j2 = ranky >= 2 ? 1 : 0;
        k2 = rankz >= 2 ? 1 : 0;
        l2 = rankw >= 2 ? 1 : 0;
        // Rank 1 denotes the second smallest coordinate.
        i3 = rankx >= 1 ? 1 : 0;
        j3 = ranky >= 1 ? 1 : 0;
        k3 = rankz >= 1 ? 1 : 0;
        l3 = rankw >= 1 ? 1 : 0;
        // The fifth corner has all coordinate offsets = 1, so no need to compute that.
        var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
        var y1 = y0 - j1 + G4;
        var z1 = z0 - k1 + G4;
        var w1 = w0 - l1 + G4;
        var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords
        var y2 = y0 - j2 + 2.0 * G4;
        var z2 = z0 - k2 + 2.0 * G4;
        var w2 = w0 - l2 + 2.0 * G4;
        var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords
        var y3 = y0 - j3 + 3.0 * G4;
        var z3 = z0 - k3 + 3.0 * G4;
        var w3 = w0 - l3 + 3.0 * G4;
        var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords
        var y4 = y0 - 1.0 + 4.0 * G4;
        var z4 = z0 - 1.0 + 4.0 * G4;
        var w4 = w0 - 1.0 + 4.0 * G4;
        // Work out the hashed gradient indices of the five simplex corners
        var ii = i & 255;
        var jj = j & 255;
        var kk = k & 255;
        var ll = l & 255;
        // Calculate the contribution from the five corners
        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
        if (t0 < 0) n0 = 0.0;
        else {
            var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;
            t0 *= t0;
            n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);
        }
        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
        if (t1 < 0) n1 = 0.0;
        else {
            var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;
            t1 *= t1;
            n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);
        }
        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
        if (t2 < 0) n2 = 0.0;
        else {
            var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;
            t2 *= t2;
            n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);
        }
        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
        if (t3 < 0) n3 = 0.0;
        else {
            var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;
            t3 *= t3;
            n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);
        }
        var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
        if (t4 < 0) n4 = 0.0;
        else {
            var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;
            t4 *= t4;
            n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);
        }
        // Sum up and scale the result to cover the range [-1,1]
        return 27.0 * (n0 + n1 + n2 + n3 + n4);
    }


};

// amd
if (typeof define !== 'undefined' && define.amd) define(function(){return SimplexNoise;});
//common js
if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;
// browser
else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;
// nodejs
if (typeof module !== 'undefined') {
    module.exports = SimplexNoise;
}

})();

},{}],37:[function(require,module,exports){
/*
 (c) 2011-2015, Vladimir Agafonkin
 SunCalc is a JavaScript library for calculating sun/moon position and light phases.
 https://github.com/mourner/suncalc
*/

(function () { 'use strict';

// shortcuts for easier to read formulas

var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }

function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }

function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }


// general sun calculations

function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }

function eclipticLongitude(M) {

    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth

    return M + C + P + PI;
}

function sunCoords(d) {

    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);

    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}


var SunCalc = {};


// calculates sun position for a given date and latitude/longitude

SunCalc.getPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};


// sun times configuration (angle, morning name, evening name)

var times = SunCalc.times = [
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];

// adds a custom time to the times config

SunCalc.addTime = function (angle, riseName, setName) {
    times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }

function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }

function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }

// returns set time for the given sun altitude
function getSetJ(h, lw, phi, dec, n, M, L) {

    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}


// calculates sun times for a given date and latitude/longitude

SunCalc.getTimes = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,

        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),

        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),

        Jnoon = solarTransitJ(ds, M, L),

        i, len, time, Jset, Jrise;


    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };

    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];

        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);

        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }

    return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function moonCoords(d) { // geocentric ecliptic coordinates of the moon

    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance

        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km

    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}

SunCalc.getMoonPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec);

    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};


// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.

SunCalc.getMoonIllumination = function (date) {

    var d = toDays(date),
        s = sunCoords(d),
        m = moonCoords(d),

        sdist = 149598000, // distance from Earth to Sun in km

        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));

    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};


function hoursLater(date, h) {
    return new Date(date.valueOf() + h * dayMs / 24);
}

// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article

SunCalc.getMoonTimes = function (date, lat, lng, inUTC) {
    var t = new Date(date);
    if (inUTC) t.setUTCHours(0, 0, 0, 0);
    else t.setHours(0, 0, 0, 0);

    var hc = 0.133 * rad,
        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,
        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;

    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)
    for (var i = 1; i <= 24; i += 2) {
        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;
        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;

        a = (h0 + h2) / 2 - h1;
        b = (h2 - h0) / 2;
        xe = -b / (2 * a);
        ye = (a * xe + b) * xe + h1;
        d = b * b - 4 * a * h1;
        roots = 0;

        if (d >= 0) {
            dx = Math.sqrt(d) / (Math.abs(a) * 2);
            x1 = xe - dx;
            x2 = xe + dx;
            if (Math.abs(x1) <= 1) roots++;
            if (Math.abs(x2) <= 1) roots++;
            if (x1 < -1) x1 = x2;
        }

        if (roots === 1) {
            if (h0 < 0) rise = i + x1;
            else set = i + x1;

        } else if (roots === 2) {
            rise = i + (ye < 0 ? x2 : x1);
            set = i + (ye < 0 ? x1 : x2);
        }

        if (rise && set) break;

        h0 = h2;
    }

    var result = {};

    if (rise) result.rise = hoursLater(t, rise);
    if (set) result.set = hoursLater(t, set);

    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;

    return result;
};


// export as AMD module / Node module / browser variable
if (typeof define === 'function' && define.amd) define(SunCalc);
else if (typeof module !== 'undefined') module.exports = SunCalc;
else window.SunCalc = SunCalc;

}());

},{}],38:[function(require,module,exports){
// expose module classes

exports.intersect = require('./lib/intersect');
exports.shape = require('./lib/IntersectionParams').newShape;
},{"./lib/IntersectionParams":40,"./lib/intersect":42}],39:[function(require,module,exports){
/**
 *  Intersection
 */
function Intersection(status) {
    this.init(status);
}

/**
 *  init
 *
 *  @param {String} status
 *  @returns {Intersection}
 */
Intersection.prototype.init = function(status) {
    this.status = status;
    this.points = [];
};

/**
 *  appendPoint
 *
 *  @param {Point2D} point
 */
Intersection.prototype.appendPoint = function(point) {
    this.points.push(point);
};

/**
 *  appendPoints
 *
 *  @param {Array<Point2D>} points
 */
Intersection.prototype.appendPoints = function(points) {
    this.points = this.points.concat(points);
};

module.exports = Intersection;

},{}],40:[function(require,module,exports){
var Point2D = require('kld-affine').Point2D;


/**
    getArcParameters

    @param {Point2D} startPoint
    @param {Point2D} endPoint
    @param {Number} rx
    @param {Number} ry
    @param {Number} angle - in degrees
    @param {Boolean} arcFlag
    @param {Boolean} sweepFlag
    @returns {{ center: Point2D, rx: Number, ry: Number, theta1: Number, deltaTheta: Number }}
*/
function getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {
    function radian(ux, uy, vx, vy) {
        var dot = ux * vx + uy * vy;
        var mod = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
        var rad = Math.acos(dot / mod);
        if (ux * vy - uy * vx < 0.0) rad = -rad;
        return rad;
    }
    angle = angle * Math.PI / 180;
    var c = Math.cos(angle);
    var s = Math.sin(angle);
    var TOLERANCE = 1e-6;
    var halfDiff = startPoint.subtract(endPoint).divide(2);
    var x1p = halfDiff.x * c + halfDiff.y * s;
    var y1p = halfDiff.x * -s + halfDiff.y * c;
    var x1px1p = x1p * x1p;
    var y1py1p = y1p * y1p;
    var lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));
    var factor;
    if (lambda > 1) {
        factor = Math.sqrt(lambda);
        rx *= factor;
        ry *= factor;
    }
    var rxrx = rx * rx;
    var ryry = ry * ry;
    var rxy1 = rxrx * y1py1p;
    var ryx1 = ryry * x1px1p;
    factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);
    if (Math.abs(factor) < TOLERANCE) factor = 0;
    var sq = Math.sqrt(factor);
    if (arcFlag == sweepFlag) sq = -sq;
    var mid = startPoint.add(endPoint).divide(2);
    var cxp = sq * rx * y1p / ry;
    var cyp = sq * -ry * x1p / rx;
    //return new Point2D(cxp * c - cyp * s + mid.x, cxp * s + cyp * c + mid.y);

    var xcr1 = (x1p - cxp) / rx;
    var xcr2 = (x1p + cxp) / rx;
    var ycr1 = (y1p - cyp) / ry;
    var ycr2 = (y1p + cyp) / ry;

    var vcr1 = new Vector2D(1, 0);
    var theta1 = radian(1.0, 0.0, xcr1, ycr1);

    var deltaTheta = radian(xcr1, ycr1, -xcr2, -ycr2);
    var PIx2 = Math.PI * 2.0;
    while (deltaTheta > PIx2) deltaTheta -= PIx2;
    while (deltaTheta < 0.0) deltaTheta += PIx2;
    if (sweepFlag == false) deltaTheta -= PIx2;

    return {
        center: new Point2D(cxp * c - cyp * s + mid.x, cxp * s + cyp * c + mid.y),
        rx: rx,
        ry: ry,
        theta1: theta1,
        deltaTheta: deltaTheta
    };
}


/**
 *  IntersectionParams
 *
 *  @param {String} name
 *  @param {Array<Point2D} params
 *  @returns {IntersectionParams}
 */
function IntersectionParams(name, params) {
    this.init(name, params);
}

/**
 *  init
 *
 *  @param {String} type
 *  @param {Array<Point2D>} params
 */
IntersectionParams.prototype.init = function (type, params) {
    this.type = type;
    this.params = params;
    this.meta = {};
};

IntersectionParams.TYPE = {};
var IPTYPE = IntersectionParams.TYPE;
IPTYPE.LINE = 'Line';
IPTYPE.RECT = 'Rectangle';
IPTYPE.ROUNDRECT = 'RoundRectangle';
IPTYPE.CIRCLE = 'Circle';
IPTYPE.ELLIPSE = 'Ellipse';
IPTYPE.POLYGON = 'Polygon';
IPTYPE.POLYLINE = 'Polyline';
IPTYPE.PATH = 'Path';
IPTYPE.ARC = 'Arc';
IPTYPE.BEZIER2 = 'Bezier2';
IPTYPE.BEZIER3 = 'Bezier3';


function parsePointsString(points) {
    return points.split(" ").map(function(point) {
        point = point.split(",");
        return new Point2D(point[0], point[1]);
    });
}

IntersectionParams.newShape = function(svgElementName, props) {
    svgElementName = svgElementName.toLowerCase();

    if(svgElementName === "line") {
        return IntersectionParams.newLine(
            new Point2D(props.x1, props.y1),
            new Point2D(props.x2, props.y2)
        );
    }

    if(svgElementName === "rect") {
        if(props.rx > 0 || props.ry > 0) {
            return IntersectionParams.newRoundRect(
                props.x, props.y,
                props.width, props.height,
                props.rx, props.ry
            );
        } else {
            return IntersectionParams.newRect(
                props.x, props.y,
                props.width, props.height
            );
        }
    }

    if(svgElementName === "circle") {
        return IntersectionParams.newCircle(
            new Point2D(props.cx, props.cy),
            props.r
        );
    }

    if(svgElementName === "ellipse") {
        return IntersectionParams.newEllipse(
            new Point2D(props.cx, props.cy),
            props.rx, props.ry
        );
    }

    if(svgElementName === "polygon") {
        return IntersectionParams.newPolygon(
            parsePointsString(props.points)
        );
    }

    if(svgElementName === "polyline") {
        return IntersectionParams.newPolyline(
            parsePointsString(props.points)
        );
    }

    if(svgElementName === "path") {
        return IntersectionParams.newPath(
            props.d
        );
    }

}


///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for arc.

    @param {Point2D} startPoint - arc start point
    @param {Point2D} endPoint - arc end point
    @param {Number} rx - arc ellipse x radius
    @param {Number} ry - arc ellipse y radius
    @param {Number} angle - arc ellipse rotation in degrees
    @param {Boolean} largeArcFlag
    @param {Boolean} sweepFlag
    @returns {IntersectionParams}
*/
IntersectionParams.newArc = function (startPoint, endPoint, rx, ry, angle, largeArcFlag, sweepFlag) {
    var p = getArcParameters(startPoint, endPoint, rx, ry, angle, largeArcFlag, sweepFlag);
    return new IntersectionParams(IPTYPE.ARC, [p.center, p.rx, p.ry, (angle * Math.PI / 180), p.theta1, p.deltaTheta]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for bezier2.

    @param {Point2D} p1
    @param {Point2D} p2
    @param {Point2D} p3
    @returns {IntersectionParams}
*/
IntersectionParams.newBezier2 = function (p1, p2, p3) {
    return new IntersectionParams(IPTYPE.BEZIER2, [p1, p2, p3]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for bezier3.

    @param {Point2D} p1
    @param {Point2D} p2
    @param {Point2D} p3
    @param {Point2D} p4
    @returns {IntersectionParams}
*/
IntersectionParams.newBezier3 = function (p1, p2, p3, p4) {
    return new IntersectionParams(IPTYPE.BEZIER3, [p1, p2, p3, p4]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for circle.

    @param {Point2D} c
    @param {Number} r
    @returns {IntersectionParams}
*/
IntersectionParams.newCircle = function (c, r) {
    return new IntersectionParams(IPTYPE.CIRCLE, [c, r]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for ellipse.

    @param {Point2D} c
    @param {Number} rx
    @param {Number} ry
    @returns {IntersectionParams}
*/
IntersectionParams.newEllipse = function (c, rx, ry) {
    return new IntersectionParams(IPTYPE.ELLIPSE, [c, rx, ry]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for line.

    @param {Point2D} a1
    @param {Point2D} a2
    @returns {IntersectionParams}
*/
IntersectionParams.newLine = function (a1, a2) {
    return new IntersectionParams(IPTYPE.LINE, [a1, a2]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for polygon.

    @param {Array<Point2D>} points
    @returns {IntersectionParams}
*/
IntersectionParams.newPolygon = function (points) {
    return new IntersectionParams(IPTYPE.POLYGON, [points]);
};

///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for polyline.

     @param {Array<Point2D>} points
    @returns {IntersectionParams}
*/
IntersectionParams.newPolyline = function (points) {
    return new IntersectionParams(IPTYPE.POLYLINE, [points]);
};


///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for rectangle.

    @param {Number} x
    @param {Number} y
    @param {Number} width
    @param {Number} height
    @returns {IntersectionParams}
*/
IntersectionParams.newRect = function (x, y, width, height) {
    var points = [];
    points.push(new Point2D(x, y));
    points.push(new Point2D(x + width, y));
    points.push(new Point2D(x + width, y + height));
    points.push(new Point2D(x, y + height));
    return new IntersectionParams(IPTYPE.RECT, [points]);
};

var degreesToRadians = function (angle) {
    return angle * Math.PI / 180;
};
///////////////////////////////////////////////////////////////////
/**
    Creates IntersectionParams for round rectangle, or for rectangle if rx and ry are 0.

    @param {Number} x
    @param {Number} y
    @param {Number} width
    @param {Number} height
    @param {Number} rx
    @param {Number} ry
    @returns {IntersectionParams}
*/
IntersectionParams.newRoundRect = function (x, y, width, height, rx, ry) {
    if (rx === 0 && ry === 0)
        return IntersectionParams.newRect(x, y, width, height);
    if (rx === 0)
        rx = ry;
    if (ry === 0)
        ry = rx;
    if (rx > width / 2)
        rx = width / 2;
    if (ry > height / 2)
        rx = height / 2;
    var shape = [];
    var x0 = x, x1 = x + rx, x2 = x + width - rx, x3 = x + width;
    var y0 = y, y1 = y + ry, y2 = y + height - ry, y3 = y + height;
    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x1, y1), rx, ry, 0, degreesToRadians(180), degreesToRadians(90)]));
    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x1, y0), new Point2D(x2, y0)]));
    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x2, y1), rx, ry, 0, degreesToRadians(-90), degreesToRadians(90)]));
    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x3, y1), new Point2D(x3, y2)]));
    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x2, y2), rx, ry, 0, degreesToRadians(0), degreesToRadians(90)]));
    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x2, y3), new Point2D(x1, y3)]));
    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x1, y2), rx, ry, 0, degreesToRadians(90), degreesToRadians(90)]));
    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x0, y2), new Point2D(x0, y1)]));
    shape[shape.length - 1].meta.closePath = true;
    return new IntersectionParams(IPTYPE.ROUNDRECT, [shape]);
};




function Token(type, text) {
    if (arguments.length > 0) {
        this.init(type, text);
    }
}
Token.prototype.init = function(type, text) {
    this.type = type;
    this.text = text;
};
Token.prototype.typeis = function(type) {
    return this.type == type;
}
var Path = {};
Path.COMMAND = 0;
Path.NUMBER = 1;
Path.EOD = 2;
Path.PARAMS = {
    A: ["rx", "ry", "x-axis-rotation", "large-arc-flag", "sweep-flag", "x", "y"],
    a: ["rx", "ry", "x-axis-rotation", "large-arc-flag", "sweep-flag", "x", "y"],
    C: ["x1", "y1", "x2", "y2", "x", "y"],
    c: ["x1", "y1", "x2", "y2", "x", "y"],
    H: ["x"],
    h: ["x"],
    L: ["x", "y"],
    l: ["x", "y"],
    M: ["x", "y"],
    m: ["x", "y"],
    Q: ["x1", "y1", "x", "y"],
    q: ["x1", "y1", "x", "y"],
    S: ["x2", "y2", "x", "y"],
    s: ["x2", "y2", "x", "y"],
    T: ["x", "y"],
    t: ["x", "y"],
    V: ["y"],
    v: ["y"],
    Z: [],
    z: []
};

function tokenize(d) {
    var tokens = new Array();
    while (d != "") {
        if (d.match(/^([ \t\r\n,]+)/)) {
            d = d.substr(RegExp.$1.length);
        } else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {
            tokens[tokens.length] = new Token(Path.COMMAND, RegExp.$1);
            d = d.substr(RegExp.$1.length);
        } else if (d.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {
            tokens[tokens.length] = new Token(Path.NUMBER, parseFloat(RegExp.$1));
            d = d.substr(RegExp.$1.length);
        } else {
            throw new Error("Unrecognized segment command: " + d);
        }
    }
    tokens[tokens.length] = new Token(Path.EOD, null);
    return tokens;
}

IntersectionParams.newPath = function(d) {
    var tokens = tokenize(d);
    var index = 0;
    var token = tokens[index];
    var mode = "BOD";
    var segments = [];

    while (!token.typeis(Path.EOD)) {
        var param_length;
        var params = new Array();
        if (mode == "BOD") {
            if (token.text == "M" || token.text == "m") {
                index++;
                param_length = Path.PARAMS[token.text].length;
                mode = token.text;
            } else {
                throw new Error("Path data must begin with a moveto command");
            }
        } else {
            if (token.typeis(Path.NUMBER)) {
                param_length = Path.PARAMS[mode].length;
            } else {
                index++;
                param_length = Path.PARAMS[token.text].length;
                mode = token.text;
            }
        }
        if ((index + param_length) < tokens.length) {
            for (var i = index; i < index + param_length; i++) {
                var number = tokens[i];
                if (number.typeis(Path.NUMBER)) params[params.length] = number.text;
                else throw new Error("Parameter type is not a number: " + mode + "," + number.text);
            }
            var segment;
            var length = segments.length;
            var previous = (length == 0) ? null : segments[length - 1];
            switch (mode) {
                case "A":
                    segment = new AbsoluteArcPath(params, previous);
                    break;
                case "C":
                    segment = new AbsoluteCurveto3(params, previous);
                    break;
                case "c":
                    segment = new RelativeCurveto3(params, previous);
                    break;
                case "H":
                    segment = new AbsoluteHLineto(params, previous);
                    break;
                case "L":
                    segment = new AbsoluteLineto(params, previous);
                    break;
                case "l":
                    segment = new RelativeLineto(params, previous);
                    break;
                case "M":
                    segment = new AbsoluteMoveto(params, previous);
                    break;
                case "m":
                    segment = new RelativeMoveto(params, previous);
                    break;
                case "Q":
                    segment = new AbsoluteCurveto2(params, previous);
                    break;
                case "q":
                    segment = new RelativeCurveto2(params, previous);
                    break;
                case "S":
                    segment = new AbsoluteSmoothCurveto3(params, previous);
                    break;
                case "s":
                    segment = new RelativeSmoothCurveto3(params, previous);
                    break;
                case "T":
                    segment = new AbsoluteSmoothCurveto2(params, previous);
                    break;
                case "t":
                    segment = new RelativeSmoothCurveto2(params, previous);
                    break;
                case "Z":
                    segment = new RelativeClosePath(params, previous);
                    break;
                case "z":
                    segment = new RelativeClosePath(params, previous);
                    break;
                default:
                    throw new Error("Unsupported segment type: " + mode);
            };
            segments.push(segment);
            index += param_length;
            token = tokens[index];
            if (mode == "M") mode = "L";
            if (mode == "m") mode = "l";
        } else {
            throw new Error("Path data ended before all parameters were found");
        }
    }

    var segmentParams = [];
    for(i=0; i<segments.length; i++) {
        var ip = segments[i].getIntersectionParams();
        if(ip) {
            segmentParams.push(ip);
        }
    }

    return new IntersectionParams(IPTYPE.PATH, [segmentParams]);
}


function AbsolutePathSegment(command, params, previous) {
    if (arguments.length > 0) this.init(command, params, previous);
};
AbsolutePathSegment.prototype.init = function(command, params, previous) {
    this.command = command;
    this.previous = previous;
    this.points = [];
    var index = 0;
    while (index < params.length) {
        this.points.push(new Point2D(params[index], params[index + 1]));
        index += 2;
    }
};
AbsolutePathSegment.prototype.getLastPoint = function() {
    return this.points[this.points.length - 1];
};
AbsolutePathSegment.prototype.getIntersectionParams = function() {
    return null;
};



function AbsoluteArcPath(params, previous) {
    if (arguments.length > 0) {
        this.init("A", params, previous);
    }
}
AbsoluteArcPath.prototype = new AbsolutePathSegment();
AbsoluteArcPath.prototype.constructor = AbsoluteCurveto2;
AbsoluteArcPath.superclass = AbsolutePathSegment.prototype;

AbsoluteArcPath.prototype.init = function(command, params, previous) {
    var point = new Array();
    var y = params.pop();
    var x = params.pop();
    point.push(x, y);
    AbsoluteArcPath.superclass.init.call(this, command, point, previous);
    this.rx = parseFloat(params.shift());
    this.ry = parseFloat(params.shift());
    this.angle = parseFloat(params.shift());
    this.arcFlag = parseFloat(params.shift());
    this.sweepFlag = parseFloat(params.shift());
};
AbsoluteArcPath.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Ellipse", [this.getCenter(), this.rx, this.ry]);
};
AbsoluteArcPath.prototype.getCenter = function() {
    var startPoint = this.previous.getLastPoint();
    var endPoint = this.points[0];
    var rx = this.rx;
    var ry = this.ry;
    var angle = this.angle * Math.PI / 180;
    var c = Math.cos(angle);
    var s = Math.sin(angle);
    var TOLERANCE = 1e-6;
    var halfDiff = startPoint.subtract(endPoint).divide(2);
    var x1p = halfDiff.x * c + halfDiff.y * s;
    var y1p = halfDiff.x * -s + halfDiff.y * c;
    var x1px1p = x1p * x1p;
    var y1py1p = y1p * y1p;
    var lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));
    if (lambda > 1) {
        var factor = Math.sqrt(lambda);
        rx *= factor;
        ry *= factor;
    }
    var rxrx = rx * rx;
    var ryry = ry * ry;
    var rxy1 = rxrx * y1py1p;
    var ryx1 = ryry * x1px1p;
    var factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);
    if (Math.abs(factor) < TOLERANCE) factor = 0;
    var sq = Math.sqrt(factor);
    if (this.arcFlag == this.sweepFlag) sq = -sq;
    var mid = startPoint.add(endPoint).divide(2);
    var cxp = sq * rx * y1p / ry;
    var cyp = sq * -ry * x1p / rx;
    return new Point2D(cxp * c - cyp * s + mid.x, cxp * s + cyp * c + mid.y);
};



function AbsoluteCurveto2(params, previous) {
    if (arguments.length > 0) {
        this.init("Q", params, previous);
    }
}
AbsoluteCurveto2.prototype = new AbsolutePathSegment();
AbsoluteCurveto2.prototype.constructor = AbsoluteCurveto2;
AbsoluteCurveto2.superclass = AbsolutePathSegment.prototype;

AbsoluteCurveto2.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier2", [this.previous.getLastPoint(), this.points[0], this.points[1]]);
};



function AbsoluteCurveto3(params, previous) {
    if (arguments.length > 0) {
        this.init("C", params, previous);
    }
}
AbsoluteCurveto3.prototype = new AbsolutePathSegment();
AbsoluteCurveto3.prototype.constructor = AbsoluteCurveto3;
AbsoluteCurveto3.superclass = AbsolutePathSegment.prototype;

AbsoluteCurveto3.prototype.getLastControlPoint = function() {
    return this.points[1];
};
AbsoluteCurveto3.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier3", [this.previous.getLastPoint(), this.points[0], this.points[1], this.points[2]]);
};


function AbsoluteHLineto(params, previous) {
    if (arguments.length > 0) {
        this.init("H", params, previous);
    }
}
AbsoluteHLineto.prototype = new AbsolutePathSegment();
AbsoluteHLineto.prototype.constructor = AbsoluteHLineto;
AbsoluteHLineto.superclass = AbsolutePathSegment.prototype;

AbsoluteHLineto.prototype.init = function(command, params, previous) {
    var prevPoint = previous.getLastPoint();
    var point = new Array();
    point.push(params.pop(), prevPoint.y);
    AbsoluteHLineto.superclass.init.call(this, command, point, previous);
};


function AbsoluteLineto(params, previous) {
    if (arguments.length > 0) {
        this.init("L", params, previous);
    }
}
AbsoluteLineto.prototype = new AbsolutePathSegment();
AbsoluteLineto.prototype.constructor = AbsoluteLineto;
AbsoluteLineto.superclass = AbsolutePathSegment.prototype;

AbsoluteLineto.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Line", [this.previous.getLastPoint(), this.points[0]]);
};



function AbsoluteMoveto(params, previous) {
    if (arguments.length > 0) {
        this.init("M", params, previous);
    }
}
AbsoluteMoveto.prototype = new AbsolutePathSegment();
AbsoluteMoveto.prototype.constructor = AbsoluteMoveto;
AbsoluteMoveto.superclass = AbsolutePathSegment.prototype;


function AbsoluteSmoothCurveto2(params, previous) {
    if (arguments.length > 0) {
        this.init("T", params, previous);
    }
}
AbsoluteSmoothCurveto2.prototype = new AbsolutePathSegment();
AbsoluteSmoothCurveto2.prototype.constructor = AbsoluteSmoothCurveto2;
AbsoluteSmoothCurveto2.superclass = AbsolutePathSegment.prototype;

AbsoluteSmoothCurveto2.prototype.getControlPoint = function() {
    var lastPoint = this.previous.getLastPoint();
    var point;
    if (this.previous.command.match(/^[QqTt]$/)) {
        var ctrlPoint = this.previous.getControlPoint();
        var diff = ctrlPoint.subtract(lastPoint);
        point = lastPoint.subtract(diff);
    } else {
        point = lastPoint;
    }
    return point;
};
AbsoluteSmoothCurveto2.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier2", [this.previous.getLastPoint(), this.getControlPoint(), this.points[0]]);
};


function AbsoluteSmoothCurveto3(params, previous) {
    if (arguments.length > 0) {
        this.init("S", params, previous);
    }
}
AbsoluteSmoothCurveto3.prototype = new AbsolutePathSegment();
AbsoluteSmoothCurveto3.prototype.constructor = AbsoluteSmoothCurveto3;
AbsoluteSmoothCurveto3.superclass = AbsolutePathSegment.prototype;

AbsoluteSmoothCurveto3.prototype.getFirstControlPoint = function() {
    var lastPoint = this.previous.getLastPoint();
    var point;
    if (this.previous.command.match(/^[SsCc]$/)) {
        var lastControl = this.previous.getLastControlPoint();
        var diff = lastControl.subtract(lastPoint);
        point = lastPoint.subtract(diff);
    } else {
        point = lastPoint;
    }
    return point;
};
AbsoluteSmoothCurveto3.prototype.getLastControlPoint = function() {
    return this.points[0];
};
AbsoluteSmoothCurveto3.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier3", [this.previous.getLastPoint(), this.getFirstControlPoint(), this.points[0], this.points[1]]);
};


function RelativePathSegment(command, params, previous) {
    if (arguments.length > 0) this.init(command, params, previous);
}
RelativePathSegment.prototype = new AbsolutePathSegment();
RelativePathSegment.prototype.constructor = RelativePathSegment;
RelativePathSegment.superclass = AbsolutePathSegment.prototype;

RelativePathSegment.prototype.init = function(command, params, previous) {
    this.command = command;
    this.previous = previous;
    this.points = [];
    var lastPoint;
    if (this.previous) lastPoint = this.previous.getLastPoint();
    else lastPoint = new Point2D(0, 0);
    var index = 0;
    while (index < params.length) {
        var point = new Point2D(lastPoint.x + params[index], lastPoint.y + params[index + 1]);
        this.points.push(point);
        index += 2;
    }
};

function RelativeClosePath(params, previous) {
    if (arguments.length > 0) {
        this.init("z", params, previous);
    }
}
RelativeClosePath.prototype = new RelativePathSegment();
RelativeClosePath.prototype.constructor = RelativeClosePath;
RelativeClosePath.superclass = RelativePathSegment.prototype;
RelativeClosePath.prototype.getLastPoint = function() {
    var current = this.previous;
    var point;
    while (current) {
        if (current.command.match(/^[mMzZ]$/)) {
            point = current.getLastPoint();
            break;
        }
        current = current.previous;
    }
    return point;
};
RelativeClosePath.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Line", [this.previous.getLastPoint(), this.getLastPoint()]);
};


function RelativeCurveto2(params, previous) {
    if (arguments.length > 0) {
        this.init("q", params, previous);
    }
}
RelativeCurveto2.prototype = new RelativePathSegment();
RelativeCurveto2.prototype.constructor = RelativeCurveto2;
RelativeCurveto2.superclass = RelativePathSegment.prototype;

RelativeCurveto2.prototype.getControlPoint = function() {
    return this.points[0];
};
RelativeCurveto2.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier2", [this.previous.getLastPoint(), this.points[0], this.points[1]]);
};


function RelativeCurveto3(params, previous) {
    if (arguments.length > 0) {
        this.init("c", params, previous);
    }
}
RelativeCurveto3.prototype = new RelativePathSegment();
RelativeCurveto3.prototype.constructor = RelativeCurveto3;
RelativeCurveto3.superclass = RelativePathSegment.prototype;

RelativeCurveto3.prototype.getLastControlPoint = function() {
    return this.points[1];
};
RelativeCurveto3.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier3", [this.previous.getLastPoint(), this.points[0], this.points[1], this.points[2]]);
};


function RelativeLineto(params, previous) {
    if (arguments.length > 0) {
        this.init("l", params, previous);
    }
}
RelativeLineto.prototype = new RelativePathSegment();
RelativeLineto.prototype.constructor = RelativeLineto;
RelativeLineto.superclass = RelativePathSegment.prototype;

RelativeLineto.prototype.toString = function() {
    var points = new Array();
    var command = "";
    var lastPoint;
    var point;
    if (this.previous) lastPoint = this.previous.getLastPoint();
    else lastPoint = new Point(0, 0);
    point = this.points[0].subtract(lastPoint);
    if (this.previous.constructor != this.constuctor)
        if (this.previous.constructor != RelativeMoveto) cmd = this.command;
    return cmd + point.toString();
};
RelativeLineto.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Line", [this.previous.getLastPoint(), this.points[0]]);
};



function RelativeMoveto(params, previous) {
    if (arguments.length > 0) {
        this.init("m", params, previous);
    }
}
RelativeMoveto.prototype = new RelativePathSegment();
RelativeMoveto.prototype.constructor = RelativeMoveto;
RelativeMoveto.superclass = RelativePathSegment.prototype;



function RelativeSmoothCurveto2(params, previous) {
    if (arguments.length > 0) {
        this.init("t", params, previous);
    }
}
RelativeSmoothCurveto2.prototype = new RelativePathSegment();
RelativeSmoothCurveto2.prototype.constructor = RelativeSmoothCurveto2;
RelativeSmoothCurveto2.superclass = RelativePathSegment.prototype;

RelativeSmoothCurveto2.prototype.getControlPoint = function() {
    var lastPoint = this.previous.getLastPoint();
    var point;
    if (this.previous.command.match(/^[QqTt]$/)) {
        var ctrlPoint = this.previous.getControlPoint();
        var diff = ctrlPoint.subtract(lastPoint);
        point = lastPoint.subtract(diff);
    } else {
        point = lastPoint;
    }
    return point;
};
RelativeSmoothCurveto2.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier2", [this.previous.getLastPoint(), this.getControlPoint(), this.points[0]]);
};



function RelativeSmoothCurveto3(params, previous) {
    if (arguments.length > 0) {
        this.init("s", params, previous);
    }
}
RelativeSmoothCurveto3.prototype = new RelativePathSegment();
RelativeSmoothCurveto3.prototype.constructor = RelativeSmoothCurveto3;
RelativeSmoothCurveto3.superclass = RelativePathSegment.prototype;

RelativeSmoothCurveto3.prototype.getFirstControlPoint = function() {
    var lastPoint = this.previous.getLastPoint();
    var point;
    if (this.previous.command.match(/^[SsCc]$/)) {
        var lastControl = this.previous.getLastControlPoint();
        var diff = lastControl.subtract(lastPoint);
        point = lastPoint.subtract(diff);
    } else {
        point = lastPoint;
    }
    return point;
};
RelativeSmoothCurveto3.prototype.getLastControlPoint = function() {
    return this.points[0];
};
RelativeSmoothCurveto3.prototype.getIntersectionParams = function() {
    return new IntersectionParams("Bezier3", [this.previous.getLastPoint(), this.getFirstControlPoint(), this.points[0], this.points[1]]);
};


module.exports = IntersectionParams;

},{"kld-affine":43}],41:[function(require,module,exports){
var Intersection = require('../Intersection');

var affine = require('kld-affine');
var Point2D = affine.Point2D;
var Vector2D = affine.Vector2D;

var Polynomial = require('kld-polynomial').Polynomial;

function removeMultipleRootsIn01(roots) {
    var ZEROepsilon = 1e-15;
    roots.sort(function (a, b) { return a - b; });
    for (var i = 1; i < roots.length;) {
        if (Math.abs(roots[i] - roots[i - 1]) < ZEROepsilon) {
            roots.splice(i, 1);
        }
        else {
            i++;
        }
    }
}

module.exports = {};


/**
 *  intersectBezier2Bezier2
 *
 *  @param {Point2D} a1
 *  @param {Point2D} a2
 *  @param {Point2D} a3
 *  @param {Point2D} b1
 *  @param {Point2D} b2
 *  @param {Point2D} b3
 *  @returns {Intersection}
 */
module.exports.intersectBezier2Bezier2 = function(a1, a2, a3, b1, b2, b3) {
    var a, b;
    var c12, c11, c10;
    var c22, c21, c20;
    var result = new Intersection();
    var poly;

    a = a2.multiply(-2);
    c12 = a1.add(a.add(a3));

    a = a1.multiply(-2);
    b = a2.multiply(2);
    c11 = a.add(b);

    c10 = new Point2D(a1.x, a1.y);

    a = b2.multiply(-2);
    c22 = b1.add(a.add(b3));

    a = b1.multiply(-2);
    b = b2.multiply(2);
    c21 = a.add(b);

    c20 = new Point2D(b1.x, b1.y);

    var v0, v1, v2, v3, v4, v5, v6;
    if ( c12.y === 0 ) {
        v0 = c12.x*(c10.y - c20.y);
        v1 = v0 - c11.x*c11.y;
        v2 = v0 + v1;
        v3 = c11.y*c11.y;

        poly = new Polynomial(
            c12.x*c22.y*c22.y,
            2*c12.x*c21.y*c22.y,
            c12.x*c21.y*c21.y - c22.x*v3 - c22.y*v0 - c22.y*v1,
            -c21.x*v3 - c21.y*v0 - c21.y*v1,
            (c10.x - c20.x)*v3 + (c10.y - c20.y)*v1
        );
    } else {
        v0 = c12.x*c22.y - c12.y*c22.x;
        v1 = c12.x*c21.y - c21.x*c12.y;
        v2 = c11.x*c12.y - c11.y*c12.x;
        v3 = c10.y - c20.y;
        v4 = c12.y*(c10.x - c20.x) - c12.x*v3;
        v5 = -c11.y*v2 + c12.y*v4;
        v6 = v2*v2;

        poly = new Polynomial(
            v0*v0,
            2*v0*v1,
            (-c22.y*v6 + c12.y*v1*v1 + c12.y*v0*v4 + v0*v5) / c12.y,
            (-c21.y*v6 + c12.y*v1*v4 + v1*v5) / c12.y,
            (v3*v6 + v4*v5) / c12.y
        );
    }

    var roots = poly.getRoots();
    for ( var i = 0; i < roots.length; i++ ) {
        var s = roots[i];

        if ( 0 <= s && s <= 1 ) {
            var xRoots = new Polynomial(
                c12.x,
                c11.x,
                c10.x - c20.x - s*c21.x - s*s*c22.x
            ).getRoots();
            var yRoots = new Polynomial(
                c12.y,
                c11.y,
                c10.y - c20.y - s*c21.y - s*s*c22.y
            ).getRoots();

            if ( xRoots.length > 0 && yRoots.length > 0 ) {
                var TOLERANCE = 1e-4;

                checkRoots:
                    for ( var j = 0; j < xRoots.length; j++ ) {
                        var xRoot = xRoots[j];

                        if ( 0 <= xRoot && xRoot <= 1 ) {
                            for ( var k = 0; k < yRoots.length; k++ ) {
                                if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {
                                    result.points.push( c22.multiply(s*s).add(c21.multiply(s).add(c20)) );
                                    break checkRoots;
                                }
                            }
                        }
                    }
            }
        }
    }

    return result;
};


/**
 *  intersectBezier2Bezier3
 *
 *  @param {Point2D} a1
 *  @param {Point2D} a2
 *  @param {Point2D} a3
 *  @param {Point2D} b1
 *  @param {Point2D} b2
 *  @param {Point2D} b3
 *  @param {Point2D} b4
 *  @returns {Intersection}
 */
module.exports.intersectBezier2Bezier3 = function(a1, a2, a3, b1, b2, b3, b4) {
    var a, b,c, d;
    var c12, c11, c10;
    var c23, c22, c21, c20;
    var result = new Intersection();

    a = a2.multiply(-2);
    c12 = a1.add(a.add(a3));

    a = a1.multiply(-2);
    b = a2.multiply(2);
    c11 = a.add(b);

    c10 = new Point2D(a1.x, a1.y);

    a = b1.multiply(-1);
    b = b2.multiply(3);
    c = b3.multiply(-3);
    d = a.add(b.add(c.add(b4)));
    c23 = new Vector2D(d.x, d.y);

    a = b1.multiply(3);
    b = b2.multiply(-6);
    c = b3.multiply(3);
    d = a.add(b.add(c));
    c22 = new Vector2D(d.x, d.y);

    a = b1.multiply(-3);
    b = b2.multiply(3);
    c = a.add(b);
    c21 = new Vector2D(c.x, c.y);

    c20 = new Vector2D(b1.x, b1.y);

    var c10x2 = c10.x*c10.x;
    var c10y2 = c10.y*c10.y;
    var c11x2 = c11.x*c11.x;
    var c11y2 = c11.y*c11.y;
    var c12x2 = c12.x*c12.x;
    var c12y2 = c12.y*c12.y;
    var c20x2 = c20.x*c20.x;
    var c20y2 = c20.y*c20.y;
    var c21x2 = c21.x*c21.x;
    var c21y2 = c21.y*c21.y;
    var c22x2 = c22.x*c22.x;
    var c22y2 = c22.y*c22.y;
    var c23x2 = c23.x*c23.x;
    var c23y2 = c23.y*c23.y;

    var poly = new Polynomial(
        -2*c12.x*c12.y*c23.x*c23.y + c12x2*c23y2 + c12y2*c23x2,
        -2*c12.x*c12.y*c22.x*c23.y - 2*c12.x*c12.y*c22.y*c23.x + 2*c12y2*c22.x*c23.x +
            2*c12x2*c22.y*c23.y,
        -2*c12.x*c21.x*c12.y*c23.y - 2*c12.x*c12.y*c21.y*c23.x - 2*c12.x*c12.y*c22.x*c22.y +
            2*c21.x*c12y2*c23.x + c12y2*c22x2 + c12x2*(2*c21.y*c23.y + c22y2),
        2*c10.x*c12.x*c12.y*c23.y + 2*c10.y*c12.x*c12.y*c23.x + c11.x*c11.y*c12.x*c23.y +
            c11.x*c11.y*c12.y*c23.x - 2*c20.x*c12.x*c12.y*c23.y - 2*c12.x*c20.y*c12.y*c23.x -
            2*c12.x*c21.x*c12.y*c22.y - 2*c12.x*c12.y*c21.y*c22.x - 2*c10.x*c12y2*c23.x -
            2*c10.y*c12x2*c23.y + 2*c20.x*c12y2*c23.x + 2*c21.x*c12y2*c22.x -
            c11y2*c12.x*c23.x - c11x2*c12.y*c23.y + c12x2*(2*c20.y*c23.y + 2*c21.y*c22.y),
        2*c10.x*c12.x*c12.y*c22.y + 2*c10.y*c12.x*c12.y*c22.x + c11.x*c11.y*c12.x*c22.y +
            c11.x*c11.y*c12.y*c22.x - 2*c20.x*c12.x*c12.y*c22.y - 2*c12.x*c20.y*c12.y*c22.x -
            2*c12.x*c21.x*c12.y*c21.y - 2*c10.x*c12y2*c22.x - 2*c10.y*c12x2*c22.y +
            2*c20.x*c12y2*c22.x - c11y2*c12.x*c22.x - c11x2*c12.y*c22.y + c21x2*c12y2 +
            c12x2*(2*c20.y*c22.y + c21y2),
        2*c10.x*c12.x*c12.y*c21.y + 2*c10.y*c12.x*c21.x*c12.y + c11.x*c11.y*c12.x*c21.y +
            c11.x*c11.y*c21.x*c12.y - 2*c20.x*c12.x*c12.y*c21.y - 2*c12.x*c20.y*c21.x*c12.y -
            2*c10.x*c21.x*c12y2 - 2*c10.y*c12x2*c21.y + 2*c20.x*c21.x*c12y2 -
            c11y2*c12.x*c21.x - c11x2*c12.y*c21.y + 2*c12x2*c20.y*c21.y,
        -2*c10.x*c10.y*c12.x*c12.y - c10.x*c11.x*c11.y*c12.y - c10.y*c11.x*c11.y*c12.x +
            2*c10.x*c12.x*c20.y*c12.y + 2*c10.y*c20.x*c12.x*c12.y + c11.x*c20.x*c11.y*c12.y +
            c11.x*c11.y*c12.x*c20.y - 2*c20.x*c12.x*c20.y*c12.y - 2*c10.x*c20.x*c12y2 +
            c10.x*c11y2*c12.x + c10.y*c11x2*c12.y - 2*c10.y*c12x2*c20.y -
            c20.x*c11y2*c12.x - c11x2*c20.y*c12.y + c10x2*c12y2 + c10y2*c12x2 +
            c20x2*c12y2 + c12x2*c20y2
    );
    var roots = poly.getRootsInInterval(0,1);
    module.exports.Utils.removeMultipleRootsIn01(roots);

    for ( var i = 0; i < roots.length; i++ ) {
        var s = roots[i];
        var xRoots = new Polynomial(
            c12.x,
            c11.x,
            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x
        ).getRoots();
        var yRoots = new Polynomial(
            c12.y,
            c11.y,
            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y
        ).getRoots();

        if ( xRoots.length > 0 && yRoots.length > 0 ) {
            var TOLERANCE = 1e-4;

            checkRoots:
                for ( var j = 0; j < xRoots.length; j++ ) {
                    var xRoot = xRoots[j];

                    if ( 0 <= xRoot && xRoot <= 1 ) {
                        for ( var k = 0; k < yRoots.length; k++ ) {
                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {
                                var v = c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)));
                                result.points.push(new Point2D(v.x, v.y));
                                break checkRoots;
                            }
                        }
                    }
                }
        }
    }

    return result;

};

/**
 *  intersectBezier2Ellipse
 *
 *  @param {Point2D} p1
 *  @param {Point2D} p2
 *  @param {Point2D} p3
 *  @param {Point2D} ec
 *  @param {Number} rx
 *  @param {Number} ry
 *  @returns {Intersection}
 */
module.exports.intersectBezier2Ellipse = function(p1, p2, p3, ec, rx, ry) {
    var a, b;       // temporary variables
    var c2, c1, c0; // coefficients of quadratic
    var result = new Intersection();

    a = p2.multiply(-2);
    c2 = p1.add(a.add(p3));

    a = p1.multiply(-2);
    b = p2.multiply(2);
    c1 = a.add(b);

    c0 = new Point2D(p1.x, p1.y);

    var rxrx  = rx*rx;
    var ryry  = ry*ry;
    var roots = new Polynomial(
        ryry*c2.x*c2.x + rxrx*c2.y*c2.y,
        2*(ryry*c2.x*c1.x + rxrx*c2.y*c1.y),
        ryry*(2*c2.x*c0.x + c1.x*c1.x) + rxrx*(2*c2.y*c0.y+c1.y*c1.y) -
            2*(ryry*ec.x*c2.x + rxrx*ec.y*c2.y),
        2*(ryry*c1.x*(c0.x-ec.x) + rxrx*c1.y*(c0.y-ec.y)),
        ryry*(c0.x*c0.x+ec.x*ec.x) + rxrx*(c0.y*c0.y + ec.y*ec.y) -
            2*(ryry*ec.x*c0.x + rxrx*ec.y*c0.y) - rxrx*ryry
    ).getRoots();

    for ( var i = 0; i < roots.length; i++ ) {
        var t = roots[i];

        if ( 0 <= t && t <= 1 )
            result.points.push( c2.multiply(t*t).add(c1.multiply(t).add(c0)) );
    }

    return result;
};


/**
 *  intersectBezier2Line
 *
 *  @param {Point2D} p1
 *  @param {Point2D} p2
 *  @param {Point2D} p3
 *  @param {Point2D} a1
 *  @param {Point2D} a2
 *  @returns {Intersection}
 */
module.exports.intersectBezier2Line = function(p1, p2, p3, a1, a2) {
    var a, b;             // temporary variables
    var c2, c1, c0;       // coefficients of quadratic
    var cl;               // c coefficient for normal form of line
    var n;                // normal for normal form of line
    var min = a1.min(a2); // used to determine if point is on line segment
    var max = a1.max(a2); // used to determine if point is on line segment
    var result = new Intersection();

    a = p2.multiply(-2);
    c2 = p1.add(a.add(p3));

    a = p1.multiply(-2);
    b = p2.multiply(2);
    c1 = a.add(b);

    c0 = new Point2D(p1.x, p1.y);

    // Convert line to normal form: ax + by + c = 0
    // Find normal to line: negative inverse of original line's slope
    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);

    // Determine new c coefficient
    cl = a1.x*a2.y - a2.x*a1.y;

    // Transform cubic coefficients to line's coordinate system and find roots
    // of cubic
    roots = new Polynomial(
        n.dot(c2),
        n.dot(c1),
        n.dot(c0) + cl
    ).getRoots();

    // Any roots in closed interval [0,1] are intersections on Bezier, but
    // might not be on the line segment.
    // Find intersections and calculate point coordinates
    for ( var i = 0; i < roots.length; i++ ) {
        var t = roots[i];

        if ( 0 <= t && t <= 1 ) {
            // We're within the Bezier curve
            // Find point on Bezier
            var p4 = p1.lerp(p2, t);
            var p5 = p2.lerp(p3, t);

            var p6 = p4.lerp(p5, t);

            // See if point is on line segment
            // Had to make special cases for vertical and horizontal lines due
            // to slight errors in calculation of p6
            if ( a1.x == a2.x ) {
                if ( min.y <= p6.y && p6.y <= max.y ) {
                    result.appendPoint( p6 );
                }
            } else if ( a1.y == a2.y ) {
                if ( min.x <= p6.x && p6.x <= max.x ) {
                    result.appendPoint( p6 );
                }
            } else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {
                result.appendPoint( p6 );
            }
        }
    }

    return result;
};


/**
 *  intersectBezier3Bezier3
 *
 *  @param {Point2D} a1
 *  @param {Point2D} a2
 *  @param {Point2D} a3
 *  @param {Point2D} a4
 *  @param {Point2D} b1
 *  @param {Point2D} b2
 *  @param {Point2D} b3
 *  @param {Point2D} b4
 *  @returns {Intersection}
 */
module.exports.intersectBezier3Bezier3 = function(a1, a2, a3, a4, b1, b2, b3, b4) {
    var a, b, c, d;         // temporary variables
    var c13, c12, c11, c10; // coefficients of cubic
    var c23, c22, c21, c20; // coefficients of cubic
    var result = new Intersection();

    // Calculate the coefficients of cubic polynomial
    a = a1.multiply(-1);
    b = a2.multiply(3);
    c = a3.multiply(-3);
    d = a.add(b.add(c.add(a4)));
    c13 = new Vector2D(d.x, d.y);

    a = a1.multiply(3);
    b = a2.multiply(-6);
    c = a3.multiply(3);
    d = a.add(b.add(c));
    c12 = new Vector2D(d.x, d.y);

    a = a1.multiply(-3);
    b = a2.multiply(3);
    c = a.add(b);
    c11 = new Vector2D(c.x, c.y);

    c10 = new Vector2D(a1.x, a1.y);

    a = b1.multiply(-1);
    b = b2.multiply(3);
    c = b3.multiply(-3);
    d = a.add(b.add(c.add(b4)));
    c23 = new Vector2D(d.x, d.y);

    a = b1.multiply(3);
    b = b2.multiply(-6);
    c = b3.multiply(3);
    d = a.add(b.add(c));
    c22 = new Vector2D(d.x, d.y);

    a = b1.multiply(-3);
    b = b2.multiply(3);
    c = a.add(b);
    c21 = new Vector2D(c.x, c.y);

    c20 = new Vector2D(b1.x, b1.y);

    var c10x2 = c10.x*c10.x;
    var c10x3 = c10.x*c10.x*c10.x;
    var c10y2 = c10.y*c10.y;
    var c10y3 = c10.y*c10.y*c10.y;
    var c11x2 = c11.x*c11.x;
    var c11x3 = c11.x*c11.x*c11.x;
    var c11y2 = c11.y*c11.y;
    var c11y3 = c11.y*c11.y*c11.y;
    var c12x2 = c12.x*c12.x;
    var c12x3 = c12.x*c12.x*c12.x;
    var c12y2 = c12.y*c12.y;
    var c12y3 = c12.y*c12.y*c12.y;
    var c13x2 = c13.x*c13.x;
    var c13x3 = c13.x*c13.x*c13.x;
    var c13y2 = c13.y*c13.y;
    var c13y3 = c13.y*c13.y*c13.y;
    var c20x2 = c20.x*c20.x;
    var c20x3 = c20.x*c20.x*c20.x;
    var c20y2 = c20.y*c20.y;
    var c20y3 = c20.y*c20.y*c20.y;
    var c21x2 = c21.x*c21.x;
    var c21x3 = c21.x*c21.x*c21.x;
    var c21y2 = c21.y*c21.y;
    var c22x2 = c22.x*c22.x;
    var c22x3 = c22.x*c22.x*c22.x;
    var c22y2 = c22.y*c22.y;
    var c23x2 = c23.x*c23.x;
    var c23x3 = c23.x*c23.x*c23.x;
    var c23y2 = c23.y*c23.y;
    var c23y3 = c23.y*c23.y*c23.y;
    var poly = new Polynomial(
        -c13x3*c23y3 + c13y3*c23x3 - 3*c13.x*c13y2*c23x2*c23.y +
            3*c13x2*c13.y*c23.x*c23y2,
        -6*c13.x*c22.x*c13y2*c23.x*c23.y + 6*c13x2*c13.y*c22.y*c23.x*c23.y + 3*c22.x*c13y3*c23x2 -
            3*c13x3*c22.y*c23y2 - 3*c13.x*c13y2*c22.y*c23x2 + 3*c13x2*c22.x*c13.y*c23y2,
        -6*c21.x*c13.x*c13y2*c23.x*c23.y - 6*c13.x*c22.x*c13y2*c22.y*c23.x + 6*c13x2*c22.x*c13.y*c22.y*c23.y +
            3*c21.x*c13y3*c23x2 + 3*c22x2*c13y3*c23.x + 3*c21.x*c13x2*c13.y*c23y2 - 3*c13.x*c21.y*c13y2*c23x2 -
            3*c13.x*c22x2*c13y2*c23.y + c13x2*c13.y*c23.x*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-c21.y*c23y2 -
            2*c22y2*c23.y - c23.y*(2*c21.y*c23.y + c22y2)),
        c11.x*c12.y*c13.x*c13.y*c23.x*c23.y - c11.y*c12.x*c13.x*c13.y*c23.x*c23.y + 6*c21.x*c22.x*c13y3*c23.x +
            3*c11.x*c12.x*c13.x*c13.y*c23y2 + 6*c10.x*c13.x*c13y2*c23.x*c23.y - 3*c11.x*c12.x*c13y2*c23.x*c23.y -
            3*c11.y*c12.y*c13.x*c13.y*c23x2 - 6*c10.y*c13x2*c13.y*c23.x*c23.y - 6*c20.x*c13.x*c13y2*c23.x*c23.y +
            3*c11.y*c12.y*c13x2*c23.x*c23.y - 2*c12.x*c12y2*c13.x*c23.x*c23.y - 6*c21.x*c13.x*c22.x*c13y2*c23.y -
            6*c21.x*c13.x*c13y2*c22.y*c23.x - 6*c13.x*c21.y*c22.x*c13y2*c23.x + 6*c21.x*c13x2*c13.y*c22.y*c23.y +
            2*c12x2*c12.y*c13.y*c23.x*c23.y + c22x3*c13y3 - 3*c10.x*c13y3*c23x2 + 3*c10.y*c13x3*c23y2 +
            3*c20.x*c13y3*c23x2 + c12y3*c13.x*c23x2 - c12x3*c13.y*c23y2 - 3*c10.x*c13x2*c13.y*c23y2 +
            3*c10.y*c13.x*c13y2*c23x2 - 2*c11.x*c12.y*c13x2*c23y2 + c11.x*c12.y*c13y2*c23x2 - c11.y*c12.x*c13x2*c23y2 +
            2*c11.y*c12.x*c13y2*c23x2 + 3*c20.x*c13x2*c13.y*c23y2 - c12.x*c12y2*c13.y*c23x2 -
            3*c20.y*c13.x*c13y2*c23x2 + c12x2*c12.y*c13.x*c23y2 - 3*c13.x*c22x2*c13y2*c22.y +
            c13x2*c13.y*c23.x*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c22.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +
            c13x3*(-2*c21.y*c22.y*c23.y - c20.y*c23y2 - c22.y*(2*c21.y*c23.y + c22y2) - c23.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),
        6*c11.x*c12.x*c13.x*c13.y*c22.y*c23.y + c11.x*c12.y*c13.x*c22.x*c13.y*c23.y + c11.x*c12.y*c13.x*c13.y*c22.y*c23.x -
            c11.y*c12.x*c13.x*c22.x*c13.y*c23.y - c11.y*c12.x*c13.x*c13.y*c22.y*c23.x - 6*c11.y*c12.y*c13.x*c22.x*c13.y*c23.x -
            6*c10.x*c22.x*c13y3*c23.x + 6*c20.x*c22.x*c13y3*c23.x + 6*c10.y*c13x3*c22.y*c23.y + 2*c12y3*c13.x*c22.x*c23.x -
            2*c12x3*c13.y*c22.y*c23.y + 6*c10.x*c13.x*c22.x*c13y2*c23.y + 6*c10.x*c13.x*c13y2*c22.y*c23.x +
            6*c10.y*c13.x*c22.x*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c23.y - 3*c11.x*c12.x*c13y2*c22.y*c23.x +
            2*c11.x*c12.y*c22.x*c13y2*c23.x + 4*c11.y*c12.x*c22.x*c13y2*c23.x - 6*c10.x*c13x2*c13.y*c22.y*c23.y -
            6*c10.y*c13x2*c22.x*c13.y*c23.y - 6*c10.y*c13x2*c13.y*c22.y*c23.x - 4*c11.x*c12.y*c13x2*c22.y*c23.y -
            6*c20.x*c13.x*c22.x*c13y2*c23.y - 6*c20.x*c13.x*c13y2*c22.y*c23.x - 2*c11.y*c12.x*c13x2*c22.y*c23.y +
            3*c11.y*c12.y*c13x2*c22.x*c23.y + 3*c11.y*c12.y*c13x2*c22.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c23.y -
            2*c12.x*c12y2*c13.x*c22.y*c23.x - 2*c12.x*c12y2*c22.x*c13.y*c23.x - 6*c20.y*c13.x*c22.x*c13y2*c23.x -
            6*c21.x*c13.x*c21.y*c13y2*c23.x - 6*c21.x*c13.x*c22.x*c13y2*c22.y + 6*c20.x*c13x2*c13.y*c22.y*c23.y +
            2*c12x2*c12.y*c13.x*c22.y*c23.y + 2*c12x2*c12.y*c22.x*c13.y*c23.y + 2*c12x2*c12.y*c13.y*c22.y*c23.x +
            3*c21.x*c22x2*c13y3 + 3*c21x2*c13y3*c23.x - 3*c13.x*c21.y*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c23.y +
            c13x2*c22.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c13.y*c23.x*(6*c20.y*c22.y + 3*c21y2) +
            c21.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-2*c20.y*c22.y*c23.y - c23.y*(2*c20.y*c22.y + c21y2) -
            c21.y*(2*c21.y*c23.y + c22y2) - c22.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),
        c11.x*c21.x*c12.y*c13.x*c13.y*c23.y + c11.x*c12.y*c13.x*c21.y*c13.y*c23.x + c11.x*c12.y*c13.x*c22.x*c13.y*c22.y -
            c11.y*c12.x*c21.x*c13.x*c13.y*c23.y - c11.y*c12.x*c13.x*c21.y*c13.y*c23.x - c11.y*c12.x*c13.x*c22.x*c13.y*c22.y -
            6*c11.y*c21.x*c12.y*c13.x*c13.y*c23.x - 6*c10.x*c21.x*c13y3*c23.x + 6*c20.x*c21.x*c13y3*c23.x +
            2*c21.x*c12y3*c13.x*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c23.y + 6*c10.x*c13.x*c21.y*c13y2*c23.x +
            6*c10.x*c13.x*c22.x*c13y2*c22.y + 6*c10.y*c21.x*c13.x*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c23.y -
            3*c11.x*c12.x*c21.y*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c22.y + 2*c11.x*c21.x*c12.y*c13y2*c23.x +
            4*c11.y*c12.x*c21.x*c13y2*c23.x - 6*c10.y*c21.x*c13x2*c13.y*c23.y - 6*c10.y*c13x2*c21.y*c13.y*c23.x -
            6*c10.y*c13x2*c22.x*c13.y*c22.y - 6*c20.x*c21.x*c13.x*c13y2*c23.y - 6*c20.x*c13.x*c21.y*c13y2*c23.x -
            6*c20.x*c13.x*c22.x*c13y2*c22.y + 3*c11.y*c21.x*c12.y*c13x2*c23.y - 3*c11.y*c12.y*c13.x*c22x2*c13.y +
            3*c11.y*c12.y*c13x2*c21.y*c23.x + 3*c11.y*c12.y*c13x2*c22.x*c22.y - 2*c12.x*c21.x*c12y2*c13.x*c23.y -
            2*c12.x*c21.x*c12y2*c13.y*c23.x - 2*c12.x*c12y2*c13.x*c21.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c22.y -
            6*c20.y*c21.x*c13.x*c13y2*c23.x - 6*c21.x*c13.x*c21.y*c22.x*c13y2 + 6*c20.y*c13x2*c21.y*c13.y*c23.x +
            2*c12x2*c21.x*c12.y*c13.y*c23.y + 2*c12x2*c12.y*c21.y*c13.y*c23.x + 2*c12x2*c12.y*c22.x*c13.y*c22.y -
            3*c10.x*c22x2*c13y3 + 3*c20.x*c22x2*c13y3 + 3*c21x2*c22.x*c13y3 + c12y3*c13.x*c22x2 +
            3*c10.y*c13.x*c22x2*c13y2 + c11.x*c12.y*c22x2*c13y2 + 2*c11.y*c12.x*c22x2*c13y2 -
            c12.x*c12y2*c22x2*c13.y - 3*c20.y*c13.x*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c22.y +
            c12x2*c12.y*c13.x*(2*c21.y*c23.y + c22y2) + c11.x*c12.x*c13.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +
            c21.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c21.y*c23.y - c22y2) +
            c10.y*c13x3*(6*c21.y*c23.y + 3*c22y2) + c11.y*c12.x*c13x2*(-2*c21.y*c23.y - c22y2) +
            c11.x*c12.y*c13x2*(-4*c21.y*c23.y - 2*c22y2) + c10.x*c13x2*c13.y*(-6*c21.y*c23.y - 3*c22y2) +
            c13x2*c22.x*c13.y*(6*c20.y*c22.y + 3*c21y2) + c20.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) +
            c13x3*(-2*c20.y*c21.y*c23.y - c22.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c21.y*c23.y + c22y2) -
            c21.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),
        -c10.x*c11.x*c12.y*c13.x*c13.y*c23.y + c10.x*c11.y*c12.x*c13.x*c13.y*c23.y + 6*c10.x*c11.y*c12.y*c13.x*c13.y*c23.x -
            6*c10.y*c11.x*c12.x*c13.x*c13.y*c23.y - c10.y*c11.x*c12.y*c13.x*c13.y*c23.x + c10.y*c11.y*c12.x*c13.x*c13.y*c23.x +
            c11.x*c11.y*c12.x*c12.y*c13.x*c23.y - c11.x*c11.y*c12.x*c12.y*c13.y*c23.x + c11.x*c20.x*c12.y*c13.x*c13.y*c23.y +
            c11.x*c20.y*c12.y*c13.x*c13.y*c23.x + c11.x*c21.x*c12.y*c13.x*c13.y*c22.y + c11.x*c12.y*c13.x*c21.y*c22.x*c13.y -
            c20.x*c11.y*c12.x*c13.x*c13.y*c23.y - 6*c20.x*c11.y*c12.y*c13.x*c13.y*c23.x - c11.y*c12.x*c20.y*c13.x*c13.y*c23.x -
            c11.y*c12.x*c21.x*c13.x*c13.y*c22.y - c11.y*c12.x*c13.x*c21.y*c22.x*c13.y - 6*c11.y*c21.x*c12.y*c13.x*c22.x*c13.y -
            6*c10.x*c20.x*c13y3*c23.x - 6*c10.x*c21.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c23.x + 6*c20.x*c21.x*c22.x*c13y3 +
            2*c20.x*c12y3*c13.x*c23.x + 2*c21.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c23.y - 6*c10.x*c10.y*c13.x*c13y2*c23.x +
            3*c10.x*c11.x*c12.x*c13y2*c23.y - 2*c10.x*c11.x*c12.y*c13y2*c23.x - 4*c10.x*c11.y*c12.x*c13y2*c23.x +
            3*c10.y*c11.x*c12.x*c13y2*c23.x + 6*c10.x*c10.y*c13x2*c13.y*c23.y + 6*c10.x*c20.x*c13.x*c13y2*c23.y -
            3*c10.x*c11.y*c12.y*c13x2*c23.y + 2*c10.x*c12.x*c12y2*c13.x*c23.y + 2*c10.x*c12.x*c12y2*c13.y*c23.x +
            6*c10.x*c20.y*c13.x*c13y2*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c22.y + 6*c10.x*c13.x*c21.y*c22.x*c13y2 +
            4*c10.y*c11.x*c12.y*c13x2*c23.y + 6*c10.y*c20.x*c13.x*c13y2*c23.x + 2*c10.y*c11.y*c12.x*c13x2*c23.y -
            3*c10.y*c11.y*c12.y*c13x2*c23.x + 2*c10.y*c12.x*c12y2*c13.x*c23.x + 6*c10.y*c21.x*c13.x*c22.x*c13y2 -
            3*c11.x*c20.x*c12.x*c13y2*c23.y + 2*c11.x*c20.x*c12.y*c13y2*c23.x + c11.x*c11.y*c12y2*c13.x*c23.x -
            3*c11.x*c12.x*c20.y*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c22.y - 3*c11.x*c12.x*c21.y*c22.x*c13y2 +
            2*c11.x*c21.x*c12.y*c22.x*c13y2 + 4*c20.x*c11.y*c12.x*c13y2*c23.x + 4*c11.y*c12.x*c21.x*c22.x*c13y2 -
            2*c10.x*c12x2*c12.y*c13.y*c23.y - 6*c10.y*c20.x*c13x2*c13.y*c23.y - 6*c10.y*c20.y*c13x2*c13.y*c23.x -
            6*c10.y*c21.x*c13x2*c13.y*c22.y - 2*c10.y*c12x2*c12.y*c13.x*c23.y - 2*c10.y*c12x2*c12.y*c13.y*c23.x -
            6*c10.y*c13x2*c21.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c23.y - 2*c11.x*c11y2*c13.x*c13.y*c23.x +
            3*c20.x*c11.y*c12.y*c13x2*c23.y - 2*c20.x*c12.x*c12y2*c13.x*c23.y - 2*c20.x*c12.x*c12y2*c13.y*c23.x -
            6*c20.x*c20.y*c13.x*c13y2*c23.x - 6*c20.x*c21.x*c13.x*c13y2*c22.y - 6*c20.x*c13.x*c21.y*c22.x*c13y2 +
            3*c11.y*c20.y*c12.y*c13x2*c23.x + 3*c11.y*c21.x*c12.y*c13x2*c22.y + 3*c11.y*c12.y*c13x2*c21.y*c22.x -
            2*c12.x*c20.y*c12y2*c13.x*c23.x - 2*c12.x*c21.x*c12y2*c13.x*c22.y - 2*c12.x*c21.x*c12y2*c22.x*c13.y -
            2*c12.x*c12y2*c13.x*c21.y*c22.x - 6*c20.y*c21.x*c13.x*c22.x*c13y2 - c11y2*c12.x*c12.y*c13.x*c23.x +
            2*c20.x*c12x2*c12.y*c13.y*c23.y + 6*c20.y*c13x2*c21.y*c22.x*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c23.y +
            c11x2*c12.x*c12.y*c13.y*c23.y + 2*c12x2*c20.y*c12.y*c13.y*c23.x + 2*c12x2*c21.x*c12.y*c13.y*c22.y +
            2*c12x2*c12.y*c21.y*c22.x*c13.y + c21x3*c13y3 + 3*c10x2*c13y3*c23.x - 3*c10y2*c13x3*c23.y +
            3*c20x2*c13y3*c23.x + c11y3*c13x2*c23.x - c11x3*c13y2*c23.y - c11.x*c11y2*c13x2*c23.y +
            c11x2*c11.y*c13y2*c23.x - 3*c10x2*c13.x*c13y2*c23.y + 3*c10y2*c13x2*c13.y*c23.x - c11x2*c12y2*c13.x*c23.y +
            c11y2*c12x2*c13.y*c23.x - 3*c21x2*c13.x*c21.y*c13y2 - 3*c20x2*c13.x*c13y2*c23.y + 3*c20y2*c13x2*c13.y*c23.x +
            c11.x*c12.x*c13.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c20.y*c23.y - 2*c21.y*c22.y) +
            c10.y*c13x3*(6*c20.y*c23.y + 6*c21.y*c22.y) + c11.y*c12.x*c13x2*(-2*c20.y*c23.y - 2*c21.y*c22.y) +
            c12x2*c12.y*c13.x*(2*c20.y*c23.y + 2*c21.y*c22.y) + c11.x*c12.y*c13x2*(-4*c20.y*c23.y - 4*c21.y*c22.y) +
            c10.x*c13x2*c13.y*(-6*c20.y*c23.y - 6*c21.y*c22.y) + c20.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) +
            c21.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) + c13x3*(-2*c20.y*c21.y*c22.y - c20y2*c23.y -
            c21.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),
        -c10.x*c11.x*c12.y*c13.x*c13.y*c22.y + c10.x*c11.y*c12.x*c13.x*c13.y*c22.y + 6*c10.x*c11.y*c12.y*c13.x*c22.x*c13.y -
            6*c10.y*c11.x*c12.x*c13.x*c13.y*c22.y - c10.y*c11.x*c12.y*c13.x*c22.x*c13.y + c10.y*c11.y*c12.x*c13.x*c22.x*c13.y +
            c11.x*c11.y*c12.x*c12.y*c13.x*c22.y - c11.x*c11.y*c12.x*c12.y*c22.x*c13.y + c11.x*c20.x*c12.y*c13.x*c13.y*c22.y +
            c11.x*c20.y*c12.y*c13.x*c22.x*c13.y + c11.x*c21.x*c12.y*c13.x*c21.y*c13.y - c20.x*c11.y*c12.x*c13.x*c13.y*c22.y -
            6*c20.x*c11.y*c12.y*c13.x*c22.x*c13.y - c11.y*c12.x*c20.y*c13.x*c22.x*c13.y - c11.y*c12.x*c21.x*c13.x*c21.y*c13.y -
            6*c10.x*c20.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c22.x + 2*c20.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c22.y -
            6*c10.x*c10.y*c13.x*c22.x*c13y2 + 3*c10.x*c11.x*c12.x*c13y2*c22.y - 2*c10.x*c11.x*c12.y*c22.x*c13y2 -
            4*c10.x*c11.y*c12.x*c22.x*c13y2 + 3*c10.y*c11.x*c12.x*c22.x*c13y2 + 6*c10.x*c10.y*c13x2*c13.y*c22.y +
            6*c10.x*c20.x*c13.x*c13y2*c22.y - 3*c10.x*c11.y*c12.y*c13x2*c22.y + 2*c10.x*c12.x*c12y2*c13.x*c22.y +
            2*c10.x*c12.x*c12y2*c22.x*c13.y + 6*c10.x*c20.y*c13.x*c22.x*c13y2 + 6*c10.x*c21.x*c13.x*c21.y*c13y2 +
            4*c10.y*c11.x*c12.y*c13x2*c22.y + 6*c10.y*c20.x*c13.x*c22.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c22.y -
            3*c10.y*c11.y*c12.y*c13x2*c22.x + 2*c10.y*c12.x*c12y2*c13.x*c22.x - 3*c11.x*c20.x*c12.x*c13y2*c22.y +
            2*c11.x*c20.x*c12.y*c22.x*c13y2 + c11.x*c11.y*c12y2*c13.x*c22.x - 3*c11.x*c12.x*c20.y*c22.x*c13y2 -
            3*c11.x*c12.x*c21.x*c21.y*c13y2 + 4*c20.x*c11.y*c12.x*c22.x*c13y2 - 2*c10.x*c12x2*c12.y*c13.y*c22.y -
            6*c10.y*c20.x*c13x2*c13.y*c22.y - 6*c10.y*c20.y*c13x2*c22.x*c13.y - 6*c10.y*c21.x*c13x2*c21.y*c13.y -
            2*c10.y*c12x2*c12.y*c13.x*c22.y - 2*c10.y*c12x2*c12.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c22.y -
            2*c11.x*c11y2*c13.x*c22.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c22.y - 2*c20.x*c12.x*c12y2*c13.x*c22.y -
            2*c20.x*c12.x*c12y2*c22.x*c13.y - 6*c20.x*c20.y*c13.x*c22.x*c13y2 - 6*c20.x*c21.x*c13.x*c21.y*c13y2 +
            3*c11.y*c20.y*c12.y*c13x2*c22.x + 3*c11.y*c21.x*c12.y*c13x2*c21.y - 2*c12.x*c20.y*c12y2*c13.x*c22.x -
            2*c12.x*c21.x*c12y2*c13.x*c21.y - c11y2*c12.x*c12.y*c13.x*c22.x + 2*c20.x*c12x2*c12.y*c13.y*c22.y -
            3*c11.y*c21x2*c12.y*c13.x*c13.y + 6*c20.y*c21.x*c13x2*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c22.y +
            c11x2*c12.x*c12.y*c13.y*c22.y + 2*c12x2*c20.y*c12.y*c22.x*c13.y + 2*c12x2*c21.x*c12.y*c21.y*c13.y -
            3*c10.x*c21x2*c13y3 + 3*c20.x*c21x2*c13y3 + 3*c10x2*c22.x*c13y3 - 3*c10y2*c13x3*c22.y + 3*c20x2*c22.x*c13y3 +
            c21x2*c12y3*c13.x + c11y3*c13x2*c22.x - c11x3*c13y2*c22.y + 3*c10.y*c21x2*c13.x*c13y2 -
            c11.x*c11y2*c13x2*c22.y + c11.x*c21x2*c12.y*c13y2 + 2*c11.y*c12.x*c21x2*c13y2 + c11x2*c11.y*c22.x*c13y2 -
            c12.x*c21x2*c12y2*c13.y - 3*c20.y*c21x2*c13.x*c13y2 - 3*c10x2*c13.x*c13y2*c22.y + 3*c10y2*c13x2*c22.x*c13.y -
            c11x2*c12y2*c13.x*c22.y + c11y2*c12x2*c22.x*c13.y - 3*c20x2*c13.x*c13y2*c22.y + 3*c20y2*c13x2*c22.x*c13.y +
            c12x2*c12.y*c13.x*(2*c20.y*c22.y + c21y2) + c11.x*c12.x*c13.x*c13.y*(6*c20.y*c22.y + 3*c21y2) +
            c12x3*c13.y*(-2*c20.y*c22.y - c21y2) + c10.y*c13x3*(6*c20.y*c22.y + 3*c21y2) +
            c11.y*c12.x*c13x2*(-2*c20.y*c22.y - c21y2) + c11.x*c12.y*c13x2*(-4*c20.y*c22.y - 2*c21y2) +
            c10.x*c13x2*c13.y*(-6*c20.y*c22.y - 3*c21y2) + c20.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) +
            c13x3*(-2*c20.y*c21y2 - c20y2*c22.y - c20.y*(2*c20.y*c22.y + c21y2)),
        -c10.x*c11.x*c12.y*c13.x*c21.y*c13.y + c10.x*c11.y*c12.x*c13.x*c21.y*c13.y + 6*c10.x*c11.y*c21.x*c12.y*c13.x*c13.y -
            6*c10.y*c11.x*c12.x*c13.x*c21.y*c13.y - c10.y*c11.x*c21.x*c12.y*c13.x*c13.y + c10.y*c11.y*c12.x*c21.x*c13.x*c13.y -
            c11.x*c11.y*c12.x*c21.x*c12.y*c13.y + c11.x*c11.y*c12.x*c12.y*c13.x*c21.y + c11.x*c20.x*c12.y*c13.x*c21.y*c13.y +
            6*c11.x*c12.x*c20.y*c13.x*c21.y*c13.y + c11.x*c20.y*c21.x*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c13.x*c21.y*c13.y -
            6*c20.x*c11.y*c21.x*c12.y*c13.x*c13.y - c11.y*c12.x*c20.y*c21.x*c13.x*c13.y - 6*c10.x*c20.x*c21.x*c13y3 -
            2*c10.x*c21.x*c12y3*c13.x + 6*c10.y*c20.y*c13x3*c21.y + 2*c20.x*c21.x*c12y3*c13.x + 2*c10.y*c12x3*c21.y*c13.y -
            2*c12x3*c20.y*c21.y*c13.y - 6*c10.x*c10.y*c21.x*c13.x*c13y2 + 3*c10.x*c11.x*c12.x*c21.y*c13y2 -
            2*c10.x*c11.x*c21.x*c12.y*c13y2 - 4*c10.x*c11.y*c12.x*c21.x*c13y2 + 3*c10.y*c11.x*c12.x*c21.x*c13y2 +
            6*c10.x*c10.y*c13x2*c21.y*c13.y + 6*c10.x*c20.x*c13.x*c21.y*c13y2 - 3*c10.x*c11.y*c12.y*c13x2*c21.y +
            2*c10.x*c12.x*c21.x*c12y2*c13.y + 2*c10.x*c12.x*c12y2*c13.x*c21.y + 6*c10.x*c20.y*c21.x*c13.x*c13y2 +
            4*c10.y*c11.x*c12.y*c13x2*c21.y + 6*c10.y*c20.x*c21.x*c13.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c21.y -
            3*c10.y*c11.y*c21.x*c12.y*c13x2 + 2*c10.y*c12.x*c21.x*c12y2*c13.x - 3*c11.x*c20.x*c12.x*c21.y*c13y2 +
            2*c11.x*c20.x*c21.x*c12.y*c13y2 + c11.x*c11.y*c21.x*c12y2*c13.x - 3*c11.x*c12.x*c20.y*c21.x*c13y2 +
            4*c20.x*c11.y*c12.x*c21.x*c13y2 - 6*c10.x*c20.y*c13x2*c21.y*c13.y - 2*c10.x*c12x2*c12.y*c21.y*c13.y -
            6*c10.y*c20.x*c13x2*c21.y*c13.y - 6*c10.y*c20.y*c21.x*c13x2*c13.y - 2*c10.y*c12x2*c21.x*c12.y*c13.y -
            2*c10.y*c12x2*c12.y*c13.x*c21.y - c11.x*c11.y*c12x2*c21.y*c13.y - 4*c11.x*c20.y*c12.y*c13x2*c21.y -
            2*c11.x*c11y2*c21.x*c13.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c21.y - 2*c20.x*c12.x*c21.x*c12y2*c13.y -
            2*c20.x*c12.x*c12y2*c13.x*c21.y - 6*c20.x*c20.y*c21.x*c13.x*c13y2 - 2*c11.y*c12.x*c20.y*c13x2*c21.y +
            3*c11.y*c20.y*c21.x*c12.y*c13x2 - 2*c12.x*c20.y*c21.x*c12y2*c13.x - c11y2*c12.x*c21.x*c12.y*c13.x +
            6*c20.x*c20.y*c13x2*c21.y*c13.y + 2*c20.x*c12x2*c12.y*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c21.y*c13.y +
            c11x2*c12.x*c12.y*c21.y*c13.y + 2*c12x2*c20.y*c21.x*c12.y*c13.y + 2*c12x2*c20.y*c12.y*c13.x*c21.y +
            3*c10x2*c21.x*c13y3 - 3*c10y2*c13x3*c21.y + 3*c20x2*c21.x*c13y3 + c11y3*c21.x*c13x2 - c11x3*c21.y*c13y2 -
            3*c20y2*c13x3*c21.y - c11.x*c11y2*c13x2*c21.y + c11x2*c11.y*c21.x*c13y2 - 3*c10x2*c13.x*c21.y*c13y2 +
            3*c10y2*c21.x*c13x2*c13.y - c11x2*c12y2*c13.x*c21.y + c11y2*c12x2*c21.x*c13.y - 3*c20x2*c13.x*c21.y*c13y2 +
            3*c20y2*c21.x*c13x2*c13.y,
        c10.x*c10.y*c11.x*c12.y*c13.x*c13.y - c10.x*c10.y*c11.y*c12.x*c13.x*c13.y + c10.x*c11.x*c11.y*c12.x*c12.y*c13.y -
            c10.y*c11.x*c11.y*c12.x*c12.y*c13.x - c10.x*c11.x*c20.y*c12.y*c13.x*c13.y + 6*c10.x*c20.x*c11.y*c12.y*c13.x*c13.y +
            c10.x*c11.y*c12.x*c20.y*c13.x*c13.y - c10.y*c11.x*c20.x*c12.y*c13.x*c13.y - 6*c10.y*c11.x*c12.x*c20.y*c13.x*c13.y +
            c10.y*c20.x*c11.y*c12.x*c13.x*c13.y - c11.x*c20.x*c11.y*c12.x*c12.y*c13.y + c11.x*c11.y*c12.x*c20.y*c12.y*c13.x +
            c11.x*c20.x*c20.y*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c20.y*c13.x*c13.y - 2*c10.x*c20.x*c12y3*c13.x +
            2*c10.y*c12x3*c20.y*c13.y - 3*c10.x*c10.y*c11.x*c12.x*c13y2 - 6*c10.x*c10.y*c20.x*c13.x*c13y2 +
            3*c10.x*c10.y*c11.y*c12.y*c13x2 - 2*c10.x*c10.y*c12.x*c12y2*c13.x - 2*c10.x*c11.x*c20.x*c12.y*c13y2 -
            c10.x*c11.x*c11.y*c12y2*c13.x + 3*c10.x*c11.x*c12.x*c20.y*c13y2 - 4*c10.x*c20.x*c11.y*c12.x*c13y2 +
            3*c10.y*c11.x*c20.x*c12.x*c13y2 + 6*c10.x*c10.y*c20.y*c13x2*c13.y + 2*c10.x*c10.y*c12x2*c12.y*c13.y +
            2*c10.x*c11.x*c11y2*c13.x*c13.y + 2*c10.x*c20.x*c12.x*c12y2*c13.y + 6*c10.x*c20.x*c20.y*c13.x*c13y2 -
            3*c10.x*c11.y*c20.y*c12.y*c13x2 + 2*c10.x*c12.x*c20.y*c12y2*c13.x + c10.x*c11y2*c12.x*c12.y*c13.x +
            c10.y*c11.x*c11.y*c12x2*c13.y + 4*c10.y*c11.x*c20.y*c12.y*c13x2 - 3*c10.y*c20.x*c11.y*c12.y*c13x2 +
            2*c10.y*c20.x*c12.x*c12y2*c13.x + 2*c10.y*c11.y*c12.x*c20.y*c13x2 + c11.x*c20.x*c11.y*c12y2*c13.x -
            3*c11.x*c20.x*c12.x*c20.y*c13y2 - 2*c10.x*c12x2*c20.y*c12.y*c13.y - 6*c10.y*c20.x*c20.y*c13x2*c13.y -
            2*c10.y*c20.x*c12x2*c12.y*c13.y - 2*c10.y*c11x2*c11.y*c13.x*c13.y - c10.y*c11x2*c12.x*c12.y*c13.y -
            2*c10.y*c12x2*c20.y*c12.y*c13.x - 2*c11.x*c20.x*c11y2*c13.x*c13.y - c11.x*c11.y*c12x2*c20.y*c13.y +
            3*c20.x*c11.y*c20.y*c12.y*c13x2 - 2*c20.x*c12.x*c20.y*c12y2*c13.x - c20.x*c11y2*c12.x*c12.y*c13.x +
            3*c10y2*c11.x*c12.x*c13.x*c13.y + 3*c11.x*c12.x*c20y2*c13.x*c13.y + 2*c20.x*c12x2*c20.y*c12.y*c13.y -
            3*c10x2*c11.y*c12.y*c13.x*c13.y + 2*c11x2*c11.y*c20.y*c13.x*c13.y + c11x2*c12.x*c20.y*c12.y*c13.y -
            3*c20x2*c11.y*c12.y*c13.x*c13.y - c10x3*c13y3 + c10y3*c13x3 + c20x3*c13y3 - c20y3*c13x3 -
            3*c10.x*c20x2*c13y3 - c10.x*c11y3*c13x2 + 3*c10x2*c20.x*c13y3 + c10.y*c11x3*c13y2 +
            3*c10.y*c20y2*c13x3 + c20.x*c11y3*c13x2 + c10x2*c12y3*c13.x - 3*c10y2*c20.y*c13x3 - c10y2*c12x3*c13.y +
            c20x2*c12y3*c13.x - c11x3*c20.y*c13y2 - c12x3*c20y2*c13.y - c10.x*c11x2*c11.y*c13y2 +
            c10.y*c11.x*c11y2*c13x2 - 3*c10.x*c10y2*c13x2*c13.y - c10.x*c11y2*c12x2*c13.y + c10.y*c11x2*c12y2*c13.x -
            c11.x*c11y2*c20.y*c13x2 + 3*c10x2*c10.y*c13.x*c13y2 + c10x2*c11.x*c12.y*c13y2 +
            2*c10x2*c11.y*c12.x*c13y2 - 2*c10y2*c11.x*c12.y*c13x2 - c10y2*c11.y*c12.x*c13x2 + c11x2*c20.x*c11.y*c13y2 -
            3*c10.x*c20y2*c13x2*c13.y + 3*c10.y*c20x2*c13.x*c13y2 + c11.x*c20x2*c12.y*c13y2 - 2*c11.x*c20y2*c12.y*c13x2 +
            c20.x*c11y2*c12x2*c13.y - c11.y*c12.x*c20y2*c13x2 - c10x2*c12.x*c12y2*c13.y - 3*c10x2*c20.y*c13.x*c13y2 +
            3*c10y2*c20.x*c13x2*c13.y + c10y2*c12x2*c12.y*c13.x - c11x2*c20.y*c12y2*c13.x + 2*c20x2*c11.y*c12.x*c13y2 +
            3*c20.x*c20y2*c13x2*c13.y - c20x2*c12.x*c12y2*c13.y - 3*c20x2*c20.y*c13.x*c13y2 + c12x2*c20y2*c12.y*c13.x
    );
    var roots = poly.getRootsInInterval(0,1);
    module.exports.Utils.removeMultipleRootsIn01(roots);

    for ( var i = 0; i < roots.length; i++ ) {
        var s = roots[i];
        var xRoots = new Polynomial(
            c13.x,
            c12.x,
            c11.x,
            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x
        ).getRoots();
        var yRoots = new Polynomial(
            c13.y,
            c12.y,
            c11.y,
            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y
        ).getRoots();

        if ( xRoots.length > 0 && yRoots.length > 0 ) {
            var TOLERANCE = 1e-4;

            checkRoots:
                for ( var j = 0; j < xRoots.length; j++ ) {
                    var xRoot = xRoots[j];

                    if ( 0 <= xRoot && xRoot <= 1 ) {
                        for ( var k = 0; k < yRoots.length; k++ ) {
                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {
                                var v = c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)));
                                result.points.push(new Point2D(v.x, v.y));
                                break checkRoots;
                            }
                        }
                    }
                }
        }
    }

    return result;
};

/**
 *  intersectBezier3Ellipse
 *
 *  @param {Point2D} p1
 *  @param {Point2D} p2
 *  @param {Point2D} p3
 *  @param {Point2D} p4
 *  @param {Point2D} ec
 *  @param {Number} rx
 *  @param {Number} ry
 *  @returns {Intersection}
 */
module.exports.intersectBezier3Ellipse = function(p1, p2, p3, p4, ec, rx, ry) {
    var a, b, c, d;       // temporary variables
    var c3, c2, c1, c0;   // coefficients of cubic
    var result = new Intersection();

    // Calculate the coefficients of cubic polynomial
    a = p1.multiply(-1);
    b = p2.multiply(3);
    c = p3.multiply(-3);
    d = a.add(b.add(c.add(p4)));
    c3 = new Vector2D(d.x, d.y);

    a = p1.multiply(3);
    b = p2.multiply(-6);
    c = p3.multiply(3);
    d = a.add(b.add(c));
    c2 = new Vector2D(d.x, d.y);

    a = p1.multiply(-3);
    b = p2.multiply(3);
    c = a.add(b);
    c1 = new Vector2D(c.x, c.y);

    c0 = new Vector2D(p1.x, p1.y);

    var rxrx  = rx*rx;
    var ryry  = ry*ry;
    var poly = new Polynomial(
        c3.x*c3.x*ryry + c3.y*c3.y*rxrx,
        2*(c3.x*c2.x*ryry + c3.y*c2.y*rxrx),
        2*(c3.x*c1.x*ryry + c3.y*c1.y*rxrx) + c2.x*c2.x*ryry + c2.y*c2.y*rxrx,
        2*c3.x*ryry*(c0.x - ec.x) + 2*c3.y*rxrx*(c0.y - ec.y) +
            2*(c2.x*c1.x*ryry + c2.y*c1.y*rxrx),
        2*c2.x*ryry*(c0.x - ec.x) + 2*c2.y*rxrx*(c0.y - ec.y) +
            c1.x*c1.x*ryry + c1.y*c1.y*rxrx,
        2*c1.x*ryry*(c0.x - ec.x) + 2*c1.y*rxrx*(c0.y - ec.y),
        c0.x*c0.x*ryry - 2*c0.y*ec.y*rxrx - 2*c0.x*ec.x*ryry +
            c0.y*c0.y*rxrx + ec.x*ec.x*ryry + ec.y*ec.y*rxrx - rxrx*ryry
    );
    var roots = poly.getRootsInInterval(0,1);
    module.exports.Utils.removeMultipleRootsIn01(roots);

    for ( var i = 0; i < roots.length; i++ ) {
        var t = roots[i];
        var v = c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)));
        result.points.push(new Point2D(v.x, v.y));
    }

    return result;
};


/**
 *  intersectBezier3Line
 *
 *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough
 *  sketch of the algorithm used here.  Without his help, I'm not sure when I
 *  would have figured out this intersection problem.
 *
 *  @param {Point2D} p1
 *  @param {Point2D} p2
 *  @param {Point2D} p3
 *  @param {Point2D} p4
 *  @param {Point2D} a1
 *  @param {Point2D} a2
 *  @returns {Intersection}
 */
module.exports.intersectBezier3Line = function(p1, p2, p3, p4, a1, a2) {
    var a, b, c, d;       // temporary variables
    var c3, c2, c1, c0;   // coefficients of cubic
    var cl;               // c coefficient for normal form of line
    var n;                // normal for normal form of line
    var min = a1.min(a2); // used to determine if point is on line segment
    var max = a1.max(a2); // used to determine if point is on line segment
    var result = new Intersection();

    // Start with Bezier using Bernstein polynomials for weighting functions:
    //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4
    //
    // Expand and collect terms to form linear combinations of original Bezier
    // controls.  This ends up with a vector cubic in t:
    //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1
    //             /\                  /\                /\       /\
    //             ||                  ||                ||       ||
    //             c3                  c2                c1       c0

    // Calculate the coefficients
    a = p1.multiply(-1);
    b = p2.multiply(3);
    c = p3.multiply(-3);
    d = a.add(b.add(c.add(p4)));
    c3 = new Vector2D(d.x, d.y);

    a = p1.multiply(3);
    b = p2.multiply(-6);
    c = p3.multiply(3);
    d = a.add(b.add(c));
    c2 = new Vector2D(d.x, d.y);

    a = p1.multiply(-3);
    b = p2.multiply(3);
    c = a.add(b);
    c1 = new Vector2D(c.x, c.y);

    c0 = new Vector2D(p1.x, p1.y);

    // Convert line to normal form: ax + by + c = 0
    // Find normal to line: negative inverse of original line's slope
    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);

    // Determine new c coefficient
    cl = a1.x*a2.y - a2.x*a1.y;

    // ?Rotate each cubic coefficient using line for new coordinate system?
    // Find roots of rotated cubic
    roots = new Polynomial(
        n.dot(c3),
        n.dot(c2),
        n.dot(c1),
        n.dot(c0) + cl
    ).getRoots();

    // Any roots in closed interval [0,1] are intersections on Bezier, but
    // might not be on the line segment.
    // Find intersections and calculate point coordinates
    for ( var i = 0; i < roots.length; i++ ) {
        var t = roots[i];

        if ( 0 <= t && t <= 1 ) {
            // We're within the Bezier curve
            // Find point on Bezier
            var p5 = p1.lerp(p2, t);
            var p6 = p2.lerp(p3, t);
            var p7 = p3.lerp(p4, t);

            var p8 = p5.lerp(p6, t);
            var p9 = p6.lerp(p7, t);

            var p10 = p8.lerp(p9, t);

            // See if point is on line segment
            // Had to make special cases for vertical and horizontal lines due
            // to slight errors in calculation of p10
            if ( a1.x == a2.x ) {
                if ( min.y <= p10.y && p10.y <= max.y ) {
                    result.appendPoint( p10 );
                }
            } else if ( a1.y == a2.y ) {
                if ( min.x <= p10.x && p10.x <= max.x ) {
                    result.appendPoint( p10 );
                }
            } else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {
                result.appendPoint( p10 );
            }
        }
    }

    return result;
};


},{"../Intersection":39,"kld-affine":43,"kld-polynomial":47}],42:[function(require,module,exports){
/**
 *
 *  Intersection.js
 *
 *  copyright 2002, 2013 Kevin Lindsey
 *
 *  contribution {@link http://github.com/Quazistax/kld-intersections}
 *      @copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com>
 *      @license MIT
 */
 
var Point2D = require('kld-affine').Point2D;
var Vector2D = require('kld-affine').Vector2D;
var Matrix2D = require('kld-affine').Matrix2D;
var Polynomial = require('kld-polynomial').Polynomial;
var IntersectionParams = require('./IntersectionParams');
var Intersection = require('./Intersection');

var IPTYPE = IntersectionParams.TYPE;



/**
 *  bezout
 *
 *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His
 *  code along with many other excellent examples are avaiable at his site:
 *  http://www.geometrictools.com
 *
 *  @param {Array<Point2D>} e1
 *  @param {Array<Point2D>} e2
 *  @returns {Polynomial}
 */
function bezout(e1, e2) {
    var AB    = e1[0]*e2[1] - e2[0]*e1[1];
    var AC    = e1[0]*e2[2] - e2[0]*e1[2];
    var AD    = e1[0]*e2[3] - e2[0]*e1[3];
    var AE    = e1[0]*e2[4] - e2[0]*e1[4];
    var AF    = e1[0]*e2[5] - e2[0]*e1[5];
    var BC    = e1[1]*e2[2] - e2[1]*e1[2];
    var BE    = e1[1]*e2[4] - e2[1]*e1[4];
    var BF    = e1[1]*e2[5] - e2[1]*e1[5];
    var CD    = e1[2]*e2[3] - e2[2]*e1[3];
    var DE    = e1[3]*e2[4] - e2[3]*e1[4];
    var DF    = e1[3]*e2[5] - e2[3]*e1[5];
    var BFpDE = BF + DE;
    var BEmCD = BE - CD;

    return new Polynomial(
        AB*BC - AC*AC,
        AB*BEmCD + AD*BC - 2*AC*AE,
        AB*BFpDE + AD*BEmCD - AE*AE - 2*AC*AF,
        AB*DF + AD*BFpDE - 2*AE*AF,
        AD*DF - AF*AF
    );
}

/**
    Removes from intersection points those points that are not between two rays determined by arc parameters.
    Rays begin at ellipse center and go through arc startPoint/endPoint.

    @param {Intersection} intersection - will be modified and returned
    @param {Point2D} c - center of arc ellipse
    @param {Number} rx
    @param {Number} ry
    @param {Number} phi - in radians
    @param {Number} th1 - in radians
    @param {Number} dth - in radians
    @param {Matrix2D} [m] - arc transformation matrix
    @returns {Intersection}
*/
function removePointsNotInArc(intersection, c, rx, ry, phi, th1, dth, m) {
    if (intersection.points.length === 0) return intersection;
    if (m && !m.isIdentity())
        var mp = m.inverse();
    var np = [];
    var vx = new Vector2D(1, 0);
    var pi2 = Math.PI * 2;
    var wasNeg = dth < 0;
    var wasBig = Math.abs(dth) > Math.PI;
    var m1 = new Matrix2D().scaleNonUniform(1, ry / rx).rotate(th1);
    var m2 = new Matrix2D().scaleNonUniform(1, ry / rx).rotate(th1 + dth);

    th1 = (vx.angleBetween(vx.transform(m1)) + pi2) % pi2;
    dth = vx.transform(m1).angleBetween(vx.transform(m2));
    dth = (wasBig ? pi2 - Math.abs(dth) : Math.abs(dth)) * (wasNeg ? -1 : 1);
    var m3 = new Matrix2D().rotate(phi).multiply(m1);

    for (var i = 0, p, a; i < intersection.points.length; i++) {
        p = intersection.points[i];
        a = vx.transform(m3).angleBetween(Vector2D.fromPoints(c, (mp) ? p.transform(mp) : p));
        if (dth >= 0) {
            a = (a + 2 * pi2) % pi2;
            if (a <= dth)
                np.push(p);
        } else {
            a = (a - 2 * pi2) % pi2;
            if (a >= dth)
                np.push(p);
        }
    }
    intersection.points = np;
    return intersection;
};

/**
    points1 will be modified, points close (almost identical) to any point in points2 will be removed

    @param {Array<Point2D>} points1 - will be modified, points close to any point in points2 will be removed
    @param {Array<Point2D>} points2
*/
function removeClosePoints(points1, points2) {
    if (points1.length === 0 || points2.length === 0)
        return;
    var maxf = function (p, v) { if (p < v.x) p = v.x; if (p < v.y) p = v.y; return p; };
    var max = points1.reduce(maxf, 0);
    max = points2.reduce(maxf, max);
    var ERRF = 1e-15;
    var ZEROepsilon = 100 * max * ERRF * Math.SQRT2;
    var j;
    for (var i = 0; i < points1.length;) {
        for (j = 0; j < points2.length; j++) {
            if (points1[i].distanceFrom(points2[j]) <= ZEROepsilon) {
                points1.splice(i, 1);
                break;
            }
        }
        if (j == points2.length)
            i++;
    }
}

// The basic intersection functions for all SVG shapes expect bezier curves
// If you need to support bezier curves, plug in the functions/bezier module
// like this: intersect.plugin( require('svg-intersections/lib/functions/bezier') )
var intersectionFunctions = {
            
    /**
        intersectPathShape

        @param {IntersectionParams} path
        @param {IntersectionParams} shape
        @param {Matrix2D} [m1]
        @param {Matrix2D} [m2]
        @returns {Intersection}
    */
    intersectPathShape: function (path, shape, m1, m2) {
        var result = new Intersection();
        var pathParams = path.params[0];
        var inter0;
        var previnter;
        for (var inter, i = 0; i < pathParams.length; i++) {
            inter = intersect(pathParams[i], shape, m1, m2);
            if (!inter0)
                inter0 = inter;
            if (previnter) {
                removeClosePoints(previnter.points, inter.points);
                result.appendPoints(previnter.points);
            }
            previnter = inter;
        }
        if (previnter) {
            result.appendPoints(previnter.points);
        }
        return result;
    },


    /**
        intersectLinesShape

        @param {IntersectionParams} lines - IntersectionParams with points as first parameter (like types RECT, POLYLINE or POLYGON)
        @param {IntersectionParams} shape - IntersectionParams of other shape
        @param {Matrix2D} [m1]
        @param {Matrix2D} [m2]
        @param {Boolean} [closed] - if set, determines if line between first and last point will be taken into callculation too. If not set, it's true for RECT and POLYGON, false for other <b>lines</b> types.
        @returns {Intersection}
    */
    intersectLinesShape: function (lines, shape, m1, m2, closed) {
        var IPTYPE = IntersectionParams.TYPE;
        var line_points = lines.params[0];
        var ip = new IntersectionParams(IPTYPE.LINE, [0, 0]);
        var result = new Intersection();
        var inter, i;
        var intersectLine = function (i1, i2) {
            ip.params[0] = line_points[i1];
            ip.params[1] = line_points[i2];
            inter = intersect(ip, shape, m1, m2);
            removeClosePoints(inter.points, [line_points[i2]]);
            result.appendPoints(inter.points);
        }
        for (i = 0; i < line_points.length - 1; i++) {
            intersectLine(i, i + 1);
        }
        if (typeof closed !== 'undefined' && closed || lines.type === IPTYPE.RECT || lines.type === IPTYPE.POLYGON) {
            intersectLine(line_points.length - 1, 0);
        }
        return result;
    },

    ///////////////////////////////////////////////////////////////////
    /**
        intersectArcShape

        @param {IntersectionParams} arc
        @param {IntersectionParams} shape
        @param {Matrix2D} [m1]
        @param {Matrix2D} [m2]
        @returns {Intersection}
    */
    intersectArcShape: function (arc, shape, m1, m2) {
        m1 = m1 || Matrix2D.IDENTITY;
        m2 = m2 || Matrix2D.IDENTITY;
        var c1 = arc.params[0],
            rx1 = arc.params[1],
            ry1 = arc.params[2],
            phi1 = arc.params[3],
            th1 = arc.params[4],
            dth1 = arc.params[5];

        var res;
        if (m1.isIdentity() && phi1 === 0) {
            res = intersect(IntersectionParams.newEllipse(c1, rx1, ry1), shape, m1, m2);
        }
        else {
            m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).rotate(phi1));
            c1 = new Point2D(0, 0);
            phi1 = 0;
            res = intersect(IntersectionParams.newEllipse(c1, rx1, ry1), shape, m1, m2);
        }
        res = removePointsNotInArc(res, c1, rx1, ry1, phi1, th1, dth1, m1);
        return res;
    },

    /**
     *  Finds intersection points of two ellipses. <br/>
     *
     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly. His
     *  code along with many other excellent examples are avaiable at his site:
     *  http://www.geometrictools.com
     *
     *  Changes - 2015 Robert Benko (Quazistax)
     *
     *  @param {Point2D} c1
     *  @param {Number} rx1
     *  @param {Number} ry1
     *  @param {Point2D} c2
     *  @param {Number} rx2
     *  @param {Number} ry2
     *  @returns {Intersection}
     */
    intersectEllipseEllipse: function (c1, rx1, ry1, c2, rx2, ry2) {
        var a = [
            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,
            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1
        ];
        var b = [
            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,
            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2
        ];

        var yPoly = bezout(a, b);
        var yRoots = yPoly.getRoots();
        var epsilon = 1e-3;
        var norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;
        var norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;
        var result = new Intersection();

        var i;
        //Handling root calculation error causing not detecting intersection
        var clip = function (val, min, max) { return Math.max(min, Math.min(max, val)); };
        for (i = 0 ; i < yRoots.length; i++) {
            yRoots[i] = clip(yRoots[i], c1.y - ry1, c1.y + ry1);
            yRoots[i] = clip(yRoots[i], c2.y - ry2, c2.y + ry2);
        }

        //For detection of multiplicated intersection points
        yRoots.sort(function (a, b) { return a - b; });
        var rootPointsN = [];

        for (var y = 0; y < yRoots.length; y++) {
            var xPoly = new Polynomial(
                a[0],
                a[3] + yRoots[y] * a[1],
                a[5] + yRoots[y] * (a[4] + yRoots[y] * a[2])
            );
            var ERRF = 1e-15;
            if (Math.abs(xPoly.coefs[0]) < 10 * ERRF * Math.abs(xPoly.coefs[2]))
                xPoly.coefs[0] = 0;
            var xRoots = xPoly.getRoots();

            rootPointsN.push(0);
            for (var x = 0; x < xRoots.length; x++) {
                var test =
                    (a[0] * xRoots[x] + a[1] * yRoots[y] + a[3]) * xRoots[x] +
                    (a[2] * yRoots[y] + a[4]) * yRoots[y] + a[5];
                if (Math.abs(test) < norm0) {
                    test =
                        (b[0] * xRoots[x] + b[1] * yRoots[y] + b[3]) * xRoots[x] +
                        (b[2] * yRoots[y] + b[4]) * yRoots[y] + b[5];
                    if (Math.abs(test) < norm1) {
                        result.appendPoint(new Point2D(xRoots[x], yRoots[y]));
                        rootPointsN[y] += 1;
                    }
                }
            }
        }

        if (result.points.length <= 0)
            return result;

        //Removal of multiplicated intersection points
        var pts = result.points;
        if (pts.length == 8) {
            pts = pts.splice(0, 6);
            pts.splice(2, 2);
        }
        else if (pts.length == 7) {
            pts = pts.splice(0, 6);
            pts.splice(2, 2);
            pts.splice(rootPointsN.indexOf(1), 1);
        }
        else if (pts.length == 6) {
            pts.splice(2, 2);
            //console.log('ElEl 6pts: N: ' + rootPointsN.toString());
            if (rootPointsN.indexOf(0) > -1) {
                if (pts[0].distanceFrom(pts[1]) < pts[2].distanceFrom(pts[3])) {
                    pts.splice(0, 1);
                }
                else {
                    pts.splice(2, 1);
                }
            }
            else if (rootPointsN[0] == rootPointsN[3]) {
                pts.splice(1, 2);
            }
        }
        else if (pts.length == 4) {
            if (
                (yRoots.length == 2)
            || (yRoots.length == 4 && (rootPointsN[0] == 2 && rootPointsN[1] == 2 || rootPointsN[2] == 2 && rootPointsN[3] == 2))
            ) {
                pts.splice(2, 2);
            }
        }
        else if (pts.length == 3 || pts.length == 5) {
            i = rootPointsN.indexOf(2);
            if (i > -1) {
                if (pts.length == 3)
                    i = i % 2;
                var ii = i + (i % 2 ? -1 : 2);
                var d1, d2, d3;
                d1 = pts[i].distanceFrom(pts[i + 1]);
                d2 = pts[i].distanceFrom(pts[ii]);
                d3 = pts[i + 1].distanceFrom(pts[ii]);
                if (d1 < d2 && d1 < d3) {
                    pts.splice(i, 1);
                }
                else {
                    pts.splice(ii, 1);
                }
            }
        }

        var poly = yPoly;
        var ZEROepsilon = yPoly.zeroErrorEstimate();
        ZEROepsilon *= 100 * Math.SQRT2;
        for (i = 0; i < pts.length - 1;) {
            if (pts[i].distanceFrom(pts[i + 1]) < ZEROepsilon) {
                pts.splice(i + 1, 1);
                continue;
            }
            i++;
        }

        result.points = pts;
        return result;
    },


    /**
     *  intersectEllipseLine
     *
     *  NOTE: Rotation will need to be added to this function
     *
     *  @param {Point2D} c
     *  @param {Number} rx
     *  @param {Number} ry
     *  @param {Point2D} a1
     *  @param {Point2D} a2
     *  @returns {Intersection}
     */
    intersectEllipseLine: function(c, rx, ry, a1, a2) {
        var result;
        var origin = new Vector2D(a1.x, a1.y);
        var dir    = Vector2D.fromPoints(a1, a2);
        var center = new Vector2D(c.x, c.y);
        var diff   = origin.subtract(center);
        var mDir   = new Vector2D( dir.x/(rx*rx),  dir.y/(ry*ry)  );
        var mDiff  = new Vector2D( diff.x/(rx*rx), diff.y/(ry*ry) );

        var a = dir.dot(mDir);
        var b = dir.dot(mDiff);
        var c = diff.dot(mDiff) - 1.0;
        var d = b*b - a*c;

        var ERRF = 1e-15;
        var ZEROepsilon = 10 * Math.max(Math.abs(a), Math.abs(b), Math.abs(c)) * ERRF;
        if (Math.abs(d) < ZEROepsilon) {
            d = 0;
        }

        if ( d < 0 ) {
            result = new Intersection("Outside");
        } else if ( d > 0 ) {
            var root = Math.sqrt(d);
            var t_a  = (-b - root) / a;
            var t_b  = (-b + root) / a;

            t_b = (t_b > 1) ? t_b - ERRF : (t_b < 0) ? t_b + ERRF : t_b;
            t_a = (t_a > 1) ? t_a - ERRF : (t_a < 0) ? t_a + ERRF : t_a;

            if ( (t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b) ) {
                if ( (t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1) )
                    result = new Intersection("Outside");
                else
                    result = new Intersection("Inside");
            } else {
                result = new Intersection();
                if ( 0 <= t_a && t_a <= 1 )
                    result.appendPoint( a1.lerp(a2, t_a) );
                if ( 0 <= t_b && t_b <= 1 )
                    result.appendPoint( a1.lerp(a2, t_b) );
            }
        } else {
            var t = -b/a;
            if ( 0 <= t && t <= 1 ) {
                result = new Intersection();
                result.appendPoint( a1.lerp(a2, t) );
            } else {
                result = new Intersection("Outside");
            }
        }

        return result;
    },


    /**
     *  intersectLineLine
     *
     *  @param {Point2D} a1
     *  @param {Point2D} a2
     *  @param {Point2D} b1
     *  @param {Point2D} b2
     *  @returns {Intersection}
     */
    intersectLineLine: function(a1, a2, b1, b2) {
        var result;
        var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
        var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
        var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

        if ( u_b !== 0 ) {
            var ua = ua_t / u_b;
            var ub = ub_t / u_b;

            if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {
                result = new Intersection();
                result.points.push(
                    new Point2D(
                        a1.x + ua * (a2.x - a1.x),
                        a1.y + ua * (a2.y - a1.y)
                    )
                );
            } else {
                result = new Intersection();
            }
        } else {
            if ( ua_t === 0 || ub_t === 0 ) {
                result = new Intersection("Coincident");
            } else {
                result = new Intersection("Parallel");
            }
        }

        return result;
    },


    /**
     *  intersectRayRay
     *
     *  @param {Point2D} a1
     *  @param {Point2D} a2
     *  @param {Point2D} b1
     *  @param {Point2D} b2
     *  @returns {Intersection}
     */
    intersectRayRay: function(a1, a2, b1, b2) {
        var result;

        var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
        var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
        var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

        if ( u_b !== 0 ) {
            var ua = ua_t / u_b;

            result = new Intersection();
            result.points.push(
                new Point2D(
                    a1.x + ua * (a2.x - a1.x),
                    a1.y + ua * (a2.y - a1.y)
                )
            );
        } else {
            if ( ua_t === 0 || ub_t === 0 ) {
                result = new Intersection("Coincident");
            } else {
                result = new Intersection("Parallel");
            }
        }

        return result;
    }
};

var composedShapeMethods = {};
composedShapeMethods[IPTYPE.PATH] = intersectionFunctions.intersectPathShape;
composedShapeMethods[IPTYPE.POLYLINE] = intersectionFunctions.intersectLinesShape;
composedShapeMethods[IPTYPE.POLYGON] = intersectionFunctions.intersectLinesShape;
composedShapeMethods[IPTYPE.RECT] = intersectionFunctions.intersectLinesShape;
composedShapeMethods[IPTYPE.ROUNDRECT] = intersectionFunctions.intersectPathShape;
composedShapeMethods[IPTYPE.ARC] = intersectionFunctions.intersectArcShape;



function intersect(shape1, shape2, m1, m2) {
    var ip1 = shape1;
    var ip2 = shape2;
    var result;

    if (ip1 !== null && ip2 !== null) {
        var method;
        if (method = composedShapeMethods[ip1.type]) {
            result = method(ip1, ip2, m1, m2);
        }
        else if (method = composedShapeMethods[ip2.type]) {
            result = method(ip2, ip1, m2, m1);
        }
        else {
            var params;

            var params1, params2, type1, type2;

            if (ip1.type === IPTYPE.CIRCLE) {
                params1 = [ip1.params[0], ip1.params[1], ip1.params[1]];
                type1 = IPTYPE.ELLIPSE;
            }
            else {
                params1 = ip1.params.slice();
                type1 = ip1.type;
            }

            if (ip2.type === IPTYPE.CIRCLE) {
                params2 = [ip2.params[0], ip2.params[1], ip2.params[1]];
                type2 = IPTYPE.ELLIPSE;
            }
            else {
                params2 = ip2.params.slice();
                type2 = ip2.type;
            }

            //var m1 = new Matrix2D(), m2 = new Matrix2D();
            var SMF = 1;
            var itm;
            var useCTM = (m1 instanceof Matrix2D && m2 instanceof Matrix2D);// && (!m1.isIdentity() || !m2.isIdentity()));
            if (useCTM) {
                if (type1 === IPTYPE.ELLIPSE && type2 === IPTYPE.ELLIPSE) {
                    var m1_, m2_;
                    var d2;
                    var c1 = params1[0], rx1 = params1[1], ry1 = params1[2];
                    var c2 = params2[0], rx2 = params2[1], ry2 = params2[2];

                    m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).scaleNonUniform(rx1 / SMF, ry1 / SMF));
                    c1 = new Point2D(0, 0);
                    rx1 = ry1 = SMF;

                    m2 = m2.multiply(Matrix2D.IDENTITY.translate(c2.x, c2.y).scaleNonUniform(rx2, ry2));
                    c2 = new Point2D(0, 0);
                    rx2 = ry2 = 1;

                    d2 = m1.inverse().multiply(m2).getDecompositionTRSR();
                    m1_ = d2.R.inverse().multiply(d2.T.inverse());
                    m2_ = d2.S;

                    rx2 = m2_.a;
                    ry2 = m2_.d;
                    c1 = c1.transform(m1_);
                    itm = m1.multiply(m1_.inverse());

                    params1[0] = c1;
                    params1[1] = rx1;
                    params1[2] = ry1;
                    params2[0] = c2;
                    params2[1] = rx2;
                    params2[2] = ry2;
                }
                else {
                    var transParams = function (type, params, m) {
                        var transParam = function (i) {
                            params[i] = params[i].transform(m);
                        }

                        if (type === IPTYPE.LINE) {
                            transParam(0);
                            transParam(1);
                        }
                        else if (type === IPTYPE.BEZIER2) {
                            transParam(0);
                            transParam(1);
                            transParam(2);
                        }
                        else if (type === IPTYPE.BEZIER3) {
                            transParam(0);
                            transParam(1);
                            transParam(2);
                            transParam(3);
                        }
                        else {
                            throw new Error('Unknown shape: ' + type);
                        }
                    }

                    if (type2 === IPTYPE.ELLIPSE) {
                        var tmp;
                        tmp = params2; params2 = params1; params1 = tmp;
                        tmp = type2; type2 = type1; type1 = tmp;
                        tmp = m2; m2 = m1; m1 = tmp;
                    }

                    if (type1 === IPTYPE.ELLIPSE) {
                        var c1 = params1[0], rx1 = params1[1], ry1 = params1[2];

                        m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).scaleNonUniform(rx1 / SMF, ry1 / SMF));
                        c1 = new Point2D(0, 0);
                        rx1 = ry1 = SMF;

                        m2_ = m1.inverse().multiply(m2);
                        transParams(type2, params2, m2_);

                        itm = m1;

                        params1[0] = c1;
                        params1[1] = rx1;
                        params1[2] = ry1;
                    }
                    else {
                        transParams(type1, params1, m1);
                        transParams(type2, params2, m2);
                        itm = Matrix2D.IDENTITY;
                    }
                }
            }

            if (type1 < type2) {
                method = "intersect" + type1 + type2;
                params = params1.concat(params2);
            } else {
                method = "intersect" + type2 + type1;
                params = params2.concat(params1);
            }

            result = intersectionFunctions[method].apply(null, params);

            if (useCTM) {
                for (var i = 0; i < result.points.length; i++) {
                    result.points[i] = result.points[i].transform(itm);
                }
            }
        }
    } else {
        result = new Intersection();
    }

    return result;
}

intersect.plugin = function() {
    for(var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        for(var key in arg) {
            if(arg.hasOwnProperty(key)) {
                intersectionFunctions[key] = arg[key];
            }
        }
    }
}

module.exports = intersect;

 


},{"./Intersection":39,"./IntersectionParams":40,"kld-affine":43,"kld-polynomial":47}],43:[function(require,module,exports){
// expose classes

exports.Point2D = require('./lib/Point2D');
exports.Vector2D = require('./lib/Vector2D');
exports.Matrix2D = require('./lib/Matrix2D');

},{"./lib/Matrix2D":44,"./lib/Point2D":45,"./lib/Vector2D":46}],44:[function(require,module,exports){
/**
 *
 *   Matrix2D.js
 *
 *   copyright 2001-2002, 2013 Kevin Lindsey
 *
 */

/**
 *  Matrix2D
 *
 *  @param {Number} a
 *  @param {Number} b
 *  @param {Number} c
 *  @param {Number} d
 *  @param {Number} e
 *  @param {Number} f
 *  @returns {Matrix2D}
 */
function Matrix2D(a, b, c, d, e, f) {
    Object.defineProperties(this, {
        "a": {
            value: (a !== undefined) ? a : 1,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "b": {
            value: (b !== undefined) ? b : 0,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "c": {
            value: (c !== undefined) ? c : 0,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "d": {
            value: (d !== undefined) ? d : 1,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "e": {
            value: (e !== undefined) ? e : 0,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "f": {
            value: (f !== undefined) ? f : 0,
            writable: false,
            enumerable: true,
            configurable: false
        }
    });
    // this.a = (a !== undefined) ? a : 1;
    // this.b = (b !== undefined) ? b : 0;
    // this.c = (c !== undefined) ? c : 0;
    // this.d = (d !== undefined) ? d : 1;
    // this.e = (e !== undefined) ? e : 0;
    // this.f = (f !== undefined) ? f : 0;
}

/**
 *  Identity matrix
 *
 *  @returns {Matrix2D}
 */
Matrix2D.IDENTITY = new Matrix2D(1, 0, 0, 1, 0, 0);

// TODO: rotate, skew, etc. matrices as well?

/**
 *  multiply
 *
 *  @pararm {Matrix2D} that
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.multiply = function(that) {
    return new Matrix2D(
        this.a * that.a + this.c * that.b,
        this.b * that.a + this.d * that.b,
        this.a * that.c + this.c * that.d,
        this.b * that.c + this.d * that.d,
        this.a * that.e + this.c * that.f + this.e,
        this.b * that.e + this.d * that.f + this.f
    );
};

/**
 *  inverse
 *
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.inverse = function() {
    var det1 = this.a * this.d - this.b * this.c;

    if ( det1 == 0.0 )
        throw("Matrix is not invertible");

    var idet = 1.0 / det1;
    var det2 = this.f * this.c - this.e * this.d;
    var det3 = this.e * this.b - this.f * this.a;

    return new Matrix2D(
        this.d * idet,
       -this.b * idet,
       -this.c * idet,
        this.a * idet,
          det2 * idet,
          det3 * idet
    );
};

/**
 *  translate
 *
 *  @param {Number} tx
 *  @param {Number} ty
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.translate = function(tx, ty) {
    return new Matrix2D(
        this.a,
        this.b,
        this.c,
        this.d,
        this.a * tx + this.c * ty + this.e,
        this.b * tx + this.d * ty + this.f
    );
};

/**
 *  scale
 *
 *  @param {Number} scale
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.scale = function(scale) {
    return new Matrix2D(
        this.a * scale,
        this.b * scale,
        this.c * scale,
        this.d * scale,
        this.e,
        this.f
    );
};

/**
 *  scaleAt
 *
 *  @param {Number} scale
 *  @param {Point2D} center
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.scaleAt = function(scale, center) {
    var dx = center.x - scale * center.x;
    var dy = center.y - scale * center.y;

    return new Matrix2D(
        this.a * scale,
        this.b * scale,
        this.c * scale,
        this.d * scale,
        this.a * dx + this.c * dy + this.e,
        this.b * dx + this.d * dy + this.f
    );
};

/**
 *  scaleNonUniform
 *
 *  @param {Number} scaleX
 *  @param {Number} scaleY
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.scaleNonUniform = function(scaleX, scaleY) {
    return new Matrix2D(
        this.a * scaleX,
        this.b * scaleX,
        this.c * scaleY,
        this.d * scaleY,
        this.e,
        this.f
    );
};

/**
 *  scaleNonUniformAt
 *
 *  @param {Number} scaleX
 *  @param {Number} scaleY
 *  @param {Point2D} center
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.scaleNonUniformAt = function(scaleX, scaleY, center) {
    var dx = center.x - scaleX * center.x;
    var dy = center.y - scaleY * center.y;

    return new Matrix2D(
        this.a * scaleX,
        this.b * scaleX,
        this.c * scaleY,
        this.d * scaleY,
        this.a * dx + this.c * dy + this.e,
        this.b * dx + this.d * dy + this.f
    );
};

/**
 *  rotate
 *
 *  @param {Number} radians
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.rotate = function(radians) {
    var c = Math.cos(radians);
    var s = Math.sin(radians);

    return new Matrix2D(
        this.a *  c + this.c * s,
        this.b *  c + this.d * s,
        this.a * -s + this.c * c,
        this.b * -s + this.d * c,
        this.e,
        this.f
    );
};

/**
 *  rotateAt
 *
 *  @param {Number} radians
 *  @param {Point2D} center
 *  @result {Matrix2D}
 */
Matrix2D.prototype.rotateAt = function(radians, center) {
    var c = Math.cos(radians);
    var s = Math.sin(radians);
    var t1 = -center.x + center.x * c - center.y * s;
    var t2 = -center.y + center.y * c + center.x * s;

    return new Matrix2D(
        this.a *  c + this.c * s,
        this.b *  c + this.d * s,
        this.a * -s + this.c * c,
        this.b * -s + this.d * c,
        this.a * t1 + this.c * t2 + this.e,
        this.b * t1 + this.d * t2 + this.f
    );
};

/**
 *  rotateFromVector
 *
 *  @param {Vector2D}
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.rotateFromVector = function(vector) {
    var unit = vector.unit();
    var c = unit.x; // cos
    var s = unit.y; // sin

    return new Matrix2D(
        this.a *  c + this.c * s,
        this.b *  c + this.d * s,
        this.a * -s + this.c * c,
        this.b * -s + this.d * c,
        this.e,
        this.f
    );
};

/**
 *  flipX
 *
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.flipX = function() {
    return new Matrix2D(
        -this.a,
        -this.b,
         this.c,
         this.d,
         this.e,
         this.f
    );
};

/**
 *  flipY
 *
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.flipY = function() {
    return new Matrix2D(
         this.a,
         this.b,
        -this.c,
        -this.d,
         this.e,
         this.f
    );
};

/**
 *  skewX
 *
 *  @pararm {Number} radians
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.skewX = function(radians) {
    var t = Math.tan(radians);

    return new Matrix2D(
        this.a,
        this.b,
        this.a * t + this.c,
        this.b * t + this.d,
        this.e,
        this.f
    );
};

// TODO: skewXAt

/**
 *  skewY
 *
 *  @pararm {Number} radians
 *  @returns {Matrix2D}
 */
Matrix2D.prototype.skewY = function(radians) {
    var t = Math.tan(angle);

    return matrix_new(
        this.a + this.c * t,
        this.b + this.d * t,
        this.c,
        this.d,
        this.e,
        this.f
    );
};

// TODO: skewYAt

/**
 *  isIdentity
 *
 *  @returns {Boolean}
 */
Matrix2D.prototype.isIdentity = function() {
    return (
        this.a === 1.0 &&
        this.b === 0.0 &&
        this.c === 0.0 &&
        this.d === 1.0 &&
        this.e === 0.0 &&
        this.f === 0.0
    );
};

/**
 *  isInvertible
 *
 *  @returns {Boolean}
 */
Matrix2D.prototype.isInvertible = function() {
    this.a * this.d - this.b * this.c !== 0.0;
};

/**
 *  getScale
 *
 *  @returns {scaleX: Number, scaleY: Number}
 */
Matrix2D.prototype.getScale = function() {
    return {
        scaleX: Math.sqrt(this.a * this.a + this.c * this.c),
        scaleY: Math.sqrt(this.b * this.b + this.d * this.d)
    };
};

/**
 *  equals
 *
 *  @param {Matrix2D} that
 *  @returns {Boolean}
 */
Matrix2D.prototype.equals = function(that) {
    return (
        this.a === that.a &&
        this.b === that.b &&
        this.c === that.c &&
        this.d === that.d &&
        this.e === that.e &&
        this.f === that.f
    );
};

/**
 *  toString
 *
 *  @returns {String}
 */
Matrix2D.prototype.toString = function() {
    return (
        "matrix(" +
        this.a + "," +
        this.b + "," +
        this.c + "," +
        this.d + "," +
        this.e + "," +
        this.f + ")"
    );
}

if (typeof module !== "undefined") {
    module.exports = Matrix2D;
}
},{}],45:[function(require,module,exports){
/**
 *
 *   Point2D.js
 *
 *   copyright 2001-2002, 2013 Kevin Lindsey
 *
 */

/**
 *  Point2D
 *
 *  @param {Number} x
 *  @param {Number} y
 *  @returns {Point2D}
 */
function Point2D(x, y) {
    Object.defineProperties(this, {
        "x": {
            value: x,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "y": {
            value: y,
            writable: false,
            enumerable: true,
            configurable: false
        }
    });
    // this.x = x;
    // this.y = y;
}

/**
 *  clone
 *
 *  @returns {Point2D}
 */
Point2D.prototype.clone = function() {
    return new Point2D(this.x, this.y);
};

/**
 *  add
 *
 *  @param {Point2D|Vector2D} that
 *  @returns {Point2D}
 */
Point2D.prototype.add = function(that) {
    return new Point2D(this.x+that.x, this.y+that.y);
};

/**
 *  subtract
 *
 *  @param { Vector2D | Point2D } that
 *  @returns {Point2D}
 */
Point2D.prototype.subtract = function(that) {
    return new Point2D(this.x-that.x, this.y-that.y);
};

/**
 *  multiply
 *
 *  @param {Number} scalar
 *  @returns {Point2D}
 */
Point2D.prototype.multiply = function(scalar) {
    return new Point2D(this.x*scalar, this.y*scalar);
};

/**
 *  divide
 *
 *  @param {Number} scalar
 *  @returns {Point2D}
 */
Point2D.prototype.divide = function(scalar) {
    return new Point2D(this.x/scalar, this.y/scalar);
};

/**
 *  equals
 *
 *  @param {Point2D} that
 *  @returns {Boolean}
 */
Point2D.prototype.equals = function(that) {
    return ( this.x == that.x && this.y == that.y );
};

// utility methods

/**
 *  lerp
 *
 *  @param { Vector2D | Point2D } that
 *  @param {Number} t
 @  @returns {Point2D}
 */
Point2D.prototype.lerp = function(that, t) {
    var omt = 1.0 - t;

    return new Point2D(
        this.x * omt + that.x * t,
        this.y * omt + that.y * t
    );
};

/**
 *  distanceFrom
 *
 *  @param {Point2D} that
 *  @returns {Number}
 */
Point2D.prototype.distanceFrom = function(that) {
    var dx = this.x - that.x;
    var dy = this.y - that.y;

    return Math.sqrt(dx*dx + dy*dy);
};

/**
 *  min
 *
 *  @param {Point2D} that
 *  @returns {Number}
 */
Point2D.prototype.min = function(that) {
    return new Point2D(
        Math.min( this.x, that.x ),
        Math.min( this.y, that.y )
    );
};

/**
 *  max
 *
 *  @param {Point2D} that
 *  @returns {Number}
 */
Point2D.prototype.max = function(that) {
    return new Point2D(
        Math.max( this.x, that.x ),
        Math.max( this.y, that.y )
    );
};

/**
 *  transform
 *
 *  @param {Matrix2D}
 *  @result {Point2D}
 */
Point2D.prototype.transform = function(matrix) {
    return new Point2D(
        matrix.a * this.x + matrix.c * this.y + matrix.e,
        matrix.b * this.x + matrix.d * this.y + matrix.f
    );
};

/**
 *  toString
 *
 *  @returns {String}
 */
Point2D.prototype.toString = function() {
    return "point(" + this.x + "," + this.y + ")";
};

if (typeof module !== "undefined") {
    module.exports = Point2D;
}

},{}],46:[function(require,module,exports){
/**
 *
 *   Vector2D.js
 *
 *   copyright 2001-2002, 2013 Kevin Lindsey
 *
 */

/**
 *  Vector2D
 *
 *  @param {Number} x
 *  @param {Number} y
 *  @returns {Vector2D}
 */
function Vector2D(x, y) {
    Object.defineProperties(this, {
        "x": {
            value: x,
            writable: false,
            enumerable: true,
            configurable: false
        },
        "y": {
            value: y,
            writable: false,
            enumerable: true,
            configurable: false
        }
    });
    // this.x = x;
    // this.y = y;
}

/**
 *  fromPoints
 *
 *  @param {Point2D} p1
 *  @param {Point2D} p2
 *  @returns {Vector2D}
 */
Vector2D.fromPoints = function(p1, p2) {
    return new Vector2D(
        p2.x - p1.x,
        p2.y - p1.y
    );
};

/**
 *  length
 *
 *  @returns {Number}
 */
Vector2D.prototype.length = function() {
    return Math.sqrt(this.x*this.x + this.y*this.y);
};

/**
 *  magnitude
 *
 *  @returns {Number}
 */
Vector2D.prototype.magnitude = function() {
    return this.x*this.x + this.y*this.y;
};

/**
 *  dot
 *
 *  @param {Vector2D} that
 *  @returns {Number}
 */
Vector2D.prototype.dot = function(that) {
    return this.x*that.x + this.y*that.y;
};

/**
 *  cross
 *
 *  @param {Vector2D} that
 *  @returns {Number}
 */
Vector2D.prototype.cross = function(that) {
    return this.x*that.y - this.y*that.x;
}

/**
 *  determinant
 *
 *  @param {Vector2D} that
 *  @returns {Number}
 */
Vector2D.prototype.determinant = function(that) {
    return this.x*that.y - this.y*that.x;
};

/**
 *  unit
 *
 *  @returns {Vector2D}
 */
Vector2D.prototype.unit = function() {
    return this.divide( this.length() );
};

/**
 *  add
 *
 *  @param {Vector2D} that
 *  @returns {Vector2D}
 */
Vector2D.prototype.add = function(that) {
    return new Vector2D(this.x + that.x, this.y + that.y);
};

/**
 *  subtract
 *
 *  @param {Vector2D} that
 *  @returns {Vector2D}
 */
Vector2D.prototype.subtract = function(that) {
    return new Vector2D(this.x - that.x, this.y - that.y);
};

/**
 *  multiply
 *
 *  @param {Number} scalar
 *  @returns {Vector2D}
 */
Vector2D.prototype.multiply = function(scalar) {
    return new Vector2D(this.x * scalar, this.y * scalar);
};

/**
 *  divide
 *
 *  @param {Number} scalar
 *  @returns {Vector2D}
 */
Vector2D.prototype.divide = function(scalar) {
    return new Vector2D(this.x / scalar, this.y / scalar);
};

/**
 *  angleBetween
 *
 *  @param {Vector2D} that
 *  @returns {Number}
 */
Vector2D.prototype.angleBetween = function(that) {
    var cos = this.dot(that) / (this.length() * that.length());
    if (cos < -1) {
        cos = -1;
    }
    else if (cos > 1) {
        cos = 1;
    }
    var radians = Math.acos(cos);

    return (this.cross(that) < 0.0) ? -radians : radians;
};

/**
 *  Find a vector is that is perpendicular to this vector
 *
 *  @returns {Vector2D}
 */
Vector2D.prototype.perp = function() {
    return new Vector2D(-this.y, this.x);
};

/**
 *  Find the component of the specified vector that is perpendicular to
 *  this vector
 *
 *  @param {Vector2D} that
 *  @returns {Vector2D}
 */
Vector2D.prototype.perpendicular = function(that) {
    return this.subtract(this.project(that));
};

/**
 *  project
 *
 *  @param {Vector2D} that
 *  @returns {Vector2D}
 */
Vector2D.prototype.project = function(that) {
    var percent = this.dot(that) / that.dot(that);

    return that.multiply(percent);
};

/**
 *  transform
 *
 *  @param {Matrix2D}
 *  @returns {Vector2D}
 */
Vector2D.prototype.transform = function(matrix) {
    return new Vector2D(
        matrix.a * this.x + matrix.c * this.y,
        matrix.b * this.x + matrix.d * this.y
    );
};

/**
 *  equals
 *
 *  @param {Vector2D} that
 *  @returns {Boolean}
 */
Vector2D.prototype.equals = function(that) {
    return (
        this.x === that.x &&
        this.y === that.y
    );
};

/**
 *  toString
 *
 *  @returns {String}
 */
Vector2D.prototype.toString = function() {
    return "vector(" + this.x + "," + this.y + ")";
};

if (typeof module !== "undefined") {
    module.exports = Vector2D;
}

},{}],47:[function(require,module,exports){
// expose classes

exports.Polynomial = require('./lib/Polynomial');
exports.SqrtPolynomial = require('./lib/SqrtPolynomial');

},{"./lib/Polynomial":48,"./lib/SqrtPolynomial":49}],48:[function(require,module,exports){
/**
 *
 *   Polynomial.js
 *
 *   copyright 2002, 2103 Kevin Lindsey
 *
 */

Polynomial.TOLERANCE = 1e-6;
Polynomial.ACCURACY  = 15;


/**
 *  interpolate
 *
 *  @param {Array<Number>} xs
 *  @param {Array<Number>} ys
 *  @param {Number} n
 *  @param {Number} offset
 *  @param {Number} x
 *
 *  @returns {y:Number, dy:Number}
 */
Polynomial.interpolate = function(xs, ys, n, offset, x) {
    if ( xs.constructor !== Array || ys.constructor !== Array )
        throw new Error("Polynomial.interpolate: xs and ys must be arrays");
    if ( isNaN(n) || isNaN(offset) || isNaN(x) )
        throw new Error("Polynomial.interpolate: n, offset, and x must be numbers");

    var y  = 0;
    var dy = 0;
    var c = new Array(n);
    var d = new Array(n);
    var ns = 0;
    var result;

    var diff = Math.abs(x - xs[offset]);
    for ( var i = 0; i < n; i++ ) {
        var dift = Math.abs(x - xs[offset+i]);

        if ( dift < diff ) {
            ns = i;
            diff = dift;
        }
        c[i] = d[i] = ys[offset+i];
    }
    y = ys[offset+ns];
    ns--;

    for ( var m = 1; m < n; m++ ) {
        for ( var i = 0; i < n-m; i++ ) {
            var ho = xs[offset+i] - x;
            var hp = xs[offset+i+m] - x;
            var w = c[i+1]-d[i];
            var den = ho - hp;

            if ( den == 0.0 ) {
                result = { y: 0, dy: 0};
                break;
            }

            den = w / den;
            d[i] = hp*den;
            c[i] = ho*den;
        }
        dy = (2*(ns+1) < (n-m)) ? c[ns+1] : d[ns--];
        y += dy;
    }

    return { y: y, dy: dy };
};


/**
 *  Polynomial
 *
 *  @returns {Polynomial}
 */
function Polynomial() {
    this.init( arguments );
}


/**
 *  init
 */
Polynomial.prototype.init = function(coefs) {
    this.coefs = new Array();

    for ( var i = coefs.length - 1; i >= 0; i-- )
        this.coefs.push( coefs[i] );

    this._variable = "t";
    this._s = 0;
};


/**
 *  eval
 */
Polynomial.prototype.eval = function(x) {
    if ( isNaN(x) )
        throw new Error("Polynomial.eval: parameter must be a number");

    var result = 0;

    for ( var i = this.coefs.length - 1; i >= 0; i-- )
        result = result * x + this.coefs[i];

    return result;
};


/**
 *  add
 */
Polynomial.prototype.add = function(that) {
    var result = new Polynomial();
    var d1 = this.getDegree();
    var d2 = that.getDegree();
    var dmax = Math.max(d1,d2);

    for ( var i = 0; i <= dmax; i++ ) {
        var v1 = (i <= d1) ? this.coefs[i] : 0;
        var v2 = (i <= d2) ? that.coefs[i] : 0;

        result.coefs[i] = v1 + v2;
    }

    return result;
};


/**
 *  multiply
 */
Polynomial.prototype.multiply = function(that) {
    var result = new Polynomial();

    for ( var i = 0; i <= this.getDegree() + that.getDegree(); i++ )
        result.coefs.push(0);

    for ( var i = 0; i <= this.getDegree(); i++ )
        for ( var j = 0; j <= that.getDegree(); j++ )
            result.coefs[i+j] += this.coefs[i] * that.coefs[j];

    return result;
};


/**
 *  divide_scalar
 */
Polynomial.prototype.divide_scalar = function(scalar) {
    for ( var i = 0; i < this.coefs.length; i++ )
        this.coefs[i] /= scalar;
};


/**
 *  simplify
 */
Polynomial.prototype.simplify = function() {
    for ( var i = this.getDegree(); i >= 0; i-- ) {
        if ( Math.abs( this.coefs[i] ) <= Polynomial.TOLERANCE )
            this.coefs.pop();
        else
            break;
    }
};


/**
 *  bisection
 */
Polynomial.prototype.bisection = function(min, max) {
    var minValue = this.eval(min);
    var maxValue = this.eval(max);
    var result;

    if ( Math.abs(minValue) <= Polynomial.TOLERANCE )
        result = min;
    else if ( Math.abs(maxValue) <= Polynomial.TOLERANCE )
        result = max;
    else if ( minValue * maxValue <= 0 ) {
        var tmp1  = Math.log(max - min);
        var tmp2  = Math.LN10 * Polynomial.ACCURACY;
        var iters = Math.ceil( (tmp1+tmp2) / Math.LN2 );

        for ( var i = 0; i < iters; i++ ) {
            result = 0.5 * (min + max);
            var value = this.eval(result);

            if ( Math.abs(value) <= Polynomial.TOLERANCE ) {
                break;
            }

            if ( value * minValue < 0 ) {
                max = result;
                maxValue = value;
            } else {
                min = result;
                minValue = value;
            }
        }
    }

    return result;
};


/**
 *  toString
 */
Polynomial.prototype.toString = function() {
    var coefs = new Array();
    var signs = new Array();

    for ( var i = this.coefs.length - 1; i >= 0; i-- ) {
        var value = Math.round(this.coefs[i]*1000)/1000;
        //var value = this.coefs[i];

        if ( value != 0 ) {
            var sign = ( value < 0 ) ? " - " : " + ";

            value = Math.abs(value);
            if ( i > 0 )
                if ( value == 1 )
                    value = this._variable;
                else
                    value += this._variable;
            if ( i > 1 ) value += "^" + i;

            signs.push( sign );
            coefs.push( value );
        }
    }

    signs[0] = ( signs[0] == " + " ) ? "" : "-";

    var result = "";
    for ( var i = 0; i < coefs.length; i++ )
        result += signs[i] + coefs[i];

    return result;
};


/**
 *  trapezoid
 *  Based on trapzd in "Numerical Recipes in C", page 137
 */
Polynomial.prototype.trapezoid = function(min, max, n) {
    if ( isNaN(min) || isNaN(max) || isNaN(n) )
        throw new Error("Polynomial.trapezoid: parameters must be numbers");

    var range = max - min;
    var TOLERANCE = 1e-7;

    if ( n == 1 ) {
        var minValue = this.eval(min);
        var maxValue = this.eval(max);
        this._s = 0.5*range*( minValue + maxValue );
    } else {
        var it = 1 << (n-2);
        var delta = range / it;
        var x = min + 0.5*delta;
        var sum = 0;

        for ( var i = 0; i < it; i++ ) {
            sum += this.eval(x);
            x += delta;
        }
        this._s = 0.5*(this._s + range*sum/it);
    }

    if ( isNaN(this._s) )
        throw new Error("Polynomial.trapezoid: this._s is NaN");

    return this._s;
};


/**
 *  simpson
 *  Based on trapzd in "Numerical Recipes in C", page 139
 */
Polynomial.prototype.simpson = function(min, max) {
    if ( isNaN(min) || isNaN(max) )
        throw new Error("Polynomial.simpson: parameters must be numbers");

    var range = max - min;
    var st = 0.5 * range * ( this.eval(min) + this.eval(max) );
    var t = st;
    var s = 4.0*st/3.0;
    var os = s;
    var ost = st;
    var TOLERANCE = 1e-7;

    var it = 1;
    for ( var n = 2; n <= 20; n++ ) {
        var delta = range / it;
        var x     = min + 0.5*delta;
        var sum   = 0;

        for ( var i = 1; i <= it; i++ ) {
            sum += this.eval(x);
            x += delta;
        }

        t = 0.5 * (t + range * sum / it);
        st = t;
        s = (4.0*st - ost)/3.0;

        if ( Math.abs(s-os) < TOLERANCE*Math.abs(os) )
            break;

        os = s;
        ost = st;
        it <<= 1;
    }

    return s;
};


/**
 *  romberg
 */
Polynomial.prototype.romberg = function(min, max) {
    if ( isNaN(min) || isNaN(max) )
        throw new Error("Polynomial.romberg: parameters must be numbers");

    var MAX = 20;
    var K = 3;
    var TOLERANCE = 1e-6;
    var s = new Array(MAX+1);
    var h = new Array(MAX+1);
    var result = { y: 0, dy: 0 };

    h[0] = 1.0;
    for ( var j = 1; j <= MAX; j++ ) {
        s[j-1] = this.trapezoid(min, max, j);
        if ( j >= K ) {
            result = Polynomial.interpolate(h, s, K, j-K, 0.0);
            if ( Math.abs(result.dy) <= TOLERANCE*result.y) break;
        }
        s[j] = s[j-1];
        h[j] = 0.25 * h[j-1];
    }

    return result.y;
};

// getters and setters

/**
 *  get degree
 */
Polynomial.prototype.getDegree = function() {
    return this.coefs.length - 1;
};


/**
 *  getDerivative
 */
Polynomial.prototype.getDerivative = function() {
    var derivative = new Polynomial();

    for ( var i = 1; i < this.coefs.length; i++ ) {
        derivative.coefs.push(i*this.coefs[i]);
    }

    return derivative;
};


/**
 *  getRoots
 */
Polynomial.prototype.getRoots = function() {
    var result;

    this.simplify();
    switch ( this.getDegree() ) {
        case 0: result = new Array();              break;
        case 1: result = this.getLinearRoot();     break;
        case 2: result = this.getQuadraticRoots(); break;
        case 3: result = this.getCubicRoots();     break;
        case 4: result = this.getQuarticRoots();   break;
        default:
            result = new Array();
            // should try Newton's method and/or bisection
    }

    return result;
};


/**
 *  getRootsInInterval
 */
Polynomial.prototype.getRootsInInterval = function(min, max) {
    var roots = new Array();
    var root;

    if ( this.getDegree() == 1 ) {
        root = this.bisection(min, max);
        if ( root != null ) roots.push(root);
    } else {
        // get roots of derivative
        var deriv  = this.getDerivative();
        var droots = deriv.getRootsInInterval(min, max);

        if ( droots.length > 0 ) {
            // find root on [min, droots[0]]
            root = this.bisection(min, droots[0]);
            if ( root != null ) roots.push(root);

            // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2
            for ( i = 0; i <= droots.length-2; i++ ) {
                root = this.bisection(droots[i], droots[i+1]);
                if ( root != null ) roots.push(root);
            }

            // find root on [droots[count-1],xmax]
            root = this.bisection(droots[droots.length-1], max);
            if ( root != null ) roots.push(root);
        } else {
            // polynomial is monotone on [min,max], has at most one root
            root = this.bisection(min, max);
            if ( root != null ) roots.push(root);
        }
    }

    return roots;
};


/**
 *  getLinearRoot
 */
Polynomial.prototype.getLinearRoot = function() {
    var result = new Array();
    var a = this.coefs[1];

    if ( a != 0 )
        result.push( -this.coefs[0] / a );

    return result;
};


/**
 *  getQuadraticRoots
 */
Polynomial.prototype.getQuadraticRoots = function() {
    var results = new Array();

    if ( this.getDegree() == 2 ) {
        var a = this.coefs[2];
        var b = this.coefs[1] / a;
        var c = this.coefs[0] / a;
        var d = b*b - 4*c;

        if ( d > 0 ) {
            var e = Math.sqrt(d);

            results.push( 0.5 * (-b + e) );
            results.push( 0.5 * (-b - e) );
        } else if ( d == 0 ) {
            // really two roots with same value, but we only return one
            results.push( 0.5 * -b );
        }
    }

    return results;
};


/**
 *  getCubicRoots
 *
 *  This code is based on MgcPolynomial.cpp written by David Eberly.  His
 *  code along with many other excellent examples are avaiable at his site:
 *  http://www.magic-software.com
 */
Polynomial.prototype.getCubicRoots = function() {
    var results = new Array();

    if ( this.getDegree() == 3 ) {
        var c3 = this.coefs[3];
        var c2 = this.coefs[2] / c3;
        var c1 = this.coefs[1] / c3;
        var c0 = this.coefs[0] / c3;

        var a       = (3*c1 - c2*c2) / 3;
        var b       = (2*c2*c2*c2 - 9*c1*c2 + 27*c0) / 27;
        var offset  = c2 / 3;
        var discrim = b*b/4 + a*a*a/27;
        var halfB   = b / 2;

        if ( Math.abs(discrim) <= Polynomial.TOLERANCE ) discrim = 0;

        if ( discrim > 0 ) {
            var e = Math.sqrt(discrim);
            var tmp;
            var root;

            tmp = -halfB + e;
            if ( tmp >= 0 )
                root = Math.pow(tmp, 1/3);
            else
                root = -Math.pow(-tmp, 1/3);

            tmp = -halfB - e;
            if ( tmp >= 0 )
                root += Math.pow(tmp, 1/3);
            else
                root -= Math.pow(-tmp, 1/3);

            results.push( root - offset );
        } else if ( discrim < 0 ) {
            var distance = Math.sqrt(-a/3);
            var angle    = Math.atan2( Math.sqrt(-discrim), -halfB) / 3;
            var cos      = Math.cos(angle);
            var sin      = Math.sin(angle);
            var sqrt3    = Math.sqrt(3);

            results.push( 2*distance*cos - offset );
            results.push( -distance * (cos + sqrt3 * sin) - offset);
            results.push( -distance * (cos - sqrt3 * sin) - offset);
        } else {
            var tmp;

            if ( halfB >= 0 )
                tmp = -Math.pow(halfB, 1/3);
            else
                tmp = Math.pow(-halfB, 1/3);

            results.push( 2*tmp - offset );
            // really should return next root twice, but we return only one
            results.push( -tmp - offset );
        }
    }

    return results;
};


/**
 *  getQuarticRoots
 *
 *  This code is based on MgcPolynomial.cpp written by David Eberly.  His
 *  code along with many other excellent examples are avaiable at his site:
 *  http://www.magic-software.com
 */
Polynomial.prototype.getQuarticRoots = function() {
    var results = new Array();

    if ( this.getDegree() == 4 ) {
        var c4 = this.coefs[4];
        var c3 = this.coefs[3] / c4;
        var c2 = this.coefs[2] / c4;
        var c1 = this.coefs[1] / c4;
        var c0 = this.coefs[0] / c4;

        var resolveRoots = new Polynomial(
            1, -c2, c3*c1 - 4*c0, -c3*c3*c0 + 4*c2*c0 -c1*c1
        ).getCubicRoots();
        var y       = resolveRoots[0];
        var discrim = c3*c3/4 - c2 + y;

        if ( Math.abs(discrim) <= Polynomial.TOLERANCE ) discrim = 0;

        if ( discrim > 0 ) {
            var e     = Math.sqrt(discrim);
            var t1    = 3*c3*c3/4 - e*e - 2*c2;
            var t2    = ( 4*c3*c2 - 8*c1 - c3*c3*c3 ) / ( 4*e );
            var plus  = t1+t2;
            var minus = t1-t2;

            if ( Math.abs(plus)  <= Polynomial.TOLERANCE ) plus  = 0;
            if ( Math.abs(minus) <= Polynomial.TOLERANCE ) minus = 0;

            if ( plus >= 0 ) {
                var f = Math.sqrt(plus);

                results.push( -c3/4 + (e+f)/2 );
                results.push( -c3/4 + (e-f)/2 );
            }
            if ( minus >= 0 ) {
                var f = Math.sqrt(minus);

                results.push( -c3/4 + (f-e)/2 );
                results.push( -c3/4 - (f+e)/2 );
            }
        } else if ( discrim < 0 ) {
            // no roots
        } else {
            var t2 = y*y - 4*c0;

            if ( t2 >= -Polynomial.TOLERANCE ) {
                if ( t2 < 0 ) t2 = 0;

                t2 = 2*Math.sqrt(t2);
                t1 = 3*c3*c3/4 - 2*c2;
                if ( t1+t2 >= Polynomial.TOLERANCE ) {
                    var d = Math.sqrt(t1+t2);

                    results.push( -c3/4 + d/2 );
                    results.push( -c3/4 - d/2 );
                }
                if ( t1-t2 >= Polynomial.TOLERANCE ) {
                    var d = Math.sqrt(t1-t2);

                    results.push( -c3/4 + d/2 );
                    results.push( -c3/4 - d/2 );
                }
            }
        }
    }

    return results;
};

if (typeof module !== "undefined") {
    module.exports = Polynomial;
}

},{}],49:[function(require,module,exports){
/**
 *
 *   SqrtPolynomial.js
 *
 *   copyright 2003, 2013 Kevin Lindsey
 *
 */

if (typeof module !== "undefined") {
    var Polynomial = require("./Polynomial");
}

/**
 *   class variables
 */
SqrtPolynomial.VERSION = 1.0;

// setup inheritance
SqrtPolynomial.prototype             = new Polynomial();
SqrtPolynomial.prototype.constructor = SqrtPolynomial;
SqrtPolynomial.superclass            = Polynomial.prototype;


/**
 *  SqrtPolynomial
 */
function SqrtPolynomial() {
    this.init( arguments );
}


/**
 *  eval
 *
 *  @param {Number} x
 *  @returns {Number}
 */
SqrtPolynomial.prototype.eval = function(x) {
    var TOLERANCE = 1e-7;
    var result = SqrtPolynomial.superclass.eval.call(this, x);

    // NOTE: May need to change the following.  I added these to capture
    // some really small negative values that were being generated by one
    // of my Bezier arcLength functions
    if ( Math.abs(result) < TOLERANCE ) result = 0;
    if ( result < 0 )
        throw new Error("SqrtPolynomial.eval: cannot take square root of negative number");

    return Math.sqrt(result);
};

SqrtPolynomial.prototype.toString = function() {
    var result = SqrtPolynomial.superclass.toString.call(this);

    return "sqrt(" + result + ")";
};

if (typeof module !== "undefined") {
    module.exports = SqrtPolynomial;
}

},{"./Polynomial":48}],50:[function(require,module,exports){
'use strict';

module.exports = function (THREE) {

  /**
   * @author mrdoob / http://mrdoob.com/
   */
  THREE.OBJLoader = function (manager) {

    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;
  };

  THREE.OBJLoader.prototype = {

    constructor: THREE.OBJLoader,

    load: function load(url, onLoad, onProgress, onError) {

      var scope = this;

      var loader = new THREE.XHRLoader(scope.manager);
      loader.load(url, function (text) {

        onLoad(scope.parse(text));
      }, onProgress, onError);
    },

    parse: function parse(text) {

      console.time('OBJLoader');

      var object,
          objects = [];
      var geometry, material;

      function parseVertexIndex(value) {

        var index = parseInt(value);

        return (index >= 0 ? index - 1 : index + vertices.length / 3) * 3;
      }

      function parseNormalIndex(value) {

        var index = parseInt(value);

        return (index >= 0 ? index - 1 : index + normals.length / 3) * 3;
      }

      function parseUVIndex(value) {

        var index = parseInt(value);

        return (index >= 0 ? index - 1 : index + uvs.length / 2) * 2;
      }

      function addVertex(a, b, c) {

        geometry.vertices.push(vertices[a], vertices[a + 1], vertices[a + 2], vertices[b], vertices[b + 1], vertices[b + 2], vertices[c], vertices[c + 1], vertices[c + 2]);
      }

      function addNormal(a, b, c) {

        geometry.normals.push(normals[a], normals[a + 1], normals[a + 2], normals[b], normals[b + 1], normals[b + 2], normals[c], normals[c + 1], normals[c + 2]);
      }

      function addUV(a, b, c) {

        geometry.uvs.push(uvs[a], uvs[a + 1], uvs[b], uvs[b + 1], uvs[c], uvs[c + 1]);
      }

      function addFace(a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {

        var ia = parseVertexIndex(a);
        var ib = parseVertexIndex(b);
        var ic = parseVertexIndex(c);
        var id;

        if (d === undefined) {

          addVertex(ia, ib, ic);
        } else {

          id = parseVertexIndex(d);

          addVertex(ia, ib, id);
          addVertex(ib, ic, id);
        }

        if (ua !== undefined) {

          ia = parseUVIndex(ua);
          ib = parseUVIndex(ub);
          ic = parseUVIndex(uc);

          if (d === undefined) {

            addUV(ia, ib, ic);
          } else {

            id = parseUVIndex(ud);

            addUV(ia, ib, id);
            addUV(ib, ic, id);
          }
        }

        if (na !== undefined) {

          ia = parseNormalIndex(na);
          ib = parseNormalIndex(nb);
          ic = parseNormalIndex(nc);

          if (d === undefined) {

            addNormal(ia, ib, ic);
          } else {

            id = parseNormalIndex(nd);

            addNormal(ia, ib, id);
            addNormal(ib, ic, id);
          }
        }
      }

      // create mesh if no objects in text

      if (/^o /gm.test(text) === false) {

        geometry = {
          vertices: [],
          normals: [],
          uvs: []
        };

        material = {
          name: ''
        };

        object = {
          name: '',
          geometry: geometry,
          material: material
        };

        objects.push(object);
      }

      var vertices = [];
      var normals = [];
      var uvs = [];

      // v float float float

      var vertex_pattern = /v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/;

      // vn float float float

      var normal_pattern = /vn( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/;

      // vt float float

      var uv_pattern = /vt( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/;

      // f vertex vertex vertex ...

      var face_pattern1 = /f( +-?\d+)( +-?\d+)( +-?\d+)( +-?\d+)?/;

      // f vertex/uv vertex/uv vertex/uv ...

      var face_pattern2 = /f( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))?/;

      // f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...

      var face_pattern3 = /f( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))?/;

      // f vertex//normal vertex//normal vertex//normal ...

      var face_pattern4 = /f( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))?/;

      //

      var lines = text.split('\n');

      for (var i = 0; i < lines.length; i++) {

        var line = lines[i];
        line = line.trim();

        var result;

        if (line.length === 0 || line.charAt(0) === '#') {

          continue;
        } else if ((result = vertex_pattern.exec(line)) !== null) {

          // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

          vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
        } else if ((result = normal_pattern.exec(line)) !== null) {

          // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

          normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
        } else if ((result = uv_pattern.exec(line)) !== null) {

          // ["vt 0.1 0.2", "0.1", "0.2"]

          uvs.push(parseFloat(result[1]), parseFloat(result[2]));
        } else if ((result = face_pattern1.exec(line)) !== null) {

          // ["f 1 2 3", "1", "2", "3", undefined]

          addFace(result[1], result[2], result[3], result[4]);
        } else if ((result = face_pattern2.exec(line)) !== null) {

          // ["f 1/1 2/2 3/3", " 1/1", "1", "1", " 2/2", "2", "2", " 3/3", "3", "3", undefined, undefined, undefined]

          addFace(result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);
        } else if ((result = face_pattern3.exec(line)) !== null) {

          // ["f 1/1/1 2/2/2 3/3/3", " 1/1/1", "1", "1", "1", " 2/2/2", "2", "2", "2", " 3/3/3", "3", "3", "3", undefined, undefined, undefined, undefined]

          addFace(result[2], result[6], result[10], result[14], result[3], result[7], result[11], result[15], result[4], result[8], result[12], result[16]);
        } else if ((result = face_pattern4.exec(line)) !== null) {

          // ["f 1//1 2//2 3//3", " 1//1", "1", "1", " 2//2", "2", "2", " 3//3", "3", "3", undefined, undefined, undefined]

          addFace(result[2], result[5], result[8], result[11], undefined, undefined, undefined, undefined, result[3], result[6], result[9], result[12]);
        } else if (/^o /.test(line)) {

          geometry = {
            vertices: [],
            normals: [],
            uvs: []
          };

          material = {
            name: ''
          };

          object = {
            name: line.substring(2).trim(),
            geometry: geometry,
            material: material
          };

          objects.push(object);
        } else if (/^g /.test(line)) {

          // group

        } else if (/^usemtl /.test(line)) {

            // material

            material.name = line.substring(7).trim();
          } else if (/^mtllib /.test(line)) {

            // mtl file

          } else if (/^s /.test(line)) {

              // smooth shading

            } else {

                // console.log( "THREE.OBJLoader: Unhandled line " + line );

              }
      }

      var container = new THREE.Object3D();
      var l;

      for (i = 0, l = objects.length; i < l; i++) {

        object = objects[i];
        geometry = object.geometry;

        var buffergeometry = new THREE.BufferGeometry();

        buffergeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(geometry.vertices), 3));

        if (geometry.normals.length > 0) {

          buffergeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(geometry.normals), 3));
        }

        if (geometry.uvs.length > 0) {

          buffergeometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(geometry.uvs), 2));
        }

        material = new THREE.MeshLambertMaterial({
          color: 0xff0000
        });
        material.name = object.material.name;

        var mesh = new THREE.Mesh(buffergeometry, material);
        mesh.name = object.name;

        container.add(mesh);
      }

      console.timeEnd('OBJLoader');

      return container;
    }

  };
};
},{}],51:[function(require,module,exports){
module.exports = function(THREE) {
	var MOUSE = THREE.MOUSE
	if (!MOUSE)
		MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };

	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 */
	/*global THREE, console */

	function OrbitConstraint ( object ) {

		this.object = object;

		// "target" sets the location of focus, where the object orbits around
		// and where it pans with respect to.
		this.target = new THREE.Vector3();

		// Limits to how far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// Limits to how far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.25;

		////////////
		// internals

		var scope = this;

		var EPS = 0.000001;

		// Current position in spherical coordinate system.
		var theta;
		var phi;

		// Pending changes
		var phiDelta = 0;
		var thetaDelta = 0;
		var scale = 1;
		var panOffset = new THREE.Vector3();
		var zoomChanged = false;

		// API

		this.getPolarAngle = function () {

			return phi;

		};

		this.getAzimuthalAngle = function () {

			return theta;

		};

		this.rotateLeft = function ( angle ) {

			thetaDelta -= angle;

		};

		this.rotateUp = function ( angle ) {

			phiDelta -= angle;

		};

		// pass in distance in world space to move left
		this.panLeft = function() {

			var v = new THREE.Vector3();

			return function panLeft ( distance ) {

				var te = this.object.matrix.elements;

				// get X column of matrix
				v.set( te[ 0 ], te[ 1 ], te[ 2 ] );
				v.multiplyScalar( - distance );

				panOffset.add( v );

			};

		}();

		// pass in distance in world space to move up
		this.panUp = function() {

			var v = new THREE.Vector3();

			return function panUp ( distance ) {

				var te = this.object.matrix.elements;

				// get Y column of matrix
				v.set( te[ 4 ], te[ 5 ], te[ 6 ] );
				v.multiplyScalar( distance );

				panOffset.add( v );

			};

		}();

		// pass in x,y of change desired in pixel space,
		// right and down are positive
		this.pan = function ( deltaX, deltaY, screenWidth, screenHeight ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				// perspective
				var position = scope.object.position;
				var offset = position.clone().sub( scope.target );
				var targetDistance = offset.length();

				// half of the fov is center to top of screen
				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

				// we actually don't use screenWidth, since perspective camera is fixed to screen height
				scope.panLeft( 2 * deltaX * targetDistance / screenHeight );
				scope.panUp( 2 * deltaY * targetDistance / screenHeight );

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				// orthographic
				scope.panLeft( deltaX * ( scope.object.right - scope.object.left ) / screenWidth );
				scope.panUp( deltaY * ( scope.object.top - scope.object.bottom ) / screenHeight );

			} else {

				// camera neither orthographic or perspective
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );

			}

		};

		this.dollyIn = function ( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale /= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom * dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );

			}

		};

		this.dollyOut = function ( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale *= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );

			}

		};

		this.update = function() {

			var offset = new THREE.Vector3();

			// so camera.up is the orbit axis
			var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
			var quatInverse = quat.clone().inverse();

			var lastPosition = new THREE.Vector3();
			var lastQuaternion = new THREE.Quaternion();

			return function () {

				var position = this.object.position;

				offset.copy( position ).sub( this.target );

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );

				// angle from z-axis around y-axis

				theta = Math.atan2( offset.x, offset.z );

				// angle from y-axis

				phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );

				theta += thetaDelta;
				phi += phiDelta;

				// restrict theta to be between desired limits
				theta = Math.max( this.minAzimuthAngle, Math.min( this.maxAzimuthAngle, theta ) );

				// restrict phi to be between desired limits
				phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );

				// restrict phi to be betwee EPS and PI-EPS
				phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );

				var radius = offset.length() * scale;

				// restrict radius to be between desired limits
				radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );

				// move target to panned location
				this.target.add( panOffset );

				offset.x = radius * Math.sin( phi ) * Math.sin( theta );
				offset.y = radius * Math.cos( phi );
				offset.z = radius * Math.sin( phi ) * Math.cos( theta );

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );

				position.copy( this.target ).add( offset );

				this.object.lookAt( this.target );

				if ( this.enableDamping === true ) {

					thetaDelta *= ( 1 - this.dampingFactor );
					phiDelta *= ( 1 - this.dampingFactor );

				} else {

					thetaDelta = 0;
					phiDelta = 0;

				}

				scale = 1;
				panOffset.set( 0, 0, 0 );

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if ( zoomChanged ||
					 lastPosition.distanceToSquared( this.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( this.object.quaternion ) ) > EPS ) {

					lastPosition.copy( this.object.position );
					lastQuaternion.copy( this.object.quaternion );
					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

	};


	// This set of controls performs orbiting, dollying (zooming), and panning. It maintains
	// the "up" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is
	// supported.
	//
	//    Orbit - left mouse / touch: one finger move
	//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
	//    Pan - right mouse, or arrow keys / touch: three finter swipe

	function OrbitControls ( object, domElement ) {

		var constraint = new OrbitConstraint( object );

		this.domElement = ( domElement !== undefined ) ? domElement : document;

		// API

		Object.defineProperty( this, 'constraint', {

			get: function() {

				return constraint;

			}

		} );

		this.getPolarAngle = function () {

			return constraint.getPolarAngle();

		};

		this.getAzimuthalAngle = function () {

			return constraint.getAzimuthalAngle();

		};

		// Set to false to disable this control
		this.enabled = true;

		// center is old, deprecated; use "target" instead
		this.center = this.target;

		// This option actually enables dollying in and out; left as "zoom" for
		// backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

		// Set to false to disable use of the keys
		this.enableKeys = true;

		// The four arrow keys
		this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

		// Mouse buttons
		this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

		////////////
		// internals

		var scope = this;

		var rotateStart = new THREE.Vector2();
		var rotateEnd = new THREE.Vector2();
		var rotateDelta = new THREE.Vector2();

		var panStart = new THREE.Vector2();
		var panEnd = new THREE.Vector2();
		var panDelta = new THREE.Vector2();

		var dollyStart = new THREE.Vector2();
		var dollyEnd = new THREE.Vector2();
		var dollyDelta = new THREE.Vector2();

		var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

		var state = STATE.NONE;

		// for reset

		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		// events

		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };

		// pass in x,y of change desired in pixel space,
		// right and down are positive
		function pan( deltaX, deltaY ) {

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			constraint.pan( deltaX, deltaY, element.clientWidth, element.clientHeight );

		}

		this.update = function () {

			if ( this.autoRotate && state === STATE.NONE ) {

				constraint.rotateLeft( getAutoRotationAngle() );

			}

			if ( constraint.update() === true ) {

				this.dispatchEvent( changeEvent );

			}

		};

		this.reset = function () {

			state = STATE.NONE;

			this.target.copy( this.target0 );
			this.object.position.copy( this.position0 );
			this.object.zoom = this.zoom0;

			this.object.updateProjectionMatrix();
			this.dispatchEvent( changeEvent );

			this.update();

		};

		function getAutoRotationAngle() {

			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

		}

		function getZoomScale() {

			return Math.pow( 0.95, scope.zoomSpeed );

		}

		function onMouseDown( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( event.button === scope.mouseButtons.ORBIT ) {

				if ( scope.enableRotate === false ) return;

				state = STATE.ROTATE;

				rotateStart.set( event.clientX, event.clientY );

			} else if ( event.button === scope.mouseButtons.ZOOM ) {

				if ( scope.enableZoom === false ) return;

				state = STATE.DOLLY;

				dollyStart.set( event.clientX, event.clientY );

			} else if ( event.button === scope.mouseButtons.PAN ) {

				if ( scope.enablePan === false ) return;

				state = STATE.PAN;

				panStart.set( event.clientX, event.clientY );

			}

			if ( state !== STATE.NONE ) {

				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );
				scope.dispatchEvent( startEvent );

			}

		}

		function onMouseMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			if ( state === STATE.ROTATE ) {

				if ( scope.enableRotate === false ) return;

				rotateEnd.set( event.clientX, event.clientY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				// rotating across whole screen goes 360 degrees around
				constraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

				// rotating up and down along whole screen attempts to go 360, but limited to 180
				constraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

			} else if ( state === STATE.DOLLY ) {

				if ( scope.enableZoom === false ) return;

				dollyEnd.set( event.clientX, event.clientY );
				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					constraint.dollyIn( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					constraint.dollyOut( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

			} else if ( state === STATE.PAN ) {

				if ( scope.enablePan === false ) return;

				panEnd.set( event.clientX, event.clientY );
				panDelta.subVectors( panEnd, panStart );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

			}

			if ( state !== STATE.NONE ) scope.update();

		}

		function onMouseUp( /* event */ ) {

			if ( scope.enabled === false ) return;

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );
			scope.dispatchEvent( endEvent );
			state = STATE.NONE;

		}

		function onMouseWheel( event ) {

			if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;

			event.preventDefault();
			event.stopPropagation();

			var delta = 0;

			if ( event.wheelDelta !== undefined ) {

				// WebKit / Opera / Explorer 9

				delta = event.wheelDelta;

			} else if ( event.detail !== undefined ) {

				// Firefox

				delta = - event.detail;

			}

			if ( delta > 0 ) {

				constraint.dollyOut( getZoomScale() );

			} else if ( delta < 0 ) {

				constraint.dollyIn( getZoomScale() );

			}

			scope.update();
			scope.dispatchEvent( startEvent );
			scope.dispatchEvent( endEvent );

		}

		function onKeyDown( event ) {

			if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

			switch ( event.keyCode ) {

				case scope.keys.UP:
					pan( 0, scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.BOTTOM:
					pan( 0, - scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.LEFT:
					pan( scope.keyPanSpeed, 0 );
					scope.update();
					break;

				case scope.keys.RIGHT:
					pan( - scope.keyPanSpeed, 0 );
					scope.update();
					break;

			}

		}

		function touchstart( event ) {

			if ( scope.enabled === false ) return;

			switch ( event.touches.length ) {

				case 1:	// one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;

					state = STATE.TOUCH_ROTATE;

					rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
					break;

				case 2:	// two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;

					state = STATE.TOUCH_DOLLY;

					var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
					var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
					var distance = Math.sqrt( dx * dx + dy * dy );
					dollyStart.set( 0, distance );
					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;

					state = STATE.TOUCH_PAN;

					panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) scope.dispatchEvent( startEvent );

		}

		function touchmove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			switch ( event.touches.length ) {

				case 1: // one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;
					if ( state !== STATE.TOUCH_ROTATE ) return;

					rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
					rotateDelta.subVectors( rotateEnd, rotateStart );

					// rotating across whole screen goes 360 degrees around
					constraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );
					// rotating up and down along whole screen attempts to go 360, but limited to 180
					constraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

					rotateStart.copy( rotateEnd );

					scope.update();
					break;

				case 2: // two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;
					if ( state !== STATE.TOUCH_DOLLY ) return;

					var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
					var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
					var distance = Math.sqrt( dx * dx + dy * dy );

					dollyEnd.set( 0, distance );
					dollyDelta.subVectors( dollyEnd, dollyStart );

					if ( dollyDelta.y > 0 ) {

						constraint.dollyOut( getZoomScale() );

					} else if ( dollyDelta.y < 0 ) {

						constraint.dollyIn( getZoomScale() );

					}

					dollyStart.copy( dollyEnd );

					scope.update();
					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;
					if ( state !== STATE.TOUCH_PAN ) return;

					panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
					panDelta.subVectors( panEnd, panStart );

					pan( panDelta.x, panDelta.y );

					panStart.copy( panEnd );

					scope.update();
					break;

				default:

					state = STATE.NONE;

			}

		}

		function touchend( /* event */ ) {

			if ( scope.enabled === false ) return;

			scope.dispatchEvent( endEvent );
			state = STATE.NONE;

		}

		function contextmenu( event ) {

			event.preventDefault();

		}

		this.dispose = function() {

			this.domElement.removeEventListener( 'contextmenu', contextmenu, false );
			this.domElement.removeEventListener( 'mousedown', onMouseDown, false );
			this.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );
			this.domElement.removeEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox

			this.domElement.removeEventListener( 'touchstart', touchstart, false );
			this.domElement.removeEventListener( 'touchend', touchend, false );
			this.domElement.removeEventListener( 'touchmove', touchmove, false );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			window.removeEventListener( 'keydown', onKeyDown, false );

		}

		this.domElement.addEventListener( 'contextmenu', contextmenu, false );

		this.domElement.addEventListener( 'mousedown', onMouseDown, false );
		this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );
		this.domElement.addEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox

		this.domElement.addEventListener( 'touchstart', touchstart, false );
		this.domElement.addEventListener( 'touchend', touchend, false );
		this.domElement.addEventListener( 'touchmove', touchmove, false );

		window.addEventListener( 'keydown', onKeyDown, false );

		// force an update at start
		this.update();

	};

	OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	OrbitControls.prototype.constructor = OrbitControls;

	Object.defineProperties( OrbitControls.prototype, {

		object: {

			get: function () {

				return this.constraint.object;

			}

		},

		target: {

			get: function () {

				return this.constraint.target;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: target is now immutable. Use target.set() instead.' );
				this.constraint.target.copy( value );

			}

		},

		minDistance : {

			get: function () {

				return this.constraint.minDistance;

			},

			set: function ( value ) {

				this.constraint.minDistance = value;

			}

		},

		maxDistance : {

			get: function () {

				return this.constraint.maxDistance;

			},

			set: function ( value ) {

				this.constraint.maxDistance = value;

			}

		},

		minZoom : {

			get: function () {

				return this.constraint.minZoom;

			},

			set: function ( value ) {

				this.constraint.minZoom = value;

			}

		},

		maxZoom : {

			get: function () {

				return this.constraint.maxZoom;

			},

			set: function ( value ) {

				this.constraint.maxZoom = value;

			}

		},

		minPolarAngle : {

			get: function () {

				return this.constraint.minPolarAngle;

			},

			set: function ( value ) {

				this.constraint.minPolarAngle = value;

			}

		},

		maxPolarAngle : {

			get: function () {

				return this.constraint.maxPolarAngle;

			},

			set: function ( value ) {

				this.constraint.maxPolarAngle = value;

			}

		},

		minAzimuthAngle : {

			get: function () {

				return this.constraint.minAzimuthAngle;

			},

			set: function ( value ) {

				this.constraint.minAzimuthAngle = value;

			}

		},

		maxAzimuthAngle : {

			get: function () {

				return this.constraint.maxAzimuthAngle;

			},

			set: function ( value ) {

				this.constraint.maxAzimuthAngle = value;

			}

		},

		enableDamping : {

			get: function () {

				return this.constraint.enableDamping;

			},

			set: function ( value ) {

				this.constraint.enableDamping = value;

			}

		},

		dampingFactor : {

			get: function () {

				return this.constraint.dampingFactor;

			},

			set: function ( value ) {

				this.constraint.dampingFactor = value;

			}

		},

		// backward compatibility

		noZoom: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				return ! this.enableZoom;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				this.enableZoom = ! value;

			}

		},

		noRotate: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				return ! this.enableRotate;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				this.enableRotate = ! value;

			}

		},

		noPan: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				return ! this.enablePan;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				this.enablePan = ! value;

			}

		},

		noKeys: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				return ! this.enableKeys;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				this.enableKeys = ! value;

			}

		},

		staticMoving : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				return ! this.constraint.enableDamping;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				this.constraint.enableDamping = ! value;

			}

		},

		dynamicDampingFactor : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				return this.constraint.dampingFactor;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				this.constraint.dampingFactor = value;

			}

		}

	} );

	return OrbitControls;
}

},{}],52:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.THREE = global.THREE || {})));
}(this, (function (exports) { 'use strict';

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [], i = 0;
				var length = listenerArray.length;

				for ( i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	var REVISION = '82';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var BlendingMode = {
		NoBlending: NoBlending,
		NormalBlending: NormalBlending,
		AdditiveBlending: AdditiveBlending,
		SubtractiveBlending: SubtractiveBlending,
		MultiplyBlending: MultiplyBlending,
		CustomBlending: CustomBlending
	};
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var TextureMapping = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var TextureWrapping = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	var NearestFilter = 1003;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipMapLinearFilter = 1008;
	var TextureFilter = {
		NearestFilter: NearestFilter,
		NearestMipMapNearestFilter: NearestMipMapNearestFilter,
		NearestMipMapLinearFilter: NearestMipMapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipMapNearestFilter: LinearMipMapNearestFilter,
		LinearMipMapLinearFilter: LinearMipMapLinearFilter
	};
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RGB_S3TC_DXT1_Format = 2001;
	var RGBA_S3TC_DXT1_Format = 2002;
	var RGBA_S3TC_DXT3_Format = 2003;
	var RGBA_S3TC_DXT5_Format = 2004;
	var RGB_PVRTC_4BPPV1_Format = 2100;
	var RGB_PVRTC_2BPPV1_Format = 2101;
	var RGBA_PVRTC_4BPPV1_Format = 2102;
	var RGBA_PVRTC_2BPPV1_Format = 2103;
	var RGB_ETC1_Format = 2151;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function generateUUID() {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		random16: function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Vector2.prototype = {

		constructor: Vector2,

		isVector2: true,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector2();
					max = new Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: TextureIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding :  LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = {

		constructor: Texture,

		isTexture: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	Object.assign( Texture.prototype, EventDispatcher.prototype );

	var count = 0;
	function TextureIdCount() { return count++; }

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Vector4.prototype = {

		constructor: Vector4,

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector4();
					max = new Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.uuid = _Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Quaternion.prototype = {

		constructor: Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( (euler && euler.isEuler) === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		inverse: function () {

			return this.conjugate().normalize();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Vector3.prototype = {

		constructor: Vector3,

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( (euler && euler.isEuler) === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector3();
					max = new Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			return this.setFromMatrixColumn( m, 3 );

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			if ( typeof m === 'number' ) {

				console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
				var temp = m;
				m = index;
				index = temp;

			}

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix4.prototype = {

		constructor: Matrix4,

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function extractRotation( m ) {

				if ( v1 === undefined ) v1 = new Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( (euler && euler.isEuler) === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function lookAt( eye, target, up ) {

				if ( x === undefined ) {

					x = new Vector3();
					y = new Vector3();
					z = new Vector3();

				}

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.z += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function decompose( position, quaternion, scale ) {

				if ( vector === undefined ) {

					vector = new Vector3();
					matrix = new Matrix4();

				}

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author tschw
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyCubeTexture = new CubeTexture();

	// --- Base for inner nodes (including the root) ---

	function UniformContainer() {

		this.seq = [];
		this.map = {};

	}

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	// Texture unit allocation

	function allocTexUnits( renderer, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			r[ i ] = renderer.allocTextureUnit();

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
	function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

	// Single float vector (from flat array or THREE.VectorN)

	function setValue2fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
		else gl.uniform2f( this.addr, v.x, v.y );

	}

	function setValue3fv( gl, v ) {

		if ( v.x !== undefined )
			gl.uniform3f( this.addr, v.x, v.y, v.z );
		else if ( v.r !== undefined )
			gl.uniform3f( this.addr, v.r, v.g, v.b );
		else
			gl.uniform3fv( this.addr, v );

	}

	function setValue4fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
		else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	}

	// Single matrix (from flat array or MatrixN)

	function setValue2fm( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, v.elements || v );

	}

	function setValue3fm( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, v.elements || v );

	}

	function setValue4fm( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, v.elements || v );

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT6( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
	function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
	function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1f; // FLOAT
			case 0x8b50: return setValue2fv; // _VEC2
			case 0x8b51: return setValue3fv; // _VEC3
			case 0x8b52: return setValue4fv; // _VEC4

			case 0x8b5a: return setValue2fm; // _MAT2
			case 0x8b5b: return setValue3fm; // _MAT3
			case 0x8b5c: return setValue4fm; // _MAT4

			case 0x8b5e: return setValueT1; // SAMPLER_2D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// Array of scalars

	function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
	function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

	// Array of vectors (flat or from THREE classes)

	function setValueV2a( gl, v ) {

		gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

	}

	function setValueV3a( gl, v ) {

		gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

	}

	function setValueV4a( gl, v ) {

		gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2a( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

	}

	function setValueM3a( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

	}

	function setValueM4a( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

	}

	// Array of textures (2D / Cube)

	function setValueT1a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1fv; // FLOAT
			case 0x8b50: return setValueV2a; // _VEC2
			case 0x8b51: return setValueV3a; // _VEC3
			case 0x8b52: return setValueV4a; // _VEC4

			case 0x8b5a: return setValueM2a; // _MAT2
			case 0x8b5b: return setValueM3a; // _MAT3
			case 0x8b5c: return setValueM4a; // _MAT4

			case 0x8b5e: return setValueT1a; // SAMPLER_2D
			case 0x8b60: return setValueT6a; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function StructuredUniform( id ) {

		this.id = id;

		UniformContainer.call( this ); // mix-in

	}

	StructuredUniform.prototype.setValue = function( gl, value ) {

		// Note: Don't need an extra 'renderer' parameter, since samplers
		// are not allowed in structured uniforms.

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ] );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		for (; ;) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined ||
					subscript === '[' && matchEnd + 2 === pathLength ) {
				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
						new SingleUniform( id, activeInfo, addr ) :
						new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {
				// step into inner node / create it in case it doesn't exist

				var map = container.map,
					next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program, renderer ) {

		UniformContainer.call( this );

		this.renderer = renderer;

		var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( var i = 0; i !== n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				path = info.name,
				addr = gl.getUniformLocation( program, path );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function( gl, name, value ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	};

	WebGLUniforms.prototype.set = function( gl, object, name ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

	};

	WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	};


	// Static interface

	WebGLUniforms.upload = function( gl, seq, values, renderer ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {
				// note: always updating when .needsUpdate is undefined

				u.setValue( gl, v.value, renderer );

			}

		}

	};

	WebGLUniforms.seqWithValue = function( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	};

	/**
	 * Uniform Utilities
	 */

	var UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src && ( parameter_src.isColor ||
						parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
						parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
						parameter_src.isTexture ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	var bsdfs = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

	var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

	var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

	var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var normal_frag = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n";

	var normal_vert = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

	var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_vertex: envmap_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars: lights_pars,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_template: lights_template,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_flip: normal_flip,
		normal_fragment: normal_fragment,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert
	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	Color.prototype = {

		constructor: Color,

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( (value && value.isColor) ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = _Math.euclideanModulo( h, 1 );
				s = _Math.clamp( s, 0, 1 );
				l = _Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	};

	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

			specularMap: { value: null },
			alphaMap: { value: null },

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) }
				}

			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					specular : { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}

			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0 },
					envMapIntensity : { value: 1 }, // temporary
				}

			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		points: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.points,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.fog,

				{
					scale    : { value: 1 },
					dashSize : { value: 1 },
					totalSize: { value: 2 }
				}

			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.displacementmap

			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: {

				opacity : { value: 1.0 }

			},

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		equirect: {

			uniforms: {
				tEquirect: { value: null },
				tFlip: { value: - 1 }
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: {

				lightPos: { value: new Vector3() }

			},

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		}

	};

	ShaderLib.physical = {

		uniforms: UniformsUtils.merge( [

			ShaderLib.standard.uniforms,

			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}

		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Box2.prototype = {

		constructor: Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlarePlugin( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var shader, program, attributes, uniforms;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"uniform sampler2D occlusionMap;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if ( renderType == 2 ) {",

							"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

							"vVisibility =        visibility.r / 9.0;",
							"vVisibility *= 1.0 - visibility.g / 9.0;",
							"vVisibility *=       visibility.b / 9.0;",
							"vVisibility *= 1.0 - visibility.a / 9.0;",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						// pink square

						"if ( renderType == 0 ) {",

							"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

						// restore

						"} else if ( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * vVisibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new Vector2( size * invAspect, size );

			var screenPosition = new Vector3( 1, 1, 0 ),
				screenPositionPixels = new Vector2( 1, 1 );

			var validArea = new Box2();

			validArea.min.set( viewport.x, viewport.y );
			validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.setDepthWrite( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				// horizontal and vertical coordinate of the lower left corner of the pixels to copy

				screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
				screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

				// screen cull

				if ( validArea.containsPoint( screenPositionPixels ) === true ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture2D( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.setDepthWrite( true );

			renderer.resetGLState();

		};

		function createProgram( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	}

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpritePlugin( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new Vector3();
		var spriteRotation = new Quaternion();
		var spriteScale = new Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( (fog && fog.isFog) ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( (fog && fog.isFogExp2) ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				if ( material.visible === false ) continue;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map ) {

					renderer.setTexture2D( material.map, 0 );

				} else {

					renderer.setTexture2D( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram() {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Material() {

		Object.defineProperty( this, 'id', { value: MaterialIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	}

	Material.prototype = {

		constructor: Material,

		isMaterial: true,

		get needsUpdate() {

			return this._needsUpdate;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.update();
			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( (currentValue && currentValue.isColor) ) {

					currentValue.set( newValue );

				} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( (this.color && this.color.isColor) ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();
			if ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;
			if ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( (this.bumpMap && this.bumpMap.isTexture) ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( (this.normalMap && this.normalMap.isTexture) ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( (this.displacementMap && this.displacementMap.isTexture) ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( (this.envMap && this.envMap.isTexture) ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.shading !== SmoothShading ) data.shading = this.shading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			data.skinning = this.skinning;
			data.morphTargets = this.morphTargets;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.shading = source.shading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	Object.assign( Material.prototype, EventDispatcher.prototype );

	var count$1 = 0;
	function MaterialIdCount() { return count$1++; }

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}

	Box3.prototype = {

		constructor: Box3,

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var v1 = new Vector3();

			return function setFromObject( object ) {

				var scope = this;

				object.updateMatrixWorld( true );

				this.makeEmpty();

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( (geometry && geometry.isGeometry) ) {

							var vertices = geometry.vertices;

							for ( var i = 0, il = vertices.length; i < il; i ++ ) {

								v1.copy( vertices[ i ] );
								v1.applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						} else if ( (geometry && geometry.isBufferGeometry) ) {

							var attribute = geometry.attributes.position;

							if ( attribute !== undefined ) {

								var array, offset, stride;

								if ( (attribute && attribute.isInterleavedBufferAttribute) ) {

									array = attribute.data.array;
									offset = attribute.offset;
									stride = attribute.data.stride;

								} else {

									array = attribute.array;
									offset = 0;
									stride = 3;

								}

								for ( var i = offset, il = array.length; i < il; i += stride ) {

									v1.fromArray( array, i );
									v1.applyMatrix4( node.matrixWorld );

									scope.expandByPoint( v1 );

								}

							}

						}

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new Vector3();

			return function getBoundingSphere( optionalTarget ) {

				var result = optionalTarget || new Sphere();

				this.getCenter( result.center );

				result.radius = this.getSize( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3()
			];

			return function applyMatrix4( matrix ) {

				// transform of empty box is an empty box.
				if( this.isEmpty() ) return this;

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Sphere.prototype = {

		constructor: Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).getCenter( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	function Matrix3() {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix3.prototype = {

		constructor: Matrix3,

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		setFromMatrix4: function( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[  8 ],
				me[ 1 ], me[ 5 ], me[  9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( (matrix && matrix.isMatrix4) ) {

				console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();
			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Plane( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Plane.prototype = {

		constructor: Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new Vector3();

			return function intersectLine( line, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new Vector3();
			var m1 = new Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				// transform normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				// recalculate constant (like in setFromNormalAndCoplanarPoint)
				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Frustum.prototype = {

		constructor: Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new Vector3(),
				p2 = new Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_lightShadows = _lights.shadows,

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];

		// init

		var depthMaterialTemplate = new MeshDepthMaterial();
		depthMaterialTemplate.depthPacking = RGBADepthPacking;
		depthMaterialTemplate.clipping = true;

		var distanceShader = ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = depthMaterialTemplate.clone();
			depthMaterial.morphTargets = useMorphing;
			depthMaterial.skinning = useSkinning;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new ShaderMaterial( {
				defines: {
					'USE_SHADOWMAP': ''
				},
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning,
				clipping: true
			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.renderReverseSided = true;
		this.renderSingleSided = true;

		this.render = function ( scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( _lightShadows.length === 0 ) return;

			// Set GL state for depth map.
			_state.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount, isPointLight;

			for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

				var light = _lightShadows[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );

				if ( (light && light.isPointLight) ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadowCamera.updateProjectionMatrix();

				}

				if ( (shadow && shadow.isSpotLightShadow) ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( (material && material.isMultiMaterial) ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

			}

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = false;

				if ( material.morphTargets ) {

					if ( (geometry && geometry.isBufferGeometry) ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( (geometry && geometry.isGeometry) ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				var useSkinning = object.isSkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
				 material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			var side = material.side;

			if ( scope.renderSingleSided && side == DoubleSide ) {

				side = FrontSide;

			}

			if ( scope.renderReverseSided ) {

				if ( side === FrontSide ) side = BackSide;
				else if ( side === BackSide ) side = FrontSide;

			}

			result.side = side;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.uniforms.lightPos !== undefined ) {

				result.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return result;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();

	}

	Ray.prototype = {

		constructor: Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new Vector3();

			return function intersectSphere( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Euler.prototype = {

		constructor: Euler,

		isEuler: true,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function setFromQuaternion( q, order, update ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1;

	}

	Layers.prototype = {

		constructor: Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	function Object3D() {

		Object.defineProperty( this, 'id', { value: Object3DIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

		this.onBeforeRender = function(){}; 
		this.onAfterRender = function(){};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object.assign( Object3D.prototype, EventDispatcher.prototype, {

		isObject3D: true,

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new Matrix4();

			return function lookAt( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( (object && object.isObject3D) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new Vector3();
			var scale = new Vector3();

			return function getWorldQuaternion( optionalTarget ) {

				var result = optionalTarget || new Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new Quaternion();

			return function getWorldRotation( optionalTarget ) {

				var result = optionalTarget || new Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new Vector3();
			var quaternion = new Quaternion();

			return function getWorldScale( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is '' when called from JSON.stringify
			var isRootObject = ( meta === undefined || meta === '' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	var count$2 = 0;
	function Object3DIdCount() { return count$2++; }

	/**
	 * @author bhouston / http://clara.io
	 */

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Line3.prototype = {

		constructor: Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new Vector3();
			var startEnd = new Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = _Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Triangle.normal = function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	Triangle.barycoordFromPoint = function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	Triangle.containsPoint = function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	Triangle.prototype = {

		constructor: Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();

			return function area() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		closestPointToPoint: function () {

			var plane, edgeList, projectedPoint, closestPoint;

			return function closestPointToPoint( point, optionalTarget ) {

				if ( plane === undefined ) {

					plane = new Plane();
					edgeList = [ new Line3(), new Line3(), new Line3() ];
					projectedPoint = new Vector3();
					closestPoint = new Vector3();

				}

				var result = optionalTarget || new Vector3();
				var minDistance = Infinity;

				// project the point onto the plane of the triangle

				plane.setFromCoplanarPoints( this.a, this.b, this.c );
				plane.projectPoint( point, projectedPoint );

				// check if the projection lies within the triangle

				if( this.containsPoint( projectedPoint ) === true ) {

					// if so, this is the closest point

					result.copy( projectedPoint );

				} else {

					// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

					edgeList[ 0 ].set( this.a, this.b );
					edgeList[ 1 ].set( this.b, this.c );
					edgeList[ 2 ].set( this.c, this.a );

					for( var i = 0; i < edgeList.length; i ++ ) {

						edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

						var distance = projectedPoint.distanceToSquared( closestPoint );

						if( distance < minDistance ) {

							minDistance = distance;

							result.copy( closestPoint );

						}

					}

				}

				return result;

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = (normal && normal.isVector3) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = (color && color.isColor) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Face3.prototype = {

		constructor: Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	BufferAttribute.prototype = {

		constructor: BufferAttribute,

		isBufferAttribute: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	function Int8Attribute( array, itemSize ) {

		return new BufferAttribute( new Int8Array( array ), itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint8Array( array ), itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		return new BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		return new BufferAttribute( new Int16Array( array ), itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint16Array( array ), itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		return new BufferAttribute( new Int32Array( array ), itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint32Array( array ), itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		return new BufferAttribute( new Float32Array( array ), itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		return new BufferAttribute( new Float64Array( array ), itemSize );

	}

	// Deprecated

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	function Geometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( Geometry.prototype, EventDispatcher.prototype, {

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( (geometry && geometry.isGeometry) === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( (mesh && mesh.isMesh) === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];
			this.colors = [];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var colors = source.colors;

			for ( var i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	var count$3 = 0;
	function GeometryIdCount() { return count$3++; }

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {

		computeBoundingBox: Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	}

	Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( (object && object.isPoints) || (object && object.isLine) ) {

				var positions = new Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( (object && object.isMesh) ) {

				if ( (geometry && geometry.isGeometry) ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( (object && object.isMesh) ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var positions = this.attributes.position.array;

			if ( positions !== undefined ) {

				this.boundingBox.setFromArray( positions );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new Box3();
			var vector = new Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				var positions = this.attributes.position;

				if ( positions ) {

					var array = positions.array;
					var center = this.boundingSphere.center;

					box.setFromArray( array );
					box.getCenter( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = array.length; i < il; i += 3 ) {

						vector.fromArray( array, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new Vector3(),
				pB = new Vector3(),
				pC = new Vector3(),

				cb = new Vector3(),
				ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( (geometry && geometry.isBufferGeometry) === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	BufferGeometry.MaxIndex = 65535;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			return this;

		},

		updateMorphTargets: function () {

			var morphTargets = this.geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ morphTargets[ m ].name ] = m;

				}

			}

		},

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			var barycoord = new Vector3();

			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

				var intersect;
				var material = object.material;

				if ( material.side === BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

				vA.fromArray( positions, a * 3 );
				vB.fromArray( positions, b * 3 );
				vC.fromArray( positions, c * 3 );

				var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uvs ) {

						uvA.fromArray( uvs, a * 2 );
						uvB.fromArray( uvs, b * 2 );
						uvC.fromArray( uvs, c * 2 );

						intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

					}

					intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
					intersection.faceIndex = a;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var uvs, intersection;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var a, b, c;
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( attributes.uv !== undefined ) {

						uvs = attributes.uv.array;

					}

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length; i < l; i += 3 ) {

							a = indices[ i ];
							b = indices[ i + 1 ];
							c = indices[ i + 2 ];

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
								intersects.push( intersection );

							}

						}

					} else {


						for ( var i = 0, l = positions.length; i < l; i += 9 ) {

							a = i / 3;
							b = a + 1;
							c = a + 2;

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.index = a; // triangle number in positions buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var fvA, fvB, fvC;
					var isFaceMaterial = (material && material.isMultiMaterial);
					var materials = isFaceMaterial === true ? material.materials : null;

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		// segments
		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// these are used to calculate buffer length
		var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
		var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;
		var numberOfVertices = 0;

		// group variables
		var groupStart = 0;

		// build each side of the box geometry
		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
		buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
		buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		// helper functions

		function calculateVertexCount( w, h, d ) {

			var vertices = 0;

			// calculate the amount of vertices for each side (plane)
			vertices += (w + 1) * (h + 1) * 2; // xy
			vertices += (w + 1) * (d + 1) * 2; // xz
			vertices += (d + 1) * (h + 1) * 2; // zy

			return vertices;

		}

		function calculateIndexCount( w, h, d ) {

			var index = 0;

			// calculate the amount of squares for each side
			index += w * h * 2; // xy
			index += w * d * 2; // xz
			index += d * h * 2; // zy

			return index * 6; // two triangles per square => six vertices per square

		}

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth	= width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var vector = new Vector3();

			// generate vertices, normals and uvs

			for ( var iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( var ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component
					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer
					vertices[ vertexBufferOffset ] = vector.x;
					vertices[ vertexBufferOffset + 1 ] = vector.y;
					vertices[ vertexBufferOffset + 2 ] = vector.z;

					// set values to correct vector component
					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer
					normals[ vertexBufferOffset ] = vector.x;
					normals[ vertexBufferOffset + 1 ] = vector.y;
					normals[ vertexBufferOffset + 2 ] = vector.z;

					// uvs
					uvs[ uvBufferOffset ] = ix / gridX;
					uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

					// update offsets and counters
					vertexBufferOffset += 3;
					uvBufferOffset += 2;
					vertexCounter += 1;

				}

			}

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					// indices
					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;

					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;

					// update offsets and counters
					indexBufferOffset += 6;
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups
			groupStart += groupCount;

			// update total number of vertices
			numberOfVertices += vertexCounter;

		}

	}

	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();

	}

	Camera.prototype = Object.create( Object3D.prototype );
	Camera.prototype.constructor = Camera;

	Camera.prototype.isCamera = true;

	Camera.prototype.getWorldDirection = function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new Matrix4();

		return function lookAt( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	Camera.prototype.copy = function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
					Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
						_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( view !== null ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makeFrustum(
					left, left + width, top - height, top, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * size );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {

			setMode: setMode,
			setIndex: setIndex,
			render: render,
			renderInstances: renderInstances

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			var count = 0;

			if ( (position && position.isInterleavedBufferAttribute) ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				count = position.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			}

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {
			setMode: setMode,
			render: render,
			renderInstances: renderInstances
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLLights() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear','( value )' ];
			case sRGBEncoding:
				return [ 'sRGB','( value )' ];
			case RGBEEncoding:
				return [ 'RGBE','( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM','( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM','( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD','( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = "Linear";
				break;

			case ReinhardToneMapping:
				toneMappingName = "Reinhard";
				break;

			case Uncharted2ToneMapping:
				toneMappingName = "Uncharted2";
				break;

			case CineonToneMapping:
				toneMappingName = "OptimizedCineon";
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program, identifiers ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	}

	function parseIncludes( string ) {

		var pattern = /#include +<([\w\d.]+)>/g;

		function replace( match, include ) {

			var replace = ShaderChunk[ include ];

			if ( replace === undefined ) {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

			return parseIncludes( replace );

		}

		return string.replace( pattern, replace );

	}

	function unrollLoops( string ) {

		var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

		function replace( match, start, end, snippet ) {

			var unroll = '';

			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

			}

			return unroll;

		}

		return string.replace( pattern, replace );

	}

	function WebGLProgram( renderer, code, material, parameters ) {

		var gl = renderer.context;

		var extensions = material.extensions;
		var defines = material.defines;

		var vertexShader = material.__webglShader.vertexShader;
		var fragmentShader = material.__webglShader.fragmentShader;

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		}

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( material.envMap.mapping ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

			switch ( material.envMap.mapping ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

			switch ( material.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		// console.log( 'building new program ' );

		//

		var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

		var customDefines = generateDefines( defines );

		//

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,
				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		} else {

			prefixVertex = [

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
				'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

				parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',

				( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

				parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = parseIncludes( vertexShader, parameters );
		vertexShader = replaceLightNums( vertexShader, parameters );

		fragmentShader = parseIncludes( fragmentShader, parameters );
		fragmentShader = replaceLightNums( fragmentShader, parameters );

		if ( ! material.isShaderMaterial ) {

			vertexShader = unrollLoops( vertexShader );
			fragmentShader = unrollLoops( fragmentShader );

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		var programLog = gl.getProgramInfoLog( program );
		var vertexLog = gl.getShaderInfoLog( glVertexShader );
		var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

		var runnable = true;
		var haveDiagnostics = true;

		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,
				material: material,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function() {

			if ( cachedUniforms === undefined ) {

				cachedUniforms =
						new WebGLUniforms( gl, program, renderer );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function() {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function() {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		// DEPRECATED

		Object.defineProperties( this, {

			uniforms: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
					return this.getUniforms();

				}
			},

			attributes: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
					return this.getAttributes();

				}
			}

		} );


		//

		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking"
		];


		function allocateBones( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && (object && object.isSkinnedMesh) ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( (map && map.isTexture) ) {

				encoding = map.encoding;

			} else if ( (map && map.isWebGLRenderTarget) ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getCurrentRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: !! fog,
				useFog: material.fog,
				fogExp: (fog && fog.isFogExp2),

				flatShading: material.shading === FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			return array.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, properties, info ) {

		var geometries = {};

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO

			var property = properties.get( geometry );

			if ( property.wireframe ) {

				deleteAttribute( property.wireframe );

			}

			properties.delete( geometry );

			var bufferproperty = properties.get( buffergeometry );

			if ( bufferproperty.wireframe ) {

				deleteAttribute( bufferproperty.wireframe );

			}

			properties.delete( buffergeometry );

			//

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		return {

			get: function ( object ) {

				var geometry = object.geometry;

				if ( geometries[ geometry.id ] !== undefined ) {

					return geometries[ geometry.id ];

				}

				geometry.addEventListener( 'dispose', onGeometryDispose );

				var buffergeometry;

				if ( geometry.isBufferGeometry ) {

					buffergeometry = geometry;

				} else if ( geometry.isGeometry ) {

					if ( geometry._bufferGeometry === undefined ) {

						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

					}

					buffergeometry = geometry._bufferGeometry;

				}

				geometries[ geometry.id ] = buffergeometry;

				info.memory.geometries ++;

				return buffergeometry;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( gl, properties, info ) {

		var geometries = new WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry.isGeometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false ) {

				gl.bufferData( bufferType, data.array, gl.STATIC_DRAW );

			} else if ( data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		return {

			getAttributeBuffer: getAttributeBuffer,
			getWireframeAttribute: getWireframeAttribute,

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

		var _infoMemory = info.memory;
		var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

		//

		function clampToMaxSize( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = _Math.nearestPowerOfTwo( image.width );
				canvas.height = _Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;

			return false;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = (texture && texture.isCompressedTexture);
					var isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isPowerOfTwoImage ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( (texture && texture.isDepthTexture) ) {

				// populate depth texture with dummy data

				var internalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === FloatType ) {

					if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
					internalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( _isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					internalFormat = _gl.DEPTH_COMPONENT16;

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					internalFormat = _gl.DEPTH_STENCIL;

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( (texture && texture.isDataTexture) ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( (texture && texture.isCompressedTexture) ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {

				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

			}

			// upload an empty depth texture with framebuffer size
			if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else {

				throw new Error('Unknown depthTexture format')

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;

			if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
					texture.minFilter !== NearestFilter &&
					texture.minFilter !== LinearFilter ) {

				var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				_gl.generateMipmap( target );
				state.bindTexture( target, null );

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = {};

		return {

			get: function ( object ) {

				var uuid = object.uuid;
				var map = properties[ uuid ];

				if ( map === undefined ) {

					map = {};
					properties[ uuid ] = map;

				}

				return map;

			},

			delete: function ( object ) {

				delete properties[ object.uuid ];

			},

			clear: function () {

				properties = {};

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, paramThreeToGL ) {

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4();

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a ) {

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( 0, 0, 0, 1 );

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( gl.NEVER );
									break;

								case AlwaysDepth:

									gl.depthFunc( gl.ALWAYS );
									break;

								case LessDepth:

									gl.depthFunc( gl.LESS );
									break;

								case LessEqualDepth:

									gl.depthFunc( gl.LEQUAL );
									break;

								case EqualDepth:

									gl.depthFunc( gl.EQUAL );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( gl.GEQUAL );
									break;

								case GreaterDepth:

									gl.depthFunc( gl.GREATER );
									break;

								case NotEqualDepth:

									gl.depthFunc( gl.NOTEQUAL );
									break;

								default:

									gl.depthFunc( gl.LEQUAL );

							}

						} else {

							gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail  = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef  = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

						currentStencilFail  = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		//

		function init() {

			clearColor( 0, 0, 0, 1 );
			clearDepth( 1 );
			clearStencil( 0 );

			enable( gl.DEPTH_TEST );
			setDepthFunc( LessEqualDepth );

			setFlipSided( false );
			setCullFace( CullFaceBack );
			enable( gl.CULL_FACE );

			enable( gl.BLEND );
			setBlending( NormalBlending );

		}

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		}

		function getCompressedTextureFormats() {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		}

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== NoBlending ) {

				enable( gl.BLEND );

			} else {

				disable( gl.BLEND );

			}

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( blending === AdditiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

					}

				} else if ( blending === SubtractiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

					}

				} else if ( blending === MultiplyBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

					}

				} else {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					}

				}

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			if ( blending === CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		}

		// TODO Deprecate

		function setColorWrite( colorWrite ) {

			colorBuffer.setMask( colorWrite );

		}

		function setDepthTest( depthTest ) {

			depthBuffer.setTest( depthTest );

		}

		function setDepthWrite( depthWrite ) {

			depthBuffer.setMask( depthWrite );

		}

		function setDepthFunc( depthFunc ) {

			depthBuffer.setFunc( depthFunc );

		}

		function setStencilTest( stencilTest ) {

			stencilBuffer.setTest( stencilTest );

		}

		function setStencilWrite( stencilWrite ) {

			stencilBuffer.setMask( stencilWrite );

		}

		function setStencilFunc( stencilFunc, stencilRef, stencilMask ) {

			stencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );

		}

		function setStencilOp( stencilFail, stencilZFail, stencilZPass ) {

			stencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function getScissorTest() {

			return currentScissorTest;

		}

		function setScissorTest( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		// TODO Deprecate

		function clearColor( r, g, b, a ) {

			colorBuffer.setClear( r, g, b, a );

		}

		function clearDepth( depth ) {

			depthBuffer.setClear( depth );

		}

		function clearStencil( stencil ) {

			stencilBuffer.setClear( stencil );

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			init: init,
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,

			setBlending: setBlending,

			setColorWrite: setColorWrite,
			setDepthTest: setDepthTest,
			setDepthWrite: setDepthWrite,
			setDepthFunc: setDepthFunc,
			setStencilTest: setStencilTest,
			setStencilWrite: setStencilWrite,
			setStencilFunc: setStencilFunc,
			setStencilOp: setStencilOp,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			getScissorTest: getScissorTest,
			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,

			clearColor: clearColor,
			clearDepth: clearDepth,
			clearStencil: clearStencil,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		return {

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					case 'WEBGL_compressed_texture_etc1':
						extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function() {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function() {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled ||
					planes === null || planes.length === 0 ||
					renderingShadows && ! clipShadows ) {
				// there's no local clipping

				if ( renderingShadows ) {
					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();
				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset;
										i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).
								applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			
			return dstArray;

		}

	}

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		console.log( 'THREE.WebGLRenderer', REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );

		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		_currentViewport = new Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_clearColor = new Color( 0x000000 ),
		_clearAlpha = 0,

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		_sphere = new Sphere(),

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: []

		},

		// info

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: {

				geometries: 0,
				textures: 0

			},
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new WebGLExtensions( _gl );

		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		var state = new WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new WebGLProperties();
		var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
		var objects = new WebGLObjects( _gl, properties, this.info );
		var programCache = new WebGLPrograms( this, capabilities );
		var lightCache = new WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		var backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
		var backgroundCamera2 = new PerspectiveCamera();
		var backgroundPlaneMesh = new Mesh(
			new PlaneBufferGeometry( 2, 2 ),
			new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
		);
		var backgroundBoxShader = ShaderLib[ 'cube' ];
		var backgroundBoxMesh = new Mesh(
			new BoxBufferGeometry( 5, 5, 5 ),
			new ShaderMaterial( {
				uniforms: backgroundBoxShader.uniforms,
				vertexShader: backgroundBoxShader.vertexShader,
				fragmentShader: backgroundBoxShader.fragmentShader,
				side: BackSide,
				depthTest: false,
				depthWrite: false,
				fog: false
			} )
		);

		//

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			state.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.properties = properties;
		this.state = state;

		// shadow map

		var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new SpritePlugin( this, sprites );
		var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = function () {

			return capabilities.getMaxAnisotropy();

		};

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _viewport.z, _viewport.w, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			state.viewport( _viewport.set( x, y, width, height ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			state.scissor( _scissor.set( x, y, width, height ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			transparentObjects = [];
			transparentObjectsLastIndex = -1;
			opaqueObjects = [];
			opaqueObjectsLastIndex = -1;

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( ! material.isMeshPhongMaterial &&
				     ! material.isMeshStandardMaterial &&
				       material.shading === FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( absNumericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

					morphInfluences[ i ] = 0.0;

				}

				program.getUniforms().setValue(
						_gl, 'morphTargetInfluences', morphInfluences );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataCount = 0;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) return;

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var type = _gl.FLOAT;
						var array = geometryAttribute.array;
						var normalized = geometryAttribute.normalized;

						if ( array instanceof Float32Array ) {

							type = _gl.FLOAT;

						} else if ( array instanceof Float64Array ) {

							console.warn( "Unsupported data buffer format: Float64Array" );

						} else if ( array instanceof Uint16Array ) {

							type = _gl.UNSIGNED_SHORT;

						} else if ( array instanceof Int16Array ) {

							type = _gl.SHORT;

						} else if ( array instanceof Uint32Array ) {

							type = _gl.UNSIGNED_INT;

						} else if ( array instanceof Int32Array ) {

							type = _gl.INT;

						} else if ( array instanceof Int8Array ) {

							type = _gl.BYTE;

						} else if ( array instanceof Uint8Array ) {

							type = _gl.UNSIGNED_BYTE;

						}

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function absNumericalSort( a, b ) {

			return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

		}

		function painterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {

				return a.material.program.id - b.material.program.id;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera !== undefined && camera.isCamera !== true ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			setupShadows( lights );

			shadowMap.render( scene, camera );

			setupLights( lights, camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			var background = scene.background;

			if ( background === null ) {

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			} else if ( background && background.isColor ) {

				glClearColor( background.r, background.g, background.b, 1 );
				forceClear = true;

			}

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			if ( background && background.isCubeTexture ) {

				backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

				backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
				backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

				backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
				backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

				objects.update( backgroundBoxMesh );

				_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

			} else if ( background && background.isTexture ) {

				backgroundPlaneMesh.material.map = background;

				objects.update( backgroundPlaneMesh );

				_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				renderObjects( transparentObjects, scene, camera, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( NoBlending );
				renderObjects( opaqueObjects, scene, camera );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, scene, camera );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		// TODO Duplicated code (Frustum)

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible ) {

				if ( object.isLight ) {

					lights.push( object );

				} else if ( object.isSprite ) {

					if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object.isLensFlare ) {

					lensFlares.push( object );

				} else if ( object.isImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material.isMultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				if ( object.isImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, scene.fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );


			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters(
					material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.__webglShader.uniforms;

			if ( ! material.isShaderMaterial &&
			     ! material.isRawShaderMaterial ||
			       material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.lightsHash = _lights.hash;

			if ( material.lights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.spotLights.value = _lights.spot;
				uniforms.pointLights.value = _lights.point;
				uniforms.hemisphereLights.value = _lights.hemi;

				uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
				uniforms.spotShadowMap.value = _lights.spotShadowMap;
				uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
				uniforms.pointShadowMap.value = _lights.pointShadowMap;
				uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setMaterial( material ) {

			material.side === DoubleSide
				? state.disable( _gl.CULL_FACE )
				: state.enable( _gl.CULL_FACE );

			state.setFlipSided( material.side === BackSide );

			material.transparent === true
				? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
				: state.setBlending( NoBlending );

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );

				}

			}

			if ( material.needsUpdate === false ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes || 
	 				  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.set( _gl, camera, 'projectionMatrix' );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshBasicMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isShaderMaterial ||
				     material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

				p_uniforms.set( _gl, _this, 'toneMappingExposure' );
				p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

						p_uniforms.set( _gl, skeleton, 'boneTexture' );
						p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
						p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material.isLineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material.isMeshDepthMaterial ) {

					if ( material.displacementMap ) {

						m_uniforms.displacementMap.value = material.displacementMap;
						m_uniforms.displacementScale.value = material.displacementScale;
						m_uniforms.displacementBias.value = material.displacementBias;

					}

				} else if ( material.isMeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );

			}


			// common matrices

			p_uniforms.set( _gl, object, 'modelViewMatrix' );
			p_uniforms.set( _gl, object, 'normalMatrix' );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

			refreshUniformsStandard( uniforms, material );

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Lighting

		function setupShadows( lights ) {

			var lightShadowsLength = 0;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				if ( light.castShadow ) {

					_lights.shadows[ lightShadowsLength ++ ] = light;

				}

			}

			_lights.shadows.length = lightShadowsLength;

		}

		function setupLights( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,
			shadowMap,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isDirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.directionalShadowMap[ directionalLength ] = shadowMap;
					_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light.isSpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.spotShadowMap[ spotLength ] = shadowMap;
					_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light.isPointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.pointShadowMap[ pointLength ] = shadowMap;

					if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

						_lights.pointShadowMatrix[ pointLength ] = new Matrix4();

					}

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position
					_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
					_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light.isHemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.spot.length = spotLength;
			_lights.point.length = pointLength;
			_lights.hemi.length = hemiLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			state.setCullFace( cullFace );
			state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

		};

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function() {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture && texture.isWebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function() {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function() {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture && texture.isWebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		this.getCurrentRenderTarget = function() {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			var framebuffer;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

				_currentViewport.copy( renderTarget.viewport );

			} else {

				framebuffer = null;

				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			state.viewport( _currentViewport );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		// Map three.js constants to WebGL constants

		function paramThreeToGL( p ) {

			var extension;

			if ( p === RepeatWrapping ) return _gl.REPEAT;
			if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === NearestFilter ) return _gl.NEAREST;
			if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === LinearFilter ) return _gl.LINEAR;
			if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === ByteType ) return _gl.BYTE;
			if ( p === ShortType ) return _gl.SHORT;
			if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === IntType ) return _gl.INT;
			if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === FloatType ) return _gl.FLOAT;

			if ( p === HalfFloatType ) {

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) return extension.HALF_FLOAT_OES;

			}

			if ( p === AlphaFormat ) return _gl.ALPHA;
			if ( p === RGBFormat ) return _gl.RGB;
			if ( p === RGBAFormat ) return _gl.RGBA;
			if ( p === LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;

			if ( p === AddEquation ) return _gl.FUNC_ADD;
			if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === ZeroFactor ) return _gl.ZERO;
			if ( p === OneFactor ) return _gl.ONE;
			if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === DstColorFactor ) return _gl.DST_COLOR;
			if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				 p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			if ( p === MinEquation || p === MaxEquation ) {

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;

				}

			}

			if ( p === UnsignedInt248Type ) {

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

			}

			return 0;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2 ( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	FogExp2.prototype.isFogExp2 = true;

	FogExp2.prototype.clone = function () {

		return new FogExp2( this.color.getHex(), this.density );

	};

	FogExp2.prototype.toJSON = function ( meta ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog ( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Fog.prototype.isFog = true;

	Fog.prototype.clone = function () {

		return new Fog( this.color.getHex(), this.near, this.far );

	};

	Fog.prototype.toJSON = function ( meta ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene () {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	}

	Scene.prototype = Object.create( Object3D.prototype );

	Scene.prototype.constructor = Scene;

	Scene.prototype.copy = function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	Scene.prototype.toJSON = function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlare( texture, size, distance, blending, color ) {

		Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	}

	LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LensFlare,

		isLensFlare: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.positionScreen.copy( source.positionScreen );
			this.customUpdateCallback = source.customUpdateCallback;

			for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

				this.lensFlares.push( source.lensFlares[ i ] );

			}

			return this;

		},

		add: function ( texture, size, distance, blending, color, opacity ) {

			if ( size === undefined ) size = - 1;
			if ( distance === undefined ) distance = 0;
			if ( opacity === undefined ) opacity = 1;
			if ( color === undefined ) color = new Color( 0xffffff );
			if ( blending === undefined ) blending = NormalBlending;

			distance = Math.min( distance, Math.max( 0, distance ) );

			this.lensFlares.push( {
				texture: texture,	// THREE.Texture
				size: size, 		// size in pixels (-1 = use texture.width)
				distance: distance, 	// distance (0-1) from light source (0=at light source)
				x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
				scale: 1, 		// scale
				rotation: 0, 		// rotation
				opacity: opacity,	// opacity
				color: color,		// color
				blending: blending	// blending
			} );

		},

		/*
		 * Update lens flares update positions on all flares based on the screen position
		 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
		 */

		updateLensFlares: function () {

			var f, fl = this.lensFlares.length;
			var flare;
			var vecX = - this.positionScreen.x * 2;
			var vecY = - this.positionScreen.y * 2;

			for ( f = 0; f < fl; f ++ ) {

				flare = this.lensFlares[ f ];

				flare.x = this.positionScreen.x + vecX * flare.distance;
				flare.y = this.positionScreen.y + vecY * flare.distance;

				flare.wantedRotation = flare.x * Math.PI * 0.25;
				flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
				var guessSizeSq = this.scale.x * this.scale.y / 4;

				if ( distanceSq > guessSizeSq ) {

					return;

				}

				intersects.push( {

					distance: Math.sqrt( distanceSq ),
					point: this.position,
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	}


	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps  = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	function Skeleton( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = _Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ b ] ) {

					inverse.getInverse( this.bones[ b ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone;

			// recover the bind-time world matrices

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ b ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					if ( (bone.parent && bone.parent.isBone) ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new Matrix4();

			return function update() {

				// flatten bone matrices to array

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					// compute the offset between the current and the original transform

					var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
					offsetMatrix.toArray( this.boneMatrices, b * 16 );

				}

				if ( this.useVertexTexture ) {

					this.boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone( skin ) {

		Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.skin = source.skin;

			return this;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material, useVertexTexture ) {

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null &&
						bones[ gbone.parent ] !== undefined ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	}


	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		bind: function( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			if ( (this.geometry && this.geometry.isGeometry) ) {

				for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					var scale = 1.0 / sw.lengthManhattan();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {

				var vec = new Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( var i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					var scale = 1.0 / vec.lengthManhattan();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, true );

			if ( this.bindMode === "attached" ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === "detached" ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function() {

			return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new LineSegments( geometry, material );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = (this && this.isLineSegments) ? 2 : 1;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.lights = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						var intersectPoint = ray.closestPointToPoint( point );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	}

	VideoTexture.prototype = Object.create( Texture.prototype );
	VideoTexture.prototype.constructor = VideoTexture;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )

		}

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.type = type !== undefined ? type : UnsignedShortType;

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( (geometry && geometry.isGeometry) ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

		} else if ( (geometry && geometry.isBufferGeometry) ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			}

		}

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// generate vertices and uvs

		var vertices = [];
		var uvs = [];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				vertices.push( p.x, p.y, p.z );

				uvs.push( u, v );

			}

		}

		// generate indices

		var indices = [];
		var a, b, c, d;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		appplyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );
		this.normalizeNormals();

		this.boundingSphere = new Sphere( new Vector3(), radius );

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols ; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function appplyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth  ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] =  uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function OctahedronBufferGeometry( radius,detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function IcosahedronGeometry( radius, detail ) {

	 	Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 *
	 */

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( normals, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			var P = path.getPointAt( i / tubularSegments );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin =   Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 */

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * see: http://www.blackpawn.com/texts/pqtorus/
	 */
	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 100;
		tube = tube || 40;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var i, j, index = 0, indexOffset = 0;

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				// vertex
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				normal.subVectors( vertex, P1 ).normalize();
				normals.setXYZ( index, normal.x, normal.y, normal.z );

				// uv
				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices
				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 */

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;

		// helper variables
		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices[ vertexBufferOffset ] = vertex.x;
				vertices[ vertexBufferOffset + 1 ] = vertex.y;
				vertices[ vertexBufferOffset + 2 ] = vertex.z;

				// this vector is used to calculate the normal
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				// normal
				normal.subVectors( vertex, center ).normalize();

				normals[ vertexBufferOffset ] = normal.x;
				normals[ vertexBufferOffset + 1 ] = normal.y;
				normals[ vertexBufferOffset + 2 ] = normal.z;

				// uv
				uvs[ uvBufferOffset ] = i / tubularSegments;
				uvs[ uvBufferOffset + 1 ] = j / radialSegments;

				// update offsets
				vertexBufferOffset += 3;
				uvBufferOffset += 2;

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// face one
				indices[ indexBufferOffset ] = a;
				indices[ indexBufferOffset + 1 ] = b;
				indices[ indexBufferOffset + 2 ] = d;

				// face two
				indices[ indexBufferOffset + 3 ] = b;
				indices[ indexBufferOffset + 4 ] = c;
				indices[ indexBufferOffset + 5 ] = d;

				// update offset
				indexBufferOffset += 6;

			}

		}

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function triangulate( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function removeDupEndPts(points) {

				var l = points.length;

				if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

					points.pop();

				}

			}

			removeDupEndPts( contour );
			holes.forEach( removeDupEndPts );

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function b2( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function b3( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <Object> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ExtrudeGeometry( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new Vector3();
			normal = new Vector3();
			position2 = new Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos ( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new Vector2( a.x, a.y ),
				new Vector2( b.x, b.y ),
				new Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new Vector2( a.x, 1 - a.z ),
					new Vector2( b.x, 1 - b.z ),
					new Vector2( c.x, 1 - c.z ),
					new Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new Vector2( a.y, 1 - a.z ),
					new Vector2( b.y, 1 - b.z ),
					new Vector2( c.y, 1 - c.z ),
					new Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	function TextGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( (font && font.isFont) === false ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		ExtrudeGeometry.call( this, shapes, parameters );

		this.type = 'TextGeometry';

	}

	TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 20;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// these are used to calculate buffer length
		var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
		var indexCount = thetaSegments * phiSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// some helper variables
		var index = 0, indexOffset = 0, segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		// values are generate from the inside of the ring to the outside

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, 0, 1 );

				// uv
				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index++;

			}

			// increase the radius for next row of vertices
			radius += radiusStep;

		}

		// generate indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				// indices
				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;

				// face two
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 */

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	 // points - to create a closed torus, one must use a set of points
	 //    like so: [ a, b, c, d, a ], see first is the same as last.
	 // segments - the number of circumference segments to create
	 // phiStart - the starting radian
	 // phiLength - the radian (0 to 2PI) range of the lathed section
	 //    2PI is a closed lathe, less than 2PI is a portion.

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]
		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );

		// these are used to calculate buffer length
		var vertexCount = ( segments + 1 ) * points.length;
		var indexCount = segments * points.length * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var index = 0, indexOffset = 0, base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex
				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// uv
				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				// indices
				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'uv', uvs );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices
			base = segments * points.length * 3;

			for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line
				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line
				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals
				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals
				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			} // next row

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2PI) range of the lathed section
	//    2PI is a closed lathe, less than 2PI is a portion.

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ShapeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( (geometry && geometry.isBufferGeometry) ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

		// used to calculate buffer length

		var nbCap = 0;

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) nbCap ++;
			if ( radiusBottom > 0 ) nbCap ++;

		}

		var vertexCount = calculateVertexCount();
		var indexCount = calculateIndexCount();

		// buffers

		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables

		var index = 0,
		    indexOffset = 0,
		    indexArray = [],
		    halfHeight = height / 2;

		// group variables
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// helper functions

		function calculateVertexCount() {

			var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

			if ( openEnded === false ) {

				count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

			}

			return count;

		}

		function calculateIndexCount() {

			var count = radialSegments * heightSegments * 2 * 3;

			if ( openEnded === false ) {

				count += radialSegments * nbCap * 3;

			}

			return count;

		}

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row
				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex
					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );

					// uv
					uvs.setXY( index, u, 1 - v );

					// save index of vertex in respective row
					indexRow.push( index );

					// increase index
					index ++;

				}

				// now save vertices of the row in our index array
				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices
					var i1 = indexArray[ y ][ x ];
					var i2 = indexArray[ y + 1 ][ x ];
					var i3 = indexArray[ y + 1 ][ x + 1 ];
					var i4 = indexArray[ y ][ x + 1 ];

					// face one
					indices.setX( indexOffset, i1 ); indexOffset ++;
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// face two
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i3 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// update counters
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex
				vertices.setXYZ( index, 0, halfHeight * sign, 0 );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = 0.5;
				uv.y = 0.5;

				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// save the index of the last center vertex
			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex
				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				} else {

					// face bottom
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				}

				// update counters
				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	/**
	 * @author: abelnation / http://github.com/abelnation
	 */

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

	/**
	 * @author hughes
	 */

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	}

	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;



	var Geometries = Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		SphereGeometry: SphereGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		CircleGeometry: CircleGeometry,
		BoxBufferGeometry: BoxBufferGeometry,
		BoxGeometry: BoxGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ShadowMaterial() {

		ShaderMaterial.call( this, {
			uniforms: UniformsUtils.merge( [
				UniformsLib[ "lights" ],
				{
					opacity: { value: 1.0 }
				}
			] ),
			vertexShader: ShaderChunk[ 'shadow_vert' ],
			fragmentShader: ShaderChunk[ 'shadow_frag' ]
		} );

		this.lights = true;
		this.transparent = true;

		Object.defineProperties( this, {
			opacity: {
				enumerable: true,
				get: function () {
					return this.uniforms.opacity.value;
				},
				set: function ( value ) {
					this.uniforms.opacity.value = value;
				}
			}
		} );

	}

	ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MultiMaterial( materials ) {

		this.uuid = _Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	}

	MultiMaterial.prototype = {

		constructor: MultiMaterial,

		isMultiMaterial: true,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;
		this.morphTargets = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.lights = false;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( Material.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MultiMaterial: MultiMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function XHRLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( XHRLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[1];
				var isBase64 = !!dataUriRegexResult[2];
				var data = dataUriRegexResult[3];

				data = window.decodeURIComponent(data);

				if( isBase64 ) {
					data = window.atob(data);
				}

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

						 	response = new ArrayBuffer( data.length );
							var view = new Uint8Array( response );
							for ( var i = 0; i < data.length; i ++ ) {

									view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ response ], { "type" : mimeType } );

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					}, 0);

				} catch ( error ) {

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onError ) onError( error );

						scope.manager.itemError( url );

					}, 0);

				}

			} else {

				var request = new XMLHttpRequest();
				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = event.target.response;

					Cache.add( url, response );

					if ( this.status === 200 ) {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else if ( this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else {

						if ( onError ) onError( event );

						scope.manager.itemError( url );

					}

				}, false );

				if ( onProgress !== undefined ) {

					request.addEventListener( 'progress', function ( event ) {

						onProgress( event );

					}, false );

				}

				request.addEventListener( 'error', function ( event ) {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				if ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	function CompressedTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	var DataTextureLoader = BinaryTextureLoader;
	function BinaryTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( BinaryTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( ImageLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
			image.onload = function () {

				image.onload = null;

				URL.revokeObjectURL( image.src );

				if ( onLoad ) onLoad( image );

				scope.manager.itemEnd( url );

			};
			image.onerror = onError;

			if ( url.indexOf( 'data:' ) === 0 ) {

				image.src = url;

			} else {

				var loader = new XHRLoader();
				loader.setPath( this.path );
				loader.setResponseType( 'blob' );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( blob ) {

					image.src = URL.createObjectURL( blob );

				}, onProgress, onError );

			}

			scope.manager.itemStart( url );

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( CubeTextureLoader.prototype, {

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( TextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setWithCredentials( this.withCredentials );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}



	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.matrix = new Matrix4();

	}

	Object.assign( LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		update: function ( light ) {

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || 500;

			var camera = this.camera;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * Math.PI;
			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / Math.PI;
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / ( 4 * Math.PI );
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow( light ) {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true,

	} );

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Interpolant.prototype = {

		constructor: Interpolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	}

	CubicInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	ZeroCurvatureEnding,
			endingEnd:		ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	var KeyframeTrackPrototype;

	KeyframeTrackPrototype = {

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) ++ from;
			while ( to !== -1 && times[ to ] > endTime ) -- to;

			++ to; // inclusive -> exclusive bound

			if( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.
						arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
									value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else keep = true;

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j )

							values[ writeOffset + j ] = values[ readOffset + j ];

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

					values[ writeOffset + j ] = values[ readOffset + j ];

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	function KeyframeTrackConstructor( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	}

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrackConstructor.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited


		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.apply( this, arguments );

	}

	KeyframeTrack.prototype = KeyframeTrackPrototype;
	KeyframeTrackPrototype.constructor = KeyframeTrack;

	// Static methods:

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				var times = [], values = [];

				AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return VectorKeyframeTrack;

				case "color":

					return ColorKeyframeTrack;

				case "quaternion":

					return QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return BooleanKeyframeTrack;

				case "string":

					return StringKeyframeTrack;

			}

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		this.optimize();

	}

	AnimationClip.prototype = {

		constructor: AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new AnimationClip( name, -1, tracks );

		},

		findByName: function( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};

	}

	Object.assign( MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;

			// for PointsMaterial

			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MultiMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new BufferGeometry();

			var index = json.data.index;

			var TYPED_ARRAYS = {
				'Int8Array': Int8Array,
				'Uint8Array': Uint8Array,
				'Uint8ClampedArray': Uint8ClampedArray,
				'Int16Array': Int16Array,
				'Uint16Array': Uint16Array,
				'Int32Array': Int32Array,
				'Uint32Array': Uint32Array,
				'Float32Array': Float32Array,
				'Float64Array': Float64Array
			};

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader() {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	}

	Loader.prototype = {

		constructor: Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function createMaterial( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new Color();
				if ( textureLoader === undefined ) textureLoader = new TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = _Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function JSONLoader( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.withCredentials = false;

	}

	Object.assign( JSONLoader.prototype, {

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

			var loader = new XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.texturePath = '';

	}

	Object.assign( ObjectLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new JSONLoader();
				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'IcosahedronGeometry':
						case 'OctahedronGeometry':
						case 'TetrahedronGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemError( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;

					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );

					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );

					}

					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

					if ( data.flipY !== undefined ) texture.flipY = data.flipY;

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new Matrix4();

			return function parseObject( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new Scene();

						if ( data.background !== undefined ) {

							if ( Number.isInteger( data.background ) ) {

								object.background = new Color( data.background );

							}

						}

						if ( data.fog !== undefined ) {

							if ( data.fog.type === 'Fog' ) {

								object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

							} else if ( data.fog.type === 'FogExp2' ) {

								object.fog = new FogExp2( data.fog.color, data.fog.density );

							}

						}

						break;

					case 'PerspectiveCamera':

						object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						if ( data.focus !== undefined ) object.focus = data.focus;
						if ( data.zoom !== undefined ) object.zoom = data.zoom;
						if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
						if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
						if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

						break;

					case 'OrthographicCamera':

						object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

						break;

					case 'HemisphereLight':

						object = new HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new SkinnedMesh( geometry, material );

						} else {

							object = new Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new LOD();

						break;

					case 'Line':

						object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'LineSegments':

						object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'PointCloud':
					case 'Points':

						object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new Group();

						break;

					default:

						object = new Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.shadow ) {

					if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
					if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
					if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
					if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

				}

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			};

		}()

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTangentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {}

	Curve.prototype = {

		constructor: Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		}

	};

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	/**************************************************************
	 *	Line
	 **************************************************************/

	function LineCurve( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t ) {

		if ( t === 1 ) {

			return this.v2.clone();

		}

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 40;

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
					: (curve && curve.isLineCurve) ? 1
					: (curve && curve.isSplineCurve) ? divisions * curve.points.length
					: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		/**************************************************************
		 *	Create Geometries Helpers
		 **************************************************************/

		/// Generate geometry from path points (for Line or Points objects)

		createPointsGeometry: function ( divisions ) {

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		// Generate geometry from equidistant sampling along the path

		createSpacedPointsGeometry: function ( divisions ) {

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function( t ) {

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return new Vector2( x, y );

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	function SplineCurve( points /* array of Vector2 */ ) {

		this.points = ( points === undefined ) ? [] : points;

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = CurveUtils.interpolate;

		return new Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = ShapeUtils.b3;

		return new Vector2(
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = CurveUtils.tangentCubicBezier;

		return new Vector2(
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	function QuadraticBezierCurve( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;


	QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = ShapeUtils.b2;

		return new Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;

		return new Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

		fromPoints: function ( vectors ) {

			this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

			for ( var i = 1, l = vectors.length; i < l; i ++ ) {

				this.lineTo( vectors[ i ].x, vectors[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape() {

		Path.apply( this, arguments );

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( PathPrototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// Get points of shape and holes (keypoints based on segments parameter)

		extractAllPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		extractPoints: function ( divisions ) {

			return this.extractAllPoints( divisions );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	function Path( points ) {

		CurvePath.call( this );
		this.currentPoint = new Vector2();

		if ( points ) {

			this.fromPoints( points );

		}

	}

	Path.prototype = PathPrototype;
	PathPrototype.constructor = Path;


	// minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	function ShapePath() {
		this.subPaths = [];
		this.currentPath = null;
	}

	ShapePath.prototype = {
		moveTo: function ( x, y ) {
			this.currentPath = new Path();
			this.subPaths.push(this.currentPath);
			this.currentPath.moveTo( x, y );
		},
		lineTo: function ( x, y ) {
			this.currentPath.lineTo( x, y );
		},
		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
		},
		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
		},
		splineThru: function ( pts ) {
			this.currentPath.splineThru( pts );
		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt  = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Font( data ) {

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var offset = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var ret = createPath( chars[ i ], scale, offset );
					offset += ret.offset;

					paths.push( ret.path );

				}

				return paths;

			}

			function createPath( c, scale, offset ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new ShapePath();

				var pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b2( t, cpx0, cpx1, cpx );
										b2( t, cpy0, cpy1, cpy );

									}

								}

								break;

							case 'b': // bezierCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;
								cpx2 = outline[ i ++ ] * scale + offset;
								cpy2 = outline[ i ++ ] * scale;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b3( t, cpx0, cpx1, cpx2, cpx );
										b3( t, cpy0, cpy1, cpy2, cpy );

									}

								}

								break;

						}

					}

				}

				return { offset: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( this.manager );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		}

	} );

	var context;

	function getAudioContext() {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	}

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				var context = getAudioContext();

				context.decodeAudioData( buffer, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	}

	Object.assign( StereoCamera.prototype, {

		update: ( function () {

			var instance, focus, fov, aspect, near, far, zoom;

			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();

			return function update( camera ) {

				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom;

				if ( needsUpdate ) {

					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CubeCamera( near, far, cubeResolution ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = getAudioContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.value = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.source.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.source.buffer;
			source.loop = this.source.loop;
			source.onended = this.source.onended;
			source.start( 0, this.startTime );
			source.playbackRate.value = this.playbackRate;

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = this.context.currentTime;
			this.isPlaying = false;

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.value = this.playbackRate;

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.source.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.loop = value;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},


		setVolume: function ( value ) {

			this.gain.gain.value = value;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				position.setFromMatrixPosition( this.matrixWorld );

				this.panner.setPosition( position.x, position.y, position.z );

			};

		} )()


	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	PropertyMixer.prototype = {

		constructor: PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	PropertyBinding.prototype = {

		constructor: PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	PropertyBinding.Composite.prototype = {

		constructor: PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( (root && root.isAnimationObjectGroup) ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//    .bone[Armature.DEF_cog].position
		//    scene:helium_balloon_model:helium_balloon_model.position
		// created and tested via https://regex101.com/#javascript

		var re = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/;
		var matches = re.exec( trackName );

		if ( ! matches ) {

			throw new Error( "cannot parse trackName at all: " + trackName );

		}

		var results = {
			// directoryName: matches[ 1 ], // (tschw) currently unused
			nodeName: matches[ 2 ], 	// allowed to be null, specified root node.
			objectName: matches[ 3 ],
			objectIndex: matches[ 4 ],
			propertyName: matches[ 5 ],
			propertyIndex: matches[ 6 ]	// allowed to be null, specifies that the whole property is set.
		};

		if ( results.propertyName === null || results.propertyName.length === 0 ) {

			throw new Error( "can not parse propertyName from trackName: " + trackName );

		}

		return results;

	};

	PropertyBinding.findNode = function( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	};

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup( var_args ) {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	}

	AnimationObjectGroup.prototype = {

		constructor: AnimationObjectGroup,

		isAnimationObjectGroup: true,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	ZeroCurvatureEnding,
				endingEnd:		ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	}

	AnimationAction.prototype = {

		constructor: AnimationAction,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === LoopOnce ) {

				if ( loopCount === -1 ) {
					// just started

					this.loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === LoopPingPong );

				if ( loopCount === -1 ) {
					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings(
								true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings(
								this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {
					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending < 0 ) {
						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : -1
						} );

					} else {
						// keep running

						if ( pending === 0 ) {
							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {
					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= ZeroSlopeEnding;
				settings.endingEnd		= ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	// Implementation details:

	Object.assign( AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< AnimationAction >	- used as prototypes
			// 		actionByRoot: AnimationAction			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;

	InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	InstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	};

	InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.uuid = _Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}


	InterleavedBufferAttribute.prototype = {

		constructor: InterleavedBufferAttribute,

		isInterleavedBufferAttribute: true,

		get count() {

			return this.data.count;

		},

		get array() {

			return this.data.array;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	InterleavedBuffer.prototype = {

		constructor: InterleavedBuffer,

		isInterleavedBuffer: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );
	InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;

	InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

		BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;

	InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	InstancedBufferAttribute.prototype.copy = function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {
					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;
				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) return;

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	//

	Raycaster.prototype = {

		constructor: Raycaster,

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( (camera && camera.isPerspectiveCamera) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

			} else if ( (camera && camera.isOrthographicCamera) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive ) {

			var intersects = [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive ) {

			var intersects = [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Clock.prototype = {

		constructor: Clock,

		start: function () {

			this.startTime = ( performance || Date ).now();

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = ( performance || Date ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Spline( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new Vector3(),
				tmpVec = new Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	}

	Spherical.prototype = {

		constructor: Spherical,

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function() {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		},

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function MorphBlendMesh( geometry, material ) {

		Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	}

	MorphBlendMesh.prototype = Object.create( Mesh.prototype );
	MorphBlendMesh.prototype.constructor = MorphBlendMesh;

	MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( (objGeometry && objGeometry.isGeometry) ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function SpotLightHelper( light ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0,   0,   0,   1,
			0, 0, 0,   1,   0,   1,
			0, 0, 0, - 1,   0,   1,
			0, 0, 0,   0,   1,   1,
			0, 0, 0,   0, - 1,   1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		var vector = new Vector3();
		var vector2 = new Vector3();

		return function update() {

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	function SkeletonHelper( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				geometry.vertices.push( new Vector3() );
				geometry.vertices.push( new Vector3() );
				geometry.colors.push( new Color( 0, 0, 1 ) );
				geometry.colors.push( new Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	}


	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( (object && object.isBone) ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function HemisphereLightHelper( light, sphereSize ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new Color(), new Color() ];

		var geometry = new SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );

		this.lightSphere = new Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var vector = new Vector3();

		return function update() {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		divisions = divisions || 1;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = ( size * 2 ) / divisions;
		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {

			vertices.push( - size, 0, k, size, 0, k );
			vertices.push( k, 0, - size, k, 0, size );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.create( LineSegments.prototype );
	GridHelper.prototype.constructor = GridHelper;

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function DirectionalLightHelper( light, size ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		if ( size === undefined ) size = 1;

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [
			- size,   size, 0,
			  size,   size, 0,
			  size, - size, 0,
			- size, - size, 0,
			- size,   size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.add( new Line( geometry, material ) );

		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.add( new Line( geometry, material ));

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		var lightPlane = this.children[ 0 ];
		var targetLine = this.children[ 1 ];

		lightPlane.geometry.dispose();
		lightPlane.material.dispose();
		targetLine.geometry.dispose();
		targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.lookAt( v3 );
			lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			targetLine.lookAt( v3 );
			targetLine.scale.z = v3.length();

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	function CameraHelper( camera ) {

		var geometry = new Geometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new Vector3() );
			geometry.colors.push( new Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new Vector3();
		var camera = new Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	function BoundingBoxHelper( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new Box3();

		Mesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );

	}

	BoundingBoxHelper.prototype = Object.create( Mesh.prototype );
	BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;

	BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.getSize( this.scale );

		this.box.getCenter( this.position );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BoxHelper( object, color ) {

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = ( function () {

		var box = new Box3();

		return function update( object ) {

			if ( (object && object.isBox3) ) {

				box.copy( object );

			} else {

				box.setFromObject( object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var lineGeometry = new BufferGeometry();
	lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

	var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
	coneGeometry.translate( 0, - 0.5, 0 );

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.position.copy( origin );

		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = ( function () {

		var axis = new Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxisHelper( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxisHelper.prototype = Object.create( LineSegments.prototype );
	AxisHelper.prototype.constructor = AxisHelper;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	var CatmullRomCurve3 = ( function() {

		var
			tmp = new Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];
				this.closed = false;

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - ( this.closed ? 0 : 1 ) ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( this.closed ) {

					intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

				} else if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3; // 4 points

				if ( this.closed || intPoint > 0 ) {

					p0 = points[ ( intPoint - 1 ) % l ];

				} else {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				}

				p1 = points[ intPoint % l ];
				p2 = points[ ( intPoint + 1 ) % l ];

				if ( this.closed || intPoint + 2 < l ) {

					p3 = points[ ( intPoint + 2 ) % l ];

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	var SplineCurve3 = Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points === undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = CurveUtils.interpolate;

			return new Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	var CubicBezierCurve3 = Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = ShapeUtils.b3;

			return new Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	var QuadraticBezierCurve3 = Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = ShapeUtils.b2;

			return new Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	var LineCurve3 = Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var vector = new Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4 ( a, b, c, d, normal, color, materialIndex ) {
		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );
	}

	var LineStrip = 0;

	var LinePieces = 1;

	function PointCloud ( geometry, material ) {
		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function ParticleSystem ( geometry, material ) {
		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function PointCloudMaterial ( parameters ) {
		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleBasicMaterial ( parameters ) {
		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleSystemMaterial ( parameters ) {
		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function Vertex ( x, y, z ) {
		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );
	}

	//

	function EdgesHelper( object, hex ) {
		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	function WireframeHelper( object, hex ) {
		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	//

	Object.assign( Box2.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Box3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Line3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		}
	} );

	Object.assign( Matrix3.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		}
	} );

	Object.assign( Matrix4.prototype, {
		extractPosition: function ( m ) {
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
		},
		setRotationFromQuaternion: function ( q ) {
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
			return vector.applyProjection( this );
		},
		multiplyVector4: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		},
		rotateAxis: function ( v ) {
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );
		},
		crossVector: function ( vector ) {
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		translate: function ( v ) {
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
		},
		rotateX: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
		},
		rotateY: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
		},
		rotateZ: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
		},
		rotateByAxis: function ( axis, angle ) {
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
		}
	} );

	Object.assign( Plane.prototype, {
		isIntersectionLine: function ( line ) {
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
		}
	} );

	Object.assign( Quaternion.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
		}
	} );

	Object.assign( Ray.prototype, {
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionPlane: function ( plane ) {
			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );

	Object.assign( Shape.prototype, {
		extrude: function ( options ) {
			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );
		},
		makeGeometry: function ( options ) {
			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );
		}
	} );

	Object.assign( Vector3.prototype, {
		setEulerFromRotationMatrix: function () {
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
		},
		setEulerFromQuaternion: function () {
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
		},
		getPositionFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );
		},
		getScaleFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );
		},
		getColumnFromMatrix: function ( index, matrix ) {
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );
		}
	} );

	//

	Object.assign( Object3D.prototype, {
		getChildByName: function ( name ) {
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
		},
		renderDepth: function ( value ) {
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
		},
		translate: function ( distance, axis ) {
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
		}
	} );

	Object.defineProperties( Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	Object.defineProperties( LOD.prototype, {
		objects: {
			get: function () {
				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;
			}
		}
	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	Object.assign( BufferGeometry.prototype, {
		addIndex: function ( index ) {
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
		},
		addDrawCall: function ( start, count, indexOffset ) {
			if ( indexOffset !== undefined ) {
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
		},
		clearDrawCalls: function () {
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
		},
		computeTangents: function () {
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
		},
		computeOffsets: function () {
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
		}
	} );

	Object.defineProperties( BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		}
	} );

	//

	Object.defineProperties( Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new Color();
			}
		}
	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	EventDispatcher.prototype = Object.assign( Object.create( {

		// Note: Extra base ensures these properties are not 'assign'ed.

		constructor: EventDispatcher,

		apply: function ( target ) {

			console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
					"just inherit or Object.assign the prototype to mix-in." );

			Object.assign( target, this );

		}

	} ), EventDispatcher.prototype );

	//

	Object.defineProperties( Uniform.prototype, {
		dynamic: {
			set: function ( value ) {
				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
			}
		},
		onUpdate: {
			value: function () {
				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;
			}
		}
	} );

	//

	Object.assign( WebGLRenderer.prototype, {
		supportsFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );
		},
		supportsHalfFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );
		},
		supportsStandardDerivatives: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );
		},
		supportsCompressedTextureS3TC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
		},
		supportsCompressedTexturePVRTC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
		},
		supportsBlendMinMax: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );
		},
		supportsVertexTextures: function () {
			return this.capabilities.vertexTextures;
		},
		supportsInstancedArrays: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );
		},
		enableScissorTest: function ( boolean ) {
			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );
		},
		initMaterial: function () {
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
		},
		addPrePlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
		},
		addPostPlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
		},
		updateShadowMap: function () {
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
		}
	} );

	Object.defineProperties( WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		}
	} );

	Object.defineProperties( WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				return this.renderReverseSided ? CullFaceFront : CullFaceBack;
			},
			set: function ( cullFace ) {
				var value = ( cullFace !== CullFaceBack );
				console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
				this.renderReverseSided = value;
			}
		}
	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	Object.assign( Audio.prototype, {
		load: function ( file ) {
			console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
			var scope = this;
			var audioLoader = new AudioLoader();
			audioLoader.load( file, function ( buffer ) {
				scope.setBuffer( buffer );
			} );
			return this;
		}
	} );

	Object.assign( AudioAnalyser.prototype, {
		getData: function ( file ) {
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
		}
	} );

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	var ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	function Projector () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	}

	//

	function CanvasRenderer () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	}

	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderer = WebGLRenderer;
	exports.ShaderLib = ShaderLib;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.FogExp2 = FogExp2;
	exports.Fog = Fog;
	exports.Scene = Scene;
	exports.LensFlare = LensFlare;
	exports.Sprite = Sprite;
	exports.LOD = LOD;
	exports.SkinnedMesh = SkinnedMesh;
	exports.Skeleton = Skeleton;
	exports.Bone = Bone;
	exports.Mesh = Mesh;
	exports.LineSegments = LineSegments;
	exports.Line = Line;
	exports.Points = Points;
	exports.Group = Group;
	exports.VideoTexture = VideoTexture;
	exports.DataTexture = DataTexture;
	exports.CompressedTexture = CompressedTexture;
	exports.CubeTexture = CubeTexture;
	exports.CanvasTexture = CanvasTexture;
	exports.DepthTexture = DepthTexture;
	exports.TextureIdCount = TextureIdCount;
	exports.Texture = Texture;
	exports.MaterialIdCount = MaterialIdCount;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.DataTextureLoader = DataTextureLoader;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.TextureLoader = TextureLoader;
	exports.ObjectLoader = ObjectLoader;
	exports.MaterialLoader = MaterialLoader;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.LoadingManager = LoadingManager;
	exports.JSONLoader = JSONLoader;
	exports.ImageLoader = ImageLoader;
	exports.FontLoader = FontLoader;
	exports.XHRLoader = XHRLoader;
	exports.Loader = Loader;
	exports.Cache = Cache;
	exports.AudioLoader = AudioLoader;
	exports.SpotLightShadow = SpotLightShadow;
	exports.SpotLight = SpotLight;
	exports.PointLight = PointLight;
	exports.HemisphereLight = HemisphereLight;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DirectionalLight = DirectionalLight;
	exports.AmbientLight = AmbientLight;
	exports.LightShadow = LightShadow;
	exports.Light = Light;
	exports.StereoCamera = StereoCamera;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.OrthographicCamera = OrthographicCamera;
	exports.CubeCamera = CubeCamera;
	exports.Camera = Camera;
	exports.AudioListener = AudioListener;
	exports.PositionalAudio = PositionalAudio;
	exports.getAudioContext = getAudioContext;
	exports.AudioAnalyser = AudioAnalyser;
	exports.Audio = Audio;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.PropertyMixer = PropertyMixer;
	exports.PropertyBinding = PropertyBinding;
	exports.KeyframeTrack = KeyframeTrack;
	exports.AnimationUtils = AnimationUtils;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationClip = AnimationClip;
	exports.Uniform = Uniform;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.BufferGeometry = BufferGeometry;
	exports.GeometryIdCount = GeometryIdCount;
	exports.Geometry = Geometry;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Int16Attribute = Int16Attribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Int8Attribute = Int8Attribute;
	exports.BufferAttribute = BufferAttribute;
	exports.Face3 = Face3;
	exports.Object3DIdCount = Object3DIdCount;
	exports.Object3D = Object3D;
	exports.Raycaster = Raycaster;
	exports.Layers = Layers;
	exports.EventDispatcher = EventDispatcher;
	exports.Clock = Clock;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.LinearInterpolant = LinearInterpolant;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.CubicInterpolant = CubicInterpolant;
	exports.Interpolant = Interpolant;
	exports.Triangle = Triangle;
	exports.Spline = Spline;
	exports.Math = _Math;
	exports.Spherical = Spherical;
	exports.Plane = Plane;
	exports.Frustum = Frustum;
	exports.Sphere = Sphere;
	exports.Ray = Ray;
	exports.Matrix4 = Matrix4;
	exports.Matrix3 = Matrix3;
	exports.Box3 = Box3;
	exports.Box2 = Box2;
	exports.Line3 = Line3;
	exports.Euler = Euler;
	exports.Vector4 = Vector4;
	exports.Vector3 = Vector3;
	exports.Vector2 = Vector2;
	exports.Quaternion = Quaternion;
	exports.ColorKeywords = ColorKeywords;
	exports.Color = Color;
	exports.MorphBlendMesh = MorphBlendMesh;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SkeletonHelper = SkeletonHelper;
	exports.PointLightHelper = PointLightHelper;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.GridHelper = GridHelper;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.CameraHelper = CameraHelper;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.BoxHelper = BoxHelper;
	exports.ArrowHelper = ArrowHelper;
	exports.AxisHelper = AxisHelper;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.SplineCurve3 = SplineCurve3;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.LineCurve3 = LineCurve3;
	exports.ArcCurve = ArcCurve;
	exports.EllipseCurve = EllipseCurve;
	exports.SplineCurve = SplineCurve;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.LineCurve = LineCurve;
	exports.Shape = Shape;
	exports.ShapePath = ShapePath;
	exports.Path = Path;
	exports.Font = Font;
	exports.CurvePath = CurvePath;
	exports.Curve = Curve;
	exports.ShapeUtils = ShapeUtils;
	exports.SceneUtils = SceneUtils;
	exports.CurveUtils = CurveUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.RingGeometry = RingGeometry;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.EdgesGeometry = EdgesGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.ShadowMaterial = ShadowMaterial;
	exports.SpriteMaterial = SpriteMaterial;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.ShaderMaterial = ShaderMaterial;
	exports.PointsMaterial = PointsMaterial;
	exports.MultiMaterial = MultiMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.Material = Material;
	exports.REVISION = REVISION;
	exports.MOUSE = MOUSE;
	exports.CullFaceNone = CullFaceNone;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.BasicShadowMap = BasicShadowMap;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.FrontSide = FrontSide;
	exports.BackSide = BackSide;
	exports.DoubleSide = DoubleSide;
	exports.FlatShading = FlatShading;
	exports.SmoothShading = SmoothShading;
	exports.NoColors = NoColors;
	exports.FaceColors = FaceColors;
	exports.VertexColors = VertexColors;
	exports.NoBlending = NoBlending;
	exports.NormalBlending = NormalBlending;
	exports.AdditiveBlending = AdditiveBlending;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.MultiplyBlending = MultiplyBlending;
	exports.CustomBlending = CustomBlending;
	exports.BlendingMode = BlendingMode;
	exports.AddEquation = AddEquation;
	exports.SubtractEquation = SubtractEquation;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.MinEquation = MinEquation;
	exports.MaxEquation = MaxEquation;
	exports.ZeroFactor = ZeroFactor;
	exports.OneFactor = OneFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.NeverDepth = NeverDepth;
	exports.AlwaysDepth = AlwaysDepth;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.EqualDepth = EqualDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterDepth = GreaterDepth;
	exports.NotEqualDepth = NotEqualDepth;
	exports.MultiplyOperation = MultiplyOperation;
	exports.MixOperation = MixOperation;
	exports.AddOperation = AddOperation;
	exports.NoToneMapping = NoToneMapping;
	exports.LinearToneMapping = LinearToneMapping;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.CineonToneMapping = CineonToneMapping;
	exports.UVMapping = UVMapping;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.TextureMapping = TextureMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.TextureWrapping = TextureWrapping;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.LinearFilter = LinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.TextureFilter = TextureFilter;
	exports.UnsignedByteType = UnsignedByteType;
	exports.ByteType = ByteType;
	exports.ShortType = ShortType;
	exports.UnsignedShortType = UnsignedShortType;
	exports.IntType = IntType;
	exports.UnsignedIntType = UnsignedIntType;
	exports.FloatType = FloatType;
	exports.HalfFloatType = HalfFloatType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.AlphaFormat = AlphaFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBAFormat = RGBAFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.RGBEFormat = RGBEFormat;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.LoopOnce = LoopOnce;
	exports.LoopRepeat = LoopRepeat;
	exports.LoopPingPong = LoopPingPong;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.LinearEncoding = LinearEncoding;
	exports.sRGBEncoding = sRGBEncoding;
	exports.GammaEncoding = GammaEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBDEncoding = RGBDEncoding;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.CubeGeometry = BoxGeometry;
	exports.Face4 = Face4;
	exports.LineStrip = LineStrip;
	exports.LinePieces = LinePieces;
	exports.MeshFaceMaterial = MultiMaterial;
	exports.PointCloud = PointCloud;
	exports.Particle = Sprite;
	exports.ParticleSystem = ParticleSystem;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Vertex = Vertex;
	exports.EdgesHelper = EdgesHelper;
	exports.WireframeHelper = WireframeHelper;
	exports.GeometryUtils = GeometryUtils;
	exports.ImageUtils = ImageUtils;
	exports.Projector = Projector;
	exports.CanvasRenderer = CanvasRenderer;

	Object.defineProperty(exports, '__esModule', { value: true });

	Object.defineProperty( exports, 'AudioContext', {
		get: function () {
			return exports.getAudioContext();
		}
	});

})));

},{}],53:[function(require,module,exports){
var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn, options) {
    var wkey;
    var cacheKeys = Object.keys(cache);

    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        var exp = cache[key].exports;
        // Using babel as a transpiler to use esmodule, the export will always
        // be an object with the default export as a property of it. To ensure
        // the existing api and babel esmodule exports are both supported we
        // check for both
        if (exp === fn || exp && exp.default === fn) {
            wkey = key;
            break;
        }
    }

    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = [
            Function(['require','module','exports'], '(' + fn + ')(self)'),
            wcache
        ];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);

    var scache = {}; scache[wkey] = wkey;
    sources[skey] = [
        Function(['require'], (
            // try to call default if defined to also support babel esmodule
            // exports
            'var f = require(' + stringify(wkey) + ');' +
            '(f.default ? f.default : f)(self);'
        )),
        scache
    ];

    var workerSources = {};
    resolveSources(skey);

    function resolveSources(key) {
        workerSources[key] = true;

        for (var depPath in sources[key][1]) {
            var depKey = sources[key][1][depPath];
            if (!workerSources[depKey]) {
                resolveSources(depKey);
            }
        }
    }

    var src = '(' + bundleFn + ')({'
        + Object.keys(workerSources).map(function (key) {
            return stringify(key) + ':['
                + sources[key][0]
                + ',' + stringify(sources[key][1]) + ']'
            ;
        }).join(',')
        + '},{},[' + stringify(skey) + '])'
    ;

    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

    var blob = new Blob([src], { type: 'text/javascript' });
    if (options && options.bare) { return blob; }
    var workerUrl = URL.createObjectURL(blob);
    var worker = new Worker(workerUrl);
    worker.objectURL = workerUrl;
    return worker;
};

},{}]},{},[11]);
